#!/bin/sh

# dorubbuild: do the actual build for rub for the given variant
#
#  Copyright (C) 2006
#  ASTRON (Netherlands Foundation for Research in Astronomy)
#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Id$


# This script is used by rubbuild to do the build for a single variant.

# Get all arguments.
srcdir=$1
shift
builddir=$1
shift
variant=$1
shift
skipbuilt=$1
shift
kopt=$1
shift
buildmake=$1
shift
conf=$1
shift
clean=$1
shift
bldtest=$1
shift
check=$1
shift
checktool=$1
shift
install=$1
shift
distcheck=$1
shift
rpm=$1
shift
pkgs=$*

kstr=
[ $kopt = 1 ] && kstr='-k'

# Generate output files.
if [ "$builddir" = "." ]; then
  resname=$variant
  buildvarpr=$variant
else
  resname=$builddir/$variant
  buildvarpr="$builddir $variant"
fi
resname=`uname -n`.$resname
resname=`echo $resname | sed -e 's#[@/]#_#g'`
resfile=build.$resname.result
logfile=build.$resname.log
if [ $skipbuilt = 0 ]; then
  # Start fresh, so delete results from previous builds.
  \rm -f $logfile $resfile
fi
touch $logfile
touch $resfile
echo "" >> $logfile
echo "***** Building packages in $builddir $variant" >> $logfile

# See what kind of build we have to do (in source tree or separate tree).
# If $builddir is ., it is a variant name in the source tree,
#   meaning a build is done in $pkg/build/$variant.
# Otherwise it is a separate tree where a build is done in
#   $builddir/$variant/$pkg.

# Check if in correct directory.
cd $srcdir >> $logfile 2>&1 || exit 1
srcdir=`pwd`
curwdl=`basename $srcdir`
if [ "$curwdl" != "LOFAR" ]; then
  echo "Error in rubbuild: srcdir must be the LOFAR directory in the code tree" | tee $logfile
  exit 1
fi

# Determine the build commands.
confcmd=
premake=
mainmake=date
postmake=
if [ $clean = 1 ]; then
  premake="make $kstr clean && "
fi
if [ $buildmake = 1 ]; then
  mainmake="date && make $kstr $jobsopt "
  if [ $bldtest = 1 ]; then
    postmake="&& (if [ -d test ]; then cd test && make test; fi;)"
  fi
  if [ $check = 1 ]; then
    if [ "$checktool" = "" ]; then
      postmake="$postmake && make $kstr check "
    else
      postmake="$postmake && make $kstr CHECKTOOL='$checktool' check "
    fi
  fi
  if [ $install = 1 ]; then
    postmake="$postmake && make $kstr install "
  fi
  if [ $distcheck = 1 ]; then
    postmake="$postmake && make $kstr distcheck "
  fi
  if [ $rpm = 1 ]; then
    postmake="$postmake && make $kstr rpm "
  fi
fi

# Create build/variant directory if needed.
if [ "$builddir" != "." ]; then
  (cd $builddir && mkdir -p build/$variant) >> $logfile 2>&1
  if [ $? != 0 ]; then
    exit 1
  fi
fi

# Build the packages.
status=0
for pkg in $pkgs
do
  echo "" >> $logfile
  if [ $skipbuilt = 1 ]; then
    fgrep "$pkg " $resfile >& /dev/null
    if [ $? = 0 ]; then
      echo "  skipping package $pkg; already built in a previous run" | tee $logfile
      continue
    fi
  fi
  echo " *** Building package $pkg ***" | tee $logfile

  if [ "$builddir" = "." ]; then
    initcmd="cd $pkg && mkdir -p build/$variant && cd build/$variant"
  else
    initcmd="cd $builddir/build/$variant && mkdir -p $pkg && cd $pkg"
  fi
  if [ $conf = 1 ]; then
    confcmd="$srcdir/$pkg/lofarconf $confopt && "
  fi
  if [ $clean = 2 ]; then
    premake="make distclean && $srcdir/$pkg/lofarconf $confopt && "
  fi
  echo "($initcmd && $confcmd $premake $mainmake $postmake;)" >> $logfile
  if [ $buildmake = 1 ]; then
    eval "($initcmd && $confcmd $premake $mainmake $postmake && echo $pkg '# built at' `date` >> $srcdir/$resfile;)" >> $logfile 2>&1
    stat=$?
  else
    eval "($initcmd && $confcmd $premake $mainmake $postmake;)" >> $logfile 2>&1
    stat=$?
  fi
  # Stop if error and -k is not given.
  if [ "$stat" != 0 ]; then
    status=$stat
    [ $kopt = 0 ] && break
  fi
done

if [ "$status" != 0 ]; then
  echo " Error during build on `uname -n` (see $logfile for details)" | tee $srcdir/build.log
  exit $status
fi
echo "Variant $buildvarpr successfully built on `uname -n` (see $logfile for details)" | tee $srcdir/build.log
exit 0
