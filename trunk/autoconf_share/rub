#!/bin/sh

# rub: do recursive update/checkout and build of packages
#
#  Copyright (C) 2004
#  ASTRON (Netherlands Foundation for Research in Astronomy)
#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Id$


# This script is useful to checkout all code needed for a package.
# It checks out the package itself, looks in its configure.in file which
# other packages it needs, checks those out, etc..
# If the package already exists in the code tree, the package is updated,
# otherwise the package is checked out. The cvs log output is written
# to the file rub.log. The script generates a warning if it finds
# that there are cvs update conflicts.
# Furthermore it generates a lofarconf.in.private file which makes it possible
# to bootstrap, configure and build all those packages (in the correct order).
#
# The command has to be run from the LOFAR directory in the user's tree.


# Find the path used to start the script.
pgmpath=`dirname $0`
pgmpath=`cd $pgmpath > /dev/null 2>&1  &&  pwd`

# Keep arguments.
# Put quotes around an argument if it contains special characters.
# Escape a " in the argument.
args=
for arg in "$@"
do
  argx=`echo "$arg" | sed -e "s/[a-zA-Z0-9_/-]//g"`
  if [ "$argx" = "" ]; then
    args="$args $arg"
  else
    argxx=`echo "$argx" | sed -e "s/'//g"`
    if [ "$argxx" = "$argx" ]; then
      args="$args '$arg'"
    else
      arg=`echo "$arg" | sed -e 's/"/\\\\"/g'`
      args="$args \"$arg\""
    fi
  fi
done

# Set default options.
cvsdefault=cvs
cvscomm=$cvsdefault
updq=
cvstag=
jobsopt=
variants=
buildmake=1
conf=0
confopt=
clean=0
distclean=0
check=0
checktool=
install=2
distcheck=0
rpm=0
update=1
skipbuilt=0
system=0
recur=1

verstype=
pkgfound=0
help=0
if [ $# = 0 ]; then
  help=1
fi

# Handle possible options.
while [ $# != 0 ]
do
  # Special cvs command?
  if [ "$1" = "-h"  -o  "$1" = "-help"  -o  "$1" = "--help" ]; then
    help=1
    break
  elif [ "$1" = "-cvs" ]; then
    shift
    cvscomm="$1"
    shift
  elif [ "$1" = "-nocvs" ]; then
    shift
    cvscomm=$cvsdefault
  elif [ "$1" = -update ]; then
    shift
    update=1
  elif [ "$1" = -noupdate ]; then
    shift
    update=0
  # cvs update qualifiers?
  elif [ "$1" = -updq ]; then
    shift
    updq="$1"
    shift
  elif [ "$1" = -noupdq ]; then
    shift
    updq=
  # cvs tag?
  elif [ "$1" = -r ]; then
    shift
    cvstag="$1"
    shift
  elif [ "$1" = -nor ]; then
    shift
    cvstag=
  # parallel make option?
  elif [ "$1" = -j ]; then
    shift
    jobsopt="-j$1"
    shift
  elif [ "$1" = -noj ]; then
    shift
    jobsopt=
  # Which variants to build after the checkout/update?
  elif [ "$1" = -build ]; then
    shift
    case "$1" in
    -*)
      echo "-build argument must be a variant; option '$1' was given"
      exit 1
      ;;
    esac
    variants="$1"
    if [ $install = 2 ]; then
      install=1;
    fi
    shift
  elif [ "$1" = -nobuild ]; then
    shift
    variants=
    conf=0
    clean=0
    check=0
    if [ $install = 1 ]; then
      install=0
    fi
  elif [ "$1" = -make ]; then
    shift
    buildmake=1
  elif [ "$1" = -nomake ]; then
    shift
    buildmake=0
  elif [ "$1" = -conf ]; then
    shift
    conf=1
  elif [ "$1" = -noconf ]; then
    shift
    conf=0
  elif [ "$1" = -confopt ]; then
    shift
    confopt="$1"
    shift
  elif [ "$1" = -noconfopt ]; then
    shift
    confopt=""
  elif [ "$1" = -skipbuilt ]; then
    shift
    skipbuilt=1
    update=0
  elif [ "$1" = -noskipbuilt ]; then
    shift
    skipbuilt=0
  elif [ "$1" = -clean ]; then
    shift
    clean=1
  elif [ "$1" = -noclean ]; then
    shift
    clean=0
  elif [ "$1" = -distclean ]; then
    shift
    distclean=1
  elif [ "$1" = -nodistclean ]; then
    shift
    distclean=0
  elif [ "$1" = -check ]; then
    shift
    check=1
  elif [ "$1" = -nocheck ]; then
    shift
    check=0
  elif [ "$1" = -checktool ]; then
    shift
    checktool="$1"
    shift
  elif [ "$1" = -nocheck ]; then
    shift
    checktool=
  elif [ "$1" = -install ]; then
    shift
    install=1
  elif [ "$1" = -noinstall ]; then
    shift
    install=0
  elif [ "$1" = -distcheck ]; then
    shift
    distcheck=1
  elif [ "$1" = -nodistcheck ]; then
    shift
    distcheck=0
  elif [ "$1" = -rpm ]; then
    shift
    rpm=1
  elif [ "$1" = -norpm ]; then
    shift
    rpm=0
  elif [ "$1" = -system ]; then
    shift
    system=1
  elif [ "$1" = -nosystem ]; then
    shift
    system=0
  elif test "$1" = -recur  -o  "$1" = -recursive; then
    shift
    recur=1
  elif test "$1" = -norecur  -o  "$1" = -norecursive; then
    shift
    recur=0
  elif test "$1" = "-release=max"; then
    shift
    verstype=m
  elif test "$1" = "-release=exact"; then
    shift
    verstype=e
  elif test "$1" = "-release=latest"; then
    shift
    verstype=l
  elif test "$1" = "-release=main"; then
    shift
    verstype=t
  elif test "$1" = "-norelease"; then
    shift
    verstype=
  else
    case "$1" in
    -release=*)
      echo "$1 is invalid; valid options are max,exact,latest,main"
      exit 1
      ;;
    -r*)
      cvstag=`echo $1 | sed -e 's/-r//'`
      shift
      ;;
    -j*)
      jobsopt='-j'`echo $1 | sed -e 's/-j//'`
      shift
      ;;
    -*)
      echo "$1 is an unknown rub option"
      exit 1
      ;;
    *)
      # A package name has been found, so stop parsing options.
      pkgfound=1
      break
      ;;
    esac
  fi
done
if [ $distclean = 1 ]; then
  clean=2
  conf=1
fi

if [ $help = 1 ]; then
  echo ''
  echo 'rub stands for recursive update and build.'
  echo 'It check outs/updates LOFAR packages and the packages they depend on.'
  echo 'It uses the .spec.in or configure.in files to find out if specific'
  echo 'package versions are to be used.'
  echo 'If -build is given, the packages are configured, cleaned, built,'
  echo ' checked, installed, distchecked, and/or rpm-ed for the given variant(s).'
  echo ''
  echo 'Run as:'
  echo ' rub [-cvs cvs-command] [-update] [-updq string] [-r<cvstag>]'
  echo '     [-recur[sive]] [-release=option] [-build variants]]'
  echo '     [-system] [-conf] [-confopt string] [-j<option>] [-skipbuilt]'
  echo '     [-[dist]clean] [-make] [-check] [-install] [-distcheck] [-rpm]'
  echo '     package1 [-v<version>] [...]'
  echo ''
  echo '  -cvs cvs-command  is an optional cvs command making it possible to'
  echo '                    specify (for example) the root.'
  echo '                    It defaults to cvs.'
  echo '  -update           checkout/update the source tree (is default).'
  echo '                    -noupdate prevents it.'
  echo '  -updq string      is a string containing qualifiers for the cvs update'
  echo '                    command (default is empty)'
  echo '  -r<cvstag>        cvs tag of the given package(s) to be updated/checked out'
  echo '                    If given, the tag will be used for all packages.'
  echo '  -recur[sive]      Do everything recursively, thus also for all'
  echo '                    packages used by the given packages.'
  echo '                    default is -recur.'
  echo '  -release=option   defines which CVS release to check out depending on'
  echo '                    the version given in the LOFAR_INTERNAL macros in'
  echo '                    configure.in or the Requires line in PKG.spec.in.'
  echo '                    exact   Use the versions as given and check if they'
  echo '                            match if a package is used from multiple packages.'
  echo '                    max     Use the maximum package version given if'
  echo '                            used from multiple packages.'
  echo '                    latest  Use latest package release version in CVS.'
  echo '                    main    Always use the MAIN for all packages.'
  echo '                    Default = -release=max.'
  echo '  -build variants   gives the variants to do (e.g. gnu3_debug)'
  echo '                    Separate multiple variants by whitespace and'
  echo '                    enclose in quotes.'
  echo '                    -build implies -make.'
  echo '  -system           Do system build for given variants (using buildsys).'
  echo '                    Options like -make, -conf, etc. are ignored.'
  echo '                    Default is -nosystem.'
  echo '  -conf             do bootstrap and configure before build.'
  echo '                    Default is -noconf.'
  echo '  -confopt string   configure options.'
  echo '  -j<option>        Option for a parallel make. Default is -noj.'
  echo '  -skipbuilt        Skip packages built in the previous build run to'
  echo '                    speed up the build process (especially with -conf).'
  echo '                    It can be used after an unsuccesful built to start'
  echo '                    the build at the package that failed.'
  echo '                    It can also be used when building another package'
  echo '                    that uses a lot of previously built packages'
  echo '                    Successfully built packages are logged in file'
  echo '                    build.result.<variant>.'
  echo '                    -skipbuilt sets -noupdate, which is undone'
  echo '                    if -update is given thereafter.'
  echo '                    Default is -noskipbuilt'.
  echo '                    Note that it is not checked if source files have'
  echo '                    changed, so it should be used with care.'
  echo '  -clean            indicates that all build/<variant> directories'
  echo '                    will be cleaned in order to start a clean build.'
  echo '                    Default is -noclean.'
  echo '  -distclean        indicates that all build/<variant> directories'
  echo '                    will be fully cleaned in order to start a clean build.'
  echo '                    The difference with -clean is that the appropriate'
  echo '                    makefiles and .la files will also be removed.'
  echo '                    It forces -conf.'
  echo '                    Default is -nodistclean.'
  echo '  -make             do a make (compile/link).'
  echo '                    -nomake is more useful; it skips doing make and'
  echo '                    implies -noclean and -noinstall.'
  echo '                    Default is -make.'
  echo '  -check            indicates that a make check should be done.'
  echo '                    Default is -nocheck.'
  echo '  -checktool string Optional checking tool to use with make check.'
  echo '                    E.g. "valgrind --tool=memcheck --num-callers=50 \'
  echo '                                   --leak-check=yes --track-fds=yes"'
  echo '  -install          indicates that a make install should be done.'
  echo '                    Default is -install if -build is given.'
  echo '                    Otherwise -noinstall.'
  echo '  -distcheck        indicates that a make distcheck should be done.'
  echo '                    Default is -nodistcheck.'
  echo '  -rpm              indicates that a make rpm should be done.'
  echo '                    Default is -norpm.'
  echo '  package1          is the name of the package to update/checkout and'
  echo '                    optionally build.'
  echo '                    Multiple packages can be given separated by whitespace.'
  echo '                    Each package can be followed by -v<version>, where'
  echo '                    <version> gives the version of the package to be'
  echo '                    checked out/updated.'
  echo '                    -v is ignored if -r is given.'
  echo ''
  echo 'All options can be undone by preceeding them with no (e.g. -nobuild).'
  echo 'If an option is given multiple times, only the last value takes effect.'
  echo ''
  echo 'For example:'
  echo ' rub -cvs "cvs -d :pserver:user@cvs.astron.nl:/cvs/cvsroot" CEP/CPA/PSS3/BBS'
  echo ''
  exit 0
fi

# Check the consistency of the options.
if [ $pkgfound != 1 ]; then
  echo "Error: no package given"
  echo "  Use 'rub -h' to get a description"
  exit 1
fi
if test $install = 1  -o  $clean != 0  -o  $check = 1  -o  $conf = 1  -o  $distcheck = 1  -o  $rpm = 1; then
  if [ "$variants" = "" ]; then
    echo "Error: -build variant is needed with -conf,-(dist)clean,-check,-install,-distcheck,-rpm"
    exit 1
  fi
fi
if [ "$verstype" == "" ]; then
  verstype=m
  if [ "$cvstag" != "" ]; then
    verstype="tag"
  fi
elif [ "$cvstag" != "" ]; then
  "Error: no -release option can be given if a specific -r tag is used"
  exit 1
fi

# Get and check the package names and versions.
pkg=
vers=
PKGS=
while [ $# != 0 ]
do
  case "$1" in
  -v*)
    if [ "$cvstag" != "" ]; then
      echo "Error: -v cannot be used if a specific -r tag is used"
      exit 1
    fi
    # -v gives the package version.
    if [ "$pkg" = "" ]; then
      echo "Error: option $1 is not given right after a package name"
      exit 1
    fi
    vers=`echo $1 | sed -e 's/-v//'`
    shift
    if [ "$vers" = "" ]; then
      # -v and version are separated by whitespace.
      vers=$1
      shift
    fi
    case "$vers" in
    -*)
      echo "Error: package version cannot start with -"
      exit 1
      ;;
    *)
      if [ "$vers" = "" ]; then
        echo "Error: no package version given after -v"
        exit 1
      fi
      ;;
    esac
    # Substitute . by _ on the version.
    vers=`echo $vers | sed -e 's/\./_/g'`
    PKGS="$PKGS $pkg#-v$vers"
    pkg=
    ;;
  -*)
    echo "Error: only the -v option can be given after a package name"
    exit 1
    ;;
  *)
    # A package name is given.
    if [ "$pkg" != "" ]; then
      PKGS="$PKGS $pkg#-v"
    fi
    if [ "$1" = "" ]; then
      echo "Error: empty package name given"
      exit 1
    fi
    pkg=$1
    shift
    ;;
  esac
done
# Add the possibly last package.
if [ "$pkg" != "" ]; then
  PKGS="$PKGS $pkg#-v"
fi

# Check if in correct directory.
curwd=`pwd`
curwdl=`basename $curwd`
if [ "$curwdl" != "LOFAR" ]; then
  echo "Error: rub should be run from the LOFAR directory in the code tree"
  exit 1
fi
\rm -f allpkg.tmp rub.log
touch allpkg.tmp rub.log
echo "$0$args" > rub.log
echo "" >> rub.log

# First update bootstrap and autoconf_share.
if [ $update != 0 ]; then
  if [ -f bootstrap ]; then
    echo "Update of LOFAR/bootstrap"
    $cvscomm update bootstrap >> rub.log 2>&1
  else
    echo "Checkout of LOFAR/bootstrap"
    (cd .. && $cvscomm checkout LOFAR/bootstrap) >> rub.log 2>&1
  fi
  $pgmpath/rub1 autoconf_share 2 h "" "" "$update" "$recur" "$cvscomm" "$updq" || exit 1
fi
\rm -f allpkg.tmp
touch allpkg.tmp

# Update the packages and optionally all packages they need.
for PKG in $PKGS
do
  pkg=`echo $PKG | sed -e 's%#-v.*%%'`
  vers=`echo $PKG | sed -e 's%.*#-v%%'`
  $pgmpath/rub1 $pkg 1 "$verstype" "$vers" "$cvstag" "$update" "$recur" "$cvscomm" "$updq" || exit 1
done

# Convert allpkg.tmp to lofarconf.in.private
# Do it by reversing the order and skipping duplicates.
if [ -f lofarconf.in.private ]; then
  mv lofarconf.in.private lofarconf.in.private.bak
fi
\rm -f lofarconf.in.private
touch lofarconf.in.private
PKGS=
while [ 1 = 1 ]
do
  pkgvers=`tail -1 allpkg.tmp`
  pkg=`echo $pkgvers | awk '{ print $1 }'`
  vers=`echo $pkgvers | awk '{ print $2 }'`
  if [ "$pkg" = "" ]; then
    break;
  fi
  grep -v "^$pkg " allpkg.tmp > allpkg.tmp1
  mv allpkg.tmp1 allpkg.tmp
  echo "$pkg $vers" >> lofarconf.in.private
  PKGS="$PKGS $pkg$vers"
done
\rm -f allpkg.tmp

# Now check out/update the full package.
if [ $update != 0 ]; then
  for PKG in $PKGS
  do
    pkg=`echo $PKG | sed -e 's%#-v.*%%'`
    vers=`echo $PKG | sed -e 's%.*#-v%%'`
    rtag=
    tagstr=
    if [ "$vers" != "" ]; then
      rtag=-r$vers
      tagstr=", cvstag $vers"
    fi
    echo "Full update of package $pkg$tagstr"
    echo "$cvscomm update -dAP $rtag $updq $pkg" >> rub.log 2>&1
    $cvscomm update -dAP $rtag $updq $pkg >> rub.log 2>&1
    status=$?
    if [ $status != 0 ]; then
      echo "Exiting; update/checkout returned with an error status ..."
    fi
  done
  echo "See rub.log for the cvs update/checkout details"
  egrep "^C " rub.log > greplog.tmp 2>&1
  if [ $? = 0 ]; then
    echo "Error: there seem to be UPDATE CONFLICTS"
    cat greplog.tmp
    \rm -f greplog.tmp
    exit 1
  else
    echo "There are no update conflicts"
  fi
  \rm -f greplog.tmp
fi

echo "Created lofarconf.in.private containing all these packages"
pkgs=`sed -e s/#.*$//g lofarconf.in.private`

if [ "$variants" = "" ]; then
  echo "No build to be done"
  exit 0
fi

# System build is a bit different.
if [ "$system" != 0 ]; then
  $pgmpath/buildsys -confopt "$confopt" -checktool "$checktool" "$variants" "$pkgs"
  exit 0
fi

# Determine the build commands.
echo "Variants to be built: $variants"
echo "See build.log for build details"
bootcmd=
confcmd=
premake=
mainmake=date
postmake=
# Make sure bootstrap is executable; Eclipse does not set x bit.
# Remove the cache, because sometimes it keeps old data.
if [ $conf = 1 ]; then
  bootcmd="\\rm -rf autom4te.cache; chmod +x bootstrap && ./bootstrap && "
  confcmd="../../lofarconf $confopt && "
  echo "Packages will be bootstrapped and configured"
fi
if [ $clean = 1 ]; then
  premake="make clean && "
  echo "Packages will be cleaned"
elif [ $clean = 2 ]; then
  premake="make distclean && ../../lofarconf $confopt && "
  echo "Packages will be distcleaned"
fi
if [ $buildmake = 1 ]; then
  mainmake="date && make $jobsopt "
  echo "Packages will be built"
  if [ $check = 1 ]; then
    if [ "$checktool" = "" ]; then
      postmake="&& make check "
      echo "Packages will be checked"
    else
      postmake="&& make CHECKTOOL='$checktool' check "
      echo "Packages will be checked with '$checktool'"
    fi
  fi
  if [ $install = 1 ]; then
    postmake="$postmake && make install "
    echo "Packages will be installed"
  fi
  if [ $distcheck = 1 ]; then
    postmake="$postmake && make distcheck "
    echo "Packages will be distcheck-ed"
  fi
  if [ $rpm = 1 ]; then
    postmake="$postmake && make rpm "
    echo "Packages will be rpm-ed"
  fi
fi

# Build all variants.
if [ $skipbuilt = 0 ]; then
  # Start fresh, so delete results from previous builds.
  \rm -f build.log build.result.*
  touch build.log
fi
for variant in $variants
do
  echo "Building packages in build/$variant ..."
  echo "" >> build.log
  echo "***** Building packages in build/$variant ..." >> build.log
  touch build.result.$variant
  for pkg in $pkgs
  do
    if [ $skipbuilt = 1 ]; then
      fgrep "$pkg " build.result.$variant >& /dev/null
      if [ $? = 0 ]; then
        echo "  skipping package $pkg; already built in a previous run"
        continue
      fi
    fi
    echo "  building package $pkg ..."
    echo "" >> build.log
    echo " *** Building package $pkg ***" >> build.log
    echo "(cd $pkg && mkdir -p build/$variant && $bootcmd cd build/$variant && $confcmd $premake $mainmake $postmake;)" >> build.log
    if [ $buildmake = 1 ]; then
      eval "(cd $pkg && mkdir -p build/$variant && $bootcmd cd build/$variant && $confcmd $premake $mainmake $postmake && echo $pkg '# built at' `date` >> $curwd/build.result.$variant;)" >> build.log 2>&1
      status=$?
    else
      eval "(cd $pkg && mkdir -p build/$variant && $bootcmd cd build/$variant && $confcmd $premake $mainmake $postmake;)" >> build.log 2>&1
      status=$?
    fi
    if [ "$status" != 0 ]; then
      echo " Error during build (see build.log for details)"
      exit $status
    fi
  done
done
