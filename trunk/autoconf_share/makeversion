#!/bin/sh

# makeversion: create the version.cc file of a package
#
#  Copyright (C) 2007
#  ASTRON (Netherlands Foundation for Research in Astronomy)
#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Id: bootstrap 10573 2007-10-17 10:20:29Z diepen $

# It creates files <package>Version.h and .cc containing a class to
# return the version (revision) of the package.
# The .cc fle includes a file which gets created by lofar_init.m4 and filled
# by lofar_internal.m4 which contains the packages it is dependent on.
# It also creates an file version<package>.cc which is an executable program
# to print the version.
# Finally the Makefile.am files are changed to build the code.

# Get the package name (also in lower and uppercase).
pkg=`pwd`
pkg=`basename $pkg`
lpkg=`echo $pkg | tr A-Z a-z`
upkg=`echo $pkg | tr a-z A-Z`

# No version info is needed if the package has no library in src/Makefile.am.
# Also not needed (in fact, not possible) for Tools.
if [ ! -e src/Makefile.am  -o  "$pkg" = Tools ]; then
  exit 0
fi

# Get the include directory (which is usually include/package, but can be src).
incdir="include/$pkg"
if [ ! -d $incdir ]; then
  incdir=src
fi

# Get the library name (if present).
libnm=`grep 'lib_LTLIBRARIES.*=' src/Makefile.am | sed -e 's/.*=.*\(lib.*\)\.la.*/\1/'`
if [ "$libnm" = "" ]; then
  libnm=lib${lpkg}
fi

# Get svn revision (if possible).
svn info 2>&1 > version.svn.tmp
hassvn=$?
if [ $hassvn = 0 ]; then
  vers=`grep 'Revision: ' version.svn.tmp | sed -e 's/Revision: *//'`
  # Check if there are locally modified files (excluding Makefile.am)
  svn status | egrep '^M ' | fgrep -v Makefile.am 2>&1 > version.svn.tmp
  if [ $? ]; then
    nrlin=`wc -l version.svn.tmp | sed -e 's/^ *//' | sed -e 's/ .*//'`
    if [ "$nrlin" != 0 ]; then
      vers="${vers}_With_${nrlin}_ChangedFiles"
    fi
  fi
else
  vers=UnknownVersion
fi

# Create temporary version.h/cc
cat > version.h.tmp <<EOF
//# Get revision info; generated by autoconf_share/makeversion

#ifndef LOFAR_${upkg}_${upkg}VERSION_H
#define LOFAR_${upkg}_${upkg}VERSION_H

#include <string>
#include <vector>

// Class to get the version (revision) of the package and the packages it uses.
namespace LOFAR {
  class ${pkg}Version
  {
  public:
    // Get the version (revision) number of the package.
    static std::string getVersion();
    // Append the vector with the version of this package and used packages.
    static void fillVersion (std::vector<std::string>& v);
  };
}

#endif
EOF

cat > version.cc.tmp <<EOF
//# Get revision info; generated by autoconf_share/makeversion

#include <${pkg}/${pkg}Version.h>
#include <Common/Version.h>
#include "fillversionInc.h"
namespace LOFAR {
  std::string ${pkg}Version::getVersion()
    { return "$vers"; }
}

//# fillversion.h is generated in build area by lofar_internal.m4
//# It contains function fillVersion
#include "fillversionFunc.h"
EOF

cat > version.mcc.tmp <<EOF
//# Print revision info; generated by autoconf_share/makeversion

#include <${pkg}/${pkg}Version.h>
#include <Common/Version.h>
#include<iostream>

using namespace LOFAR;

int main()
{
  Version::show<${pkg}Version> ("${pkg}", std::cout);
  return 0;
}
EOF

# Do not copy if existing version is the same,
# so code is not rebuilt needlessly.
if [ ! -e $incdir/${pkg}Version.h ]; then
  echo "makeversion created $incdir/${pkg}Version.h"
  cp version.h.tmp $incdir/${pkg}Version.h
elif [ $hassvn = 0 ]; then
  diff version.h.tmp $incdir/${pkg}Version.h 2>&1 > /dev/null
  if [ $? != 0 ]; then
    echo "makeversion replaced $incdir/${pkg}Version.h"
    cp version.h.tmp $incdir/${pkg}Version.h
  fi
fi

if [ ! -e src/${pkg}Version.cc ]; then
  echo "makeversion created src/${pkg}Version.cc"
  cp version.cc.tmp src/${pkg}Version.cc
elif [ $hassvn = 0 ]; then
  diff version.cc.tmp src/${pkg}Version.cc 2>&1 > /dev/null
  if [ $? != 0 ]; then
    echo "makeversion replaced src/${pkg}Version.cc"
    cp version.cc.tmp src/${pkg}Version.cc
  fi
fi

if [ ! -e src/version${lpkg}.cc ]; then
  echo "makeversion created src/version${lpkg}.cc"
  cp version.mcc.tmp src/version${lpkg}.cc
elif [ $hassvn = 0 ]; then
  diff version.mcc.tmp src/version${lpkg}.cc 2>&1 > /dev/null
  if [ $? != 0 ]; then
    echo "makeversion replaced src/version${lpkg}.cc"
    cp version.mcc.tmp src/version${lpkg}.cc
  fi
fi

# Add lines to Makefile.am files as needed.
fgrep ${pkg}Version.h $incdir/Makefile.am 2>&1 > /dev/null
if [ $? != 0 ]; then
  fgrep pkginclude_HEADERS $incdir/Makefile.am 2>&1 > /dev/null
  if [ $? = 0 ]; then
    sed -e "s/\(pkginclude_HEADERS.*\)=/\1= ${pkg}Version.h /" $incdir/Makefile.am > version.mf.tmp
  else
    cat > version.mf.tmp <<EOF
pkginclude_HEADERS = ${pkg}Version.h

EOF
    cat $incdir/Makefile.am >> version.mf.tmp
  fi
  mv version.mf.tmp $incdir/Makefile.am
  echo "makeversion added ${pkg}Version.h to $incdir/Makefile.am"
fi

fgrep ${pkg}Version.cc src/Makefile.am 2>&1 > /dev/null
if [ $? != 0 ]; then
  fgrep lib_LTLIBRARIES src/Makefile.am 2>&1 > /dev/null
  if [ $? = 0 ]; then
    sed -e "s/\(${libnm}_la_SOURCES.*\)=/\1= ${pkg}Version.cc /" src/Makefile.am > version.mf.tmp
  else
    cat > version.mf.tmp <<EOF
lib_LTLIBRARIES = ${libnm}.la
${libnm}_la_SOURCES = ${pkg}Version.cc

EOF
    cat src/Makefile.am >> version.mf.tmp
  fi
  mv version.mf.tmp src/Makefile.am
  echo "makeversion added ${pkg}Version.cc to src/Makefile.am"
fi

fgrep "version${lpkg}.cc" src/Makefile.am 2>&1  > /dev/null
if [ $? != 0 ]; then
  fgrep "bin_PROGRAMS" src/Makefile.am 2>&1 > /dev/null
  if [ $? != 0 ]; then
# To insert newlines, the expression has to be enclosed in single quotes.
# However, that means that the env.var. are not replaced.
# So do that in a second expression.
    sed -e 's%\(include *\$(top_srcdir)/Makefile.common\)%bin_PROGRAMS = version${lpkg}\
\
version${lpkg}_SOURCES      = version${lpkg}.cc\
version${lpkg}_LDADD        = ${libnm}.la\
version${lpkg}_DEPENDENCIES = ${libnm}.la \$(LOFAR_DEPEND)\
\
\1%' src/Makefile.am | sed -e "s%\${lpkg}%${lpkg}%g" -e "s%\${libnm}%${libnm}%g" > version.mf.tmp
  else
    sed -e "s%\(bin_PROGRAMS.*\)=%\1= version${lpkg}%" src/Makefile.am | \
    sed -e 's%\(include *\$(top_srcdir)/Makefile.common\)%version${lpkg}_SOURCES      = version${lpkg}.cc\
version${lpkg}_LDADD        = ${libnm}.la\
version${lpkg}_DEPENDENCIES = ${libnm}.la \$(LOFAR_DEPEND)\
\
\1%' | sed -e "s%\${lpkg}%${lpkg}%g" -e "s%\${libnm}%${libnm}%g" > version.mf.tmp
  fi
  mv version.mf.tmp src/Makefile.am
  echo "makeversion added version${lpkg}.cc to src/Makefile.am"
fi

\rm -f version.*.tmp
