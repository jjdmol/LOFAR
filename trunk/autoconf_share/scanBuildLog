#! /usr/bin/env python
#
# Script to read all the logfiles from a given LOFAR system build
#
# Usage:
#        ./scanBuildLog.py [base logname]
# Args:
#       base logname:  The base name for the logfiles.
#
#       for now we assume that builds are being logged in different files
#       per Variant. The week/year number would be the basename.
#       so a build would produce lognames like:
#                                               week441-dbg.log
#                                               week441-opt.log
#                                               week441-mpich.log
#                                               week441-iccdbg.log
#                                               week441-docxxx.log
#
#      and the command to produce the html pages would be:
#      ./scanBuildLog.py week441
#
# The resulting html pages will be copied to the lofar apache server so
# they can be accessed by others.
#
# 8-10-2004   Arthur Coolen
#

#
# Import all packages we need
#
import sys
import os
import fnmatch
import re

def remoteFileMove():
  # move the html Files that reside in the "thisWeek" directory
  # on the server and have to do with this machines build to the
  # "lastWeek" directory
  cmd="mv /usr/local/httpd/htdocs/BuildResults/thisWeek/*" + machineName() + \
       "* /usr/local/httpd/htdocs/BuildResults/lastWeek/"
  return os.system("ssh -1 lofar@lofar0.nfra.nl " + cmd)

def copyServerSideScript():
  #
  # copy the Serverside script (createNewIndex) to the lofar server
  # in the BuildResults directory.
  return os.system("scp -oProtocol=1 -B LOFAR/autoconf_share/createNewIndex lofar@lofar0.nfra.nl:/usr/local/httpd/htdocs/BuildResults")

def runServerSideScript():
  #
  # run the serverSideScript to generate the new index files
  #
  return os.system('ssh -1 lofar@lofar0.nfra.nl "cd /usr/local/httpd/htdocs/BuildResults;createNewIndex"')

def copyFiles2Server(copyDir):
  #
  # function to copy the generated html pages to the server
  # The Protocol=1 flag will be passed to ssh on lofar0 to
  # enable Protocol 1 authorisation. This is needed at the moment
  # because lofar0 is still an older machine that has no ssh2 installed
  #
  return os.system("scp -oProtocol=1 -B *.html lofar@lofar0.nfra.nl:"+copyDir)
  
def find(pattern, startdir=os.curdir):
  #
  #Function to walk directory structures and find pattern matches.
  #
  # args:
  #   - pattern           filepattern to look for
  #   - startdir          directory to start search from
  #
  matches=[]
  os.path.walk(startdir, findvisitor, (matches, pattern))
  matches.sort()
  return matches

def findvisitor((matches, pattern), thisdir, nameshere):
  #
  #Function called by find to search for patterns in directories
  #
  # args:
  #   - matches           array containing found matches
  #   - pattern           pattern to search for
  #   - thisdir           present directory
  #   - nameshere         all files in this directory
  #
  for name in nameshere:
    if fnmatch.fnmatch(name, pattern):
      fullpath = os.path.join(thisdir, name)
      matches.append(fullpath)


def machineName():
  #
  # Return the name from the machine we are running on.
  #
  return os.uname()[1]

def openHTMLPage(file,title,withHeader):
  #
  #Function to make the uniform pageheader voor CM.
  #
  # args:
  #   - file              file to print to
  #   - title             title for the page
  #   - withHeader        Will the header be printed on top of the page
  #
  file.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">\n')
  file.write("<html>\n")
  file.write("<head>\n")
  file.write("<title>"+title+"</title>\n")
  file.write("<body>\n")
  if withHeader:
    file.write("<center>\n")
    file.write("<h1>"+title+"</h1>\n")
    file.write("</center>\n")
    

def closeHTMLPage(file):
  #
  # Closes the html page
  #
  # args:
  #  - file               file to write the html stuff to

  file.write("</body>\n")
  file.write("</html>\n")
  file.close()

def findFailedTests(variant,package,testResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT testprograms
  # failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - testResultsArray   array that contains progname,variant,package pairs
  #
 
  for row in testResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def findFailedBuilds(variant,package,buildResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT compiling and
  # / or linking failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - buildResultsArray  array that contains progname,variant,package pairs
  #
 
  for row in buildResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def extendPackageArray(packageArray,allBuildablePackages):
  #
  # Find if a PACKAGE has more Packages under him that can be build also
  # if so, extend the packageArray with those packages
  #
  newPackageArray=[]
  for pck in packageArray:
    for line in allBuildablePackages:
      if line.find(pck) > -1:
        newPackageArray.append(line)
  return newPackageArray

#
# read commandline
#
if len(sys.argv) > 1:
  print sys.argv[1]
else:
  print "Usage: "+sys.argv[0]+" [FILENAME]"
  sys.exit(1)

#
# print machine
#
print "This build took place on: " + machineName() + "\n\n"


#
# make an array that contains the VARIANTS PACKAGES
# for each log file looked for.
#
variantPackageArray=[]
testResultsArray=[]
buildResultsArray=[]
allBuildablePackages=[]

packageObj = re.compile('(PACKAGES *= *".*?")|(PACKAGES *= *[^ ]*)',re.IGNORECASE)
variantObj = re.compile('(VARIANTS *= *".*?")|(VARIANTS *= *[^ ]*)',re.IGNORECASE)



#
# find configure.in in Lofar tree
# each directory that contains it can be build in the LOFAR builds
# So could potentially be in the PACKAGES line used for the build
#
pattern='configure.in'
startdir='../LOFAR'

for name in find(pattern, startdir):
  #
  # first drop the filename
  #
  head, tail = os.path.split(name)
  package=str.replace(head,startdir+'/','')
  allBuildablePackages.append(package)

for file in find(sys.argv[1]+'*.log',os.curdir):

  #
  # keep last found build start
  #
  keepLastFoundBuildArray=[]

  try:
    readFile=open(file, 'r')
  except IOError, message:
    sys.exit( "Error opening file: %s" % message )
    
  aLine=readFile.readline()
  print "File: "+file

  while aLine != "":
    #
    #search for PACKAGES keyword
    #
    if str.find(aLine,"PACKAGES")>-1:
      #
      # If PACKAGES found then lift out the different PACKAGES
      #
      matchPackageObj = packageObj.search(aLine)
      
      if matchPackageObj:
        start,end=matchPackageObj.span()
        pckArray = re.split(' *',re.sub('(PACKAGES *= *)|(packages *= *)'
                         ,'',re.sub('"','',aLine[start:end],2)))


      #
      # because a PACKAGE in the PACAKAGES line can also say that
      # ALL the Subdirectories UNDER this PACKAGE can be build we must
      # extend this array with those packages before we can continue
      #
      pckArray=extendPackageArray(pckArray,allBuildablePackages)


      #
      # search for VARIANTS in same line
      #
      matchVariantObj = variantObj.search(aLine)
      if matchVariantObj:
        start,end=matchVariantObj.span()
        for variant in re.split(' *',re.sub('(VARIANTS *= *)|(variants *= *)'
                                ,'',re.sub('"','',aLine[start:end],2))):
          variantPackageArray.append([variant,pckArray])
    #
    # Find CONFIGURING start
    #
    elif str.find(aLine,":::::: CONFIGURING VARIANT")>-1:
      keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
    #
    # Find BUILDING start
    #
    elif str.find(aLine,":::::: BUILDING VARIANT")>-1:
      keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
    #
    # Find Failed test
    #
    elif str.find(aLine,'FAIL:')>-1:
      failedProg=re.sub('FAIL:','',re.sub('\n','',aLine))
      testResultsArray.append([failedProg,keepLastFoundBuildArray[3],
                               keepLastFoundBuildArray[6]])


    #
    # Find Configure errors
    #
    elif str.find(aLine,'configure: error: ') > -1:
      aFile=str.split(aLine,' ')
      aPack=aFile[4]+" not configured"
      buildResultsArray.append([aPack,keepLastFoundBuildArray[3],
                                keepLastFoundBuildArray[6]])

    #
    # Find Compile && Link errors
    # Search for strings like:
    #      make[5]: *** [PO_DH_PL.lo] Error 1
    #
    elif str.find(aLine,' *** ') > -1:
      if str.find(aLine,' Error ') > -1:
        aFile=str.split(str.replace(str.replace(aLine,'[',''),']',''))[2]
        aFile=re.sub('check-TESTS','',
              re.sub('check-am','',
              re.sub('check-recursive','',
              re.sub('all','',
              re.sub('all-recursive','',aFile)))))
        if aFile:
          buildResultsArray.append([aFile,keepLastFoundBuildArray[3],
                                    keepLastFoundBuildArray[6]])
      
    aLine=readFile.readline()
  readFile.close()


#
# delete 'old' html files
#
for fileName in find('*_Failed_'+machineName()+'.html'):
  os.remove(fileName)

#
# Open html pages for all packages/Variants that have
# failed something during the build
#
usedFiles=[]
for row in testResultsArray:
  rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
  fileName=str.replace(rawName,'/','_')
  if os.path.isfile(fileName):
    try:
      file=open(fileName,'a')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )

  else:
    try:
      file=open(fileName,'w')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )

    openHTMLPage(file,"Failed builds on "+machineName(),"yes")
    file.write("<center><h3>Package: "+row[2]+
               '&nbsp &nbsp &nbsp &nbsp &nbsp '+
               "Variant: "+row[1]+"</h3></center>\n")
    file.write('<ul>\n')
    usedFiles.append(fileName)
  file.write('<li>'+row[0]+'</li>\n')
  file.close()

for row in buildResultsArray:
  rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
  fileName=str.replace(rawName,'/','_')
  if os.path.isfile(fileName):
    try:
      file=open(fileName,'a')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )
  else:
    try:
      file=open(fileName,'w')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )
    openHTMLPage(file,"Failed builds on "+machineName(),"yes")
    file.write("<center><h3>Package: "+row[2]+
               '&nbsp &nbsp &nbsp &nbsp &nbsp '+
               "Variant: "+row[1]+"</h3></center>\n")
    file.write('<ul>\n')
    usedFiles.append(fileName)
  file.write('<li>'+row[0]+'</li>\n')
  file.close()

#
# loop over all opened files and close everything
#
for fileName in usedFiles:
  
  try:
    file=open(fileName,'a')
  except IOError, message:
    sys.exit( "Error opening file: %s" % message )

  file.write('</ul>\n')
  closeHTMLPage(file)
  file.close()


#
# open main HTML file for writing
#
writeFile=open("BuildPage_"+machineName()+".html",'w')

#
# Open html page
#
openHTMLPage(writeFile,"BuildReport on "+machineName(),"yes")


#
# Start the table
#
writeFile.write("<table border cellspacing=2 cellpadding=5>\n")

#
# add all different variants to the collumns
writeFile.write("<tr>\n<th> </th>\n")
for entry in variantPackageArray:
  writeFile.write("<th>"+entry[0]+"</th>\n")
writeFile.write("</tr>\n")



for package in allBuildablePackages:
  writeFile.write("<tr>\n<th>\n"+package+"</th>\n")

  #
  # Look if this Package was also build in one of the variants
  #
  for entry in variantPackageArray:
    print "package:"+package
    found=0
    for pck in entry[1]:
      if package == pck:
        found=1
    if found:
      print "done"
      if (findFailedTests(entry[0],package,testResultsArray) or
          findFailedBuilds(entry[0],package,buildResultsArray)):
        rawName=entry[0]+'_'+package+'_Failed_'+machineName()+'.html'
        linkName=str.replace(rawName,'/','_')
        writeFile.write('<td bgcolor="RED">'
                        '<a href="'+linkName+'">')
        writeFile.write('<font color="red">')
        for i in entry[0][1:len(entry[0])]:
          writeFile.write('x')
          
        writeFile.write('</font></a></td>\n')
      else:
        writeFile.write('<td bgcolor="GREEN"> &nbsp</td>\n')
    else:
      print "done"
      writeFile.write('<td bgcolor="GRAY"> &nbsp</td>\n')    
  writeFile.write("</tr>")
writeFile.write("</table>\n")

#
# close html page
#
closeHTMLPage(writeFile)


#
# Copy the "old" files from this machine in thisWeek to lastWeek
#
if remoteFileMove() > 0:
  print "Move new to old on server not done because of errors"
else:
  print "Move new to old on server done"

#
# Copy createNewIndex.py to the server
#
if copyServerSideScript() > 0:
  print "Move script to server not done because of errors"
else:
  print "Move script to server done"

#
# Copy the new generated html files to the Server
#
if copyFiles2Server("/usr/local/httpd/htdocs/BuildResults/thisWeek") > 0:
  print "Copy html files not done because of errors"
else:
  print "Copy html files to server done"


#
# run server side script to generate new index files there
#
if runServerSideScript() > 0:
  print "Run script on server failed"
else:
  print "Run script on server done"


