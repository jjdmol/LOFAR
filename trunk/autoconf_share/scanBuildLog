#! /usr/bin/env python
#
# Script to read all the logfiles from a given LOFAR system build
#
# Usage:
#        ./scanBuildLog -d [lofarBasDir] -f [base logname]
# Args:
#       base logname:  The base name for the logfiles.
#
#       for now we assume that builds are being logged in different files
#       per Variant. The week/year number would be the basename.
#       so a build would produce lognames like:
#                                               week441-dbg.log
#                                               week441-opt.log
#                                               week441-mpich.log
#                                               week441-iccdbg.log
#                                               week441-docxxx.log
#
#      and the command to produce the html pages would be:
#      ./scanBuildLog -d LOFAR -f week441
#
# The resulting html pages will be copied to the lofar apache server so
# they can be accessed by others.
#
# 8-10-2004   Arthur Coolen
#

#
# Import all packages we need
#
import sys
import os
import fnmatch
import re
import getopt
from datetime import date

def remoteFileMove(lofarServer,serverDir):
  # move the html Files that reside in the "thisWeek" directory
  # on the server and have to do with this machines build to the
  # "lastWeek" directory
  cmd="mv "+serverDir+"/BuildResults/thisWeek/*" + machineName() + \
       "* "+serverDir+"/BuildResults/lastWeek/"
  return os.system("ssh -1 "+lofarServer+"  " + cmd)

def copyServerSideScript(lofarServer,serverDir,lofarDir):
  #
  # copy the Serverside script (createNewIndex) to the lofar server
  # in the BuildResults directory.
  return os.system("scp -oProtocol=1 "+lofarDir+"/autoconf_share/createNewIndex "+lofarServer+":"+serverDir+"/BuildResults")

def runServerSideScript(lofarServer,serverDir,server):
  #
  # run the serverSideScript to generate the new index files
  #
  print 'ssh -1 '+lofarServer+' "cd '+serverDir+'/BuildResults;./createNewIndex -d '+serverDir+' -s '+server+'"'
  return os.system('ssh -1 '+lofarServer+' "cd '+serverDir+'/BuildResults;./createNewIndex -d '+serverDir+' -s '+server+'"')

def copyFiles2Server(copyDir,lofarServer):
  #
  # function to copy the generated html pages to the server
  # The Protocol=1 flag will be passed to ssh on lofar0 to
  # enable Protocol 1 authorisation. This is needed at the moment
  # because lofar0 is still an older machine that has no ssh2 installed
  #
  return os.system("scp -oProtocol=1 *.html "+lofarServer+":"+copyDir)
  
def find(pattern, startdir=os.curdir):
  #
  #Function to walk directory structures and find pattern matches.
  #
  # args:
  #   - pattern           filepattern to look for
  #   - startdir          directory to start search from
  #
  matches=[]
  os.path.walk(startdir, findvisitor, (matches, pattern))
  matches.sort()
  return matches

def findvisitor((matches, pattern), thisdir, nameshere):
  #
  #Function called by find to search for patterns in directories
  #
  # args:
  #   - matches           array containing found matches
  #   - pattern           pattern to search for
  #   - thisdir           present directory
  #   - nameshere         all files in this directory
  #
  for name in nameshere:
    if fnmatch.fnmatch(name, pattern):
      fullpath = os.path.join(thisdir, name)
      matches.append(fullpath)


def machineName():
  #
  # Return the name from the machine we are running on.
  #
  return os.uname()[1]

def openHTMLPage(file,title,withHeader):
  #
  #Function to make the uniform pageheader voor CM.
  #
  # args:
  #   - file              file to print to
  #   - title             title for the page
  #   - withHeader        Will the header be printed on top of the page
  #
  file.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">\n')
  file.write("<html>\n")
  file.write("<head>\n")
  file.write("<title>"+title+"</title>\n")
  # css stuff
  file.write("<style type="text/css">\n")
  file.write("  td {\n")
  file.write("      text-align:center;\n")
  file.write("    } \n")
  file.write("    th, td {\n")
  file.write("    vertical-align:baseline;\n")
  file.write("    white-space:nowrap;\n")
  file.write("    padding:2px\n")
  file.write("  }\n")
  file.write("  table {\n")
  file.write("    margin:0em;\n")
  file.write("  }\n")
  file.write("  .tableBoxOuter {\n")
  file.write("    width:100%;\n")
  file.write("    height:29em;\n")
  file.write("  }\n")
  # javascript to generate headers
  file.write("<script type="text/javascript">\n")
  file.write("/* Copyright Richard Cornford 2004 */\n")
  file.write("var finalizeMe = (function(){\n")
  file.write("  var global = this,base,safe = false,svType = (global.addEventListener && 2)||(global.attachEvent && 3)|| 0;\n")
  file.write("  function addFnc(next, f){function t(ev){if(next)next(ev);f(ev);};t.addItem = function(d){if(f != d.getFunc()){if(next){next.addItem(d);}else{next = d;}}return this;};t.remove = function(d){if(f == d){f = null;return next;}else if(next){next = next.remove(d);}return this;};t.getFunc = function(){return f;};t.finalize = function(){if(next)next = next.finalize();return (f = null);};return t;};\n")
  file.write("  function addFunction(f){if(base){base = base.addItem(addFnc(null, f));}else{base = addFnc(null, f);}};\n")
  file.write("  function ulQue(f){addFunction(f);if(!safe){switch(svType){case 2:global.addEventListener("unload", base, false);safe = true;break;case 3:global.attachEvent("onunload", base);safe = true;break;default:if(global.onunload != base){if(global.onunload)addFunction(global.onunload);global.onunload = base;}break;}}};\n")
  file.write("  ulQue.remove = function(f){if(base)base.remove(f);};\n")
  file.write("  function finalize(){if(base){base.finalize();switch(svType){case 3:global.detachEvent("onunload", base);break;case 2:global.removeEventListener("unload", base, false);break;default:global.onunload = null;break;}base = null;}safe = false;};\n")
  file.write("  ulQue(finalize);return ulQue;\n")
  file.write("  })();\n")
  file.write("\n")
  file.write("\n")
  file.write("  var InitializeMe = (function(){\n")
  file.write("  var global = this,base = null,safe = false;\n")
  file.write("  var listenerType = (global.addEventListener && 2)||(global.attachEvent && 3)|| 0;\n")
  file.write("  function getStackFunc(next, funcRef, arg1,arg2,arg3,arg4){function l(ev){funcRef((ev?ev:global.event), arg1,arg2,arg3,arg4);if(next)next = next(ev);return (funcRef = null);};l.addItem = function(d){if(next){next.addItem(d);}else{next = d;}};return l;};\n")
  file.write("  return (function(funcRef, arg1,arg2,arg3,arg4){if(base){base.addItem(getStackFunc(null, funcRef, arg1,arg2,arg3,arg4));}else{base = getStackFunc(null, funcRef, arg1,arg2,arg3,arg4);}if(!safe){switch(listenerType){case 2:global.addEventListener("load", base, false);safe = true;break;case 3:global.attachEvent("onload", base);safe = true;break;default:if(global.onload != base){if(global.onload){base.addItem(getStackFunc(null, global.onload));}global.onload = base;}break;}}});\n")
  file.write("  })();\n")
  file.write("var queryStrings = (function(out){\n")
  file.write("  if(typeof location != 'undefined'){\n")
  file.write("    var temp = location.search||location.href||'';\n")
  file.write("    var nvp, ofSet;\n")
  file.write("    if((ofSet = temp.indexOf('?')) > -1){\n")
  file.write("      temp = temp.split("#")[0];\n")
  file.write("      temp = temp.substring((ofSet+1), temp.length);\n")
  file.write("      var workAr = temp.split('&');\n")
  file.write("      for(var c = workAr.length;c--;){\n")
  file.write("        nvp = workAr[c].split('=');\n")
  file.write("        if(nvp.length > 1){out[nvp[0]] = nvp[1];}\n")
  file.write("      }\n")
  file.write("    }\n")
  file.write("   }\n")
  file.write("   return out;\n")
  file.write("})({});\n")

  file.write("var TimedQue = (function(){\n")
  file.write("  var base, timer;\n")
  file.write("  var interval = 60;\n")
  file.write("  var newFncs = null;\n")
  file.write("  function addFnc(next, f){function t(){next = next&&next();if(f()){return t;}else{f = null;return next;}}t.addItem = function(d){if(next){next.addItem(d);}else{next = d;}return this;};t.finalize = function(){return ((next)&&(next = next.finalize())||(f = null));};return t;}\n")
  file.write("  function tmQue(fc){if(newFncs){newFncs = newFncs.addItem(addFnc(null, fc));}else{newFncs = addFnc(null, fc);}if(!timer){timer = setTimeout(tmQue.act, interval);}}\n")
  file.write("  tmQue.act = function(){var fn = newFncs, strt = new Date().getTime();if(fn){newFncs = null;if(base){base.addItem(fn);}else{base = fn;}}base = base&&base();if(base||newFncs){var t = interval - (new Date().getTime() - strt);timer = setTimeout(tmQue.act, ((t > 0)?t:1));}else{timer = null;}};\n")
  file.write("  tmQue.act.toString = function(){return 'TimedQue.act()';};\n")
  file.write("  tmQue.finalize = function(){timer = timer&&clearTimeout(timer);base = base&&base.finalize();newFncs = null;};\n")
  file.write("  return tmQue;\n")
  file.write("})();\n")

 file.write("var getElementWithId = (function(){if(document.getElementById){return (function(id){return document.getElementById(id);});}else if(document.all){return (function(id){return document.all[id];});}return (function(id){return null;});})();\n")

  file.write("function getSimpleExtPxIn(el){\n")
  file.write("  var temp, temp2, tick = 0, getBorders = retFalse, doCompStyle = retFalse,defaultView,objList = [];\n")
  file.write("  function retFalse(){return false;}\n")
  file.write("  retFalse.elTest = retFalse;\n")
  file.write("  retFalse.iY = retFalse.iX = retFalse.y = retFalse.x = retFalse.w = retFalse.h = retFalse.bb = retFalse.bt = retFalse.bl = retFalset[objList.length] = p;}\n")
  file.write("  if((typeof el.offsetParent != 'undefined')&&(typeof el.offsetTop == 'number')&&(typeof el.offsetWidth == 'number')){if((typeof el.clirderLeft','borderRight','borderTop'],value:'0px none #FFFFFF'},\n")
  file.write("  {  keys:['borderWidth','borderLeftWidth','borderRightWidth','borderBottomWidth','borderTopWidth'],value:'0pRelinerDivStyle = midRelinerDiv =\n")
  file.write("     midAbsinerDivStyle =  tableDim = vHeaderAbsStyle = vHeaderRelStyle ])&&\n")
  file.write("     global.setTimeout&&\n")
  file.write("     global.document&&\n")
  file.write("     document.createElement\n")
  file.write("     ){\n")
  file.write("     finalizeMe((finalise = getNewFILCFncStac(function(){\n")
  file.write("     finalise = tableList = null;\n")
  file.write("})));\n")
  file.write("return main;\n")
  file.write("}else{\n")
  file.write("return retFalse;\n")
  file.write("}\n")
  file.write("})();\n")
  file.write("</script>\n")
  # rest of start make up
  file.write("</style>\n")
  file.write("</head>\n")\n")
  file.write("<body>\n")\n")
  file.write("if withHeader:\n")
  file.write("<center>\n")
  file.write("<h1>"+title+"</h1>\n")
  file.write("</center>\n")
    

def closeHTMLPage(file):
  #
  # Closes the html page
  #
  # args:
  #  - file               file to write the html stuff to

  file.write("<script type="text/javascript">\n")
  file.write("  if(typeof tableScroll == 'function'){tableScroll('mainTable');}\n")
  file.write("</script>\n")
  file.write("</body>\n")
  file.write("</html>\n")
  file.close()

def findFailedTests(variant,package,testResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT testprograms
  # failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - testResultsArray   array that contains progname,variant,package pairs
  #
 
  for row in testResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def findFailedBuilds(variant,package,buildResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT compiling and
  # / or linking failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - buildResultsArray  array that contains progname,variant,package pairs
  #
 
  for row in buildResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def extendPackageArray(packageArray,allBuildablePackages):
  #
  # Find if a PACKAGE has more Packages under him that can be build also
  # if so, extend the packageArray with those packages
  #
  newPackageArray=[]
  for pck in packageArray:
    if pck != "":
      for line in allBuildablePackages:
        if line.find(pck) > -1 and line != "":
          newPackageArray.append(line)
  return newPackageArray

def usage():
  print "usage: "+sys.argv[0]+" [-h] [-n] [-b] [-d arg] [-f arg] [-s arg] [-t arg]"
  print "args:  -h,--help       - print usage"
  print "       -n,--nocopy     - Do not copy thisWeek to lastWeek"
  print "       -b,--debug      - additional debug output"
  print "       -d,--directory  - LOFAR base directory"
  print "       -f,--filebase   - basename from logfiles. E.g. week441"
  print "       -t,--testserver - give an alternative testserver(usr@www.server.nl)"
  print "       -s,--serverdir  - give an alternative serverdirectory"
  sys.exit(2)


def main(argv):
  lofarDir = "None"
  fileBase = "None"
  lofarServer ="lofar@lofar0.nfra.nl"
  serverDir = "/usr/local/httpd/htdocs"
  noCopy=0
  debug=0
  try:
    opts, args = getopt.getopt(argv, "d:f:hnbs:t:",
                               ["directory=","filebase=","help","nocopy"
                                ,"debug","serverdir=","testdir="])
  except getopt.GetoptError:
    usage()
  for opt, arg in opts:
    if opt in ("-h", "--help"):
      usage()
    elif opt in ("-b", "--debug"):
      debug=1
    elif opt in ("-n", "--nocopy"):
      noCopy = 1
    elif opt in ("-f", "--filebase"):
      fileBase = arg
    elif opt in ("-d", "--directory"):
      lofarDir = arg
    elif opt in ("-s", "--serverdir"):
      serverDir = arg
    elif opt in ("-t", "--testserver"):
      lofarServer = arg

  if lofarServer.find('@') < 0:
    print "Error in serverstring: "+ server
    usage()
    
  server=str.split(lofarServer,'@')[1]
  if fileBase=="None":
    print "No filebase specified"
    usage()
  if lofarDir=="None":
    print "No LOFAR basedir specified"
    usage()
  if len(sys.argv) < 3:
    usage()
  if os.path.isdir(lofarDir) < 1:
    print lofarDir+" Not found, or not a directory"
    usage()


  #
  # print machine
  #
  print "This build took place on: " + machineName() + "\n\n"
  print "Using : " + serverDir + " on "+lofarServer+"\n\n"


  #
  # make an array that contains the VARIANTS PACKAGES
  # for each log file looked for.
  #
  variantPackageArray=[]
  testResultsArray=[]
  buildResultsArray=[]
  allBuildablePackages=[]

  #
  # Patterns to look for in the logfile
  #
  # findthe PACKAGE(S) line to get all Packages being build
  #
  packagePattern = re.compile('(PACKAGES *= *".*?")|(PACKAGES *= *[^ ]*)',re.IGNORECASE)
  #
  # find the VARIANT(S) line to get the Variant being build
  #
  variantPattern = re.compile('(VARIANTS *= *".*?")|(VARIANTS *= *[^ ]*)',re.IGNORECASE)
  #
  # find the Compiletool line for compiling
  #
  compilePattern = re.compile('^.*compiletool .*mode=compile.*$')
  #
  # find the Compiletool line for linking
  #
  linkPattern = re.compile('^.*compiletool .*mode=link.*$')
  #
  # find the Compiletool line for install
  #
  installPattern = re.compile('^.*compiletool .*mode=install.*$')
  #
  # find the target  file within a compile (link)line
  #
  linkTargetPattern=re.compile('^.*mode=link.* -o ([^ ]+).*$')
  #
  # find the sourcefile in a source= line
  #
  sourcePattern=re.compile("^.*source='(.*/)?(.*.cc).*object='(.*)'.*$")


  #
  # find configure.in in Lofar tree
  # each directory that contains it can be build in the LOFAR builds
  # So could potentially be in the PACKAGES line used for the build
  #
  pattern='configure.in'

  for name in find(pattern, lofarDir):
    #
    # first drop the filename
    #
    head, tail = os.path.split(name)
    package=str.replace(head,lofarDir+'/','')
    allBuildablePackages.append(package)

  if debug==1:
    print "All Packages: "
    for line in allBuildablePackages:
      print line
  
  files=find(fileBase+'*.log',os.curdir)
  if len(files)<1:
    print "Sorry, can't find any files starting with "+fileBase
    usage()
    
  for file in files:


    #
    # keep last found build start
    #
    keepLastFoundBuildArray=[]

    try:
      readLogFile=open(file, 'r')
      sfile=file.split(fileBase)
      nfile=machineName()+sfile[1]+".html"
      writeLogFile=open(nfile, 'w')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )


    openHTMLPage(writeLogFile,"Tagged "+file+" on "+machineName(),"yes")
    writeLogFile.write('<pre>\n')

    aLine=readLogFile.readline()
    print "File: "+file


    while aLine != "":
      #
      # search for PACKAGES keyword
      #
      if str.find(aLine,"PACKAGES")>-1:
        #
        # If PACKAGES found then lift out the different PACKAGES
        #
        matchPackage = packagePattern.search(aLine)
        if matchPackage:
          start,end=matchPackage.span()
          pckArray = re.split(' *',re.sub('(PACKAGES *= *)|(packages *= *)'
                                          ,'',re.sub('"','',aLine[start:end],2)))
        if debug==1:
          print "packages found in Packages array: "
          for line in pckArray:
            print line
        #
        # because a PACKAGE in the PACKAGES line can also say that
        # ALL the Subdirectories UNDER this PACKAGE can be build we must
        # extend this array with those packages before we can continue
        #
        pckArray=extendPackageArray(pckArray,allBuildablePackages)
        if debug==1:
          print "packages after extend: "
          for line in pckArray:
            print line

        #
        # search for VARIANTS keyword in the same line (Old Makefile way)
        #
        matchVariant = variantPattern.search(aLine)
        if matchVariant:
          start,end=matchVariant.span()
          for variant in re.split(' *',re.sub('(VARIANTS *= *)|(variants *= *)',
                                              '',re.sub('"','',aLine[start:end],2))):
            variantPackageArray.append([variant,pckArray])

        if debug==1:
           print "variants found in Variantsline : "
           for line in variantPackageArray:
             print line

      #
      # search for Variants keyword in other lines (rub way of building)
      #
      if str.find(aLine,"VARIANTS")>-1:
        #
        # If VARIANTS found then lift out the different VARIANTS
        #
        matchVariant = variantPattern.search(aLine)
        if matchVariant:
          start,end=matchVariant.span()
          for variant in re.split(' *',re.sub('(VARIANTS *= *)|(variants *= *)',
                                              '',re.sub('"','',aLine[start:end],2))):
            variantPackageArray.append([variant,pckArray])

        if debug==1:
          print "variants found in Variantsline : "
          for line in variantPackageArray:
            print line

      #
      # Find CONFIGURING start
      #
      
      if str.find(aLine,":::::: CONFIGURING VARIANT")>-1:
        keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
      #
      #  Find BUILDING start
      #
      if str.find(aLine,":::::: BUILDING VARIANT")>-1:
        keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
      #
      # Find Failed test
      #
      if str.find(aLine[0:5],'FAIL:')>-1:
        failedProg=re.sub('FAIL:','',re.sub('\n','',aLine))
        testResultsArray.append([failedProg,keepLastFoundBuildArray[3],
                                 keepLastFoundBuildArray[6],nfile])
        #
        # Write target in log file to be able to find the error later
        #
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+failedProg+'">\n')
        writeLogFile.write('<pre>\n')


      #
      # Find Configure errors
      #
      if str.find(aLine,'configure: error: ') > -1:
        aFile=str.split(aLine,' ')
        if aFile[4] == "find":
          aPack=aFile[5]+" not configured"
        else:
          aPack=aFile[4]+" not configured"
        buildResultsArray.append([aPack,keepLastFoundBuildArray[3],
                                  keepLastFoundBuildArray[6],nfile])
        #
        # Write target in log file to be able to find the error later
        #
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+aPack+'">\n')

        writeLogFile.write('<pre>\n')

      #
      # Find Compile && Link errors
      # Search for strings like:
      #      make[5]: *** [PO_DH_PL.lo] Error 1
      #
      if str.find(aLine,' *** ') > -1:
        if str.find(aLine,' Error ') > -1:
          aFile=str.split(str.replace(str.replace(aLine[str.find(aLine,'make'):],'[',''),']',''))[2]
          aFile=re.sub('check-TESTS','',
                       re.sub('check-am','',
                              re.sub('check-recursive','',
                                     re.sub('all','',
                                            re.sub('all-recursive','',aFile)))))
          if aFile:
            buildResultsArray.append([aFile,keepLastFoundBuildArray[3],
                                      keepLastFoundBuildArray[6],nfile])

      #
      # Find Source line and filter out the src that is been compiled here
      #
      match=sourcePattern.search(aLine)
      if match:
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(2)+'">\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(3)+'">\n')
        writeLogFile.write('<pre>\n')

      #
      # Find compiletool with mode=link
      if linkPattern.search(aLine):
        match=linkTargetPattern.search(aLine)
        if match:
          writeLogFile.write('</pre>\n')
          writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(1)+'">\n')
          writeLogFile.write('<pre>\n')


        
      #        elif installPattern.search(aLine):
      #          print "found install line"

      writeLogFile.write(aLine)
      aLine=readLogFile.readline()
    readLogFile.close()
    writeLogFile.write('</pre>\n')
    closeHTMLPage(writeLogFile)
    writeLogFile.close()


  #
  # delete 'old' html files
  #
  for fileName in find('*_Failed_'+machineName()+'.html'):
    os.remove(fileName)

  #
  # Open html pages for all packages/Variants that have
  # failed something during the build
  #
  usedFiles=[]
  first=1
  for row in testResultsArray:
    rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
    fileName=str.replace(rawName,'/','_')
    if os.path.isfile(fileName):
      try:
        file=open(fileName,'a')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )

    else:
      try:
        file=open(fileName,'w')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )

      openHTMLPage(file,"Failed builds on "+machineName(),"yes")
      file.write("<center><h3>Package: "+row[2]+
                 '&nbsp &nbsp &nbsp &nbsp &nbsp '+
                 "Variant: "+row[1]+"</h3></center>\n")
      file.write('<ul>\n')
      usedFiles.append(fileName)
    if first == 1:
      first=0
      file.write('</ul>\n')
      file.write("<b>during make test:</b>\n")
      file.write('<ul>\n')

    file.write('<li><A href="'+row[3]+'#'+row[2]+'/'+row[0]+'">'+row[0]+'</A></li>\n')
    file.close()

  first=1;
  for row in buildResultsArray:
    rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
    fileName=str.replace(rawName,'/','_')
    if os.path.isfile(fileName):
      try:
        file=open(fileName,'a')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )
    else:
      try:
        file=open(fileName,'w')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )
      openHTMLPage(file,"Failed builds on "+machineName(),"yes")
      file.write("<center><h3>Package: "+row[2]+
                 '&nbsp &nbsp &nbsp &nbsp &nbsp '+
                 "Variant: "+row[1]+"</h3></center>\n")
      file.write('<ul>\n')
      usedFiles.append(fileName)
    if first == 1:
      first=0
      file.write('</ul>\n')
      file.write("<b>during make:</b>\n")
      file.write('<ul>\n')

    file.write('<li><A href="'+row[3]+'#'+row[2]+'/'+row[0]+'">'+row[0]+'</A></li>\n')
    file.close()

  #
  # loop over all opened files and close everythingLOFAR -f lofar17-week5
  #
  for fileName in usedFiles:
  
    try:
      file=open(fileName,'a')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )

    file.write('</ul>\n')
    closeHTMLPage(file)
    file.close()


  #
  # open main HTML file for writing
  #
  htmlFile=open("BuildPage_"+machineName()+".html",'w')

  #
  # Open html page
  #
  dateString = date.today().isoformat()
  openHTMLPage(htmlFile,"BuildReport on "+machineName()+" "+dateString,"yes")

  #
  # Legenda
  #
  htmlFile.write('<center>\n')
  htmlFile.write('<h3>Legend</h3>\n')
  htmlFile.write('<table border cellspacing=2 cellpadding=5>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="GRAY"><font color="GRAY">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Not Build</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="GREEN"><font color="GREEN">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, no errors</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="RED"><font color="RED">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, compile or Link error(s)</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="YELLOW"><font color="YELLOW">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, Test program(s) failed</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="ORANGE"><font color="ORANGE">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, Both compilation/link and testrun errors</td>')

  htmlFile.write('</tr>\n')
  htmlFile.write('</table>\n')
  htmlFile.write('</center>\n')
  

  #
  # Start the table
  #
  htmlFile.write("<table id="mainTable" border cellspacing="2" cellpadding="5">\n")
  htmlFile.write("<thead>\n")
  #
  # add all different variants to the collumns
  #
  htmlFile.write("<tr>\n<th> </th>\n")
  for entry in variantPackageArray:
    htmlFile.write("<th align=left>"+entry[0]+"</th>\n")
  htmlFile.write("</tr>\n")
  htmlFile.write("</thead>\n")
  htmlFile.write("<tbody>\n")



  for package in allBuildablePackages:
    htmlFile.write("<tr>\n<th align=left>\n"+package+"</th>\n")

    #
    # Look if this Package was also build in one of the variants
    #
    for entry in variantPackageArray:
      found=0
      for pck in entry[1]:
        if package == pck:
          found=1
      if found:
        color="GREEN"
        if (findFailedTests(entry[0],package,testResultsArray)):
          color="YELLOW"
        if (findFailedBuilds(entry[0],package,buildResultsArray)):
          if (color == "YELLOW") :
            color="ORANGE"
          else:
            color="RED"
        if (color != "GREEN"):
          rawName=entry[0]+'_'+package+'_Failed_'+machineName()+'.html'
          linkName=str.replace(rawName,'/','_')
          htmlFile.write('<td bgcolor="'+color+'">'
                          '<a href="'+linkName+'">')
          htmlFile.write('<font color="'+color+'">')
          for i in entry[0][1:len(entry[0])]:
            htmlFile.write('x')
          
          htmlFile.write('</font></a></td>\n')
        else:
          htmlFile.write('<td bgcolor="GREEN"> &nbsp</td>\n')
      else:
        htmlFile.write('<td bgcolor="GRAY"> &nbsp</td>\n')    
    htmlFile.write("</tr>")
  htmlFile.write("</tbody>\n")
  htmlFile.write("</table>\n")

  #
  # close html page
  #
  closeHTMLPage(htmlFile)


  #
  # Copy the "old" files from this machine in thisWeek to lastWeek
  #
  if noCopy==0:
    if remoteFileMove(lofarServer,serverDir) > 0:
      print "Move new to old on server not done because of errors"
    else:
      print "Move new to old on server done"

  #
  # Copy createNewIndex.py to the server
  #
  if copyServerSideScript(lofarServer,serverDir,lofarDir) > 0:
    print "Move script to server not done because of errors"
  else:
    print "Move script to server done"

  #
  # Copy the new generated html files to the Server
  #
  if copyFiles2Server(serverDir+"/BuildResults/thisWeek",
                      lofarServer) > 0:
    print "Copy html files not done because of errors"
  else:
    print "Copy html files to server done"


  #
  # run server side script to generate new index files there
  #
  if runServerSideScript(lofarServer,serverDir,server) > 0:
    print "Run script on server failed"
  else:
    print "Run script on server done"

  sys.exit(0)


#
# this is the main entry
#
if __name__ == "__main__":
  main(sys.argv[1:])
