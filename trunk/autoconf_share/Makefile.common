# Some common rules.


# CLEANFILES cannot delete directories, therefore use target clean-generic.
clean-generic:
	-rm -rf ti_files
	-rm -f tca.*
	-rm -f .inslog*
	-rm -f *.log
	-rm -f *.i
	-rm -f *.s
	-rm -f src/*.h
	-rm -f *.hh
	-rm -f *.cc
	-rm -f *.cs_cc
	-rm -f doxygen.cfg
	-rm -rf $(top_builddir)/pure_cache
	-rm -rf docxxhtml
#CLEANFILES += tca.* .inslog* *.cc *.h $(top_builddir)/pure_cache docxxhtml/* *.log docxx_hdrs.names

DISTCLEANFILES=\
      pkgext\
      pkgextcppflags\
      pkgextcxxflags\
      pkgextobjs\
      lofar_config.old-h\
      lofar_config.h-pkg\
      lofar_config.h\
      .doxygenrc \
      *.spec \
      *.err

# Make the rpm if possible.
# Note:
# MAKE_RPMS is set by lofar_init and possibly overwritten by lofar_general.
# Older package releases include Makefile.common from $lofar_sharedir
# with the effect that the include is handled by make.
# Newer releases (as of 1-11-2005) include Makefile.common from $top_srcdir
# with the effect that the include is handled by automake.
# To be compatible with older releases, it was decided that the MAKE_RPMS
# should be handled by make, hence the blank before endif. Otherwise
# automake complains about an endif without an if.
 ifeq "$(MAKE_RPMS)" "true"
   rpm: dist @RPM_TARGET@
   $(RPM_TARGET): $(DISTFILES)
	${MAKE} dist
	-mkdir -p $(RPM_DIR)/SRPMS
	-mkdir -p `dirname $(RPM_TARGET)`
	$(RPM_PROG) $(RPM_ARGS) $(RPM_TARBALL)
	@echo Congratulations, $(RPM_TARGET) "(and friends)" should now exist.
 endif
# Put the phony target outside the if, otherwise automake gives
# warnings if a .PHONY is also defined in the Makefile.am.
.PHONY: rpm

# Only preprocess the file.
%.i: %.cc
	$(CXX) -E $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $< > $@
%.i: %.c
	$(CC) -E $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $< > $@

# Only compile (but not assemble) the file.
%.s: %.cc
	$(CXX) -S $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $<
%.s: %.c
	$(CC) -S $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $<


# Rules for preprocessing idl files.
# There should be a corresponding .cc file in the source directory
# including the .cs_cc file.
%.cs_cc: %.idl
	$(IDLCXX) $(IDLFLAGS) $(AM_IDLFLAGS) $<
	echo '#include "$*_c.cc"' >  $*.cs_cc
	echo '#include "$*_s.cc"' >> $*.cs_cc


# Rules for preprocessing Qt sources.
%.moc.cc: %.h
	$(QT_DIR)/bin/moc $< -o $@


# Rule to build all test programs.
test: $(check_PROGRAMS)

# Rule to build and run one or more test programs.
# The programs to build/run must be defined in the PGM variable.
checkrun:
	@if [ "$(PGM)" = "" ] ; then \
	   echo "Use as: make checkrun PGM=testprogram"; \
	 else \
	   srcdir=$(srcdir); export srcdir; \
	   for PGMVAR in $(PGM) ; \
	   do \
	     if make $$PGMVAR; then \
	       PGMTST=$$PGMVAR; \
	       if [ -f $(srcdir)/$$PGMVAR.sh ] ; then \
	         PGMTST=$(srcdir)/$$PGMVAR.sh; \
	       elif [ -f $(srcdir)/$$PGMVAR_test.sh ] ; then \
	         PGMTST=$(srcdir)/$$PGMVAR_test.sh; \
	       fi; \
	       if $(TESTS_ENVIRONMENT) $$PGMTST; then \
	         echo "  ** $$PGMTST succeeded **"; \
	       else \
	         echo "  ** $$PGMTST failed **"; \
		 cat $$PGMVAR.log; \
	       fi; \
	     fi; \
	   done; \
	 fi


# Rules for building documentation using doxygen or doc++.
# Default output directory is docxxhtml.
DOCDIR := docxxhtml

doc:
	@if [ "$(lofar_doctool)" = "doxygen" ] ; then \
	  cp $(top_builddir)/.doxygenrc doxygen.cfg ; \
	  projnm=`(cd $(srcdir) && pwd) | sed -e "s%.*/LOFAR/%%"` ; \
	  echo "PROJECT_NAME = $$projnm" >> doxygen.cfg ; \
	  echo "INPUT = $(srcdir)" >> doxygen.cfg ; \
	  echo "RECURSIVE = YES" >> doxygen.cfg ; \
	  echo "HTML_OUTPUT = $(DOCDIR)" >> doxygen.cfg ; \
	  echo "EXCLUDE = $(srcdir)/build $(srcdir)/test $(srcdir)/demo" >> doxygen.cfg; \
          echo "GENERATE_TAGFILE = `basename $$projnm`.tag" >> doxygen.cfg ; \
	  $(DOXYGEN) doxygen.cfg ; \
	else \
	  if [ "$(lofar_doctool)" = "docpp" ] ; then \
	    $(DOCPP) $(DOCPPFLAGS) --dir $(DOCDIR) `find $(srcdir) -name "*.h" -print` ; \
	  else \
	    echo "Error: No documentation tool configured" ; \
	  fi \
	fi

docthis:
	@if [ "$(lofar_doctool)" = "doxygen" ] ; then \
	  cp $(top_builddir)/.doxygenrc doxygen.cfg ; \
	  projnm=`(cd $(srcdir) && pwd) | sed -e "s%.*/LOFAR/%%"` ; \
	  echo "PROJECT_NAME = $$projnm" >> doxygen.cfg ; \
	  echo "INPUT = $(srcdir)/src" >> doxygen.cfg ; \
	  echo "RECURSIVE = NO" >> doxygen.cfg ; \
	  echo "HTML_OUTPUT = $(DOCDIR)" >> doxygen.cfg ; \
	  $(DOXYGEN) doxygen.cfg ; \
	else \
	  if [ "$(lofar_doctool)" = "docpp" ] ; then \
	    $(DOCPP) $(DOCPPFLAGS) --dir $(DOCDIR) $(srcdir)/*.h ; \
	  else \
	    echo "Error: No documentation tool configured" ; \
	  fi \
	fi

#
#
# Target to be able to do a system build.
# By default it does a check, but no install.
WITH_CLEAN=0
WITH_INSTALL=0
WITH_CHECK=1
CHECKTOOL=
build_system:
	@if test 2 -eq $(WITH_CLEAN); then \
	  $(MAKE) cleandist ; \
	  ../../lofarconf; \
	fi; \
	if test 1 -eq $(WITH_CLEAN); then \
	  $(MAKE) clean ; \
	fi; \
	$(MAKE); \
	if test 1 -eq $(WITH_CHECK); then \
	  $(MAKE) check CHECKTOOL="$(CHECKTOOL)"; \
	fi; \
	if test 1 -eq $(WITH_INSTALL); then \
	  $(MAKE) install ; \
	fi;

# Show the important make variables.
show_env:
	@echo "CXX      = $(CXX)";
	@echo "   `$(CXX) --version | head -1`";
	@echo "CPPFLAGS = $(CPPFLAGS)";
	@echo "CXXFLAGS = $(CXXFLAGS)";
	@echo "LDFLAGS  = $(LDFLAGS)";
	@echo "LIBS     = $(LIBS)";
	@echo "MPIBIN   = $(MPIBIN)";
	@echo "AIPSPP   = $(AIPSPP)";
