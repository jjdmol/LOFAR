#!/bin/sh

# rub1: helper script for rub
#
#  Copyright (C) 2004
#  ASTRON (Netherlands Foundation for Research in Astronomy)
#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Id$


# This script is used by rub to do the actual checkout/update.
# See rub for more details.
#
# Use as:
#   rub1 package newest cvstag checkout recur cvscomm updq
#
#     package     name of package to checkout/update
#     newest      1 = always use newest package version; implies cvstag=""
#     cvstag      tag of package to checkout/update (blank = no tag)
#     checkout    1 = do actual checkout/update if not done yet
#                 0 = do not checkout/update, but only write used
#                     packages in allpkg.tmp. This is needed for rub
#                     to get the correct build order.
#     recur       0 = do not rub recursively
#     cvscomm     cvs command to be used
#     updq        cvs update qualifiers (e.g. -dAP)


# Get package name and tag.
pkgname="$1"
newest="$2"
pkgtag="$3"
if [ "$newest" = 1 ]; then
  pkgtag=""
fi
# Does an actual checkout/update need to be done.
checkout="$4"
# Does it need to be done recursively?
recur="$5"
# Get cvs command (defaults to cvs).
cvscomm="$6"
if [ "$cvscomm" = "" ]; then
  cvscomm="cvs"
fi
# Get cvs update flags.
updq="$7"

# See if this package was already updated.
grep "^$pkgname " allpkg.tmp > /dev/null 2>&1
notfound=$?
# If found, check if tag matches (only if checkout/update needs to be done).
if [ $notfound = 0  -a  $checkout = 1  -a  "$pkgtag" != "" ]; then
  tmptag=`grep "^$pkgname [^ ]" allpkg.tmp | head -1 | sed -e 's/.* //'`
  if [ "$tmptag" != "$pkgtag"  -a  "$tmptag" != "" ]; then
    echo "Error: package $pkgname is used with different tags ($pkgtag and $tmptag)"
    exit 1
  fi
fi

# Checkout/update if needed.
rtag=
if [ "$pkgtag" != "" ]; then
  rtag="-r$pkgtag"
  tagstr=", cvstag $pkgtag"
fi
if [ $notfound != 0  -a  $checkout = 1 ]; then
  if [ -d $pkgname ]; then
    echo "Update of package $pkgname$tagstr"
    echo "(cd $pkgname  &&  $cvscomm update $rtag $updq)" >> rub.log 2>&1
    (cd $pkgname  &&  $cvscomm update $rtag $updq) >> rub.log 2>&1
    status=$?
  else
    echo "Checkout of package $pkgname$tagstr"
    echo "(cd ..  &&  $cvscomm checkout $rtag LOFAR/$pkgname)" >> rub.log 2>&1
    (cd ..  &&  $cvscomm checkout $rtag LOFAR/$pkgname) >> rub.log 2>&1
    status=$?
  fi
  if [ $status != 0 ]; then
    echo "Exiting; update/checkout returned with an error status ..."
    egrep "^C " rub.log > greplog.tmp 2>&1
    if [ $? = 0 ]; then
      echo "There seem to be UPDATE CONFLICTS"
      cat greplog.tmp
      \rm -f greplog.tmp
    else
      tail -2 rub.log
    fi
    exit 1
  fi
fi

# Find all packages used to get correct build order.
if [ -f $pgkname/$pkgname.spec.in ]; then
  if [ -f lofarconf.in  -o  -f lofarconf.in.private ]; then
    echo "error: lofarconf.in cannot be used with a .spec.in"
    exit 1
  fi
  # Add (leaf) package to the file to get correct build order.
  echo "$pkgname $pkgtag" >> allpkg.tmp
  # Do it recursively for packages used by this package.
  # Find them by looking at the Requires tag in the .spec.in file.
  pkgs=`egrep -i " *requires:" $pkgname/$pkgname.spec.in | sed -e 's/ *requires: *//ig'`
  # < and > is not supported yet.
  pkg1=`echo $pkgs | sed 's/>/ /g' | sed 's/</ /g'`
  if [ "$pkg1" != "$pkgs" ]; then
    echo "warning: rub only supports == in the rpm 'Requires' tag"
  fi
  # Normalize the string.
  pkgs=`echo $pkg1 | sed 's/ *== */=/g' | sed 's/ //g' | sed 's/,/ /g'`
  for pkg in $pkgs
  do
    # Extract package name and tag.
    # Before = is the package name.
    nm=`echo $pkg | sed -e "s/=.*//"`
    # Possible part after = is the tag.
    tag=`echo $pkg | awk -F= '{ print $2 }'`
    # Check out the package.
    $0 $nm "$tag" $checkout "$cvscomm" "$updq"  ||  exit 1
  done
elif [ -f $pkgname/configure.in ]; then
  if [ -f lofarconf.in  -o  -f lofarconf.in.private ]; then
    echo "error: lofarconf.in cannot be used with a configure.in"
    exit 1
  fi
  # Add (leaf) package to the file to get correct build order.
  echo "$pkgname $pkgtag" >> allpkg.tmp
  if [ $recur != 0 ]; then
    # Do it recursively for packages used by this package.
    # Find them by looking in the configure.in file.
    pkgs=`grep "^[ \t]*lofar_\(\(PACKAGE\)\|\(INTERNAL\)\)[ \t]*(.*)" $pkgname/configure.in | sed -e 's/ //g'`
    for pkg in $pkgs
    do
      # Extract package name and tag.
      nma=`echo $pkg | sed -e "s/.*lofar_\(PACKAGE\)\|\(INTERNAL\)//" -e "s/ //g" -e "s/.*(//" -e "s/).*//"`
      # First name is the package.
      nm=`echo $nma | sed -e "s/,.*//"`
      # Possible third name is the tag.
      tag=`echo $nma | awk -F, '{ print $3 }'`
      # Check out the package.
      $0 $nm "$newest" "$tag" "$checkout" "$recur" "$cvscomm" "$updq"  ||  exit 1
    done
  fi
else
  # Do it for all packages in a possible lofarconf.in.
  pkgs=
  if [ -f $pkgname/lofarconf.in.private ]; then
    pkgs=`sed -e s/#.*$//g $pkgname/lofarconf.in.private`
  elif [ -f $pkgname/lofarconf.in ]; then
    pkgs=`sed -e s/#.*$//g $pkgname/lofarconf.in`
  fi
  if [ "$pkgs" != "" ]; then
    for pkg in $pkgs
    do
      # Check out the package.
      $0 $pkgname/$pkg "$newest" "" "$checkout" "$recur" "$cvscomm" "$updq"  ||  exit 1
    done
  fi
fi
