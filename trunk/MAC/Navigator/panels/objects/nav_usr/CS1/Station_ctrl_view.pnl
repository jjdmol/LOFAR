V 10
1
LANG:1 20 StationCtrlViewPanel
PANEL,372 214 484 325 N "_3DFace" 2
"$Station"
"$datapoint"
"main()
{
	txt_Controller.text = \"StationCtrl\"; 
  txt_Station.text = $Station;
	obsName          = getPathComponent($datapoint,3);
	baseDP           = $Station+\":LOFAR\";
	BeamCtrlDP       = baseDP+\"_ObsSW_\"+obsName+\"_BeamCtrl\";
	CalCtrlDP        = baseDP+\"_PermSW_CalCtrl\";
	DigBoardCtrlDP   = baseDP+\"_PermSW_DigBoardCtrl\";
	StationCtrlDP    = baseDP+\"_PermSW_StationCtrl\";	
	
	// load propertysets from datapoints
	navPMLloadPropertySet(BeamCtrlDP);
	navPMLloadPropertySet(CalCtrlDP);
	navPMLloadPropertySet(DigBoardCtrlDP);
	navPMLloadPropertySet(StationCtrlDP);

	DebugTN(\"init entered\");
  logThreadID=startThread(\"connectLogDP\");  
  DebugTN(\"ThreadId: \"+$Station+ \": \"+logThreadID);

	selectedDP=StationCtrlDP+\".logmsg\";

  	
	// check if the requiered datapoint for this view are enabled and accessible
	if (dpAccessable(StationCtrlDP+\".state\") && dpAccessable(StationCtrlDP + \".error\")) {
	  dpConnect(\"updateStationCtrlTable\",StationCtrlDP + \".state\",
 	                             	       StationCtrlDP + \".error\",
 	                             	       StationCtrlDP + \".state:_online.._invalid\");
 	} else {
    setValue(\"StationCtrlLight\", \"backCol\", \"_dpdoesnotexist\");
		StationCtrlTable.appendLine(\"Controller\",\"StationCtrl\",\"Status\",\"\",\"Error\",\"\");
  }	

	// check if the requiered datapoint for this view are enabled and accessible
	if (dpAccessable(DigBoardCtrlDP+\".state\") && dpAccessable(DigBoardCtrlDP + \".error\")) {
	  dpConnect(\"updateDigBoardCtrlTable\",DigBoardCtrlDP + \".state\",
	                             	        DigBoardCtrlDP + \".error\",
 	                             	        DigBoardCtrlDP + \".state:_online.._invalid\");
 	} else {
    setValue(\"DigBoardCtrlLight\", \"backCol\", \"_dpdoesnotexist\");
		StationCtrlTable.appendLine(\"Controller\",\"DigBoardCtrl\",\"Status\",\"\",\"Error\",\"\");
  }	

	// check if the requiered datapoint for this view are enabled and accessible
	if (dpAccessable(BeamCtrlDP+\".state\") && dpAccessable(BeamCtrlDP + \".error\")) {
		dpConnect(\"updateBeamCtrlTable\",BeamCtrlDP + \".state\",
 	                              	  BeamCtrlDP + \".error\",
 	                              	  BeamCtrlDP + \".state:_online.._invalid\");
 	} else {
    setValue(\"BeamCtrlLight\", \"backCol\", \"_dpdoesnotexist\");
		StationCtrlTable.appendLine(\"Controller\",\"BeamCtrl\",\"Status\",\"\",\"Error\",\"\");
  }	

	// check if the requiered datapoint for this view are enabled and accessible
	if (dpAccessable(CalCtrlDP+\".state\") && dpAccessable(CalCtrlDP + \".error\")) {
		dpConnect(\"updateCalCtrlTable\",CalCtrlDP + \".state\",
 	                             	   CalCtrlDP + \".error\",
 	                             	   CalCtrlDP + \".state:_online.._invalid\");
 	} else {
    setValue(\"CalCtrlLight\", \"backCol\", \"_dpdoesnotexist\");
		StationCtrlTable.appendLine(\"Controller\",\"CalCtrl\",\"Status\",\"\",\"Error\",\"\");
  }	


}

updateBeamCtrlTable(string dp1, string state, 
                    string dp2, string error,
                    string dp3, bool invalid)
{
	string SymbolCol;
	if (invalid) 
	{
		SymbolCol=\"Lofar_device_invalid\";
  } else {
		SymbolCol=\"Lofar_device_active\";	  
  }
  setValue(\"BeamCtrlLight\", \"backCol\", SymbolCol);
	StationCtrlTable.updateLine(1,\"Controller\",\"BeamCtrl\",\"Status\",state,\"Error\",error);
}

updateCalCtrlTable(string dp1, string state, 
                   string dp2, string error,
                   string dp3, bool invalid)
{
	string SymbolCol;
	if (invalid) 
	{
		SymbolCol=\"Lofar_device_invalid\";
  } else {
		SymbolCol=\"Lofar_device_active\";	  
  }
  setValue(\"CalCtrlLight\", \"backCol\", SymbolCol);
	StationCtrlTable.updateLine(1,\"Controller\",\"CalCtrl\",\"Status\",state,\"Error\",error);
}

updateDigBoardCtrlTable(string dp1, string state, 
												string dp2, string error,
												string dp3, bool invalid)
{
	string SymbolCol;
	if (invalid) 
	{
		SymbolCol=\"Lofar_device_invalid\";
  } else {
		SymbolCol=\"Lofar_device_active\";	  
  }
  setValue(\"DigBoardCtrlLight\", \"backCol\", SymbolCol);
	StationCtrlTable.updateLine(1,\"Controller\",\"DigBoardCtrl\",\"Status\",state,\"Error\",error);
}

updateStationCtrlTable(string dp1, string state, 
                       string dp2, string error,
                       string dp3, bool invalid)
{
	string SymbolCol;
	if (invalid) 
	{
		SymbolCol=\"Lofar_device_invalid\";
  } else {
		SymbolCol=\"Lofar_device_active\";	  
  }
  setValue(\"StationCtrlLight\", \"backCol\", SymbolCol);
	StationCtrlTable.updateLine(1,\"Controller\",\"StationCtrl\",\"Status\",state,\"Error\",error);
}
" 0
"main()
{
	navPMLunloadPropertySet(BeamCtrlDP);
	navPMLunloadPropertySet(CalCtrlDP);
	navPMLunloadPropertySet(DigBoardCtrlDP);
	navPMLunloadPropertySet(StationCtrlDP);
}" 0
E E E 1 0 0 0  5 320
"" 0 1
E"#uses \"nav_usr/CS1/CS1_Common.ctl\"

string obsName;
string baseDP;
string BeamCtrlDP;
string CalCtrlDP;
string DigBoardCtrlDP;
string StationCtrlDP;
string selectedDP=StationCtrlDP+\".logmsg\";
string previouslySelectedDP=\"\";
int logThreadID;

void connectLogDP()
{
	while(1)
	{
		delay(0,100);
		if (selectedDP != previouslySelectedDP)
		{
			if(previouslySelectedDP != \"\" && dpExists(previouslySelectedDP))
				dpDisconnect(\"updateLogging\",previouslySelectedDP);
		 
		 	if (dpExists(selectedDP)) {
		 		dpConnect(\"updateLogging\",selectedDP);
		 		showLogging();
		 	}
		 	previouslySelectedDP=selectedDP;
		}
	}
}

showLogging()
{
	//DebugTN(\"startLogging\");
	dyn_string dp = strsplit(dpSubStr(selectedDP,DPSUB_DP),\"_\");
	txt_Controller.text = dp[dynlen(dp)]; 
	

 	// get the systemname and systemnameless part of the datapoint
	string systemName = dpSubStr(selectedDP,DPSUB_SYS);
  string bareDP     = dpSubStr(selectedDP,DPSUB_DP_EL_CONF_DET_ATT);
 
 	

  // clear the table from the old logging
  table_logging.deleteAllLines();

  // if the datapoint exists, try to get some of the historical data on this point
  // fill the table with it and do a dpConnect so that new changes will be added to the table 
  if(dpExists(selectedDP))
  {

		// initialize the logging table with historical data:
		dyn_dyn_anytype tab;
		int z;
		time tStart;
		time tStop;
		tStop = getCurrentTime();
		tStart = tStop - 48*3600; // 2 days of history
	
		string query = \"SELECT ALL '_original.._value' FROM '\" + selectedDP + \"' REMOTE'\"+systemName +\"' TIMERANGE(\\\"\" +
			formatTime(\"%Y.%m.%d %H:%M:%S\",tStart) + \"\\\",\\\"\" +
			formatTime(\"%Y.%m.%d %H:%M:%S\",tStop) + \"\\\",1,0) LAST 100\";
			
		DebugTN(\"Query: \" + query);
		dpQuery(query, tab);
		DebugTN(\"Found: \" + tab + \" length: \" + dynlen(tab));
	 	 
	 	
		for(z=2;z<dynlen(tab);z++)
		{
			addLogMessage(tab[z][2]);
		}
	}
}

//
// Update logging callback
//
updateLogging(string dpe, string dpv)
{
  //DebugTN(\"LogMsg: \"+dpv);
  if (dpv != \"\") {
    addLogMessage(dpv);
  }
}

//
// Add logMsg to table, We assume the tablename is table_logging
//
addLogMessage(string msg)
{
  //split lines like:
  // 13-11-06 10:06:00.519|INFO|MAC.GCF.PAL.SAL|Set value of property 'MCU001:LOFAR_PermSW_MACScheduler.OTDB.lastPoll'|GSA_Service.cc:661
  // into relevant pieces

  if (msg != \"\") {
    //DebugTN(\"msg: \" + msg);

    dyn_string msgParts;
    string dateTime=\"\";
    string level=\"\";
    string source=\"\";
    string logMsg=\"\";
    string codeLine=\"\";
    bool error=false;

    msgParts = strsplit(msg,\"|\");

    if (dynlen(msgParts) >=1) {
      dateTime = msgParts[1];
    } else {
    	error=true;
   	}
    if (dynlen(msgParts) >=2) {
      level    = msgParts[2];
    } else {
    	error=true;
   	}
    if (dynlen(msgParts) >=3) {
      source   = msgParts[3];
    } else {
    	error=true;
   	}

    if (dynlen(msgParts) >=4) {
      logMsg = msgParts[4];
    } else {
    	error=true;
   	}

    if (dynlen(msgParts) >=5) {
      codeLine = msgParts[5];
    } else {
    	error=true;
   	}
	
	
    //DebugTN(\"dateTime: \" + dateTime);
    //DebugTN(\"level: \" + level);
    //DebugTN(\"source: \" + source);
    //DebugTN(\"logMsg: \" + logMsg);
    //DebugTN(\"codeLine: \" + codeLine);

		if (!error && logMsg != \"\") {
	    table_logging.appendLine(\"time\",dateTime,\"level\",level,\"source\",source,\"message\",logMsg,\"code\",codeLine);
  	  table_logging.lineVisible(-1);
  	 }
  }
}
" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
6 0
"Border1"
""
1 5 310 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 2 1 0 1 E U  0 E 5 5 470 310
2 1
"StationName"
""
1 12 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 14 12 110 38
0 2 0 "s" 0 0 0 64 0 0  14 12
 1
1
LANG:1 105 -microsoft windows-Arial-bold-r-normal-*-*-160-100-100-*-*-iso8859-1|-19,0,0,0,700,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 8 Station:
2 4
"txt_Station"
""
1 95 12 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
5 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 97 14 183 30
0 2 0 "s" 0 0 0 64 0 0  97 14
 1
1
LANG:1 105 -microsoft windows-Arial-bold-r-normal-*-*-140-100-100-*-*-iso8859-1|-16,0,0,0,700,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 9 <Station>
7 5
"StationCtrlLight"
""
1 17 58 E E E 1 E 1 E N "_WindowText" E N "Lofar_device_active" E E
 E E
6 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E "main()
{
  selectedDP=StationCtrlDP+\".logmsg\";
}" 0
 0 1 1 0 1 E U  1 E 17 60 5 5
7 6
"DigBoardCtrlLight"
""
1 17 74 E E E 1 E 1 E N "_WindowText" E N "Lofar_device_active" E E
 E E
7 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E "main()
{
  selectedDP=DigBoardCtrlDP+\".logmsg\";
}" 0
 0 1 1 0 1 E U  1 E 17 76 5 5
7 7
"BeamCtrlLight"
""
1 17 90 E E E 1 E 1 E N "_WindowText" E N "Lofar_device_active" E E
 E E
8 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E "main()
{
  selectedDP=BeamCtrlDP+\".logmsg\";
}" 0
 0 1 1 0 1 E U  1 E 17 92 5 5
7 8
"CalCtrlLight"
""
1 17 106 E E E 1 E 1 E N "_WindowText" E N "Lofar_device_active" E E
 E E
9 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E "main()
{
  selectedDP=CalCtrlDP+\".logmsg\";
}" 0
 0 1 1 0 1 E U  1 E 17 108 5 5
2 10
"Text1"
""
1 10 125 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
11 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 127 121 146
0 2 0 "s" 0 0 0 192 0 0  12 127
 1
1
LANG:1 105 -microsoft windows-Arial-bold-r-normal-*-*-140-100-100-*-*-iso8859-1|-16,0,0,0,700,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 13 Logging from:
2 11
"txt_Controller"
""
1 121 127 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 123 129 200 145
0 2 0 "s" 0 0 0 192 0 0  123 129
 1
1
LANG:1 105 -microsoft windows-Arial-bold-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,700,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 12 <controller>
25 2
"StationCtrlTable"
""
1 4 -305 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
23 34 467 122
E E 1 0 1 3 4 "Controller" 0 1 0 "s" 1
LANG:1 10 Controller
E1
LANG:1 0 
 140 "Status" 0 1 0 "s" 1
LANG:1 6 Status
E1
LANG:1 0 
 140 "Error" 0 1 0 "s" 1
LANG:1 5 Error
E1
LANG:1 0 
 140 16 16 "" 1 1
LANG:1 2 #2
"" 1 1
LANG:1 2 #4
"" 1 1
LANG:1 2 #3
"" 1 1
LANG:1 2 #4
8 30 1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
0 2 1 3 0
1 0
25 9
"table_logging"
""
1 96 23 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
10 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
8 148 467 306
E E 1 0 1 5 1 "time" 0 1 0 "s" 1
LANG:1 4 time
E1
LANG:1 0 
 150 "level" 0 1 0 "s" 1
LANG:1 5 level
E1
LANG:1 0 
 70 "source" 0 1 0 "s" 1
LANG:1 6 source
E1
LANG:1 0 
 200 "message" 0 1 0 "s" 1
LANG:1 7 message
E1
LANG:1 0 
 1000 "code" 0 1 0 "s" 1
LANG:1 4 code
E1
LANG:1 0 
 200 16 16 "" 1 1
LANG:1 2 #1
8 30 1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 2 3 0
1 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0