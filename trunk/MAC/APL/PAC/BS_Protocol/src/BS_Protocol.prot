//
// Protocol definition for the Beam Server Protocol
//
autogen definitions protocol;

description = "Protocol for the Beam Server";
prefix = "BS"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+10)";

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<APL/BS_Protocol/Beamlet2SubbandMap.h>';
include = '<APL/BS_Protocol/Pointing.h>';
include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END

	enum {
	     SUCCESS = 0,
	     ERR_RANGE,     // range error in message parameters
	     ERR_BEAMALLOC, // could not allocate beam
	     ERR_BEAMFREE,  // could not free beam
	};

//
// The following signals are defined in the BS protocol
//
// BEAMALLOC     (name,   subarrayname, beamletAllocationMap);
// BEAMALLOCACK  (handle, status);
// BEAMMODIFY    (handle, beamletAllocationMap);
// BEAMMODIFYACK (handle, status);
// BEAMFREE      (handle);
// BEAMFREEACK   (handle, status);
// BEAMPOINTTO   (handle, pointing);
//
// pointing            : angle1, angle2, timestamp, coord.type
// beamletAllocationMap: map<beamletnr, subbandnr>
//

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
      signal = BEAMALLOC;
      dir = IN;

      param = { // name of the beam (nodeid)
	name = "name";
	type = "string";
      };

      // Name of the station receptor group (SRG) on which this beam will be allocated.
      // The SRG determines the sampling frequency and nyquist_zone.
      param = {
	    name = "subarrayname";
	    type = "string";
      };

      // how the subbands should be allocated to which beamlets
      // e.g.
      // beamlet 0 -> subband 384
      // beamlet 1 -> subband 385
      // beamlet 2 -> subband 386
      // etc.
      param = {
	    name = "allocation";
	    type = "Beamlet2SubbandMap";
	    userdefined;
      };
};

event = {
      signal = BEAMALLOCACK;
      dir = OUT;
      param = {
	    name = "handle";
	    type = "uint32";
      };
      param = {
	    name = "status";
	    type = "int16";
      };
};

event = {
	signal = BEAMMODIFY;
	dir = IN;

	// handle to the beam, previously received in BEAMALLOCACK
	param = {
		name = "handle";
		type = "uint32";
	};
	
	// New mapping of beamlets to subbands, the left-hand side of
	// the mapping (the beamlets) must be identical to the left-hand
	// side of the mapping specified in the BEAMALLOC event.
	// Only the subbands can be modified, not the beamlets allocated.
	param = {
		name = "allocation";
		type = "Beamlet2SubbandMap";
		userdefined;
	};
};

event = {
	signal = BEAMMODIFYACK;
	dir = OUT;
	
	// handle
	param = {
		name = "handle";
		type = "uint32";
	};
	param = {
		name = "status";
		type = "int16";
	};
};

event = {
      signal = BEAMFREE;
      dir = IN;
      param = {
	    name = "handle";
	    type = "uint32";
      };
};

event = {
      signal = BEAMFREEACK;
      dir = OUT;
      param = {
	    name = "handle";
	    type = "uint32";
      };
      param = {
	    name = "status";
	    type = "int16";
      };
};

event = {
      signal = BEAMPOINTTO;
      dir = IN;
      param = {
	    name = "handle";
	    type = "uint32";
      };
      param = {
	    name = "pointing";
	    type = "Pointing";
            userdefined;
      };
/*
      param = {
            // time at which the new direction should be effective
	    name = "timestamp";
	    type = "RTC::Timestamp";
      };
      param = {
	    name = "type"; // BS_Protocol::J2000, AZEL or LOFAR_LMN
	    type = "int16";
      };
      param = {
	    name = "angle";
	    type = "double[2]";
      };
*/
};
