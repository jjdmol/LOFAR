//
// Protocol definition for the Beam Server Protocol
//
autogen definitions protocol;

description = "Protocol for the Beam Server";
prefix = "ABS"; // for the signal names

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<boost/date_time/gregorian/gregorian.hpp>';
include = '<boost/date_time/posix_time/posix_time.hpp>';

prelude = << PRELUDE_END
enum {
	ABS_PROTOCOL = F_APL_PROTOCOL + 10
};

namespace ABS_Protocol
{
	/** Maximum number of beamlets produced by
	 * the system. The number of beamlets of
	 * all beams together can not be larger
	 * than this value.
	 */
	static const int N_BEAMLETS = 128;

	/** Maximum number of input subbands of the
	 * system. Each spectral window should have
	 * n_subbands <= N_SUBBANDS.
	 */
	static const int N_SUBBANDS = 128;

	enum {
	     SUCCESS = 0,
	     ERR_RANGE,     // range error in message parameters
	     ERR_BEAMALLOC, // could not allocate beam
	     ERR_BEAMFREE,  // could not free beam
	};
};

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
      signal = BEAMALLOC;
      dir = IN;
      param = {
            // index of the spectral window to use
	    // 0 for now
	    name = "spectral_window";
	    type = "int";
      };
      param = {
	    name = "n_subbands";
	    type = "int";
      };
      param = {
	    name = "subbands";
	    type = "int";
	    dim = N_BEAMLETS;
      };
};

event = {
      signal = BEAMALLOC_ACK;
      dir = OUT;
      param = {
	    name = "handle";
	    type = "int";
      };
      param = {
	    name = "status";
	    type = "int";
      };
};

event = {
      signal = BEAMFREE;
      dir = IN;
      param = {
	    name = "handle";
	    type = "int";
      };
};

event = {
      signal = BEAMFREE_ACK;
      dir = OUT;
      param = {
	    name = "handle";
	    type = "int";
      };
      param = {
	    name = "status";
	    type = "int";
      };
};

event = {
      signal = BEAMPOINTTO;
      dir = IN;
      param = {
	    name = "handle";
	    type = "int";
      };
      param = {
            // time at which the new direction should be effective
	    name = "time";
	    type = "boost::posix_time::ptime";
	    init = "boost::posix_time::ptime(boost::gregorian::date(1970,1,1))";
      };
      param = {
	    name = "type"; // 1 == J2000, 2 = AZEL, 3 = LOFAR_LMN
	    type = "int";
      };
      param = {
	    name = "angle1";
	    type = "double";
      };
      param = {
	    name = "angle2";
	    type = "double";
      };
};

event = {
      //
      // Change settings of the waveform generator.
      // Settings will be used immediately if 
      // the WG has already been enabled.
      //
      // Default settings of the WG are
      // (if no WGSETTINGS event has been sent).
      // frequency = 1e6 (1MHz)
      // amplitude = 128
      // sample_period = 2
      //
      signal = WGSETTINGS;
      dir = IN;
      param = {
	    // Frequency of the sine wave. Current design
	    // min = 0.0Hz, max = 80.0MHz
	    name = "frequency";
	    type = "double";
      };
      param = {
	    // applitude of the signal, values between
	    // 0 and 128 scale the amplitude linearly
	    name = "amplitude";
	    type = "unsigned char"; // allowed values 0..128
      };
      param = {
	    // number of clock cycles for each sample
	    name = "sample_period";
	    type = "unsigned char";
      };
};

event = {
      signal = WGSETTINGS_ACK;
      dir = OUT;
      param = {
	    name = "status"; // either ERR_RANGE or SUCCESS
	    type = "int";
      };
};

event = {
      //
      // Enable the waveform generator, by default it 
      // is disabled.
      //
      signal = WGENABLE;
      dir = IN;
};

event = {
      //
      // disable the waveform generator, enables the ADC input
      //
      signal = WGDISABLE;
      dir = IN;
};
