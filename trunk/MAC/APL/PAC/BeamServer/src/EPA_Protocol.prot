//
// Protocol definition for the EPA Demonstrator Board
//
autogen definitions protocol;

description = "Protocol for the EPA Demonstrator Board";
prefix = "EPA"; // for the signal names

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '"ABS_Protocol.ph"';

prelude = << PRELUDE_END
enum {
	EPA_PROTOCOL = F_APL_PROTOCOL + 11
};

namespace EPA_Protocol
{
	static double const SYSTEM_CLOCK_FREQ = 80e6; // 80 MHz
	static int const N_ELEMENTS      = 1;
	static int const N_POLARIZATIONS = 2;
};

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
      signal = SUBBANDSELECT;
      dir = IN;
      param = {
	    name = "command"; // should be set to 1
	    type = "unsigned char";
      };
      param = {
	    name = "seqnr"; // not used currently
	    type = "unsigned char";
      };
      param = {
	    name = "pktsize"; // == 5 + nofbands
	    type = "unsigned short";
      };
      param = {
	    //
	    // Number of bands - 1. 255 means 256 bands.
	    //
	    name = "nofbands";
	    type = "unsigned char";
      };
      param = {
	    name = "bands";
	    type = "unsigned char";
	    dim = N_BEAMLETS*2;
      };
};

event = {
      //
      // enable or change settings of the waveform generator
      // disables the ADC input
      //
      signal = WGENABLE;
      dir = IN;
      param = {
	    name = "command"; // should be set to 2
	    type = "unsigned char";
      };
      param = {
	    name = "seqnr"; // not used currently
	    type = "unsigned char";
      };
      param = {
	    name = "pktsize"; // == 12
	    type = "unsigned short";
      };
      param = {
	    //
	    // The frequency of the resulting sine wave
	    // is the system clock frequency (normally 80MHz)
	    // multiplied by the frequency setting divided by
	    // 65536.
	    //
	    name = "frequency";
	    type = "unsigned short";
      };
      param = {
	    name = "reserved1"; // value is 0
	    type = "unsigned char";
      };
      param = {
	    //
	    // 128 is the maximum amplitude setting
	    // without clipping. Any other number scales
	    // the amplitude linearly.
	    //
	    name = "amplitude";
	    type = "unsigned char"; // allowed values 0..128
      };
      param = {
	    name = "reserved2"; // value is 0
	    type = "unsigned char";
	    dim = 3;
      };
      param = {
	    //
	    // Specified in the number of clock
	    // cycles for each sample.
	    name = "sample_period";
	    type = "unsigned char";
      };
};

event = {
      //
      // disable the waveform generator, enables the ADC input
      //
      signal = WGDISABLE;
      dir = IN;
      param = {
	    name = "command"; // should be 3
	    type = "char";
      };
      param = {
	    name = "seqnr"; // not used currently
	    type = "char";
      };
      param = {
	    name = "pktsize"; // value is 12
	    type = "unsigned short";
      };
      param = {
	    name = "reserved1"; // value is 0
	    type = "char";
	    dim = 8;
      };
};

event = {
      //
      // Beamformer configure (send weights)
      //
      signal = BFCONFIGURE;
      dir = IN;
      param = {
	    name = "command"; // should be 4
	    type = "char";
      };
      param = {
	    name = "seqnr"; // not used currently
	    type = "char";
      };
      param = {
	    name = "pktsize"; // value is 1030
	    type = "unsigned short";
      };
      param = {
	    name = "antenna"; // antenna number
	    type = "char";
      };
      param = {
	    name = "phasepol"; // 0=Xre, 1=Xim, 2=Yre, 3=Yim
	    type = "char";
      };
      param = {
	    // beamformer weights
	    name = "coeff";
	    type = "int16_t";
	    dim = "N_BEAMLETS * N_POLARIZATIONS * 2";
      };
};

event = {
      //
      // Beamformer enable, enable the configured weights
      //
      signal = BFENABLE;
      dir = IN;
      param = {
	    name = "command"; // should be 5
	    type = "char";
      };
      param = {
	    name = "seqnr"; // not used currently
	    type = "char";
      };
      param = {
	    name = "pktsize"; // value is 1030
	    type = "unsigned short";
      };
      param = {
	    name = "reserved1"; // value should be 0
	    type = "char";
	    dim = 8;
      };
};

event = {
      //
      // Board data
      //
      signal = DATA;
      dir = IN;
      param = {
	    name = "fill";
	    type = "char";
      };
      param = {
	    name = "seqnr";
	    type = "unsigned int";
      };
      param = {
	    name = "data";
	    type = "signed int";
	    dim = 256;
      };
};

	    
	    
