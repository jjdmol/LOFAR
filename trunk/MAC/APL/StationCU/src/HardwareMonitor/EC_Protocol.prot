// -*- mode: c++ -*-//
// Protocol definition for the EC controller
// 
autogen definitions protocol;

description = "Protocol for the EC controller interface";
prefix = "EC"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+17)"; 

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<Common/LofarTypes.h>';
//include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END
  
   //-- EC cmdId code's -------------------------------------------------------
   static const int16 EC_STATUS        = 1; 
   static const int16 EC_SETTINGS      = 2;
   static const int16 EC_CTRL_TEMP     = 3; 
                                            
   static const int16 EC_SET_OFF       = 10;
   static const int16 EC_SET_ON        = 11;
   static const int16 EC_SET_AUTO      = 12;
   static const int16 EC_SET_MANUAL    = 13;
   static const int16 EC_SET_TEMP      = 15;
                                            
   static const int16 EC_SET_48_ON     = 20;
   static const int16 EC_SET_48_OFF    = 21;
   static const int16 EC_RESET_48      = 22;
   static const int16 EC_SET_230_ON    = 25;
   static const int16 EC_SET_230_OFF   = 26;
   static const int16 EC_RESET_230     = 27;
   
   static const int16 EC_SET_DOOR_ON   = 50;
   static const int16 EC_SET_DOOR_OFF  = 51;
   static const int16 EC_SET_HUM_ON    = 52;
   static const int16 EC_SET_HUM_OFF   = 53;
   
   // the following command are for the engineer only     
   static const int16 EC_SET_MAX_TEMP     = 100;
   static const int16 EC_SET_MIN_TEMP     = 101;
   static const int16 EC_SET_MAXMAX_TEMP  = 102;
   static const int16 EC_SET_MINMIN_TEMP  = 103;
   static const int16 EC_SET_MAX_HUM      = 105;
   static const int16 EC_SET_MAXMAX_HUM   = 106;
   
   static const int16 EC_SET_CTRL_SPAN    = 110;
   static const int16 EC_SET_MAX_CHANGE   = 111;
   
   //-- EC cab state code's ----------------------------------------------------
   static const int16 CAB_OK                 = 0x0000;
   static const int16 CAB_TEMP_MIN           = 0x0001;
   static const int16 CAB_TEMP_MIN_MIN       = 0x0002;
   static const int16 CAB_TEMP_MAX           = 0x0004;
   static const int16 CAB_TEMP_MAX_MAX       = 0x0008;
   static const int16 CAB_HUMIDITY_MAX       = 0x0010;
   static const int16 CAB_HUMIDITY_MAX_MAX   = 0x0020;
   static const int16 CAB_TEMPERATURE_SENSOR = 0x0100;
   static const int16 CAB_HUMIDITY_CONTROL   = 0x0200;
   static const int16 CAB_DOOR_CONTROL       = 0x0400;
   
   //-- EC cab control code's --------------------------------------------------
   static const int16 CAB_FRONT_FAN_OUTER = 0x0001;
   static const int16 CAB_FRONT_FAN_INNER = 0x0002;
   static const int16 CAB_BACK_FAN_INNER  = 0x0004;
   static const int16 CAB_BACK_FAN_OUTER  = 0x0008;
   static const int16 CAB_FRONT_AIRFLOW   = 0x0010;
   static const int16 CAB_BACK_AIRFLOW    = 0x0020;
   static const int16 CAB_HEATER          = 0x0080;
   
   //-- EC cab door code's -----------------------------------------------------
   static const int16 CAB_FRONT_DOOR_OPEN = 0x0001;
   static const int16 CAB_BACK_DOOR_OPEN  = 0x0002;

   //-- EC station code's ------------------------------------------------------
   static const int16 STS_POWER48_ON      = 0x0001;
   static const int16 STS_POWER220_ON     = 0x0002;
   static const int16 STS_LIGHTNING       = 0x0004;
   


   struct cab_status {
	   int16 mode;
	   int16 state;
	   int16 temperature;
	   int16 humidity;
	   int16 control;
	   int16 doors;
	   int16 heater;
	};
	
	struct sts_status {
	   cab_status cab[4];
	   int16 power;
	   int16 lightning;
	};
   
   struct cab_settings {
      int16 temp_min;
      int16 temp_min_min;
      int16 temp_max;
      int16 temp_max_max;
      int16 humidity_max;
      int16 humidity_max_max;
   };
   
   struct sts_settings {
      cab_settings cab[4];
   };
   
   
PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// EC events
//

event = {
  noheader;
  signal = CMD;
  dir = OUT;
  param = {
    name = "cmdId";
    type = "int16";
  };
  param = {
    name = "cabNr";
    type = "int16";
  };
  param = {
    name = "value";
    type = "int16";
  };
};

event = {
  noheader;
  signal = CMD_ACK;
  dir = IN;
  param = {
    name = "cmdId";
    type = "int16";
  };
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "payloadSize";
    type = "int16";
  };
  param = {
    name = "payload";
    type = "int16[47]";
  };
};
