// -*- mode: c++ -*-//
// Protocol definition for the TBB driver
// 
autogen definitions protocol;

description = "Protocol for the TBB driver interface";
prefix = "TBB"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+22)";  // !! look if 22 is still available

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<bitset>';
include = '<Common/LofarTypes.h>';

include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END

	static const int MAX_N_TBBBOARDS = 12;
	static const int SUCCESS         = 1;
	static const int FAILURE         = 0;

typedef class TBBVersion
{
  uint32 boardid;
  uint32 swversion;
  uint32 boardversion;
  uint32 tp_version;
  uint32 mp_version[4];
};

PRELUDE_END;


//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// info about status type
//
// type uint32 (4 bytes)
//  
// bit0 = 1, SUCCESS, all boards have responded
//      = 0, FAILURE, one of the boards is not responding
//
// bit16 = bit0 and bit31 = bit15 from tbbmask
// bit16 .. bit31, = 1, if board response was OK
//                 = 0, if board response was not ok
//

//
// if boardid = 0 is returnd, then the board was not on this driver
//

// TBB events

// data recording
event = {
  signal = ALLOC;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
  param = {
    name = "pageaddr";
    type = "uint32";
  };
  param = {
    name = "pagelength";
    type = "uint32";
  };
};

event = {
  signal = ALLOCACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = FREE;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  signal = FREEACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = RECORD;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  signal = RECORDACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = STOP;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  signal = STOPACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

// Triggering
event = {
  signal = TRIGGER;
  dir = OUT;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
  param = {
    name = "time";
    type = "uint32";
  };
  param = {
    name = "sample";
    type = "uint32";
  };
};

event = {
  signal = TRIGGERACK;
  dir = IN;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = TRIGCLR;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  signal = TRIGCLRACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

// Data reading
event = {
  signal = READ;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
  param = {
    name = "time";
    type = "uint32";
  };
  param = {
    name = "period";
    type = "uint32";
  };
};

event = {
  signal = READACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = UDP;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "udp";
    type = "uint32[2]";
  };
	param = {
		name = "ip";
		type = "uint32[5]";
	};
	param = {
		name = "mac";
		type = "uint32[2]";
	};
};

event = {
  signal = UDPACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

// Operation and Maintenance
// Board information
event = {
  signal = VERSION;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
};

event = {
  signal = VERSIONACK;
  dir = OUT;
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "tbbversion";
    type = "TBBVersion[MAX_N_TBBBOARDS]";
  };
};

event = {
  signal = SIZE;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
};

event = {
  signal = SIZEACK;
  dir = OUT;
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "size";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
};

// Board status
event = {
  signal = ERROR;
  dir = OUT;
  param = {
    name = "code";
    type = "uint32";
  };
};

event = {
  signal = ERRORACK;
  dir = IN;
	param = {
    name = "status";
    type = "uint32";
	};	
};

// Board control
event = {
  signal = CLEAR;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
};

event = {
  signal = CLEARACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = RESET;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
};

event = {
  signal = RESETACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

event = {
  signal = CONFIG;
  dir = IN;
  param = {
    name = "tbbmask";
    type = "uint32";
  };
  param = {
    name = "image";
    type = "uint32";
  };
};

event = {
  signal = CONFIGACK;
  dir = OUT;
	param = {
    name = "status";
    type = "uint32";
	};	
};

// Remote system update
event  = {
  signal = ERASEF;
  dir = IN;
  param = {
    name = "boardid";
    type = "uint32";
  };
  param = {
    name = "addr";
    type = "uint32";
  };
};

event = {
  signal = ERASEFACK;
  dir = OUT;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
    name = "status";
    type = "uint32";
	};	
};

event  = {
  signal = READF;
  dir = IN;
	param = {
		name = "boardid";
		type = "uint32";
	};
  param = {
    name = "addr";
    type = "uint32";
  };
};

event = {
  signal = READFACK;
  dir = OUT;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "data";
		type = "uint32[256]";
	};
};


event  = {
  signal = WRITEF;
  dir = IN;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
  param = {
    name = "data";
    type = "uint32[256]";
  };
};

event = {
  signal = WRITEFACK;
  dir = OUT;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
    name = "status";
    type = "uint32";
	};	
};

// DDR2 Access
event  = {
  signal = READW;
  dir = IN;
  param = {
    name = "boardid";
    type = "uint32";
  };
  param = {
    name = "mp";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
};

event = {
  signal = READWACK;
  dir = OUT;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  signal = WRITEW;
  dir = IN;
  param = {
    name = "boardid";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};};

event = {
  signal = WRITEWACK;
  dir = OUT;
	param = {
		name = "boardid";
		type = "uint32";
	};
	param = {
    name = "status";
    type = "uint32";
	};	
};

