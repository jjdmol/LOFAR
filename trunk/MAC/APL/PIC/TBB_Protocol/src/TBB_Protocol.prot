// -*- mode: c++ -*-//
// Protocol definition for the TBB driver
// 
autogen definitions protocol;

description = "Protocol for the TBB driver interface";
prefix = "TBB"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+14)"; 

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<bitset>';
include = '<Common/LofarTypes.h>';

include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END
		
	static const int32 MAX_N_TBBBOARDS = 12; // standard 12 TBB boards
	static const int32 MAX_N_RCUS = MAX_N_TBBBOARDS * 16; // 16 channels on 1 board, 192 RCU's
	static const int32 MAX_N_IMAGES = 32; // max number of images in flash
	
	static const uint32 TBB_MODE_TRANSIENT			= 0x00000001;
	static const uint32 TBB_MODE_SUBBANDS				= 0x00000002;
	
	// bit asignment for the status_mask word
	static const uint32 TBB_SUCCESS    					= 0x00000001;
	static const uint32 TBB_NO_BOARD  					= 0x00000002;
	static const uint32 TBB_SELECT_ERROR				= 0x00000004;
	static const uint32 TBB_COMM_ERROR					= 0x00000008;
	static const uint32 TBB_FLASH_ERROR 				= 0x00000010;
	static const uint32 TBB_ALLOC_ERROR					= 0x00000020;
	static const uint32 TBB_RCU_COMM_ERROR			= 0x00000040;
	                                                     
	static const uint32 TBB_BOARD_SEL_ERROR     = 0x00000100;
	static const uint32 TBB_MP_SEL_ERROR 	      = 0x00000200;
	static const uint32 TBB_CHANNEL_SEL_ERROR   = 0x00000400;
	static const uint32 TBB_PAGE_SEL_ERROR 			= 0x00000800;
	static const uint32 TBB_ADDR_SEL_ERROR  		= 0x00001000;
	static const uint32 TBB_MODE_SEL_ERROR 			= 0x00002000;
	static const uint32 TBB_IMAGE_SEL_ERROR	    = 0x00004000;

	static const uint32 TBB_CRC_ERROR_MP0    		= 0x00010000;
	static const uint32 TBB_CRC_ERROR_MP1    		= 0x00020000;
	static const uint32 TBB_CRC_ERROR_MP2    		= 0x00040000;
	static const uint32 TBB_CRC_ERROR_MP3    		= 0x00080000;
	static const uint32 TBB_CRC_ERROR_TP    		= 0x00100000;
	static const uint32 TBB_ACK_ERROR_TP     		= 0x00200000;
	static const uint32 TBB_TIMEOUT_TP_MP    		= 0x00400000;
	static const uint32 TBB_TIMEOUT_ETH		   		= 0x00800000;
	
	static const uint32 TBB_CHANNEL_IN_USE   		= 0x01000000;
	static const uint32 TBB_INPUT_IN_USE    		= 0x02000000;
	static const uint32 TBB_BUFFER_TO_LARGE  		= 0x04000000;
	static const uint32 TBB_NO_MP_WRITER    		= 0x08000000;
	static const uint32 TBB_RING_FULL       		= 0x10000000;
	static const uint32 TBB_RCU_NOT_FREE				= 0x20000000;
	static const uint32 TBB_RCU_NOT_ALLOCATED		= 0x40000000;
	static const uint32 TBB_RCU_NOT_RECORDING		= 0x80000000;
	//
	// Example: if(status_mask & SUCCESS) then .... 
	
	typedef struct TbbTriggerSetup // setup variables for 1 channel
	{
		uint32 level;
		uint32 td_mode;
		uint32 filter_select;
		uint32 window;
		uint32 dummy;
	};
	
	typedef struct TbbTriggerCoef // setup variables for 1 channel
	{
		uint16 c0;
		uint16 c1;
		uint16 c2;
		uint16 c3;
	};
PRELUDE_END;


//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//


//
// TBB events
//

// configuration info
event = {
  signal = GET_CONFIG;
  dir = IN;
};

event = {
  signal = GET_CONFIG_ACK;
  dir = OUT;
	param = {
    name = "max_boards";
    type = "int32";
	};
	param = {
    name = "active_boards_mask";
    type = "uint32";
	};	
};

event = {
  signal = RCU_INFO;
  dir = IN;
};

// for bit assignment of rcu_status see on top of file
// the value of rcu_state can be one of the following
// F = Rcu is Free
// A = Rcu is Allocated
// R = Rcu is recording
// S = Rcu is stopped
// E = Rcu error
//
event = {
  signal = RCU_INFO_ACK;
  dir = OUT;
	param = {
    name = "rcu_status";
		type = "uint16[MAX_N_RCUS]";
  };
	param = {
    name = "rcu_state";
		type = "char[MAX_N_RCUS]";
  };
  param = {
    name = "rcu_start_addr";
		type = "uint32[MAX_N_RCUS]";
  };
	param = {
    name = "rcu_pages";
		type = "uint32[MAX_N_RCUS]";
	};
	param = {
    name = "rcu_on_board";
		type = "uint8[MAX_N_RCUS]";
  };
  param = {
    name = "rcu_on_input";
		type = "uint8[MAX_N_RCUS]";
  };
};

event = {
	signal = SUBSCRIBE;
	dir = IN;
};

event = {
	signal = SUBSCRIBE_ACK;
	dir = OUT;
};

event = {
	signal = UNSUBSCRIBE;
	dir = IN;
};

event = {
	signal = UNSUBSCRIBE_ACK;
	dir = OUT;
};

// data recording 
event = {
  signal = ALLOC;
  dir = IN;
  param = {
    name = "rcu_mask";
    type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = ALLOC_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "rcu_mask";
    type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = FREE;
  dir = IN;
  param = {
    name = "rcu_mask";
		type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = FREE_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "rcu_mask";
    type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = RECORD;
  dir = IN;
  param = {
    name = "rcu_mask";
		type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = RECORD_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "rcu_mask";
    type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = STOP;
  dir = IN;
  param = {
    name = "rcu_mask";
		type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = STOP_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "rcu_mask";
    type = "std::bitset<MAX_N_RCUS>";
  };
};

// Triggering
event = {
  signal = TRIGGER;
  dir = OUT;
  param = {
    name = "rcu";
    type = "int32";
  };
  param = {
		name = "sequence_nr";
    type = "uint32";
  };
  param = {
    name = "time";
    type = "uint32";
  };
	param = {
		name = "sample_nr";
		type = "uint32";
	};
	param = {
		name = "trigger_sum";
		type = "uint32";
	};
	param = {
		name = "trigger_samples";
		type = "uint32";
	};
	param = {
		name = "peak_value";
		type = "uint32";
	};
};

event = {
  signal = TRIG_RELEASE;
  dir = IN;
  param = {
    name = "rcu_mask";
		type = "std::bitset<MAX_N_RCUS>";
  };
};

event = {
  signal = TRIG_RELEASE_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
		type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
	signal = TRIG_GENERATE;
	dir = IN;
	param = {
		name = "rcu_mask";
		type = "std::bitset<MAX_N_RCUS>";
	};
};

event = {
	signal = TRIG_GENERATE_ACK;
	dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
	signal = TRIG_SETUP;
	dir = IN;
	param = {
		name = "setup";
		type = "TbbTriggerSetup[MAX_N_RCUS]";
	};
};

event = {
	signal = TRIG_SETUP_ACK;
	dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
	signal = TRIG_COEF;
	dir = IN;
	param = {
		name = "coefficients";
		type = "TbbTriggerCoef[MAX_N_RCUS]";
	};
};

event = {
	signal = TRIG_COEF_ACK;
	dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
	signal = TRIG_INFO;
	dir = IN;
	param = {
		name = "rcu";
		type = "int32";
	};
};

event = {
	signal = TRIG_INFO_ACK;
	dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
	param = {
		name = "rcu";
		type = "int32";
	};
	param = {
		name = "sequence_nr";
		type = "uint32";
	};
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "sample_nr";
		type = "uint32";
	};
	param = {
		name = "trigger_sum";
		type = "uint32";
	};
	param = {
		name = "trigger_samples";
		type = "uint32";
	};
	param = {
		name = "peak_value";
		type = "uint32";
	};
	param = {
		name = "trigger_flags";
		type = "uint32";
	};
};


// Data reading
event = {
  signal = READ;
  dir = IN;
  param = {
    name = "channel";
    type = "int32";
  };
  param = {
    name = "secondstime";
    type = "uint32";
  };
  param = {
    name = "sampletime";
    type = "uint32";
  };
  param = {
    name = "prepages";
    type = "uint32";
  };
  param = {
    name = "postpages";
    type = "uint32";
  };
};

event = {
  signal = READ_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
};

event = {
  signal = MODE;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
  param = {
    name = "rec_mode";
    type = "uint32";
  };
};

event = {
  signal = MODE_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
};

event = {
  signal = PAGEPERIOD;
  dir = IN;
  param = {
    name = "channel";
    type = "int32";
  };
};

event = {
  signal = PAGEPERIOD_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
	param = {
    name = "pageperiod";
    type = "uint32";
	};	
};

// Operation and Maintenance
// Board information

event = {
  signal = BOARDCHANGE;
  dir = OUT;
  param = {
    name = "activeboards";
    type = "uint32";
  };
};

event = {
  signal = VERSION;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
};
	
event = {
  signal = VERSION_ACK;
  dir = OUT;
  param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "boardid";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
 	param = {
    name = "swversion";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "boardversion";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "tpversion";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "mp0version";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "mp1version";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "mp2version";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "mp3version";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
		name = "driverversion";
		type = "uint32";
	};	
};

event = {
  signal = SIZE;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
};

event = {
  signal = SIZE_ACK;
  dir = OUT;
  param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "npages";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
};

// Board status
event = {
  signal = ERROR;
  dir = OUT;
  param = {
    name = "code";
    type = "uint32";
  };
};

event = {
  signal = STATUS;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
};

event = {
  signal = STATUS_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
	param = {
    name = "V12";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "V25";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "V33";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Tpcb";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Ttp";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Tmp0";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Tmp1";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Tmp2";
    type = "uint32[MAX_N_TBBBOARDS]";
  };
  param = {
    name = "Tmp3";
    type = "uint32[MAX_N_TBBBOARDS]";
  };	
};


// Board control
event = {
  signal = CLEAR;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
};

event = {
  signal = CLEAR_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
  signal = RESET;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
};

event = {
  signal = RESET_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
};

event = {
  signal = CONFIG;
  dir = IN;
  param = {
    name = "boardmask";
    type = "uint32";
  };
  param = {
    name = "imagenr";
    type = "int32";
  };
};

event = {
  signal = CONFIG_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32[MAX_N_TBBBOARDS]";
	};
};


// Remote system update, one board a time
// board = 0..MAX_N_TBBBOARDS
event  = {
  signal = ERASE_IMAGE;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
  param = {
    name = "image";
    type = "int32";
  };
};

event = {
  signal = ERASE_IMAGE_ACK;
  dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
};

event  = {
  signal = READ_IMAGE;
  dir = IN;
	param = {
		name = "board";
		type = "int32";
	};
  param = {
    name = "image";
    type = "int32";
  };
};

event = {
  signal = READ_IMAGE_ACK;
  dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
};


event  = {
  signal = WRITE_IMAGE;
  dir = IN;
	param = {
		name = "board";
		type = "int32";
	};
	param = {
		name = "image";
		type = "int32";
	};
	param = {
		name = "version";
		type = "int32";
	};
	param = {
    name = "filename_tp";
    type = "char[64]";
  };
  param = {
    name = "filename_mp";
    type = "char[64]";
  };
};

event = {
  signal = WRITE_IMAGE_ACK;
  dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
};

event  = {
	signal = IMAGE_INFO;
	dir = IN;
	param = {
		name = "board";
		type = "int32";
	};
};

event = {
	signal = IMAGE_INFO_ACK;
	dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
	param = {
		name = "image_version";
		type = "uint32[MAX_N_IMAGES]";
	};
	param = {
		name = "write_date";
		type = "uint32[MAX_N_IMAGES]";
	};
	param = {
		name = "tp_file_name";
		type = "char[32][64]";
	};
	param = {
		name = "mp_file_name";
		type = "char[32][64]";
	};
};

// DDR2 Access
event  = {
  signal = READX;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
	param = {
		name = "mp";
		type = "int32";
	};
	param = {
		name = "pid";
		type = "int32";
	};
	param = {
		name = "regid";
		type = "int32";
	};
	param = {
		name = "pagelength";
		type = "uint32";
	};
	param = {
		name = "pageaddr";
		type = "uint32";
	};
};

event = {
  signal = READX_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
	param = {
    name = "pagedata";
    type = "uint32[256]";
	};
};

event  = {
  signal = READW;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
  param = {
    name = "mp";
    type = "int32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
};

event = {
  signal = READW_ACK;
  dir = OUT;
	param = {
		name = "status_mask";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  signal = WRITEW;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
	param = {
		name = "mp";
		type = "int32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};};

event = {
  signal = WRITEW_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
};

event  = {
  signal = READR;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
	param = {
		name = "mp";
		type = "int32";
	};
	param = {
		name = "pid";
		type = "int32";
	};
	param = {
		name = "regid";
		type = "int32";
	};
};

event = {
  signal = READR_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
	param = {
    name = "data";
    type = "uint32[256]";
	};
};

event  = {
  signal = WRITER;
  dir = IN;
  param = {
    name = "board";
    type = "int32";
  };
	param = {
		name = "mp";
		type = "int32";
	};
	param = {
		name = "pid";
		type = "int32";
	};
	param = {
		name = "regid";
		type = "int32";
	};
	param = {
		name = "data";
		type = "uint32[3]";
	};
};

event = {
  signal = WRITER_ACK;
  dir = OUT;
	param = {
    name = "status_mask";
    type = "uint32";
	};
};

