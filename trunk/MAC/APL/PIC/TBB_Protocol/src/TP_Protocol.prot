// -*- mode: c++ -*-//
// Protocol definition for the TBB board driver
// 
autogen definitions protocol;

description = "Protocol for the TBB driver interface";
prefix = "TP"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+21)";  // !! look if 21 is still available

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<bitset>';
include = '<Common/LofarTypes.h>';

include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END

  static const int MAX_N_TBBBOARDS = 12;
  static const int SUCCESS         = 1;
  static const int FAILURE         = 0;

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// TP events
//

// data recording
event = {
  noheader;
  signal = ALLOC;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "pageaddr";
		type = "uint32";
	};
	param = {
		name = "pagelength";
		type = "uint32";
	};
};
  
event = {
  noheader;
  signal = FREE;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RECORD;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STOP;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

// Triggering
event = {
  noheader;
  signal = TRIGGER;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "sample";
		type = "uint32";
	};
};
  
event = {
  noheader;
  signal = TRIGCLR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

// Data reading
event = {
  noheader;
  signal = READ;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "period";
		type = "uint32";
	};
};
  

event = {
  noheader;
  signal = UDP;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "udp";
    type = "uint32[2]";
  };
	param = {
		name = "ip";
		type = "uint32[5]";
	};
	param = {
		name = "mac";
		type = "uint32[2]";
	};
};
  
// Operation and Maintenance
// Board information
event = {
  noheader;
  signal = VERSION;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
	param = {
    name = "boardid";
    type = "uint32";
  };
	param = {
		name = "swversion";
		type = "uint32";
	};
	param = {
		name = "boardvertsion";
		type = "uint32";
	};
	param = {
		name = "tp_version";
		type = "uint32";
	};
	param = {
		name = "mp_version";
		type = "uint32[4]";
	};
};


event = {
  noheader;
  signal = SIZE;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "size";
    type = "uint32";
  };
};

// Board status
event = {
  noheader;
  signal = ERROR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "code";
    type = "uint32";
  };
};

// Board control
event = {
  noheader;
  signal = CLEAR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RESET;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = CONFIG;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "image";
    type = "uint32";
  };
};

// Remote system update
event  = {
  noheader;
  signal = ERASEF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "addr";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = READF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
  param = {
    name = "data";
    type = "uint32[256]";
  };
};

event  = {
  noheader;
  signal = WRITEF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "data";
		type = "uint32[256]";
	};
};

// DDR2 Access
event  = {
  noheader;
  signal = READW;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = WRITEW;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

