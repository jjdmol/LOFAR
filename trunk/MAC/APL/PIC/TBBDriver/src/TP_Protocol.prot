// -*- mode: c++ -*-//
// Protocol definition for the TBB board driver
// 
autogen definitions protocol;

description = "Protocol for the TBB driver interface";
prefix = "TP"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+15)"; 

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
//include = '<bitset>';
include = '<Common/LofarTypes.h>';

//include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END

	
	// TP Command Opcode's
		// Data Recording
	static const uint32 TPALLOC   = 0x00000100;  // OUT allocate buffer space to a certain input channel
	static const uint32 TPFREE    = 0x00000101;  // OUT free buffer settings and disable input channel 
	static const uint32 TPRECORD  = 0x00000102;  // OUT record channel
	static const uint32 TPSTOP    = 0x00000103;  // OUT freeze channel
		// Triggering
	static const uint32 TPTRIGGER = 0x00000200;  // IN trigger detected
	static const uint32 TPTRIGCLR = 0x00000201;  // OUT clear trigger flag
		// Data reading
	static const uint32 TPREAD    = 0x00000300;  // OUT send recorded data to CEP
	static const uint32 TPUDP     = 0x00000301;  // OUT configure UDP and IP header
		// Board information
	static const uint32 TPVERSION = 0x00000700;  // IN/OUT returns board version
	static const uint32 TPSIZE    = 0x00000702;  // IN/OUT returns TBB memory size
		// Board status
	static const uint32 TPERROR   = 0x00000703;  // IN error on TBB board
		// Board control
	static const uint32 TPCLEAR   = 0x00000710;  // OUT clear registers
	static const uint32 TPRESET   = 0x00000711;  // OUT reset to facory image
	static const uint32 TPCONFIG  = 0x00000712;  // OUT reconfigure image
		// Remote system update
	static const uint32 TPERASEF  = 0x00000720;  // OUT erase flash memory
	static const uint32 TPREADF   = 0x00000721;  // IN/OUT read flash memory
	static const uint32 TPWRITEF  = 0x00000722;  // OUT write flash memory
		// DDR2 acces
	static const uint32 TPREADW   = 0x00000730;  // IN/OUT read 64bit word from mp
	static const uint32 TPWRITEW  = 0x00000731;  // OUT write 64bit wort to mp
		// Direct register acces 
	static const uint32 TPREADR   = 0x00000740;  // IN/OUT read register(direct access), for debug purpose
	static const uint32 TPWRITER  = 0x00000741;  // OUT write register(direct access), for debug purpose
		// Alive
	static const uint32 TPALIVE   = 0x00000999;  // OUT if response board exist
PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// TP events
//

// data recording
event = {
  noheader;
  signal = ALLOC;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "pageaddr";
		type = "uint32";
	};
	param = {
		name = "pagelength";
		type = "uint32";
	};
};
  
event = {
  noheader;
  signal = FREE;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RECORD;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STOP;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

// Triggering
event = {
  noheader;
  signal = TRIGGER;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "sample";
		type = "uint32";
	};
};
  
event = {
  noheader;
  signal = TRIGCLR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

// Data reading
event = {
  noheader;
  signal = READ;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "period";
		type = "uint32";
	};
};
  

event = {
  noheader;
  signal = UDP;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "udp";
    type = "uint32[2]";
  };
	param = {
		name = "ip";
		type = "uint32[5]";
	};
	param = {
		name = "mac";
		type = "uint32[2]";
	};
};
  
// Operation and Maintenance
// Board information
event = {
  noheader;
  signal = VERSION;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
    name = "boardid";
    type = "uint32";
  };
	param = {
		name = "swversion";
		type = "uint32";
	};
	param = {
		name = "boardversion";
		type = "uint32";
	};
	param = {
		name = "tpversion";
		type = "uint32";
	};
	param = {
		name = "mp0version";
		type = "uint32";
	};
	param = {
		name = "mp1version";
		type = "uint32";
	};
	param = {
		name = "mp2version";
		type = "uint32";
	};
	param = {
		name = "mp3version";
		type = "uint32";
	};
};


event = {
  noheader;
  signal = SIZE;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "size";
    type = "uint32";
  };
};

// Board status
event = {
  noheader;
  signal = ERROR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "code";
    type = "uint32";
  };
};

// Board control
event = {
  noheader;
  signal = CLEAR;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RESET;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = CONFIG;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "image";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

// Remote system update
event  = {
  noheader;
  signal = ERASEF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "addr";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = READF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
  param = {
    name = "data";
    type = "uint32[256]";
  };
};

event  = {
  noheader;
  signal = WRITEF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "data";
		type = "uint32[256]";
	};
};

// DDR2 Access
event  = {
  noheader;
  signal = READW;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = WRITEW;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = ALIVE;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

