// -*- mode: c++ -*-//
// Protocol definition for the TBB board driver
// 
autogen definitions protocol;

description = "Protocol for the TBB driver interface";
prefix = "TP"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+15)"; 

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
//include = '<bitset>';
include = '<Common/LofarTypes.h>';

//include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END

	
	//--TP Command Opcode's-------------------------------------------------------
	//--Data Recording----------
	static const uint32 TPALLOC   	= 0x00000100;  // OUT allocate buffer space to a certain input channel
	static const uint32 TPFREE    	= 0x00000101;  // OUT free buffer settings and disable input channel 
	static const uint32 TPRECORD  	= 0x00000102;  // OUT record channel
	static const uint32 TPSTOP    	= 0x00000103;  // OUT freeze channel
	//--Triggering--------------
	static const uint32 TPTRIGGER 	= 0x00000200;  // IN trigger detected
	static const uint32 TPTRIGCLR 	= 0x00000201;  // OUT clear trigger flag
	//--Data reading------------
	static const uint32 TPREAD    	= 0x00000300;  // OUT send recorded data to CEP
	static const uint32 TPUDP     	= 0x00000301;  // OUT configure UDP and IP header
	static const uint32 TPPAGEPERIOD= 0x00000302;  // OUT time in one page 30.2 format in nsec
	//--Board information-------
	static const uint32 TPVERSION 	= 0x00000700;  // IN/OUT returns board version
	static const uint32 TPSIZE    	= 0x00000701;  // IN/OUT returns TBB memory size
	//--Board status------------
	static const uint32 TPERROR  		= 0x00000702;  // IN error on TBB board
	static const uint32 TPSTATUS 		= 0x00000703;  // IN status of board Voltage and Temperature
	static const uint32 TPALIVE  		= 0x00000704;  // OUT if response board exist
	//--Board control-----------
	static const uint32 TPCLEAR  		= 0x00000710;  // OUT clear registers
	static const uint32 TPRESET   	= 0x00000711;  // OUT reset to facory image
	static const uint32 TPCONFIG 		= 0x00000712;  // OUT reconfigure image
	//--Remote system update----
	static const uint32 TPERASEF 		= 0x00000720;  // OUT erase flash memory
	static const uint32 TPREADF  		= 0x00000721;  // IN/OUT read flash memory
	static const uint32 TPWRITEF		= 0x00000722;  // OUT write flash memory
	//--DDR2 acces--------------
	static const uint32 TPREADW			= 0x00000730;  // IN/OUT read 64bit word from mp
	static const uint32 TPWRITEW 		= 0x00000731;  // OUT write 64bit wort to mp
	//--Direct register acces--- 
	static const uint32 TPREADR  		= 0x00000740;  // IN/OUT read register(direct access), for debug purpose
	static const uint32 TPWRITER 		= 0x00000741;  // OUT write register(direct access), for debug purpose
	static const uint32 TPREADX 		= 0x00000742;  // OUT write register(direct access), for debug purpose
	
PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// TP events
//

//--data recording------------
event = {
  noheader;
  signal = ALLOC;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "pageaddr";
		type = "uint32";
	};
	param = {
		name = "pagelength";
		type = "uint32";
	};
};

event = {
  noheader;
  signal = ALLOCACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};
  
event = {
  noheader;
  signal = FREE;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = FREEACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RECORD;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RECORDACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STOP;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STOPACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

//--Triggering----------------
event = {
  noheader;
  signal = TRIGGER;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "time";
		type = "uint32";
	};
	param = {
		name = "sample";
		type = "uint32";
	};
};
  
event = {
  noheader;
  signal = TRIGCLR;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = TRIGCLRACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

//--Data reading--------------
event = {
  noheader;
  signal = READ;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
	param = {
		name = "secondstime";
		type = "uint32";
	};
	param = {
		name = "sampletime";
		type = "uint32";
	};
	param = {
		name = "prepages";
		type = "uint32";
	};
	param = {
		name = "postpages";
		type = "uint32";
	};
};

event = {
  noheader;
  signal = READACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};
  
event = {
  noheader;
  signal = UDP;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
		name = "mac";
		type = "uint32[2]";
	};
  param = {
		name = "ip";
		type = "uint32[6]";
	};
	param = {
    name = "udp";
    type = "uint32[2]";
  };
};

event = {
  noheader;
  signal = UDPACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = PAGEPERIOD;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "channel";
    type = "uint32";
  };
};  

event = {
  noheader;
  signal = PAGEPERIODACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "pageperiod";
    type = "uint32";
  };
};  
  
//--Operation and Maintenance-
event = {
  noheader;
  signal = VERSION;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = VERSIONACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
    name = "boardid";
    type = "uint32";
  };
	param = {
		name = "swversion";
		type = "uint32";
	};
	param = {
		name = "boardversion";
		type = "uint32";
	};
	param = {
		name = "tpversion";
		type = "uint32";
	};
	param = {
		name = "mp0version";
		type = "uint32";
	};
	param = {
		name = "mp1version";
		type = "uint32";
	};
	param = {
		name = "mp2version";
		type = "uint32";
	};
	param = {
		name = "mp3version";
		type = "uint32";
	};
};

event = {
  noheader;
  signal = SIZE;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = SIZEACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "npages";
    type = "uint32";
  };
};

//--Board status--------------
event = {
  noheader;
  signal = ERROR;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "code";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STATUS;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = STATUSACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "Tmp3";
    type = "uint32";
  };
  param = {
    name = "Tmp2";
    type = "uint32";
  };
  param = {
    name = "Tmp1";
    type = "uint32";
  };
  param = {
    name = "Tmp0";
    type = "uint32";
  };
  param = {
    name = "Ttp";
    type = "uint32";
  };
  param = {
    name = "Tpcb";
    type = "uint32";
  };
  param = {
    name = "V33";
    type = "uint32";
  };
  param = {
    name = "V25";
    type = "uint32";
  };
  param = {
    name = "V12";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = ALIVE;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = ALIVEACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "resetflag";
    type = "uint32";
  };
};

//--Board control-------------
event = {
  noheader;
  signal = CLEAR;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = CLEARACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RESET;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = RESETACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = CONFIG;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "imagenr";
    type = "uint32";
  };
};

event = {
  noheader;
  signal = CONFIGACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

//--Remote system update------
event  = {
  noheader;
  signal = ERASEF;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "addr";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = ERASEFACK;
  dir = INOUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = READF;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = READFACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
  param = {
    name = "data";
    type = "uint32[256]";
  };
};

event  = {
  noheader;
  signal = WRITEF;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "data";
		type = "uint32[256]";
	};
};

event  = {
  noheader;
  signal = WRITEFACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

//--DDR2 Access---------------
event  = {
  noheader;
  signal = READW;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = READWACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = WRITEW;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "addr";
		type = "uint32";
	};
	param = {
		name = "wordlo";
		type = "uint32";
	};
	param = {
		name = "wordhi";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = WRITEWACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

//--Direct register access-----
event  = {
  noheader;
  signal = READR;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "pid";
		type = "uint32";
	};
	param = {
		name = "regid";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = READRACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "data";
		type = "uint32[256]";
	};
};

event  = {
  noheader;
  signal = WRITER;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "pid";
		type = "uint32";
	};
	param = {
		name = "regid";
		type = "uint32";
	};
	param = {
		name = "data";
		type = "uint32[3]";
	};
};

event  = {
  noheader;
  signal = WRITERACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
};

event  = {
  noheader;
  signal = READX;
  dir = OUT;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "mp";
		type = "uint32";
	};
	param = {
		name = "pid";
		type = "uint32";
	};
	param = {
		name = "regid";
		type = "uint32";
	};
	param = {
		name = "pagelength";
		type = "uint32";
	};
	param = {
		name = "pageaddr";
		type = "uint32";
	};
};

event  = {
  noheader;
  signal = READXACK;
  dir = IN;
  param = {
    name = "opcode";
    type = "uint32";
  };
  param = {
    name = "status";
    type = "uint32";
  };
	param = {
		name = "pagedata";
		type = "uint32[256]";
	};
};
