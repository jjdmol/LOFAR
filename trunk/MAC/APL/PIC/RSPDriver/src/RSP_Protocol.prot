//
// Protocol definition for the RSP driver interface
//
autogen definitions protocol;

description = "Protocol for the RSP driver interface";
prefix = "RSP"; // for the signal names
id = "(F_APL_PROTOCOL+12)";

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<bitset>';
include = '<Common/LofarTypes.h>';

include = '"Timestamp.h"';
include = '"BeamletWeights.h"';
include = '"SubbandSelection.h"';
include = '"RCUSettings.h"';
include = '"WGSettings.h"';
include = '"SystemStatus.h"';
include = '"Statistics.h"';
include = '"Versions.h"';

prelude = << PRELUDE_END

namespace RSP_Protocol
{
    static const int N_RCUBITS = 256;
    static const int SUCCESS = 1;
    static const int FAILTURE = 0;
};

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// Beam-former Weights
//
event = {
    signal = SETWEIGHTS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "weights";
	type = "BeamletWeights";
	userdefined;
    };
};

event = {
    signal = SETWEIGHTSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
};

event = {
    signal = GETWEIGHTS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "cache";
	type = "bool";
    };
};

event = {
    signal = GETWEIGHTSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "weights";
	type = "BeamletWeights";
	userdefined;
    };
};    

//
// Subband Selection
//
event = {
    signal = SETSUBBANDS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "subbands";
	type = "SubbandSelection";
	userdefined;
    };
};

event = {
    signal = SETSUBBANDSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
};

event = {
    signal = GETSUBBANDS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "cache";
	type = "bool";
    };
};

event = {
    signal = GETSUBBANDSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "subbands";
	type = "SubbandSelection";
	userdefined;
    };
};

//
// RCU Control
//
event = {
    signal = SETRCU;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "settings";
	type = "RCUSettings";
	userdefined;
    };
};

event = {
    signal = SETRCUACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
};

event = {
    signal = GETRCU;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "cache";
	type = "bool";
    };
};

event = {
    signal = GETRCUACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "settings";
	type = "RCUSettings";
	userdefined;
    };
};

//
// Waveform Generator
//
event = {
    signal = SETWG;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "settings";
	type = "WGSettings";
	userdefined;
    };
};

event = {
    signal = SETWGACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
};

event = {
    signal = GETWG;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "cache";
	type = "bool";
    };
};

event = {
    signal = GETWGACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "settings";
	type = "WGSettings";
	userdefined;
    };
};

event = {
    signal = SUBSTATUS;
    dir = IN;
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "period";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = SUBSTATUSACK;
    dir = OUT; 
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UNSUBSTATUS;
    dir = IN;
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UNSUBSTATUSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UPDSTATUS;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
    param = {
	name = "sysstatus";
	type = "SystemStatus";
    };
};

event = {
    signal = GETSTATUS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
};

event = {
    signal = GETSTATUSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "sysstatus";
	type = "SystemStatus";
    };
};    

event = {
    signal = SUBSTATS;
    dir = IN;
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "period";
	type = "int16";
    };
    param = {
	name = "type";
	type = "uint8";
    };
    param = {
	name = "reduction";
	type = "StatsReduction";
    };
};

event = {
    signal = SUBSTATSACK;
    dir = OUT; 
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UNSUBSTATS;
    dir = IN;
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UNSUBSTATSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
};

event = {
    signal = UPDSTATS;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "handle";
	type = "uint32";
    };
    param = {
	name = "stats";
	type = "Statistics";
    };
};

event = {
    signal = GETSTATS;
    dir = IN;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "rcumask";
	type = "std::bitset<N_RCUBITS>";
    };
    param = {
	name = "type";
	type = "uint8";
    };
    param = {
	name = "reduction";
	type = "StatsReduction";
    };
};

event = {
    signal = GETSTATSACK;
    dir = OUT;
    param = {
	name = "timestamp";
	type = "Timestamp";
	userdefined;
    };
    param = {
	name = "status";
	type = "int16";
    };
    param = {
	name = "stats";
	type = "Statistics";
    };
};    
    
