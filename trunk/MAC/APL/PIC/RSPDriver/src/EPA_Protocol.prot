//
// Protocol definition for the EPA Demonstrator Board
//
autogen definitions protocol;

description = "Protocol for the EPA Demonstrator Board";
prefix = "EPA"; // for the signal names
id = "(F_APL_PROTOCOL+11)";

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<Common/LofarTypes.h>';
include = '"MEPHeader.h"';

prelude = << PRELUDE_END

/**
 * Protocol constants.
 */
namespace EPA_Protocol
{
  /**
   * Number of Antenna processors and Beamlet processors.
   */
  /*@{*/
  static const int N_AP  = 4;
  static const int N_BLP = N_AP*2;
  /*@}*/
};

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//

event = {
  signal = RSPSTATUS;
  dir = OUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
  param = {
    name = "rsp";
    type = "uint16";
  };
  param = {
    name = "ap";
    type = "uint16 [N_AP]";
  };
  param = {
    name = "blp";
    type = "uint8[N_BLP]";
  };
  param = {
    name = "eth";
    type = "uint32";
  };
};

event = {
  signal = TEST;
  dir = IN;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
  param = {
    name = "test";
    type = "uint8";
  };
};

event = {
  signal = RESET;
  dir = IN;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = REPROGRAM;
  dir = IN;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = WGSETTINGS;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = WGUSER;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = NRSUBBANDS;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = SUBBANDSELECT;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = BFXRE;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = BFXIM;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = BFYRE;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = BFYIM;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = MEAN;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = POWER;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
};

event = {
  signal = RCUSETTINGS;
  dir = INOUT;
  param = {
    name = "mep";
    type = "RSP_Protocol::MEPHeader";
    userdefined;
  };
  param = {
    name = "x";
    type = "uint8";
  };
  param = {
    name = "y";
    type = "uint8";
  };
};


	    
	    
