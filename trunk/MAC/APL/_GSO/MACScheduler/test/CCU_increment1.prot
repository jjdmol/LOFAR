//-------------------------------------------------------------
//    SAS PROTOCOL SPECIFICATION for TestHarness
//    BeamServer PROTOCOL SPECIFICATION for TestHarness
//    version April 1, 2005 
//
//    This file contains a computer readable interpretation of
//    the SAS and BeamServer protocols for Lofar
//
//    This file is intended to be used as an input file for the
//    AutoTest Script Engine. It is not a formal definition of 
//    The SAS and BeamServer protocols: 
//
//    Change track:
//    ==========================================================
//    April 1, 2005  : Initial release, 
//                     Robert Blaakmeer
//
//    ==========================================================
//    Notes:
//    The following diagram shows the connections between the 
//    Test engine and Lofar
//     ____________                                    _________________
//    |Testengine  |                                  | Lofar           |
//    |            |                                  | apps            |
//    |   _________|_    SAS Protocol                _|___________      |
//    |  | SAS stub  |----------------------------->|MACScheduler |     |
//    |  |___________|<-----------------------------|_____________|     |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |   _________|_    BeamServer Protocol         _|______________   |
//    |  | BS stub   |<-----------------------------|VirtualTelescope|  |
//    |  |___________|----------------------------->|________________|  |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |   _________|_    StartDaemon Protocol        _|_______________  |
//    |  | VBSD stub |<-----------------------------|VirtualInstrument| |
//    |  |___________|----------------------------->|_________________| |
//    |            |                                  |                 |
//    |   _________|_    LogicalDevice Protocol      _|_______________  |
//    |  | VB stub   |<-----------------------------|VirtualInstrument| |
//    |  |___________|----------------------------->|_________________| |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |            |                                  |                 |
//    |____________|                                  |_________________|
//                   
//    This file contains four sections:
//    [io]        : I/O configuration
//    [type]      : type definitions
//    [functions] : Messages sent to the Device under Test (DUT)
//    [events]    : Messages received from the DuT.
//
//    The format of each section is explained in brief in the
//    beginning of each section.

[io]
COM1 = { SOCKET, ccc, "client saturnus 27000" } // MACScheduler
COM2 = { SOCKET, ccc, "server saturnus 27001" } // BeamServer
COM3 = { SOCKET, ccc, "server saturnus 27002" } // VBStartDaemon
COM4 = { SOCKET, ccc, "client saturnus 27003" } // VirtualBackend
COM5 = { SOCKET, ccc, "client saturnus 26999" } // THPVSSBridge

// For serial ports: COM1 = { COM1, ccc , "Baud=1200 parity=N data=8 stop=1 octs=on" }

#define PADDING        0x00

[type]

//    A type has a number of parameters: the first parameter
//    defines the size in bytes. If there is a second and third
//    parameter, these define the lower and upper limit.
//
//    If there is a fourth parameter, it can be a string
//    with the following meanings:
//    TIME          : Parameters of this type reflect a certain
//                    time(span)
//    ENUM          : Parameters of this type have a value with
//                    an enumerated meaning.
//    BITFIELD      : Parameters of this type are bitmap para-
//                    meters.
//    ASCII_0       : Field contains zero-terminated ASCII data.
//                    Field is fixed-sized, but bytes following
//                    the 0-byte are undefined and not checked.
//    UNICODE_0     : Field contains zero-terminated UNICODE
//                    data.
//    ASCII         : Field contains non-terminated ASCII data.

//
//    The meaning of the remaining parameters depends of this
//    string:
//    TIME          : Has one additional parameter, which is
//                    a float. This float indicates the time in
//                    seconds intended of one unit.
//    ENUM          : A list of additional parameters exists.
//                    This list is intended to be self-explaining.
//    BITFIELD      : A list of additional parameters exists.
//                    If the bitfield is denoted as
//                    (0xXXXX,0xXXXX), the first bitfield is
//                    a mask, the second bitfield defines the
//                    bits.


//    First a small list of general purpose types is defined.
//    Default type is interpreted as "Big endian"

t_B1                  = {   1 }
t_B2                  = {   2 }
t_B3                  = {   3 }
t_B4                  = {   4 }
t_B6                  = {   6 }
t_B8                  = {   8 }
t_B16                 = {  16 }

//    The remaining Lofar types:

t_uShort              =  {   2 }
t_Double              =  {   8 }
t_Int                 =  {   4 }
t_uInt                =  {   4 }
t_Long                =  {   4 }
t_uLong               =  {   4 }
t_String              = -{65535-, ASCII } // (-) indicates little endian
t_String50            = -{  50, ASCII_0 } // (-) indicates little endian; strings are padded with \0

//
// NOTE: String workaround. The current version of the TestHarness for Lofar
// has no native support for strings as used by Lofar. Lofar expects a string
// to be prefixed by a 32 bit number that defines the length of the string that
// follows. The TestHarness only supports 0-terminated strings and fixed size strings
// with length prefixes. 
// This protocol uses 0-terminated strings with a maximum length of 50 characters
// It is possible to send less characters, but the total string length remains 50
// characters and is padded with \0 characters.
// The string is prepended with a constant indicating the length of the string
// For example:
//   noOfChars                   : t_B4,
//   VIrootID                    : t_String[ noOfChars ]
//

// SAS enums
t_SAS_Result          = { 4, 0x00000000, 0x0000000E, ENUM,
                             0x00000000 : "NO_ERROR", 
                             0x00000001 : "ERROR_UNSPECIFIED", 
                             0x00000002 : "ERROR_VI_NOT_FOUND", 
                             0x00000003 : "ERROR_PARAMETERNOTFOUND",
                             0x00000004 : "ERROR_INCORRECT_NUMBER_OF_PARAMETERS",
                             0x00000005 : "ERROR_UNKNOWN_COMMAND",
                             0x00000006 : "ERROR_DISABLED",
                             0x00000007 : "ERROR_LOW_QUALITY",
                             0x00000008 : "ERROR_TIMING_FAILURE",
                             0x00000009 : "ERROR_WRONG_VERSION",
                             0x0000000A : "ERROR_UNSUPPORTED_LD",
                             0x0000000B : "ERROR_LD_NOT_FOUND",
                             0x0000000C : "ERROR_WRONG_STATE",
                             0x0000000D : "ERROR_SHUTDOWN",
                             0x0000000E : "ERROR_ALREADY_EXISTS"
                       }

// ABS enums
t_ABS_Result          = { 4, 0x00000000, 0x00000003, ENUM,
                             0x00000000 : "SUCCESS",
                             0x00000001 : "ERR_RANGE",
                             0x00000002 : "ERR_BEAMALLOC",
                             0x00000003 : "ERR_BEAMFREE"
                       }

// LOGICALDEVICE enums
t_LD_Result           = { 4, 0x00000000, 0x00000006, ENUM,
                             0x00000000 : "NO_ERROR",
                             0x00000001 : "UNSPECIFIED",
                             0x00000002 : "FILENOTFOUND",
                             0x00000003 : "INCORRECT_NUMBER_OF_PARAMETERS",
                             0x00000004 : "UNKNOWN_COMMAND",
                             0x00000005 : "DISABLED",
                             0x00000006 : "LOW_QUALITY"
                       }

t_SD_LogicalDeviceTypes = { 4, 0x00000001, 0x00000007, ENUM,
                               0x00000001 : "VIRTUALINSTRUMENT",
                               0x00000002 : "VIRTUALTELESCOPE", 
                               0x00000003 : "VIRTUALARRAY", 
                               0x00000004 : "STATIONRECEPTORGROUP", 
                               0x00000005 : "ARRAYOPERATIONS", 
                               0x00000006 : "STATIONOPERATIONS", 
                               0x00000007 : "VIRTUALBACKEND"
                       }

t_SD_Result             = { 4, 0x00000000, 0x0000000B, ENUM,
                               0x00000000 : "NO_ERROR",
                               0x00000001 : "UNSPECIFIED_ERROR", 
                               0x00000002 : "UNSUPPORTED_LD", 
                               0x00000003 : "FILENOTFOUND",
                               0x00000004 : "PARAMETERNOTFOUND",
                               0x00000005 : "INCORRECT_NUMBER_OF_PARAMETERS",
                               0x00000006 : "UNKNOWN_COMMAND",
                               0x00000007 : "ALREADY_EXISTS",
                               0x00000008 : "LD_NOT_FOUND",
                               0x00000009 : "WRONG_STATE",
                               0x0000000A : "SHUTDOWN",
                               0x0000000B : "WRONG_VERSION"
                          }

t_GCF_PSCategory        = { 4, 0x00000000, 0x00000002, ENUM,
                               0x00000000 : "PS_CAT_TEMPORARY",
                               0x00000001 : "PS_CAT_PERMANENT", 
                               0x00000002 : "PS_CAT_PERM_AUTOLOAD"
                          }
                          
t_GCF_Result            = { 4, 0x00000000, 0x00000015, ENUM,
                               0x00000000 : "GCF_NO_ERROR", 
                               0x00000001 : "GCF_UNKNOWN_ERROR",
                               0x00000002 : "GCF_PML_ERROR", 
                               0x00000003 : "GCF_EXTPS_LOAD_ERROR",
                               0x00000004 : "GCF_PS_CONFIGURE_ERROR",
                               0x00000005 : "GCF_EXTPS_UNLOAD_ERROR",
                               0x00000006 : "GCF_MYPS_ENABLE_ERROR",
                               0x00000007 : "GCF_MYPS_DISABLE_ERROR",
                               0x00000008 : "GCF_VALUESTRING_NOT_VALID",
                               0x00000009 : "GCF_DIFFERENT_TYPES",
                               0x0000000A : "GCF_BUSY",
                               0x0000000B : "GCF_ALREADY_LOADED",
                               0x0000000C : "GCF_NOT_LOADED",
                               0x0000000D : "GCF_PROP_NOT_VALID",
                               0x0000000E : "GCF_PROP_WRONG_TYPE",
                               0x0000000F : "GCF_PROP_NOT_IN_SET",
                               0x00000010 : "GCF_NO_PROPER_DATA",
                               0x00000011 : "GCF_SCOPE_ALREADY_REG",
                               0x00000012 : "GCF_ALREADY_SUBSCRIBED",
                               0x00000013 : "GCF_NOT_SUBSCRIBED",
                               0x00000014 : "GCF_WRONG_STATE",
                               0x00000015 : "GCF_PVSS_ERROR"
                          }
                          
//
// Signal ID's
//
// SAS Protocol
// 
// 0x01   SCHEDULE
// 0x02   UPDATESCHEDULE
// 0x03   CANCELSCHEDULE
// 0x04   RESPONSE
// 0x05   REPLACEMENTREQUEST
//
// ABS Protocol
//
// 0x01   BEAMALLOC
// 0x02   BEAMALLOC_ACK
// 0x03   BEAMFREE
// 0x04   BEAMFREE_ACK
// 0x05   BEAMPOINTTO
// 0x06   WGSETTINGS
// 0x07   WGSETTINGS_ACK
// 0x08   WGENABLE
// 0x09   WGDISABLE
//
// LOGICALDEVICE Protocol
//
//  0x01  CONNECT
//  0x02  CONNECTED
//  0x03  SCHEDULE
//  0x04  SCHEDULED
//  0x05  CANCELSCHEDULE
//  0x06  SCHEDULECANCELLED
//  0x07  CLAIM
//  0x08  CLAIMED
//  0x09  PREPARE
//  0x0A  PREPARED
//  0x0B  RESUME
//  0x0C  RESUMED
//  0x0D  SUSPEND
//  0x0E  SUSPENDED
//  0x0F  RELEASE
//  0x10  RELEASED
//
// STARTDAEMON Protocol
//
//  0x01  SCHEDULE
//  0x02  SCHEDULED
//  0x03  STOP
//
// direction and protocol definitions:
//
//                      IN    OUT   INOUT
//  SAS (MACScheduler)  0x4D  0x8D  0xCD
//  ABS (BeamServer)    0x54  0x94  0xD4
//  LD  (VB)            0x4B  0x8B  0xCB
//  SD  (VBSD)          0x4C  0x8C  0xCC
//  PVSS                0x4E  0x8E  0xCE
//

[functions]
// -------------------------------------------------------------------
// -------------------------------SAS_Protocol------------------------
// -------------------------------------------------------------------
F_SAS_SCHEDULE = 
{ 
  0x01, // signal Id
  0x4D, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  VIrootID                    : t_String[ noOfChars ]
  VIrootID                    : t_String50
}

F_SAS_UPDATESCHEDULE = 
{ 
  0x02, // signal Id
  0x4D, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  VIrootID                    : t_String[ noOfChars ]
  VIrootID                    : t_String50
}

F_SAS_CANCELSCHEDULE = 
{ 
  0x03, // signal Id
  0x4D, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  VIrootID                    : t_String[ noOfChars ]
  VIrootID                    : t_String50
}

// -------------------------------------------------------------------
// -------------------------------ABS_Protocol------------------------
// -------------------------------------------------------------------
F_ABS_BEAMALLOC_ACK = 
{ 
  0x02, // signal Id
  0x94, // Direction and protocol
  0x08000000, // message payload length, big endian
  handle                      : t_Int,
  status                      : t_ABS_Result
}

F_ABS_BEAMFREE_ACK = 
{ 
  0x04, // signal Id
  0x94, // Direction and protocol
  0x08000000, // message payload length, big endian
  handle                      : t_Int,
  status                      : t_ABS_Result
}

F_ABS_WGSETTINGS_ACK = 
{ 
  0x07, // signal Id
  0x94, // Direction and protocol
  0x04000000, // message payload length, big endian
  status                      : t_ABS_Result
}

// -------------------------------------------------------------------
// ---------------------LOGICALDEVICE_Protocol------------------------
// -------------------------------------------------------------------
F_LOGICALDEVICE_CONNECT =
{ 
  0x01, // signal Id
  0x4B, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  nodeId 		                  : t_String[ noOfChars ]
  nodeId 		                  : t_String50
}

F_LOGICALDEVICE_SCHEDULED =
{
  0x04, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

F_LOGICALDEVICE_SCHEDULECANCELLED =
{
  0x06, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

F_LOGICALDEVICE_CLAIMED =
{
  0x08, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
} 

F_LOGICALDEVICE_PREPARED =
{
  0x0A, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
} 

F_LOGICALDEVICE_RESUMED =
{
  0x0C, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

F_LOGICALDEVICE_SUSPENDED =
{
  0x0E, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

F_LOGICALDEVICE_RELEASED =
{
  0x10, // signal Id
  0x4B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

// -------------------------------------------------------------------
// ---------------------STARTDAEMON_Protocol------------------------
// -------------------------------------------------------------------
F_STARTDAEMON_SCHEDULED =
{
  0x02, // signal Id
  0x8C, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  result                      : t_SD_Result,
  noOfChars                   : t_B4,
//  viRootId 		                : t_String[ noOfChars ]
  viRootId 		                : t_String50
}

// -------------------------------------------------------------------
// -------------------------------THPVSSBridge_Protocol------------------------
// -------------------------------------------------------------------
F_PVSS_ENABLE_MY_PROPERTY_SET = 
{ 
  0x01, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  type    		                : t_String[ noOfChars2 ],
  type    		                : t_String50,
  category                    : t_GCF_PSCategory
}

F_PVSS_DISABLE_MY_PROPERTY_SET = 
{ 
  0x03, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ]
  scope    		                : t_String50
}

F_PVSS_MY_GET_VALUE = 
{ 
  0x05, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

F_PVSS_MY_SET_VALUE = 
{ 
  0x07, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ],
  property 		                : t_String50,
  noOfChars3                  : t_B4,
//  value   		                : t_String[ noOfChars3 ]
  value   		                : t_String50
}

F_PVSS_LOAD_EXT_PROPERTY_SET = 
{ 
  0x09, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  type		 		                : t_String[ noOfChars2 ]
  type		 		                : t_String50
}

F_PVSS_UNLOAD_EXT_PROPERTY_SET = 
{ 
  0x0B, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ]
  scope    		                : t_String50
}

F_PVSS_SUBSCRIBE_EXT_PROPERTY = 
{ 
  0x0D, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

F_PVSS_UNSUBSCRIBE_EXT_PROPERTY = 
{ 
  0x0F, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

F_PVSS_EXT_GET_VALUE = 
{ 
  0x11, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

F_PVSS_EXT_SET_VALUE = 
{ 
  0x13, // signal Id
  0x4E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope    		                : t_String[ noOfChars ],
  scope    		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ],
  property 		                : t_String50,
  noOfChars3                  : t_B4,
//  value		 		                : t_String[ noOfChars3 ]
  value		 		                : t_String50
}

[events]
// -------------------------------------------------------------------
// -------------------------------SAS_Protocol------------------------
// -------------------------------------------------------------------
E_SAS_RESPONSE = 
{ 
  0x04, // signal Id 
  0x8D, // Direction and protocol 
  msgLen                      : t_B4, // message payload length, big endian
  result                      : t_SAS_Result,
  noOfChars                   : t_B4,
//  nodeID   		                : t_String[ noOfChars ]
  nodeID   		                : t_String50
}

E_SAS_REPLACEMENT_REQUEST = 
{ 
  0x05, // signal Id 
  0x8D, // Direction and protocol 
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  nodeID   		                : t_String[ noOfChars ]
  nodeID   		                : t_String50
}

// -------------------------------------------------------------------
// -------------------------------ABS_Protocol------------------------
// -------------------------------------------------------------------
E_ABS_BEAMALLOC = 
{ 
  0x01, // signal Id
  0x54, // Direction and protocol
  0x08020000, // message payload length, big endian
  spectral_window             : t_Int,
  n_subbands                  : t_Int,
  // the subbands array has a length of 128 integers
  subband1    : t_Int, subband2    : t_Int, subband3    : t_Int, subband4    : t_Int, 
  subband5    : t_Int, subband6    : t_Int, subband7    : t_Int, subband8    : t_Int, 
  subband9    : t_Int, subband10   : t_Int, subband11   : t_Int, subband12   : t_Int, 
  subband13   : t_Int, subband14   : t_Int, subband15   : t_Int, subband16   : t_Int, 
  subband17   : t_Int, subband18   : t_Int, subband19   : t_Int, subband20   : t_Int, 
  subband21   : t_Int, subband22   : t_Int, subband23   : t_Int, subband24   : t_Int, 
  subband25   : t_Int, subband26   : t_Int, subband27   : t_Int, subband28   : t_Int, 
  subband29   : t_Int, subband30   : t_Int, subband31   : t_Int, subband32   : t_Int, 
  subband33   : t_Int, subband34   : t_Int, subband35   : t_Int, subband36   : t_Int, 
  subband37   : t_Int, subband38   : t_Int, subband39   : t_Int, subband40   : t_Int, 
  subband41   : t_Int, subband42   : t_Int, subband43   : t_Int, subband44   : t_Int, 
  subband45   : t_Int, subband46   : t_Int, subband47   : t_Int, subband48   : t_Int, 
  subband49   : t_Int, subband50   : t_Int, subband51   : t_Int, subband52   : t_Int, 
  subband53   : t_Int, subband54   : t_Int, subband55   : t_Int, subband56   : t_Int, 
  subband57   : t_Int, subband58   : t_Int, subband59   : t_Int, subband60   : t_Int, 
  subband61   : t_Int, subband62   : t_Int, subband63   : t_Int, subband64   : t_Int, 
  subband65   : t_Int, subband66   : t_Int, subband67   : t_Int, subband68   : t_Int, 
  subband69   : t_Int, subband70   : t_Int, subband71   : t_Int, subband72   : t_Int, 
  subband73   : t_Int, subband74   : t_Int, subband75   : t_Int, subband76   : t_Int, 
  subband77   : t_Int, subband78   : t_Int, subband79   : t_Int, subband80   : t_Int, 
  subband81   : t_Int, subband82   : t_Int, subband83   : t_Int, subband84   : t_Int, 
  subband85   : t_Int, subband86   : t_Int, subband87   : t_Int, subband88   : t_Int, 
  subband89   : t_Int, subband90   : t_Int, subband91   : t_Int, subband92   : t_Int, 
  subband93   : t_Int, subband94   : t_Int, subband95   : t_Int, subband96   : t_Int, 
  subband97   : t_Int, subband98   : t_Int, subband99   : t_Int, subband100  : t_Int, 
  subband101  : t_Int, subband102  : t_Int, subband103  : t_Int, subband104  : t_Int, 
  subband105  : t_Int, subband106  : t_Int, subband107  : t_Int, subband108  : t_Int, 
  subband109  : t_Int, subband110  : t_Int, subband111  : t_Int, subband112  : t_Int, 
  subband113  : t_Int, subband114  : t_Int, subband115  : t_Int, subband116  : t_Int, 
  subband117  : t_Int, subband118  : t_Int, subband119  : t_Int, subband120  : t_Int, 
  subband121  : t_Int, subband122  : t_Int, subband123  : t_Int, subband124  : t_Int, 
  subband125  : t_Int, subband126  : t_Int, subband127  : t_Int, subband128  : t_Int
}

E_ABS_BEAMFREE = 
{ 
  0x03, // signal Id
  0x54, // Direction and protocol
  0x04000000, // message payload length, big endian
  handle                      : t_Int
}

E_ABS_BEAMPOINTTO = 
{ 
  0x05, // signal Id
  0x54, // Direction and protocol
  0x1C000000, // message payload length, big endian
  handle                      : t_Int,
  time                        : t_Int,
  type                        : t_Int,
  angle1                      : t_Double,
  angle2                      : t_Double
}

E_ABS_WGSETTINGS = 
{ 
  0x06, // signal Id
  0x54, // Direction and protocol
  0x0C000000, // message payload length, big endian
  frequency                   : t_Double,
  amplitude                   : t_uShort
}

E_ABS_WGENABLE = 
{ 
  0x08, // signal Id
  0x54, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_ABS_WGDISABLE = 
{ 
  0x09, // signal Id
  0x54, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

// -------------------------------------------------------------------
// ---------------------LOGICALDEVICE_Protocol------------------------
// -------------------------------------------------------------------
E_LOGICALDEVICE_CONNECTED =
{
  0x02, // signal Id
  0x8B, // Direction and protocol
  0x04000000, // message payload length, big endian
  result                    : t_LD_Result
}

E_LOGICALDEVICE_SCHEDULE =
{
  0x03, // signal Id
  0x8B, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  filename 		                : t_String[ noOfChars ]
  filename 		                : t_String50
}

E_LOGICALDEVICE_CANCELSCHEDULE =
{
  0x05, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_LOGICALDEVICE_CLAIM =
{
  0x07, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_LOGICALDEVICE_PREPARE =
{
  0x09, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_LOGICALDEVICE_RESUME =
{
  0x0B, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_LOGICALDEVICE_SUSPEND =
{
  0x0D, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

E_LOGICALDEVICE_RELEASE =
{
  0x0F, // signal Id
  0x8B, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}

// -------------------------------------------------------------------
// ---------------------STARTDAEMON_Protocol------------------------
// -------------------------------------------------------------------
// If a parameter name is followed by an asterisk,
//    (*), that parameter is used as the array size of the
//    parameters which have a type followed by [].
//
E_STARTDAEMON_SCHEDULE =
{
  0x01, // signal Id
  0x4C, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  logicalDeviceType           : t_SD_LogicalDeviceTypes,
  noOfChars                   : t_B4,
//  taskName 		                : t_String[ noOfChars ],
  taskName 		                : t_String50,
  noOfChars2                  : t_B4,
//  fileName 		                : t_String[ noOfChars2 ]
  fileName 		                : t_String50
}

E_STARTDAEMON_STOP =
{
  0x03, // signal Id
  0x4C, // Direction and protocol
  msglength : t_B4 //0x00000000 // message payload length, big endian
}


// -------------------------------------------------------------------
// -------------------------------THPVSSBridge_Protocol------------------------
// -------------------------------------------------------------------
E_PVSS_ENABLE_MY_PROPERTY_SET_RESPONSE = 
{ 
  0x02, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ]
  scope		 		                : t_String50
}

E_PVSS_DISABLE_MY_PROPERTY_SET_RESPONSE = 
{ 
  0x04, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ]
  scope		 		                : t_String50
}

E_PVSS_MY_GET_VALUE_RESPONSE = 
{ 
  0x06, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ],
  property 		                : t_String50,
  noOfChars3                  : t_B4,
//  value		 		                : t_String[ noOfChars3 ]
  value		 		                : t_String50
}

E_PVSS_MY_SET_VALUE_RESPONSE = 
{ 
  0x08, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

E_PVSS_LOAD_EXT_PROPERTY_SET_RESPONSE = 
{ 
  0x0A, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ]
  scope		 		                : t_String50
}

E_PVSS_UNLOAD_EXT_PROPERTY_SET_RESPONSE = 
{ 
  0x0C, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ]
  scope		 		                : t_String50
}

E_PVSS_SUBSCRIBE_EXT_PROPERTY_RESPONSE = 
{ 
  0x0E, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

E_PVSS_UNSUBSCRIBE_EXT_PROPERTY_RESPONSE = 
{ 
  0x10, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

E_PVSS_EXT_GET_VALUE_RESPONSE = 
{ 
  0x12, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ],
  property 		                : t_String50,
  noOfChars3                  : t_B4,
//  value		 		                : t_String[ noOfChars3 ]
  value		 		                : t_String50
}

E_PVSS_EXT_SET_VALUE_RESPONSE = 
{ 
  0x14, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  response                    : t_GCF_Result,
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ]
  property 		                : t_String50
}

E_PVSS_VALUE_CHANGE_RESPONSE = 
{ 
  0x15, // signal Id
  0x8E, // Direction and protocol
  msgLength                   : t_B4, // message payload length. Depends on string length
  noOfChars                   : t_B4,
//  scope		 		                : t_String[ noOfChars ],
  scope		 		                : t_String50,
  noOfChars2                  : t_B4,
//  property 		                : t_String[ noOfChars2 ],
  property 		                : t_String50,
  noOfChars3                  : t_B4,
//  value		 		                : t_String[ noOfChars3 ]
  value		 		                : t_String50
}

