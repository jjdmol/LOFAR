//
//  CCU_increment1.btsw: Testscript for increment 1 of the CCU software.
//
//  Copyright (C) 2005
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
// ------------------------------------------------------------------------------
// Description:
//
//
//
// ------------------------------------------------------------------------------

[statemachines]

Statemachine_MACScheduler (ready, stopBeamServer, bs_alloc_ack, bs_pointto_ack) =
{
  s000  : SAS_SCHEDULE ( "VI1.ps" )                             ; s010.
  s010  : SAS_RESPONSE ( 0x00000000 )                           ; s020.
  s020  : R_SIG ( bs_alloc_ack )                                ; s100.
  s020  : TIMER(30)																							; timeout.

  s100  : SAS_CANCELSCHEDULE ( "VI1.ps" )                       ; s110.
  s110  : SAS_RESPONSE ( 0x00000000 )                           ; s200.

  s200  : SAS_SCHEDULE ( "VI2.ps" )                             ; s210.
  s210  : SAS_RESPONSE ( 0x00000000 )                           ; s220.
  s220  : R_SIG ( bs_alloc_ack )                                ; s300.
  s220  : TIMER(30)																							; timeout.

  s300  : SAS_UPDATESCHEDULE ( "VI1.ps" )                       ; s310.
  s310  : SAS_RESPONSE ( 0x00000000 )                           ; s320.
  s320  : R_SIG ( bs_alloc_ack )                                ; finish.
  s320  : TIMER(30)																							; timeout.

  finish : S_SIG ( ready )
           S_SIG ( stopBeamServer )                             ; OK.
  OK     : TIMER(60)																						; OK.

  timeout : TERMINATE ; timeout.
  error   : TERMINATE ; error.
}

Statemachine_BeamServer  ( stop, bs_alloc_ack, bs_pointto_ack ) =
{
VAR handle.

  s000   : ABS_BEAMALLOC (, ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,,, ,,,,,,,,,, 
                            ,,,,,,,,)                           ; s010.
  s000   : ABS_BEAMFREE  ( handle )                             ; s020.
  s000   : ABS_BEAMPOINTTO (,,,,)                               ; s030.
  s000   : ABS_WGSETTINGS (,)                                   ; s040.
  s000   : ABS_WGENABLE                                         ; s000.
  s000   : ABS_WGDISABLE                                        ; s000.
  s000   : R_SIG( stop )                                        ; finish.
  
  s010   : S_SIG( bs_alloc_ack )
           ABS_BEAMALLOC_ACK ( 0x00000001, 0x00000000 )         ; s000.
  
  s020   : ABS_BEAMFREE_ACK ( handle, 0x00000000 )              ; s000.
  
  s030   : S_SIG( bs_pointto_ack )                              ; s000.

  s040   : ABS_WGSETTINGS_ACK ( 0x00000000 )                    ; s000.

  finish : TERMINATE ; finish.
}

WaitUntilTestEnd (SM1_ready) =
{
  s010   :   R_SIG (SM1_ready)                                  ; finish.
  finish : TERMINATE ; finish.
}

[testscript]
VAR     SM1_done, SM2_stop, bs_alloc_ack, bs_pointto_ack.

COM1 :  Statemachine_MACScheduler (SM1_done, SM2_stop, bs_alloc_ack, bs_pointto_ack)
        WaitUntilTestEnd (SM1_done).

COM2 :  Statemachine_BeamServer   (SM2_stop, bs_alloc_ack, bs_pointto_ack).
