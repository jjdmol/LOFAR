
//
//  MACall.tseprot: All mac Protocols for TSE
//
//  Copyright (C) 2005
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//  
//  You should have received a copy of the GNU Lesser General Public
//  License along with This program; if not, write to:
//             The Free Software Foundation, Inc.,
//             59 Temple Place - Suite 330,
//             Boston,  MA  02111-1307, USA.
//
//  $Id$
//

//    This file contains three sections:
//    [type]      : type definitions
//    [functions] : Messages sent to the Device under Test (DUT)
//    [events]    : Messages received from the DuT.
//
//    The format of each section is explained in brief in the
//    beginning of each section.
//========================================================================

[type]

//    A type has a number of parameters: the first parameter
//    defines the size in bytes. If there is a second and third
//    parameter, these define the lower and upper limit.
//
//    If there is a fourth parameter, it can be a string
//    with the following meanings:
//    TIME          : Parameters of this type reflect a certain
//                    time(span)
//    ENUM          : Parameters of this type have a value with
//                    an enumerated meaning.
//    BITFIELD      : Parameters of this type are bitmap para-
//                    meters.
//    ASCII         : Field contains non-terminated ASCII data.
//    ASCII_0       : Field contains zero-terminated ASCII data.
//                    Field is fixed-sized, but bytes following
//                    the 0-byte are undefined and not checked.
//    ASCII_n       : Field contains <LF> /n-terminated ASCII data.
//                    Field is fixed-sized, but bytes following
//                    the /n-byte are not checked.
//    UNICODE       : Field contains none-terminated UNICODE
//                    data.
//    UNICODE_0     : Field contains zero-terminated UNICODE
//                    data.
//    UNICODE_n     : Field contains <LF> /n-terminated UNICODE
//                    data.
//
//    The meaning of the remaining parameters depends of this
//    string:
//    TIME          : Has one additional parameter, which is
//                    a float. This float indicates the time in
//                    seconds intended of one unit.
//    ENUM          : A list of additional parameters exists.
//                    This list is intended to be self-explaining.
//    BITFIELD      : A list of additional parameters exists.
//                    If the bitfield is denoted as
//                    (0xXXXX,0xXXXX), the first bitfield is
//                    a mask, the second bitfield defines the
//                    bits.


//    First a small list of general purpose types is defined.
//    Default type is interpreted as "Big endian"

t_B1                  = {   1 }
t_B2                  = {   2 }
t_B3                  = {   3 }
t_B4                  = {   4 }
t_B6                  = {   6 }
t_B8                  = {   8 }
t_B16                 = {  16 }

//    The Lofar types:

t_Double              =  {   4 }
t_Int                 =  {   4 }
t_uInt                =  {   4 }
t_Long                =  {   4 }
t_uLong               =  {   4 }
t_String              = -{ 65535-, ASCII } // (-) indicates little endian, 100- indicates 100 characters or less 

int8 									=  {   1 }
uint8									=  {   1 }
int16									=  {   2 }
uint16								=  {   2 }
int32									=  {   4 }
uint32								=  {   4 }

t_dontknow            =  { 65535-, ASCII }

// Example type remove this when you converted the actual Lofar Enums!
t_WrRegBitField       = { 1, 0x00, 0xFF, BITFIELD,
                             0x01 : "Use CTRL",
                             0x02 : "Unspecified",
                             0x04 : "Unspecified",
                             0x08 : "Unspecified",
                             0x10 : "Unspecified",
                             0x20 : "Unspecified",
                             0x40 : "Unspecified",
                             0x80 : "Unspecified"
                       }
                       
//
//  LogicalDevice_Protocol.tseprot: Protocol for LogicalDevice servers
//

TLDResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "LD_RESULT_NO_ERROR",
  0x00000001 : "LD_RESULT_UNSPECIFIED",
  0x00000002 : "LD_RESULT_FILENOTFOUND",
  0x00000003 : "LD_RESULT_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000004 : "LD_RESULT_UNKNOWN_COMMAND",
  0x00000005 : "LD_RESULT_DISABLED",
  0x00000006 : "LD_RESULT_LOW_QUALITY",
  0x00000007 : "LD_RESULT_TIMING_FAILURE",
  0x00000008 : "LD_RESULT_RANGE_ERROR",     // range error in message parameters
  0x00000009 : "LD_RESULT_BEAMALLOC_ERROR", // could not allocate beam
  0x0000000A : "LD_RESULT_BEAMFREE_ERROR"  // could not free beam
}

//
//  StartDaemon_Protocol.tseprot: Protocol for Logical Device StartDaemon servers
//

TLogicalDeviceTypes =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "LDTYPE_NO_TYPE", 
  0x00000001 : "LDTYPE_VIRTUALINSTRUMENT", 
  0x00000002 : "LDTYPE_VIRTUALTELESCOPE", 
  0x00000003 : "LDTYPE_VIRTUALARRAY", 
  0x00000004 : "LDTYPE_STATIONRECEPTORGROUP", 
  0x00000005 : "LDTYPE_ARRAYOPERATIONS", 
  0x00000006 : "LDTYPE_STATIONOPERATIONS", 
  0x00000007 : "LDTYPE_VIRTUALBACKEND"
}
  
TSDResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "SD_RESULT_NO_ERROR", 
  0x00000001 : "SD_RESULT_UNSPECIFIED_ERROR", 
  0x00000002 : "SD_RESULT_UNSUPPORTED_LD", 
  0x00000003 : "SD_RESULT_FILENOTFOUND",
  0x00000004 : "SD_RESULT_PARAMETERNOTFOUND",
  0x00000005 : "SD_RESULT_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000006 : "SD_RESULT_UNKNOWN_COMMAND",
  0x00000007 : "SD_RESULT_ALREADY_EXISTS",
  0x00000008 : "SD_RESULT_LD_NOT_FOUND",
  0x00000009 : "SD_RESULT_WRONG_STATE",
  0x0000000A : "SD_RESULT_SHUTDOWN",
  0x0000000B : "SD_RESULT_WRONG_VERSION"
}


//
//  RSP_Protocol.tseprot: Protocol for the RSP driver interface
//

t_Timestamp                =  {  12 }
t_bitsetBLP                =  {   4 }
t_bitsetRCU                =  {   4 }

//
//  SAS_Protocol.tseprot: Protocol for the communication between SAS and MAC
//

TSASResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "SAS_RESULT_NO_ERROR", 
  0x00000001 : "SAS_RESULT_ERROR_UNSPECIFIED", 
  0x00000002 : "SAS_RESULT_ERROR_VI_NOT_FOUND", 
  0x00000003 : "SAS_RESULT_ERROR_PARAMETERNOTFOUND",
  0x00000004 : "SAS_RESULT_ERROR_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000005 : "SAS_RESULT_ERROR_UNKNOWN_COMMAND",
  0x00000006 : "SAS_RESULT_ERROR_DISABLED",
  0x00000007 : "SAS_RESULT_ERROR_LOW_QUALITY",
  0x00000008 : "SAS_RESULT_ERROR_TIMING_FAILURE",
  0x00000009 : "SAS_RESULT_ERROR_WRONG_VERSION",
  0x0000000A : "SAS_RESULT_ERROR_UNSUPPORTED_LD",
  0x0000000B : "SAS_RESULT_ERROR_LD_NOT_FOUND",
  0x0000000C : "SAS_RESULT_ERROR_WRONG_STATE",
  0x0000000D : "SAS_RESULT_ERROR_SHUTDOWN",
  0x0000000E : "SAS_RESULT_ERROR_ALREADY_EXISTS",
  0x0000000F : "SAS_RESULT_ERROR_BEAMLET_ALLOCATION_FAILED"
}
  
  
//
//  PA_Protocol.tseprot: Protocol for the PA server
//

TPAResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "PA_NO_ERROR", 
  0x00000001 : "PA_UNKNOWN_ERROR",
  0x00000002 : "PA_WRONG_STATE",
  0x00000003 : "PA_PS_GONE",
  0x00000004 : "PA_MISSING_PROPS",
  0x00000005 : "PA_PROP_SET_NOT_EXISTS",
  0x00000006 : "PA_PROP_SET_ALREADY_EXISTS",
  0x00000007 : "PA_DPTYPE_UNKNOWN",
  0x00000008 : "PA_INTERNAL_ERROR",
  0x00000009 : "PA_PI_INTERNAL_ERROR",
  0x0000000A : "PA_APC_NOT_EXISTS",
  0x0000000B : "PA_LINK_TIME_OUT",
  0x0000000C : "PA_SERVER_GONE"
}

//
//  PI_Protocol.tseprot: Protocol definition for the RTC-PMLlight/Property Interface(MAC/GCF)
//

TPIResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "PI_NO_ERROR",
  0x00000001 : "PI_UNKNOWN_ERROR",
  0x00000002 : "PI_WRONG_STATE",
  0x00000003 : "PI_PS_GONE",
  0x00000004 : "PI_MISSING_PROPS",
  0x00000005 : "PI_PROP_SET_NOT_EXISTS",
  0x00000006 : "PI_PROP_SET_ALREADY_EXISTS",
  0x00000007 : "PI_DPTYPE_UNKNOWN",
  0x00000008 : "PI_INTERNAL_ERROR",
  0x00000009 : "PI_PA_INTERNAL_ERROR",
  0x0000000A : "PI_PA_NOTCONNECTED",
  0x0000000B : "PI_PROP_NOT_VALID",
  0x0000000C : "PI_EMPTY_SCOPE",
  0x0000000D : "PI_MACTYPE_UNKNOWN"
}

//
//  THEcho_Protocol.tseprot: Protocol for the TestHarness Echo server
//

TEchoEnum = 
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000001 : "ECHO_ENUM_FIRST", 
  0x00000002 : "ECHO_ENUM_SECOND", 
  0x00000003 : "ECHO_ENUM_THIRD"
}


//
//  THEchoRouting_Protocol.tseprot: Protocol for the TestHarness Echo Routing server
//

TEchoRoutingEnum = 
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000001 : "ECHOROUTING_ENUM_FIRST", 
  0x00000002 : "ECHOROUTING_ENUM_SECOND", 
  0x00000003 : "ECHOROUTING_ENUM_THIRD"
}




[functions]

//
//  LogicalDevice_Protocol.tseprot: Protocol for LogicalDevice servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

LOGICALDEVICE_CONNECT =
{
  0x4b01,
  msgLength : t_B4,
  nrOfChars : t_B4,
  nodeId : t_String [ nrOfChars ]
  
}

LOGICALDEVICE_CONNECTED =
{
  0x8b02,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_SCHEDULE =
{
  0x8b03,
  msgLength : t_B4,
  nrOfChars : t_B4,
  fileName : t_String [ nrOfChars ]
  
}

LOGICALDEVICE_SCHEDULED =
{
  0x4b04,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_CANCELSCHEDULE =
{
  0x8b05,
  msgLength : t_B4
  
}

LOGICALDEVICE_SCHEDULECANCELLED =
{
  0x4b06,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_CLAIM =
{
  0x8b07,
  msgLength : t_B4
  
}

LOGICALDEVICE_CLAIMED =
{
  0x4b08,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_PREPARE =
{
  0x8b09,
  msgLength : t_B4
  
}

LOGICALDEVICE_PREPARED =
{
  0x4b0a,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_RESUME =
{
  0x8b0b,
  msgLength : t_B4
  
}

LOGICALDEVICE_RESUMED =
{
  0x4b0c,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_SUSPEND =
{
  0x8b0d,
  msgLength : t_B4
  
}

LOGICALDEVICE_SUSPENDED =
{
  0x4b0e,
  msgLength : t_B4,
  result : TLDResult
  
}

LOGICALDEVICE_RELEASE =
{
  0x8b0f,
  msgLength : t_B4
  
}

LOGICALDEVICE_RELEASED =
{
  0x4b10,
  msgLength : t_B4,
  result : TLDResult
  
}


//
//  StartDaemon_Protocol.tseprot: Protocol for Logical Device StartDaemon servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

STARTDAEMON_SCHEDULE =
{
  0x4c01,
  msgLength : t_B4,
  logicalDeviceType : TLogicalDeviceTypes,
  nrOfChars1 : t_B4,
  taskName : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  fileName : t_String [ nrOfChars2 ]
  
}

STARTDAEMON_SCHEDULED =
{
  0x8c02,
  msgLength : t_B4,
  result : TSDResult,
  nrOfChars : t_B4,
  VIrootID : t_String [ nrOfChars ]
  
}

STARTDAEMON_DESTROY_LOGICALDEVICE =
{
  0x4c03,
  msgLength : t_B4,
  nrOfChars : t_B4,
  name : t_String [ nrOfChars ]
  
}

STARTDAEMON_STOP =
{
  0x4c04,
  msgLength : t_B4
  
}



//
//  ABS_Protocol.tseprot: Protocol for the Beam Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

ABS_BEAMALLOC =
{
  0x5401,
  msgLength : t_B4,
  spectral_window : t_Int,
  n_subbands : t_Int,
  subbands : int[MEPHeader::N_BEAMLETS]
  
}

ABS_BEAMALLOC_ACK =
{
  0x9402,
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

ABS_BEAMFREE =
{
  0x5403,
  msgLength : t_B4,
  handle : t_Int
  
}

ABS_BEAMFREE_ACK =
{
  0x9404,
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

ABS_BEAMPOINTTO =
{
  0x5405,
  msgLength : t_B4,
  handle : t_Int,
  time : time_t,
  type : t_Int,
  angle : double[2]
  
}

ABS_WGSETTINGS =
{
  0x5406,
  msgLength : t_B4,
  frequency : t_Double,
  amplitude : unsigned short
  
}

ABS_WGSETTINGS_ACK =
{
  0x9407,
  msgLength : t_B4,
  status : t_Int
  
}

ABS_WGENABLE =
{
  0x5408,
  msgLength : t_B4
  
}

ABS_WGDISABLE =
{
  0x5409,
  msgLength : t_B4
  
}



//
//  EPA_Protocol.tseprot: Protocol for the EPA Demonstrator Board
//
// Note: For each function remove the last ',' before the '}'  !!!!

EPA_WRITE =
{
  0x5501,
  msgLength : t_B4,
  hdr : MEPHeader,
  payload : MEPData
  
}

EPA_WRITEACK =
{
  0x5502,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_WRITEACK_ERROR =
{
  0x9503,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_READ =
{
  0x5504,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_READACK =
{
  0x5505,
  msgLength : t_B4,
  hdr : MEPHeader,
  payload : MEPData
  
}

EPA_READACK_ERROR =
{
  0x9506,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_RSR_STATUS =
{
  0x9507,
  msgLength : t_B4,
  hdr : MEPHeader,
  board : BoardStatus
  
}

EPA_RSR_VERSION =
{
  0x9508,
  msgLength : t_B4,
  hdr : MEPHeader,
  rsp_version : uint8,
  bp_version : uint8,
  ap_version : uint8
  
}

EPA_TST_SELFTEST =
{
  0xd509,
  msgLength : t_B4,
  hdr : MEPHeader,
  test : uint8
  
}

EPA_CFG_RESET =
{
  0xd50a,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_CFG_REPROGRAM =
{
  0xd50b,
  msgLength : t_B4,
  hdr : MEPHeader
  
}

EPA_WG_SETTINGS =
{
  0xd50c,
  msgLength : t_B4,
  hdr : MEPHeader,
  freq : uint16,
  phase : uint8,
  ampl : uint8,
  nof_samples : uint16,
  mode : uint8
  
}

EPA_WG_WAVE =
{
  0xd50d,
  msgLength : t_B4,
  hdr : MEPHeader,
  samples : int16[N_WAVE_SAMPLES]
  
}

EPA_SS_SELECT =
{
  0xd50e,
  msgLength : t_B4,
  hdr : MEPHeader,
  ch : uint16[MEPHeader::N_BEAMLETS * MEPHeader::N_POL]
  
}

EPA_BF_COEFS =
{
  0xd50f,
  msgLength : t_B4,
  hdr : MEPHeader,
  coef : int16[N_COEF]
  
}

EPA_STATS =
{
  0x9510,
  msgLength : t_B4,
  hdr : MEPHeader,
  stat : uint32[N_STATS]
  
}

EPA_RCU_SETTINGS =
{
  0xd511,
  msgLength : t_B4,
  hdr : MEPHeader,
  x : uint8,
  y : uint8
  
}

EPA_CRR_SOFTRESET =
{
  0xd512,
  msgLength : t_B4,
  hdr : MEPHeader,
  trigger : uint8
  
}

EPA_CRR_SOFTPPS =
{
  0xd513,
  msgLength : t_B4,
  hdr : MEPHeader,
  trigger : uint8
  
}

EPA_CRB_SOFTRESET =
{
  0xd514,
  msgLength : t_B4,
  hdr : MEPHeader,
  trigger : uint8
  
}

EPA_CRB_SOFTPPS =
{
  0xd515,
  msgLength : t_B4,
  hdr : MEPHeader,
  trigger : uint8
  
}

EPA_CDO_SETTINGS =
{
  0xd516,
  msgLength : t_B4,
  hdr : MEPHeader,
  station_id : uint32,
  configuration_id : uint16,
  format : uint16,
  antenna_id : uint16
  
}

EPA_TRIGGER_CLOCK =
{
  0x9517,
  msgLength : t_B4,
  value : uint8
  
}


//
//  RSP_Protocol.tseprot: Protocol for the RSP driver interface
//
// Note: For each function remove the last ',' before the '}'  !!!!

RSP_SETWEIGHTS =
{
  0x5601,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  weights : t_dontknow //BeamletWeights
  
}

RSP_SETWEIGHTSACK =
{
  0x9602,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

RSP_GETWEIGHTS =
{
  0x5603,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

RSP_GETWEIGHTSACK =
{
  0x9604,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  weights : t_dontknow //BeamletWeights
  
}

RSP_SETSUBBANDS =
{
  0x5605,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  subbands : t_dontknow //SubbandSelection
  
}

RSP_SETSUBBANDSACK =
{
  0x9606,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

RSP_GETSUBBANDS =
{
  0x5607,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

RSP_GETSUBBANDSACK =
{
  0x9608,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  subbands : t_dontknow //SubbandSelection
  
}

RSP_SETRCU =
{
  0x5609,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //RCUSettings
  
}

RSP_SETRCUACK =
{
  0x960a,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

RSP_GETRCU =
{
  0x560b,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

RSP_GETRCUACK =
{
  0x960c,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //RCUSettings
  
}

RSP_SETWG =
{
  0x560d,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //WGSettings
  
}

RSP_SETWGACK =
{
  0x960e,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

RSP_GETWG =
{
  0x560f,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

RSP_GETWGACK =
{
  0x9610,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //WGSettings
  
}

RSP_SUBSTATUS =
{
  0x5611,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16
  
}

RSP_SUBSTATUSACK =
{
  0x9612,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

RSP_UNSUBSTATUS =
{
  0x5613,
  msgLength : t_B4,
  handle : uint32
  
}

RSP_UNSUBSTATUSACK =
{
  0x9614,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

RSP_UPDSTATUS =
{
  0x9615,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  sysstatus : t_dontknow //SystemStatus
  
}

RSP_GETSTATUS =
{
  0x5616,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

RSP_GETSTATUSACK =
{
  0x9617,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  sysstatus : t_dontknow //SystemStatus
  
}

RSP_SUBSTATS =
{
  0x5618,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16,
  type : uint8,
  reduction : t_dontknow //StatsReduction
  
}

RSP_SUBSTATSACK =
{
  0x9619,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

RSP_UNSUBSTATS =
{
  0x561a,
  msgLength : t_B4,
  handle : uint32
  
}

RSP_UNSUBSTATSACK =
{
  0x961b,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

RSP_UPDSTATS =
{
  0x961c,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  stats : t_dontknow //Statistics
  
}

RSP_GETSTATS =
{
  0x561d,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8,
  type : uint8
  
}

RSP_GETSTATSACK =
{
  0x961e,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  stats : t_dontknow //Statistics
  
}

RSP_GETVERSION =
{
  0x561f,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  cache : uint8
  
}

RSP_GETVERSIONACK =
{
  0x9620,
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  versions : t_dontknow //Versions
  
}


//
//  CAL_Protocol.tseprot: Protocol for the Calibration Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

CAL_CREATESUBARRAY =
{
  0x5701,
  msgLength : t_B4,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ],
  pos : t_Int,
  sampling_frequency : t_Double
  
}

CAL_CREATESUBARRAY_ACK =
{
  0x9702,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_STARTCAL =
{
  0x5703,
  msgLength : t_B4,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_STARTCAL_ACK =
{
  0x9704,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_DESTROYSUBARRAY =
{
  0x5705,
  msgLength : t_B4,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_DESTROYSUBARRAY_ACK =
{
  0x5706,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_SUBCAL =
{
  0x5707,
  msgLength : t_B4,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_SUBCAL_ACK =
{
  0x9708,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_UPDCAL =
{
  0x9709,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_UNSUBCAL =
{
  0x570a,
  msgLength : t_B4,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}

CAL_UNSUBCAL_ACK =
{
  0x970b,
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_B4,
  srgname : t_String [ nrOfChars ]
  
}


//
//  NM_Protocol.tseprot: Protocol for the NodeManager
//
// Note: For each function remove the last ',' before the '}'  !!!!

NM_CLAIM =
{
  0x4a01,
  msgLength : t_B4,
  nrOfChars : t_B4,
  nodesToClaim : t_String [ nrOfChars ]
  
}

NM_CLAIMED =
{
  0x8a02,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  newClaimedNodes : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  releasedNodes : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  faultyNodes : t_String [ nrOfChars3 ]
  
}

NM_RELEASE =
{
  0x4a03,
  msgLength : t_B4,
  nrOfChars : t_B4,
  nodesToRelease : t_String [ nrOfChars ]
  
}

NM_RELEASED =
{
  0x8a04
  msgLength : t_B4
  
}


//
//  SAS_Protocol.tseprot: Protocol for the communication between SAS and MAC
//
// Note: For each function remove the last ',' before the '}'  !!!!

SAS_SCHEDULE =
{
  0x4d01,
  msgLength : t_B4,
  nrOfChars : t_B4,
  VIrootID : t_String [ nrOfChars ]
  
}

SAS_UPDATESCHEDULE =
{
  0x4d02,
  msgLength : t_B4,
  nrOfChars : t_B4,
  VIrootID : t_String [ nrOfChars ]
  
}

SAS_CANCELSCHEDULE =
{
  0x4d03,
  msgLength : t_B4,
  nrOfChars : t_B4,
  VIrootID : t_String [ nrOfChars ]
  
}

SAS_RESPONSE =
{
  0x8d04,
  msgLength : t_B4,
  result : TSASResult,
  nrOfChars : t_B4,
  VIrootID : t_String [ nrOfChars ]
  
}

SAS_REPLACEMENTREQUEST =
{
  0x8d05,
  msgLength : t_B4,
  nrOfChars : t_B4,
  nodeID : t_String [ nrOfChars ]
  
}


//
//  KVL_Protocol.tseprot: Protocol for the KVL system
//
// Note: For each function remove the last ',' before the '}'  !!!!

KVL_UPDATE =
{
  0x4301,
  msgLength : t_B4,
  nrOfChars : t_B4,
  key : t_String [ nrOfChars ],
  value : LOFAR::GCF::LogSys::Value,
  origin : LOFAR::GCF::Common::TKVLOrigin,
  timestamp : timeval
  
}

KVL_UPDATES =
{
  0x4302,
  msgLength : t_B4,
  seqNr : uint16,
  daemonID : uint8,
  nrOfUpdates : uint16,
  updates : LOFAR::GCF::LogSys::LoggingCollection
  
}

KVL_ANSWER =
{
  0x8303,
  msgLength : t_B4,
  seqNr : uint16
  
}

KVL_REGISTER =
{
  0x4304,
  msgLength : t_B4,
  curID : uint8,
  firstSeqNr : uint16
  
}

KVL_REGISTERED =
{
  0x8305,
  msgLength : t_B4,
  ID : uint8,
  curSeqNr : uint16
  
}

KVL_UNREGISTER =
{
  0x4306,
  msgLength : t_B4,
  curID : uint8
  
}


//
//  SB_Protocol.tseprot: Protocol for the Service Broker deamon
//
// Note: For each function remove the last ',' before the '}'  !!!!

SB_REGISTER_SERVICE =
{
  0x4301,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars1 : t_B4,
  servicename : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  host : t_String [ nrOfChars2 ]
  
}

SB_UNREGISTER_SERVICE =
{
  0x4302,
  msgLength : t_B4,
  nrOfChars : t_B4,
  servicename : t_String [ nrOfChars ]
  
}

SB_GET_SERVICEINFO =
{
  0x4303,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  servicename : t_String [ nrOfChars ]
  
}

SB_SERVICE_REGISTERED =
{
  0x8304,
  msgLength : t_B4,
  seqnr : unsigned short,
  portnumber : t_uInt,
  result : GCF::SB::TSBResult
  
}

SB_SERVICE_INFO =
{
  0x8305,
  msgLength : t_B4,
  seqnr : unsigned short,
  portnumber : t_uInt,
  nrOfChars : t_B4,
  host : t_String [ nrOfChars ],
  result : GCF::SB::TSBResult
  
}

SB_SERVICE_GONE =
{
  0x8306,
  msgLength : t_B4,
  nrOfChars : t_B4,
  servicename : t_String [ nrOfChars ]
  
}


//
//  Echo_Protocol.tseprot: Protocol for the Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

ECHO_PING =
{
  0x4a01,
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : timeval
  
}

ECHO_ECHO =
{
  0x8a02,
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : timeval,
  echo_time : timeval
  
}

ECHO_CLOCK =
{
  0x8a03,
  msgLength : t_B4,
  clockpulse : char
  
}


//
//  PA_Protocol.tseprot: Protocol for the PA server
//
// Note: For each function remove the last ',' before the '}'  !!!!

PA_LOAD_PROP_SET =
{
  0x4301,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PA_UNLOAD_PROP_SET =
{
  0x4302,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PA_CONF_PROP_SET =
{
  0x4303,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  apcName : t_String [ nrOfChars2 ]
  
}

PA_PROP_SET_LOADED =
{
  0x8304,
  msgLength : t_B4,
  seqnr : unsigned short,
  result : TPAResult
  
}

PA_PROP_SET_UNLOADED =
{
  0x8305,
  msgLength : t_B4,
  seqnr : unsigned short,
  result : TPAResult
  
}

PA_PROP_SET_CONF =
{
  0x8306,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  apcName : t_String [ nrOfChars ],
  result : TPAResult
  
}

PA_REGISTER_SCOPE =
{
  0x4307,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  type : t_String [ nrOfChars2 ],
  category : LOFAR::GCF::Common::TPSCategory
  
}

PA_UNREGISTER_SCOPE =
{
  0x4308,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PA_SCOPE_REGISTERED =
{
  0x8309,
  msgLength : t_B4,
  seqnr : unsigned short,
  result : TPAResult
  
}

PA_SCOPE_UNREGISTERED =
{
  0x830a,
  msgLength : t_B4,
  result : TPAResult,
  seqnr : unsigned short
  
}

PA_LINK_PROP_SET =
{
  0x830b,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PA_UNLINK_PROP_SET =
{
  0x830c,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PA_PROP_SET_LINKED =
{
  0x430d,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

PA_PROP_SET_UNLINKED =
{
  0x430e,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

PA_PROP_SET_GONE =
{
  0x830f,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}


//
//  PI_Protocol.tseprot: Protocol definition for the RTC-PMLlight/Property Interface(MAC/GCF)
//
// Note: For each function remove the last ',' before the '}'  !!!!

PI_REGISTER_SCOPE =
{
  0x4301,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  type : t_String [ nrOfChars2 ],
  category : LOFAR::GCF::Common::TPSCategory
  
}

PI_UNREGISTER_SCOPE =
{
  0x4302,
  msgLength : t_B4,
  seqnr : unsigned short,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PI_SCOPE_REGISTERED =
{
  0x8303,
  msgLength : t_B4,
  seqnr : unsigned short,
  result : TPIResult
  
}

PI_SCOPE_UNREGISTERED =
{
  0x8304,
  msgLength : t_B4,
  result : TPIResult,
  seqnr : unsigned short
  
}

PI_LINK_PROP_SET =
{
  0x8305,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PI_UNLINK_PROP_SET =
{
  0x8306,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PI_PROP_SET_LINKED =
{
  0x4307,
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  propList : t_String [ nrOfChars2 ]
  
}

PI_PROP_SET_UNLINKED =
{
  0x4308,
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

PI_VALUE_SET =
{
  0x4309,
  msgLength : t_B4,
  nrOfChars : t_B4,
  name : t_String [ nrOfChars ],
  value : PValue
  
}

PI_VALUE_CHANGED =
{
  0x830a,
  msgLength : t_B4,
  scopeLength : unsigned short,
  nrOfChars : t_B4,
  name : t_String [ nrOfChars ],
  value : PValue
  
}


//
//  THEcho_Protocol.tseprot: Protocol for the TestHarness Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

THECHO_PING_UINT =
{
  0x4a01,
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

THECHO_ECHO_UINT =
{
  0x8a02,
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

THECHO_PING_INT =
{
  0x4a03,
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

THECHO_ECHO_INT =
{
  0x8a04,
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

THECHO_PING_LONG =
{
  0x4a05,
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

THECHO_ECHO_LONG =
{
  0x8a06,
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

THECHO_PING_ENUM =
{
  0x4a07,
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

THECHO_ECHO_ENUM =
{
  0x8a08,
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

THECHO_PING_DOUBLE =
{
  0x4a09,
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

THECHO_ECHO_DOUBLE =
{
  0x8a0a,
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

THECHO_PING_STRING =
{
  0x4a0b,
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_B4,
  stringParam : t_String [ nrOfChars ]
  
}

THECHO_ECHO_STRING =
{
  0x8a0c,
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_B4,
  stringParam : t_String [ nrOfChars ]
  
}

THECHO_PING_STOP =
{
  0x4a0d,
  msgLength : t_B4,
  seqnr : t_uInt
  
}

THECHO_PING_INT_ARRAY =
{
  0x4a0e,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[10]
  
}

THECHO_ECHO_INT_ARRAY =
{
  0x8a0f,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[10]
  
}

THECHO_PING_INT_ARRAY_20 =
{
  0x4a10,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[20]
  
}

THECHO_ECHO_INT_ARRAY_20 =
{
  0x8a11,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[20]
  
}

THECHO_PING_INT_ARRAY_61 =
{
  0x4a12,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[61]
  
}

THECHO_ECHO_INT_ARRAY_61 =
{
  0x8a13,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[61]
  
}


//
//  THEchoRouting_Protocol.tseprot: Protocol for the TestHarness Echo Routing server
//
// Note: For each function remove the last ',' before the '}'  !!!!

THECHOROUTING_PING_UINT =
{
  0x4b01,
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

THECHOROUTING_ECHO_UINT =
{
  0x4b02,
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

THECHOROUTING_PING_INT =
{
  0x4b03,
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

THECHOROUTING_ECHO_INT =
{
  0x4b04,
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

THECHOROUTING_PING_LONG =
{
  0x4b05,
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

THECHOROUTING_ECHO_LONG =
{
  0x4b06,
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

THECHOROUTING_PING_ENUM =
{
  0x4b07,
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

THECHOROUTING_ECHO_ENUM =
{
  0x4b08,
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

THECHOROUTING_PING_DOUBLE =
{
  0x4b09,
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

THECHOROUTING_ECHO_DOUBLE =
{
  0x4b0a,
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

THECHOROUTING_PING_STRING =
{
  0x4b0b,
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_B4,
  stringParam : t_String [ nrOfChars ]
  
}

THECHOROUTING_ECHO_STRING =
{
  0x4b0c,
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_B4,
  stringParam : t_String [ nrOfChars ]
  
}

THECHOROUTING_PING_STOP =
{
  0x4b0d,
  msgLength : t_B4,
  seqnr : t_uInt
  
}

THECHOROUTING_PING_INT_ARRAY =
{
  0x4b0e,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[10]
  
}

THECHOROUTING_ECHO_INT_ARRAY =
{
  0x4b0f,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[10]
  
}

THECHOROUTING_PING_INT_ARRAY_20 =
{
  0x4b10,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[20]
  
}

THECHOROUTING_ECHO_INT_ARRAY_20 =
{
  0x4b11,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[20]
  
}

THECHOROUTING_PING_INT_ARRAY_61 =
{
  0x4b12,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[61]
  
}

THECHOROUTING_ECHO_INT_ARRAY_61 =
{
  0x4b13,
  msgLength : t_B4,
  seqnr : t_uInt,
  intArrayParam : int[61]
  
}


//
//  THPVSSBridge_Protocol.tseprot: Protocol for the THPVSSBridge server
//
// Note: For each function remove the last ',' before the '}'  !!!!

THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET =
{
  0x4e01,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  type : t_String [ nrOfChars2 ],
  category : LOFAR::GCF::Common::TPSCategory
  
}

THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x8e02,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET =
{
  0x4e03,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x8e04,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
  
}

THPVSSBRIDGE_MY_GET_VALUE =
{
  0x4e05,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
  
}

THPVSSBRIDGE_MY_GET_VALUE_RESPONSE =
{
  0x8e06,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  value : t_String [ nrOfChars3 ]
  
}

THPVSSBRIDGE_MY_SET_VALUE =
{
  0x4e07,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  value : t_String [ nrOfChars3 ]
  
}

THPVSSBRIDGE_MY_SET_VALUE_RESPONSE =
{
  0x8e08,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
  
}

THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET =
{
  0x4e09,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  type : t_String [ nrOfChars2 ]
  
}

THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x8e0a,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
}

THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET =
{
  0x4e0b,
  msgLength : t_B4,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
}

THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x8e0c,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars : t_B4,
  scope : t_String [ nrOfChars ]
}

THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY =
{
  0x4e0d,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x8e0e,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY =
{
  0x4e0f,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x8e10,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_EXT_GET_VALUE =
{
  0x4e11,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_EXT_GET_VALUE_RESPONSE =
{
  0x8e12,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  value : t_String [ nrOfChars3 ]  
}

THPVSSBRIDGE_EXT_SET_VALUE =
{
  0x4e13,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  value : t_String [ nrOfChars3 ]
}

THPVSSBRIDGE_EXT_SET_VALUE_RESPONSE =
{
  0x8e14,
  msgLength : t_B4,
  response : LOFAR::GCF::Common::TGCFResult,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ]
}

THPVSSBRIDGE_VALUE_CHANGE_RESPONSE =
{
  0x8e15,
  msgLength : t_B4,
  nrOfChars1 : t_B4,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_B4,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_B4,
  value : t_String [ nrOfChars3 ]
}


[events]
