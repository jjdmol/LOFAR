V 11
1
LANG:1 16 childStateBorder
PANEL,-1 -1 335 88 N "_3DFace" 0
"main()
{
  baseDP = \"LOFAR_PermSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);
  /*
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";
  // check if MACScheduler pointenabled and accessible
  if (dpExists(activeObsDP)) {
    if (dpConnect(\"updateActiveObservations\", activeObsDP+\":_online.._value\",
                                              activeObsDP+\":_online.._invalid\") == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:main|Couldn't connect to: \"+activeObsDP);
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"ObservationFlow_cobaltLocusNodeProcesses.pnl:main|Couldn't find DP to connect to: \"+activeObsDP);
  }	
  */
}
" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  70 70
""0  1
E "#uses \"navPanel.ctl\"

string baseDP          = \"\";
bool   bDoubleClicked  = false;
dyn_string observationsList;
dyn_string oldObservationsList;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
dyn_int locusnodes;
string activeObsDP = \"\";
string database;
dyn_string outputprocs;
dyn_string connectToOutputProcs;
string connectToStates;
bool connectedStates;
bool connectedOutputProcs;

bool selectedObservations=false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(\"Stations\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
  
  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"ObservationFlow_cobaltLocusNodeProcesses.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Hardware\",\"ChangeTab\");
  }

  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

// routine for right mouse click
void rClick() {
  navPanel_setEvent(\"Stations\",\"EventRightClick\");
}

void updateActiveObservations(string dp1, dyn_string obs,
                              string dp2, bool invalid)
{

  // remove pipelines from the list
  for (int i=dynlen(obs);i > 0;  i--) if (!navFunct_isObservation(obs[i])) dynRemove(obs,i);
  
  activeObservations = obs;
  // if there are selected observation check the observationsList if those selected observations still are active
  // remove the unactive observations from the list  
  
  // replace old observations if there are no observations selected
  if (selectedObservations) {
    for (int i=dynlen(observationsList); i < 1; i--) {
      int idx = dynContains(activeObservations,observationsList[i]);
      if (i <= 0) dynRemove(observationsList,i);
    }
    if (dynlen(observationsList) ==0) {
      selectedObservations=false;
    }
  }
  
  if (!selectedObservations) {
    observationsList = activeObservations;
  }
  
  LOG_DEBUG(\"ObservationFlow_cobaltLocusNodeProcesses.pnl:updateActiveObservations|observationList: \"+observationsList);
//  connectCobaltLocusNodesAndProcesses();
//  connectOutputProcs();
}

// connect to stationInputStreams from the active observations
void connectOutputProcs() {

  //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {

    // change all found DP's to contain all the elements that contain the .dropping
    if (connectedOutputProcs) {
      dpDisconnect(\"outputProcCB\",connectToOutputProcs);
    }
    dynClear(connectToOutputProcs);
    DebugN(\"Found observations: \",observationsList);
    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      // get all the OutputProcs used by this observation
      string dp = CEPDBName+claimManager_nameToRealName(\"LOFAR_ObsSW_\"+observationsList[i]);
      dynAppend(connectToOutputProcs,dp+\"_CobaltOutputProc.dropped:_online.._value\");
    }
    DebugN(\"Found connect points: \", connectToOutputProcs);
    // check if the required datapoint for this view is enabled and accessible
    if (navFunct_dpReachable(CEPDBName) && dynlen(connectToOutputProcs)>0 ){
      if (dpConnect(\"outputprocCB\", connectToOutputProcs) == -1) {
        setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_dpOffline\");
    }
  } else {
      setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");    
  }
}



void connectCobaltLocusNodesAndProcesses() {

  if (dynlen(observationsList) > 0) {

    // change all found DP's to contain all the elements that contain the states and childstates
    if (connectedStates) {
      dpQueryDisconnect(\"updateStates\",\"cobaltStateUpdate\");
    }
    // prepare connectList for States/childStates for each observation
    for(int i=1; i <= dynlen(observationsList); i++) {
      if (i==1) {
        connectToStates =  \"SELECT '_online.._value' FROM '{LOFAR_*_*SCBT*_Cobalt*.status.state,LOFAR_*_*SCBT*_Cobalt*.status.childState,LOFAR_*_Cobalt*.observationName}' REMOTE 'CCU001:' WHERE 'observationName:_online.._value' == \\\"\"+observationsList[i]+\"\\\"\";
      } else {
        connectToStates  +=\"OR  'observationName:_online.._value' == \\\"\"+observationsList[i]+\"\\\"\";
      }
    }
    
    if (dpQueryConnectAll(\"cobaltLocusNodesAndProcessesCB\",true,\"cobaltStateUpdate\",connectToStates) == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltLocusNodeProcesses.pnl:connectCobaltLocusNodesAndProcesses| ERROR: Query fails:\"+connectToStates);
    }
  } else {
    setStates(0,0);
  }
}

void cobaltLocusNodesAndProcessesCB(string strIdent,  dyn_dyn_anytype aResult) 
{
  LOG_DEBUG( \"ObservationFlow_cobaltLocusNodeProcesses.pnl:cobaltLocusNodesAndProcessesCB| has \" + dynlen( aResult ) + \" results\" );
  LOG_DEBUG( \"ObservationFlow_cobaltLocusNodeProcesses.pnl:cobaltLocusNodesAndProcessesCB| \"+aResult);
  int highestState=0;
  int highestChildState=0;

  if( dynlen( aResult ) < 2 ) {
    setStates(highestState,highestChildState);
    return;
  }
  // Iterate through the results
  for( int t = 2; t <= dynlen( aResult ); t++)
  {
    // skip the lines that contain the observationNames
    if (strpos(aResult[t][1],\"observationName\") >= 0) continue;
    if (strpos(aResult[t][1],\"status.state\") >= 0 && aResult[t][2] > highestState) {
      highestState=aResult[t][2];
    } else if (strpos(aResult[t][1],\"status.childState\") >= 0 && aResult[t][2] > highestChildState) {
      highestChildState=aResult[t][2];
    }
  }
  setStates(highestState,highestChildState);
}  
      


void outputprocCB(dyn_string dps, dyn_dyn_bool values)
{
  dynClear(locusnodes);
  // Here we get dropping  and locusnodevalues from all involved observations
  string toolTipText = \"Dropping outputProcs<br>\";
  
  string color = \"Lofar_operational\";

  DebugN(\"found dps: \",dps);  
  DebugN(\"found val: \",values);  
  for (int i = 1; i<= dynlen(values); i++) {
    dyn_float dropped;
    dyn_string lnodes;
    string dp = dps[i];
    dyn_bool dropping = values[i];
    string outputprocDP = dpSubStr(dp,DPSUB_SYS_DP);
    dpGet(outputprocDP+\".dropped\",dropped);
    dpGet(outputprocDP+\".locusNode\",lnodes);
    
    for (int j=1; j<= dynlen(lnodes);j++) {
      dynAppend(locusnodes,lnodes[j]);
      if (dynlen(dropped) <= j)  continue;
      if ( dropped[j] > 0) {
        color = \"Lofar_broken\";
        toolTipText+=lnodes[j]+\"<br>\";
      }
    }
  }

  setValue(\"outputProcsObject\",\"toolTipText\",toolTipText);
  setValue(\"outputProcsObject\", \"foreCol\", color);

 }

void setStates(int state, int childState) {
   string SymbolCol;

   SymbolCol = getStateColor(childState);
   setValue(\"childStateBorder\", \"foreCol\", SymbolCol);

   SymbolCol = getStateColor(state);
   setValue(\"childStateBorder\", \"backCol\", SymbolCol);
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 1
"childStateBorder"
""
1 130 160 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 71 All LocusNodes involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 2 1 2 1 E 0.7222222222222223 0 0.8333333333333334 -43.8888888888889 -123.3333333333333 1 E 130 160 310 220
2 2
"PRIMITIVE_TEXT1"
""
1 70 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E U  0 E 70 30 162 43
0 2 2 "0s" 0 0 0 192 0 0  70 30 1
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 CEP 2 /LocusNodes
4 7
"outputProcsObject"
""
1 180 35 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 72 All OutputProcs involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  180 35 210 35
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
