V 11
1
LANG:1 0 
PANEL,-1 -1 399 95 N "_3DFace" 2
"$name"
"$station"
"main()
{
  station = $station+\":\";
  
  baseDP = station+\"LOFAR_\"+$name;
  setValue(\"process\", \"toolTipText\", baseDP);


  string lvlDP = station+\"LOFAR_PermSW_Daemons_SoftwareMonitor\";

  // Connect to SWLevel
  if (navFunct_dpReachable(lvlDP)) {
    if(dpExists(lvlDP+\".SWLevel\")) {
      if (dpConnect(\"callbackLevelChanged\", lvlDP+\".SWLevel:_online.._value\",
                                            lvlDP+\".SWLevel:_online.._invalid\") == -1) {
        LOG_ERROR(\"SWControlerTempObs_small.pnl:main|Couldn't connect to: \"+lvlDP+\".SWLevel\");
      }
    } else {
      LOG_ERROR(\"SWControlerTempObs_small.pnl:main|\"+lvlDP+\".SWLevel not found\");
    }
  }

  
  // Connect to active observations
  if (navFunct_dpReachable(MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\")) {
    if (dpConnect(\"callbackObservationChanged\", MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations:_online.._value\") == -1) {
      LOG_ERROR(\"SWControlerTempObs_small.pnl:main|Couldn't connect to: \"+MainDBName+\":LOFAR_PermSW_MACScheduler.activeObservations: \"+getLastError());
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"SWControlerTempObs_small.pnl:main|\"+MainDBName+\" seems offline\");
  }
    
}


void callbackLevelChanged(string dp1, int  swlvlCB,
                          string dp2, bool swinvalidCB)
{
  // Store in scope var
  swlvl     = swlvlCB;
  swinvalid = swinvalidCB;

  checkStateConnection();
}






private void callbackObservationChanged(string dp1, dyn_string observationsCB)
{
  // Store in scope var
  observations = observationsCB;

  checkStateConnection();
}




private void checkStateConnection()
{

  firstObservation = \"\";
  string firstPipeline = \"\";
  // for now the object will only show the controller for the first observation
  // We also have to check if the swleve;l is higher then 6 for the obs dependant ctrl'ers
  if (dynlen(observations) >= 1) {
    for (int i = 1; i <= dynlen(observations); i++)  {
      if ($name != \"PythonControl\" && navFunct_isObservation(observations[i]) && firstObservation == \"\") {
        firstObservation = observations[i];
      } else if ($name == \"PythonControl\" && !navFunct_isObservation(observations[i]) && firstPipeline == \"\") {
        firstPipeline = observations[i];
      }
    }
    
    
    if ($name != \"PythonControl\" && firstObservation == \"\") {
      setValue(\"process\", \"backCol\", \"Lofar_off\");
      return;
    }
      
    if ($name == \"PythonControl\" && firstPipeline == \"\") {
      setValue(\"process\", \"backCol\", \"Lofar_off\");
      return;
    }
  }
  
  
  // Determine baseDP
  baseDP = \"\";
  if( (firstObservation != \"\") && ( swlvl == 6 ) )
  {
    // get real name from claimmanager
    obsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+firstObservation);
    baseDP = station+obsDP+\"_\"+$name;
  }
  
  
  // show state off  
  if( swlvl < 6 )
  { 
    updateSWController(baseDP,0,baseDP,swinvalid);
  }
  
  
  // Disconnect
  if( (baseDPconnected != \"\") && (baseDP != baseDPconnected) )
  {
    if (dpDisconnect(\"updateSWController\", baseDPconnected +\".status.state:_online.._value\",
                                           baseDPconnected +\".status.state:_online.._invalid\") == -1) { 
      baseDPconnected = \"\";
    }
  }
  
  
  // Connect
  if( (baseDP != \"\") && (baseDP != baseDPconnected) )
  {

    if (navFunct_dpReachable(baseDP+\".status.state\")) {
      if (dpExists(baseDP+\".status.state\")) {
        if (dpConnect(\"updateSWController\", baseDP +\".status.state:_online.._value\",
                                            baseDP +\".status.state:_online.._invalid\") == -1) {
          setValue(\"process\", \"backCol\", \"Lofar_dpdoesnotexist\");
          LOG_ERROR(\"SWControlerTempObs_small.pnl:reload|Couldn't connect updateSWController: \"+getLastError());
       
        } else {
          baseDPconnected = baseDP;
        }
      } else {
          setValue(\"process\", \"backCol\", \"Lofar_dpdoesnotexist\");
      } 
    } else {
      setValue(\"process\", \"backCol\", \"Lofar_dpOffline\");
    }	

  }


  if ($name == \"PythonControl\")
  {
    setValue(\"process\", \"backCol\", \"Lofar_off\");
  }

}





updateSWController(string dp1, int status,
                   string dp2, bool invalid)
{
      
  if (invalid)
  {
    setValue(\"process\", \"backCol\", \"Lofar_invalid\");
    return;
  }
  else
  {
    setValue(\"process\", \"backCol\", getStateColor(status));
  }
 
}
  
" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"
string station = \"\";
string baseDP=\"\";
string obsDP=\"\";
string firstObservation=\"\";
int    curSWLevel = 0;
int    hookedSWLevel = 0;
bool bDoubleClicked  = false;
dyn_string observations;
bool observationChangedConnected = false;
bool stateConnected = false;
int  swlvl;
string baseDPconnected;
bool swinvalid;


// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(station,\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   

  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"SWcontroller_small.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Processes\",\"ChangeTab\");
  }


  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}                       

// routine for right mouse click
void rClick() {

}                       " 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 0
"process"
""
1 230 150 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E 1 0 1 0 -10 1 E 0 10 14 19
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
