V 11
1
LANG:1 0 
PANEL,-1 -1 177 78 N "_3DFace" 0
"main()
{
  baseDP = \"LOFAR_PermSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);
  
  dyn_string obslist;
  int i = dpGet(MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\",obslist);
  // remove all pipelines
  for (i=1; i<=dynlen(obslist); i++) {
    if (!navFunct_isObservation(obslist[i])) continue;
    dynAppend(observationsList,obslist[i]);
  }
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";  
  
  // because CobaltProcesses claim their datapoints when the observation is actually running we need to connect to all these observations
  // and give a signal when the runstate of one of them changes to running to trigger the Cobalt point collection
  
  LOG_DEBUG(\"ObservationFlow_cobaltGPUProcs.pnl:main|observationList: \"+observationsList);

  dyn_string obsConnections = makeDynString();  
  for (int i = 1; i <= dynlen(observationsList) ; i++) {
    // compose the WinCC OA DP name 
    string obsName = \"LOFAR_ObsSW_\"+observationsList[i]; 

    // Ask the claimmanager for the temp obs representation
    string obsDP=MainDBName+claimManager_nameToRealName(obsName);

    // add DP to list with all connects
    if (! dynContains(obsConnections,obsDP+\".runState\")) dynAppend(obsConnections,obsDP+\".runState\");
  }
  
  if (dynlen(oldObsConnections) > 0) {
    // disconnect old observations
    if (dpDisconnect(\"monitorRunStates\",oldObsConnections) < 0) {
      navFunct_printLastError(\"ObservationFlow_cobaltGPUProcs.pnl:main\", getLastError());
    }
    dynClear(oldObsConnections);
  }
  
  // connect to runState for all active observations  
  if (dynlen(obsConnections) > 0 && dpConnect(\"monitorRunStates\",obsConnections) == -1) {
    LOG_ERROR(\"ObservationFlow_cobaltGPUProcs.pnl:main|ERROR: couldn't connect to : \"+obsConnections+ \" \" + getLastError());
  } else if (dynlen(obsConnections) > 0) {
    oldObsConnections = obsConnections;
  }  else {
    setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");
  }       	
}" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"

string baseDP          = \"\";
dyn_string observationsList;
dyn_string oldObsConnections;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
string activeObsDP = \"\";
string database;
dyn_string gpuprocs;
dyn_string oldConnectToGPUProcs;
bool connectedGPUProcs;

bool selectedObservations=false;

bool bDoubleClicked  = false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked && dynlen(gpuprocs) > 0) {
      navPanel_setEvent(\"observationFlow_cobaltGPUProcs.pnl\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true; 
  if (dynlen(gpuprocs) > 0) {
  
    LOG_DEBUG(\"observationFlow_cobaltGPUProcs.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \" + baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Processes\",\"ChangeTab\");
  }
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;
}

// routine for right mouse click
void rClick() {
  if (dynlen(gpuprocs) > 0) {
    navPanel_setEvent(\"observationFlow_cobaltGPUProcs.pnl\",\"EventRightClick\");
  }
}

void monitorRunStates(dyn_string dpList,dyn_string runStates) {
  for (int i=1; i<= dynlen(runStates); i++) {
    if (runStates[i] == \"Running\" || runStates[i] == \"Quiting\") {
      connectGPUProcs(runStates[i]);
      break;
    }
  }
}
// connect to GPUProcs from the active observations
void connectGPUProcs(string runState) {

  dyn_string connectToGPUProcs;
  
  // change all found DP's to contain all the elements that contain the .dropping
  if (connectedGPUProcs) {
    if (dpDisconnect(\"gpuprocCB\",oldConnectToGPUProcs) < 0) {
      navFunct_printLastError(\"ObservationFlow_cobaltGPUProcs.pnl:connectGPUProcs\", getLastError());
    }
    dynClear(oldConnectToGPUProcs);
    connectedGPUProcs = false;
  }  
  
  if (dynlen(observationsList) == 1 && runState == \"Quiting\") {
    setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");
    return;
  }

  //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {


    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      // get all the GPUProcs used by this observation
      gpuprocs = navFunct_getGPUProcsForObservation(observationsList[i]);
      for (int i=1; i<= dynlen(gpuprocs); i++) {
        if (! dynContains(connectToGPUProcs,gpuprocs[i]+\".dropping:_online.._value\")) dynAppend(connectToGPUProcs,gpuprocs[i]+\".dropping:_online.._value\");
        if (! dynContains(connectToGPUProcs,gpuprocs[i]+\".dropped:_online.._value\")) dynAppend(connectToGPUProcs,gpuprocs[i]+\".dropped:_online.._value\");
        if (! dynContains(connectToGPUProcs,gpuprocs[i]+\".subband:_online.._value\")) dynAppend(connectToGPUProcs,gpuprocs[i]+\".subband:_online.._value\");
        if (! dynContains(connectToGPUProcs,gpuprocs[i]+\".dataProductType:_online.._value\")) dynAppend(connectToGPUProcs,gpuprocs[i]+\".dataProductType:_online.._value\");
      }
      if (dynlen(gpuprocs) > 0) baseDP = gpuprocs[1];
    }
    
    // check if the required datapoint for this view is enabled and accessible
    if (navFunct_dpReachable(CEPDBName) && dynlen(connectToGPUProcs)>0 ){
      if (dpConnect(\"gpuprocCB\", connectToGPUProcs) == -1) {
        setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {
        connectedGPUProcs = true;
        oldConnectToGPUProcs = connectToGPUProcs;
      }
    } else {
      setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");
    }
  } else {
      setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");    
  }
}


void gpuprocCB(dyn_string dps, dyn_dyn_anytype values)
{
  LOG_DEBUG(\"ObservationFlow_cobaltGPUProcs.pnl:gpuProcCB| entered\");
  string color = \"Lofar_operational\";
  
  // Here we get dropping values. 
  // dps[i]  contains the GPUproc that is dropping
  // vals[i]  contains list of all subbands with on vals[i][j]  the subband if it is dropping
  string toolTipText = \"Dropping GPUProcs<br>\";
  
  for (int i = 1; i <= dynlen(dps); i+=4) {
    string dp = dpSubStr(dps[i],DPSUB_DP);
    dyn_bool dropping = values[i];
    if (dynContains(dropping,TRUE )) {
      color = \"Lofar_broken\";
//      DebugN(\"val i+1 \",values[i+1]);
//      DebugN(\"val i+2 \",values[i+2]);
//      DebugN(\"val i+3 \",values[i+3]);
      
      dyn_float dropped;
      dyn_int subband;
      string dataProductType;
      bool error = false;
      if (i+1 <= dynlen(values)) {
        dropped = values[i+1];
      } else {
        LOG_ERROR(\"ObservationFlow_cobaltGPUProcs.pnl:gpuProcCB| error too less data, needed : \"+ i+1 +\" got: \"+dynlen(values));
        error = true;
      }
      if (i+2 <= dynlen(values)){
        subband = values[i+2];
      } else {
        LOG_ERROR(\"ObservationFlow_cobaltGPUProcs.pnl:gpuProcCB| error too less data, needed : \"+ i+2 +\" got: \"+dynlen(values));
        error = true;
      }
      if (i+3 <= dynlen(values)) {
        dataProductType = values[i+3];
      } else {
        LOG_ERROR(\"ObservationFlow_cobaltGPUProcs.pnl:gpuProcCB| error too less data, needed : \"+ i+3 +\" got: \"+dynlen(values));
        error = true;
      }
      
      for (int j = 1; j <= dynlen(dropped); j++) {
        if (dropping[j] == TRUE && !error) {
          toolTipText+=dp+\"</t> :\"+dropped[j]+\" - \"+subband[j]+\" - \"+dataProductType+\"<br>\";
        }
      }
    }
  }

  setValue(\"GPUProcsObject\",\"toolTipText\",toolTipText);
  setValue(\"GPUProcsObject\", \"foreCol\", color);
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
4 0
"GPUProcsObject"
""
1 20 30 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

0 0 0 0 0 0
E E E
0
1
LANG:1 69 All GPUProcs involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 4 1 2 1 E  20 30 50 30
6 1
"RECTANGLE1"
""
1 10 10 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E 1 0 1 10 5 0 E 10 10 40 40
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
