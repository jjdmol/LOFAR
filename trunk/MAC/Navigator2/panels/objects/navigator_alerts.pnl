V 10
1
LANG:1 0 
PANEL,-1 -1 1071 110 N "_3DFace" 1
"$name"
"main() {
  
  //delay while navigator instance is being prepared
  int retry=0;
  while (navigator_initializing() & retry < 60) {
    delay(0,100);
    retry++;
    if (retry >= 60) {
      LOG_FATAL(\"navigator_alerts.pnl:initialize|alarmTable retry longer then 2 minutes, navigatorInstance still not ready?\");
      break;
    }
  }
  
  // Check if Action point exists and connect to it if
  // it does. The action Point is the call back for this object
  itsActionDp    = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".action\";
  itsEventDp     = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".event\";
  itsSelectionDp = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".selection\";

  if ( dpExists(itsActionDp) ) {
    dpConnect(\"doAction\",false,itsActionDp);
    ALERTSACTIONDP=itsActionDp;
  }      
}

void initialize() {
  
  if (dpExists(DPNAME_NAVIGATOR + g_navigatorID+\".alarms\")) {
    dpConnect(\"alarmTrigger\",true,DPNAME_NAVIGATOR + g_navigatorID+\".alarms.time\");
  } else {
    LOG_ERROR(\"navigator_alerts.pnl:initialize|Error connecting to alarms point in nav instance.\");
  }
}

void alarmTrigger(string dp1, dyn_time aT) {
  LOG_TRACE(\"navigator_alerts.pnl:initialize|alarmTrigger received.\");
  // set selected Row to the last entry that triggered this alarm
  redraw_table(dynlen(g_alarms[ \"TIME\" ]));
}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {

  LOG_TRACE(\"navigator_alerts.pnl:doAction|Action found:\" + anAction);
  
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"navigator_alerts.pnl:doAction|found actionString: \" + actionString);
  // ChangeSelection requires 1 param and will change itsSelection and calls initTable again
  if (actionString[1] == \"Initialize\") {
    initialize();
    return;
  }
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"navigator.ctl\"

//Global mainpoint holders
string 			itsActionDp	= \"\";
string 			itsEventDp      = \"\";
dyn_string 	        itsSelectionDp  = \"\";

int nrRows=0;
int selectedRow=0;
int firstRow=0;
bool   bDoubleClicked  = false;

// routine for single mouse click
void click(int row) {
    // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    selectedRow = firstRow+row;
    setValue(\"alarm_currentLine\",\"text\",selectedRow);
  }
}

// routine for double mouse click
void dblClick(int row) {
  
  // indicate this is a doubleClick
  bDoubleClicked = true; 
  string selection=\"\";
  
  LOG_TRACE(\"navigator_alerts.pnl:DoubleClicked|doubleClick received on alarmtable row: \" + row);
  
  if (alarmTable.lineCount() < 1) {
    bDoubleClicked = false;  
    return;
  }
  dyn_anytype result = alarmTable.getLineN(row);
  LOG_DEBUG(\"navigator_alerts.pnl:DoubleClicked|Result: \"+result);
  string dp = result[2];  
  if (dpExists(dp) ) {
    LOG_DEBUG(\"navigator_alerts.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+dp);
    g_currentDatapoint=dp;
    if (strpos(dp,\"LOFAR_PIC\") >= 0) {
        selection=\"Hardware\";
    } else if (strpos(dp,\"LOFAR_ObsSW\") >= 0) {
      if (strpos(dp,\"Ctrl\") >= 0) {
        selection=\"Processes\";
      } else {
        selection=\"Observations\";
      }
    } else if (strpos(dp,\"LOFAR_PermSW\") >= 0) {
      selection=\"Processes\";
    }         
    setEvent(selection,\"ChangeTab\");
  }
  
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

// routine for right mouse click
void rClick(int row) {
  LOG_TRACE(\"navigator_alerts.pnl:RightMouseClick|Right mouseclick received on alarmtable row: \" + row);
  
  if (alarmTable.lineCount() < 1) {
    return;
  }
  dyn_anytype result = alarmTable.getLineN(row);
  LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|Result: \"+result);
  time aTime = result[1];
  string sTime = result[1];
  string dp = result[2]+\".status.state\";
  string message = result[3];
  int status=-1;
  if (result[4] == \"ACK\") {
    status = ACK;
  } else if (result[4] == \"WENT\") {
    status = WENT;
  } else if (result[4] == \"CAME\") {
    status = CAME;
  }  

  LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|aTime: \"+aTime);
  LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|sTime: \"+sTime);
  LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|Looking for dp: \"+dp+\" status: \"+status);
 

  //to narrow actions determine if the state is 'acknowledgable'
  if (status == ACK) return;
  
  // ok rest should be possible to acknowledge
  // find the entry in the table
  int iPos=-1;
  for (int i=1; i <=dynlen(g_alarms[ \"TIME\" ]);i++) {
    LOG_DEBUG( \"navigator_alerts.pnl:RightMouseClick|Time in table: \");
    LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|g_alarms: \"+g_alarms[ \"TIME\" ][i]);
    LOG_DEBUG( \"navigator_alerts.pnl:RightMouseClick|dpname in table: \"+g_alarms[ \"DPNAME\" ][i]);
    LOG_DEBUG( \"navigator_alerts.pnl:RightMouseClick|status in table: \"+g_alarms[ \"STATUS\" ][i]);
    if ( g_alarms[ \"TIME\" ][i] == sTime &&
         g_alarms[ \"DPNAME\" ][i] == dp &&
         g_alarms[ \"STATUS\" ][i] == status) {
      iPos = i;
      break;
    }
  }
  
  if (iPos == -1) {
    LOG_ERROR(\"navigator_alerts.pnl:RightMouseClick|Strange, couldn't find chosen entry in alarm global list.\");
    return;
  }
    
  // define the popupMenu
  dyn_string txt;
  int answer;
  txt=makeDynString(\"PUSH_BUTTON, Acknowledge, 1, 1\");
  popupMenu(txt,answer);

  // acknowledge pushed, get the dp, and state and determine if 
  if (answer == 1) {

    // new state
    int state;
    if (g_alarms[ \"STATE\" ][iPos] == SUSPICIOUS_CAME ||
        g_alarms[ \"STATE\" ][iPos] == SUSPICIOUS_WENT) {
      state = SUSPICIOUS;
    } else if (g_alarms[ \"STATE\" ][iPos] == BROKEN_CAME ||
        g_alarms[ \"STATE\" ][iPos] == BROKEN_WENT) {
      state = BROKEN;
    }
  
    // check if the old state in the database is allready lower then the one in the global list.
    // in that case we need to keep the DB state, since the state could have been changed b4 the ack was done.
    // and the complete alarm can be removed from the global.
    int dpState=0;
    bool changed = false;
    dpGet(dp,dpState);
    if (dpState < state) {
      dynRemove(g_alarms[\"DPNAME\" ],iPos);
      dynRemove(g_alarms[\"TIME\"   ],iPos);
      dynRemove(g_alarms[\"STATE\"  ],iPos);
      dynRemove(g_alarms[\"MESSAGE\"],iPos);
      dynRemove(g_alarms[\"STATUS\" ],iPos);
      // rewrite database  
      if (dpExists(DPNAME_NAVIGATOR + g_navigatorID + \".alarms\")) {
        LOG_DEBUG(\"navigator_alerts.pnl:RightMouseClick|Storing the alarms in db\");
        setAlarms(DPNAME_NAVIGATOR + g_navigatorID + \".alarms\",
                  g_alarms[ \"TIME\"],g_alarms[ \"DPNAME\"   ],g_alarms[ \"MESSAGE\"  ],g_alarms[ \"STATE\"    ],g_alarms[ \"STATUS\"   ]);
      } else {
        LOG_ERROR(\"navigator_alerts.pnl:RightMouseClick|Couldn't write alarms to navigator instance\");
      }
    } else {
     
      // now we determined the new status and state we need to write it in the databasepoint
      // to trigger the complete chain again.
      if (dpExists(\"__navObjectState\")) {
		  dpSet(\"__navObjectState.DPName\",dp,
                      \"__navObjectState.stateNr\",state,
                      \"__navObjectState.message\",message);
      }    
    }
  }
}


// *******************************************
// Name : redraw_table
// *******************************************
// Description:
// redraws the alarm table
//
//
// Returns:
//    nothing
// *******************************************

void redraw_table(int line) {
  // clear table
  LOG_DEBUG(\"navigator_alerts.pnl:redraw_table|deleting all entries from alarms\");
  alarmTable.deleteAllLines();

  // set alarm_lineCount
  setValue(\"alarm_lineCount\",\"text\",dynlen(g_alarms[ \"TIME\" ]));

  if (dynlen(g_alarms[ \"TIME\" ]) < 1) {
    selectedRow=0;
    firstRow=0;
    setValue(\"alarm_currentLine\",\"text\",0);
  } else {
    // check selectedRow 
    if (line > -1) {
      if (line > dynlen(g_alarms[ \"TIME\" ])-3 ){
        line =dynlen(g_alarms[ \"TIME\" ])-3;
      }
      if (line<1) {
        line=1;
      }
      setValue(\"alarm_currentLine\",\"text\",line);
      firstRow=line;
      selectedRow=line;
    } else {
      setValue(\"alarm_currentLine\",\"text\",0);
      firstRow = dynlen(g_alarms[ \"TIME\" ])-3;
      if (firstRow < 1) {
        firstRow=1;
      } 
    }
  }
  

  showMapping(g_alarms,\"g_alarms in alertpanel\");
  LOG_DEBUG(\"navigator_alerts.pnl:redraw_table|Nr of alerts in global table: \" + dynlen(g_alarms[\"TIME\"]));
  
  //append  4  alarms
  for (int j=0; j<=3  ; j++) {
    int i=firstRow+j;
    if (i <= dynlen(g_alarms[ \"TIME\" ]) && i > 0) {
      LOG_DEBUG(\"navigator_alerts.pnl:redraw_table|Adding alarmTable line : \"+i);
 	    alarmTable.appendLine(\"Time\",g_alarms[\"TIME\"][i],\"Datapoint\",dpSubStr(g_alarms[\"DPNAME\"][i],DPSUB_SYS_DP),
                            \"Message\",g_alarms[\"MESSAGE\"][i],\"Status\",getAlarmStatus(g_alarms[\"STATUS\"][i]));

      string aColor=getStateColor(g_alarms[\"STATE\"][i]);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Time\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Datapoint\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Message\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Status\",aColor);
    } else {
      string aColor=\"white\";
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Time\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Datapoint\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Message\",aColor);
      setValue(\"alarmTable\",\"cellBackColRC\",j,\"Status\",aColor);
    }
  }
}

void setEvent(dyn_string aSelection,string event) {
  if (navigator_initializing()) {
    return;
  }
  string anEvent=$name+\"|\"+event;
  if (dpExists(itsEventDp)) {
     dpSet(itsEventDp,anEvent);
  } else {
    LOG_ERROR(\"navigator_alerts.pnl:setEvent|\"+itsEventDp + \" Does not exist yet\");     
  }
  if (dpExists(itsSelectionDp)) {
    dpSet(itsSelectionDp,aSelection);
  } else {
    LOG_ERROR(\"navigator_alerts.pnl:setEvent|\"+itsSelectionDp + \" Does not exist yet\");     
  }
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"alarm_up"
""
1 961.010033444811 16.3846153846154 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

0
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
 961 17 992 38

P 
6736998
"pictures/up_en.gif"
2
LANG:1 0 
LANG:0 0 
"main()
{
  // check if first viewwindow row is bigger then 1
  // also check if the result
  if (firstRow > 1) {
    firstRow--;
    
    // redraw Table
    redraw_table(firstRow);
  }
}" 0
 E E E
13 1
"alarm_down"
""
1 961.086956521734 61.3846153846154 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

0
2
LANG:1 84 -*-arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,505,0,0,0,0,0,0,0,0,arial
LANG:0 107 -microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial
0 ""
 961 62 992 83

P 
6736998
"pictures/down_en.gif"
2
LANG:1 0 
LANG:0 0 
"main()
{
  // check if first viewwindow row is smaller then length g_alerts -3
  if (firstRow < (dynlen(g_alarms[ \"TIME\" ])-3) ) {
    firstRow++;
    
    // redraw Table
    redraw_table(firstRow);
  }
}" 0
 E E E
2 8
"alarm_currentLine"
""
1 811.395085066162 67 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
14 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 1.04347826086957 0 1 -93.3913043478308 23 0 E 977 21 1019 37
0 2 2 "4d" 4 0 0 66 0 0  977 21 1
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
2
LANG:1 1 0
LANG:0 1 0
2 9
"alarm_lineCount"
""
1 987.086956521734 44 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
16 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 987.086956521734 44 1029.08695652173 60
0 2 2 "4d" 4 0 0 64 0 0  987.086956521734 44 1
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
2
LANG:1 1 0
LANG:0 1 0
2 10
"Text1"
""
1 975.086956521734 43 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
18 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 975.086956521734 43 979 60
0 2 2 "0s" 0 0 0 192 0 0  975.086956521734 43 1
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
2
LANG:1 1 /
LANG:0 1 /
25 11
"alarmTable"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main(int row, string column)
{
  rClick(row);
}" 0
 "main(int row, string column)
{
  dblClick(row);
}" 0

19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 96 -*-Arial Black-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial Black
0 ""
 8 8 939 92
E"main(int row, string column, string value)
{
  click(row);
}" 0
 0 0 1 4 4 "Time" 13 1 0 "s" 1
LANG:1 4 Time
E
1
LANG:1 28 Time the alarm was triggered

140 "Datapoint" 35 1 0 "s" 1
LANG:1 9 Datapoint
E
1
LANG:1 34 datapoint that triggered the alarm

361 "Message" 31 1 0 "s" 1
LANG:1 7 Message
E
1
LANG:1 39 extra AlarmMessage set by the Software 

325 "Status" 9 1 0 "s" 1
LANG:1 6 Status
E
1
LANG:1 22 Came,went, Acknowledge

100 
20 20 "" 1 1
LANG:1 2 #1
"" 1 1
LANG:1 2 #2
"" 1 1
LANG:1 2 #3
"" 1 1
LANG:1 2 #4
10 10
1
LANG:1 96 -*-Arial Black-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial Black
0 ""
0 0 0 1 7
1 0
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0