V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 260 496 N "_3DFace" 2
"$name"
"$selection"
"main()
{

  //delay while navigator instance is being prepared
  int retry=0;
  while (navigator_initializing() & retry < 60) {
    delay(0,100);
    retry++;
    if (retry >= 60) {
      LOG_FATAL(\"navigator_typeSelector.pnl:Initialize|typeSelector retry longer then 2 minutes, navigatorInstance still not ready?\");
      break;
    }
  }
  // Check if Action point exists and connect to it if
  // it does. The action Point is the call back for this object
  itsActionDp    = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".action\";
  itsEventDp     = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".event\";
  itsSelectionDp = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".selection\";
    
  itsSelection = $selection;
  typeSelector.text=itsSelection;
  if ( dpExists(itsActionDp) ) {
    dpConnect(\"doAction\",false,itsActionDp);
    if ($name == \"fw_topDetailSelection\") {
      TOPDETAILSELECTIONACTIONDP=itsActionDp;
    } else if ($name == \"fw_bottomDetailSelection\") {
      BOTTOMDETAILSELECTIONACTIONDP=itsActionDp;
    } else {
      LOG_WARN(\"navigator_typeSelector.pnl:Initialize|!!! wrong name found, can't set global action dp for : \" + $name);
    }
  }
  
  
  
}

void initialize() {  
  LOG_TRACE(\"navigator_typeSelector.pnl:Initialize| \"+$name+\" start\");

  changeSelection(itsSelection);
  
}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {
  LOG_TRACE(\"navigator_typeSelector.pnl:doAction| found:\" + anAction);
  
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"navigator_typeSelector.pnl:doAction|found actionString: \" + actionString);
  
  // check for actions and call right routine.
  // Highlight

  if (actionString[1]== \"Highlight\") {
    if (dynRemove(actionString,1) < 0) {
      LOG_ERROR(\"navigator_typeSelector.pnl:doAction| Error removing action from actionString\");
    }
    delay(0,75);
    doHighlight(actionString);
    return;
  }
  
  // Initialize
  if (actionString[1]== \"Initialize\") {
    initialize();
    return;
  }

  // Update
  if (actionString[1]== \"Update\") {
    // fill Hardware
    updateHWList();
       
    // fill processes
    updateProcList();
    
    // fill observations
    updateObsList();
    return;
  }
}



void doHighlight(dyn_string actionString) {
  LOG_TRACE(\"navigator_typeSelector.pnl:doHighlight| entered with: \"+actionString);
  
  // Highlight contains the names of the items in  the treelist that should be highlighted.
  // make a list of them for parsing
  
  if (dynlen(actionString) < 1) {
    return;
  }
  
  
    
  if (itsSelection == \"Processes\") {
    // action asked for highlighting of processes so we have to determine
    // which items in the current selectionlist make use of the processes asked for.
    
    shape aShape=getShape(\"processesTree\");
    selectTreeItems(aShape,actionString,\"\");

  } else if (itsSelection == \"Hardware\") {
    // action asked for highlighting of hardware components so we have to determine
    // which items in the current selectionlist make use of the components asked for.

    shape aShape=getShape(\"hardwareTree\");
    selectTreeItems(aShape,actionString,\"\");
    
  } else if (itsSelection == \"Observations\") {
    // action asked for highlighting of observations so we have to determine
    // which items in the current selectionlist make use of the components asked for.
    
    shape aShape=getShape(\"plannedObs\");
    selectTreeItems(aShape,actionString,\"\");
    shape aShape=getShape(\"activeObs\");
    selectTreeItems(aShape,actionString,\"\");
    shape aShape=getShape(\"finishedObs\");
    selectTreeItems(aShape,actionString,\"\");
  } else {
    LOG_DEBUG(\"navigator_typeSelector.pnl:doHighlight|illegal call for Highlight: \" + tab);
  }
}

/* selectTreeItems
 * 
 * loop through all children from a tree and see if any of the items in the actionstring is available,
 * if so make sure item is visible and set to selected
 *
 * params:
 * tree          - shape that contains the present tree
 * actionString  - all strings that need to be examined
 * parent        - parent to start the search on
 *
 */
void selectTreeItems(shape tree,dyn_string actionString,string parent) {

  LOG_DEBUG(\"navigator_typeSelector.pnl:selectTreeItems|Entered actionString: \"+actionString+\" parent: \"+parent);
  dyn_string ids = tree.children(parent);
  
  for (int i = 1; i<= dynlen(ids); i++) {
    // if node step down for search
    if (dynlen(tree.children(ids[i])) > 0) {
      selectTreeItems(tree,actionString,ids[i]);
    }

    bool found=false;
    for (int j=1; j<= dynlen(actionString); j++) {
      if (tree.getText(ids[i],0) == actionString[j] ){
        found=true;
        break;
      }
    }
    if (found) {
      tree.ensureItemVisible(ids[i]);
      tree.setIcon(ids[i],0,\"16_hand_right.gif\");
    } else {
      tree.setIcon(ids[i],0,\"16_empty.gif\");
    }  
  }
}

" 0
 E E E E 1 0 0 0  -270 -30
""0  1
E "//Global mainpoint holders
string 		itsActionDp     = \"\";
string 		itsEventDp      = \"\";
dyn_string 	itsSelectionDp  = \"\";
bool            bDoubleClicked  = false;


string itsSelection = \"\";
bool   isSelected   = false;
string baseDP=\"\";

void setEvent(dyn_string aSelection,string event) {
  if (navigator_initializing()) {
    return;
  }
  string anEvent=$name+\"|\"+event;
  if (dpExists(itsEventDp)) {
     dpSet(itsEventDp,anEvent);
  } else {
    LOG_ERROR(\"navigator_typeSelector.pnl:setEvent|\"+itsEventDp + \" Does not exist yet\");     
  }
  if (dpExists(itsSelectionDp)) {
    dpSet(itsSelectionDp,aSelection);
  } else {
    LOG_ERROR(\"navigator_typeSelector.pnl:setEvent|\"+itsSelectionDp + \" Does not exist yet\");     
  }
}

//
// Change the panel to the chosen selection
//
void changeSelection(string str) {


  if (str == \"Observations\" ) {
                
    plannedObs.visible  = true;	
    activeObs.visible  = true;	
    finishedObs.visible = true;
    hardwareTree.visible    = false;
    processesTree.visible    = false;			
  }
  else if (str == \"Hardware\" ) {
    plannedObs.visible  = false;	
    activeObs.visible  = false;	
    finishedObs.visible = false;
    hardwareTree.visible    = true;
    processesTree.visible    = false;			
  }
  else if (str == \"Processes\" ) {
    plannedObs.visible  = false;	
    activeObs.visible  = false;	
    finishedObs.visible = false;
    hardwareTree.visible    = false;
    processesTree.visible    = true;			
  }
  itsSelection=str;       
}

void click(string info) {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {  
   setEvent(info,\"EventClick\");
 }
}

void dblClick(string info) {
  // indicate this is a doubleClick
  bDoubleClicked = true; 
    
  // change Active datapoint to the one from this observation.
  setEvent(info,\"ChangePanel\");
  
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

void rClick(string info) {
  setEvent(info,\"EventRightClick\");
}

void updateHWList()
{
  dyn_string list;
  if (dpExists(DPNAME_NAVIGATOR + g_navigatorID + \".hardwareList\")) {
    dpGet(DPNAME_NAVIGATOR + g_navigatorID + \".hardwareList\",list);
  } else {
    LOG_ERROR(\"navigator_typeSelector.pnl:updateHWList|Error retrieving Hardware lists \" + getLastError());
    return;
  }  
  LOG_TRACE(\"navigator_typeSelector.pnl:updateHW|Found Hardware:\"+list);

  hardwareTree.clear();
  if (dynlen(list) <= 0 || list[1] == \"\") return;
  for (int i=1; i <=dynlen(list); i++) {
    // split entries in parent,name and text
    dyn_string spl = strsplit(list[i],\",\");
    hardwareTree.appendItem(spl[1],spl[3],spl[2]);
    hardwareTree.ensureItemVisible(spl[3]);
    hardwareTree.setIcon(spl[3],0,\"16_empty.gif\");
  }
}

void updateProcList()
{
  dyn_string list;
  if (dpExists(DPNAME_NAVIGATOR + g_navigatorID + \".processesList\")) {
    dpGet(DPNAME_NAVIGATOR + g_navigatorID + \".processesList\",list);
  } else {
    LOG_ERROR(\"navigator_typeSelector.pnl:updateProcList|Error retrieving pocessesList lists \" + getLastError());
    return;
  }  
  LOG_TRACE(\"navigator_typeSelector.pnl:updateProcList|Found Processes:\"+list);
  processesTree.clear();
  if (dynlen(list) <= 0 || list[1]==\"\") return;
  for (int i=1; i <=dynlen(list); i++) {
    // split entries in parent and name
    dyn_string spl = strsplit(list[i],\",\");
    processesTree.appendItem(spl[1],spl[3],spl[2]);
    processesTree.ensureItemVisible(spl[3]);
    processesTree.setIcon(spl[3],0,\"16_empty.gif\");
  }
}

void updateObsList()
{
  dyn_string list;
  if (!dpExists(\"LOFAR_PermSW_MACScheduler.plannedObservations\")) {
    dpGet(\"LOFAR_PermSW_MACScheduler.plannedObservations\",list);
    LOG_ERROR(\"navigator_typeSelector.pnl:updateObsList|Error retrieving plannedObservations lists \" + getLastError());
    return;
  } 
  updateObsTable(\"plannedObs\",list); 

  if (!dpExists(\"LOFAR_PermSW_MACScheduler.activeObservations\")) {
    dpGet(\"LOFAR_PermSW_MACScheduler.activeObservations\",list);
    LOG_ERROR(\"navigator_typeSelector.pnl:updateObsList|Error retrieving activeObservations lists \" + getLastError());
    return;
  } 
  updateObsTable(\"activeObs\",list); 
  
  if (!dpExists(\"LOFAR_PermSW_MACScheduler.finishedObservations\")) {
    dpGet(\"LOFAR_PermSW_MACScheduler.finishedObservations\",list);
    LOG_ERROR(\"navigator_typeSelector.pnl:updateObsList|Error retrieving finishedObservations lists \" + getLastError());
    return;
  } 
  updateObsTable(\"finishedObs\",list); 
}

void updateObsTable(string shapeName,dyn_string list) {
  LOG_TRACE(\"navigator_typeSelector.pnl:updateObsTable|\"+shapeName+\": Found observations:\"+list);
  shape itsShape=getShape(shapeName);
  itsShape.clear();
  if (dynlen(list) <= 0 || list[1]==\"\") return;
  // iterate over the found entries and fill the table
  for (int i=1; i<= dynlen(list);i++) {
    itsShape.appendItem(\"\",list[i],list[i]);
    itsShape.ensureItemVisible(list[i]);
    itsShape.setIcon(list[i],0,\"16_empty.gif\");
  }
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
29 6
"hardwareTree"
""
1 20 80 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 8 hardware

2
"selectionMode" "enum 0"
"allColumnsShowFocus" "bool TRUE"
 10 30 212 378
10 TreeWidget
7
0 "expanded" "(string id)"
""
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"  click(typeSelector.text+\"|\"+hardwareTree.getText(hardwareTree.selectedItem(),0));"
0 "doubleClicked" "(string id, int column)"
"  dblClick(typeSelector.text+\"|\"+hardwareTree.selectedItem());"
0 "rightClicked" "(string id, int column)"
"  rClick(typeSelector.text+\"|\"+hardwareTree.getText(hardwareTree.selectedItem(),0));"
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  hardwareTree.addColumn(\"Hardware\");
  hardwareTree.setColumnWidth(0,201);
  
}" 0
29 7
"processesTree"
""
1 20 80 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 9 processes

1
"allColumnsShowFocus" "bool FALSE"
 10 30 212 378
10 TreeWidget
7
0 "expanded" "(string id)"
""
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"  click(typeSelector.text+\"|\"+processesTree.getText(processesTree.selectedItem(),0));"
0 "doubleClicked" "(string id, int column)"
"  dblClick(typeSelector.text+\"|\"+processesTree.selectedItem());"
0 "rightClicked" "(string id, int column)"
"  rClick(typeSelector.text+\"|\"+processesTree.getText(processesTree.selectedItem(),0));"
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  processesTree.addColumn(\"Processes\");
  processesTree.setColumnWidth(0,201);
}" 0
22 5
"typeSelector"
""
1 10 7 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 8 5 156 32
3
1
LANG:1 12 Observations

1
1
LANG:1 8 Hardware

0
1
LANG:1 9 Processes

0

E
"main()
{
  setEvent(typeSelector.text,\"|ChangeSelection\");
  changeSelection(typeSelector.text);
}

" 0

E
 0 0
29 8
"plannedObs"
""
1 370 60 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 20 Planned Observations

0
 10 30 212 135
10 TreeWidget
7
0 "expanded" "(string id)"
""
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"   click(typeSelector.text+\"|PlannedObs|\"+plannedObs.getText(plannedObs.selectedItem(),0));"
0 "doubleClicked" "(string id, int column)"
"  dblClick(typeSelector.text+\"|PlannedObs|\"+plannedObs.selectedItem());"
0 "rightClicked" "(string id, int column)"
"  rClick(typeSelector.text+\"|PlannedObs|\"+plannedObs.getText(plannedObs.selectedItem(),0));"
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  plannedObs.addColumn(\"Planned Observations\");
  plannedObs.setColumnWidth(0,201);
}
" 0
29 9
"activeObs"
""
1 370 74 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 19 Active Observations

0
 10 134 212 274
10 TreeWidget
7
0 "expanded" "(string id)"
""
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"   click(typeSelector.text+\"|ActiveObs|\"+activeObs.getText(activeObs.selectedItem(),0));"
0 "doubleClicked" "(string id, int column)"
"  dblClick(typeSelector.text+\"|ActiveObs|\"+activeObs.selectedItem());"
0 "rightClicked" "(string id, int column)"
"  rClick(typeSelector.text+\"|ActiveObs|\"+activeObs.getText(activeObs.selectedItem(),0));"
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  activeObs.addColumn(\"Active Observations\");
  activeObs.setColumnWidth(0,201);
}
" 0
29 10
"finishedObs"
""
1 370 50 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 21 Finished Observations

0
 10 273 212 378
10 TreeWidget
7
0 "expanded" "(string id)"
""
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"   click(typeSelector.text+\"|FinishedObs|\"+finishedObs.getText(finishedObs.selectedItem(),0));"
0 "doubleClicked" "(string id, int column)"
"  dblClick(typeSelector.text+\"|FinishedObs|\"+finishedObs.selectedItem());"
0 "rightClicked" "(string id, int column)"
"  rClick(typeSelector.text+\"|FinishedObs|\"+finishedObs.getText(finishedObs.selectedItem(),0));"
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  finishedObs.addColumn(\"Finished Observations\");
  finishedObs.setColumnWidth(0,201);
}
" 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0