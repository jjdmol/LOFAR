V 10
1
LANG:1 4 view
PANEL,350 258 950 740 N "_3DFace" 2
"$configDatapoint"
"$datapoint"
"main()
{
  startThread(\"triggerRecord\");
  strreplace(PICTURE_PATH, \"/\", \"\\\\\");

  if ((dpGetElementName($datapoint)==\"\") && dpAccessable($configDatapoint + \".1.active\"))
  {
    navViewPlotChangeState();
    navViewPlotMain();
    
  }

}


void triggerRecord()
{
  dpConnect(\"RecordFunction\", DPNAME_NAVIGATOR + g_navigatorID + \".triggerRecord\");
}

RecordFunction(string dp1, bool triggerRecord)
{
  DebugN(\"And here\");
  //\"CCU1:__navU0000_TLcuPicSubRack_config_Plot_Plot-1\"
  
  //\"STSLCU2:PIC_Rack1_SubRack1_Board1_AP1_RCU2.statisticsSubbandPower\"
  string dpName;
  dpGet(DPNAME_NAVIGATOR + g_navigatorID + \".dpRecord\", dpName);
  DebugN(\"dpName:\"+dpName);
  if(triggerRecord)
  { 
    DebugN(\"Recording has started\");
    dpConnect(\"RecordSpectrum\", dpName);
    file f;
    f = fopen(navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.dat\", \"w+\");
    fclose(f);

  }
  else
  {
    DebugN(\"Recording has stopped\");
    dpDisconnect(\"RecordSpectrum\", dpName);
    g_counter = 0;
  }
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

void RecordSpectrum(string dp1, string spectrum)
{
  g_counter++;
  //writeToFile(spectrumData);
//}

//void writeToFile(string spectrum)
//{
  //string spectrum;
  file f;
  //f = fopen(\"c:\\\\aa\\\\test.dat\", \"w+\");
  f = fopen(navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.tmp\", \"w+\");
  //DebugTN(\"#####################  Start   ######################\");  
//  for(int j=0; j<=60; j++)
//  {
    //dpGet(\"STSLCU2:PIC_Rack1_SubRack1_Board1_AP3_RCU2.statisticsSubbandPower\", spectrum);
    dyn_string out = strsplit(spectrum, \"\\n\");
    for(int i=0; i<=511; i++)
    {
      strreplace(out[i+1], i + \" \", g_counter + \" \" + i + \" \");
      fputs (out[i+1] + \"\\n\", f );    
    }
    fputs (\"\\n\", f );

//    delay(1,0);
//  }
  fclose(f);
  system(\"type \" + navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.tmp >> \" + navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.dat\");
  //DebugN(\"type \" + navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.tmp >> \" + navConfigGetPathName(g_path_temp)+navConfigGetSlashes() + \"record_1.dat\");
  DebugTN(\"##  Ready ## \"+g_counter+\" ##\");
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void navViewPlotMain()
{
  bool dpActive;       // TRUE if dp must be used for plotting 
  string dpNameToPlot; // dp to plot
  string dpToConnect;  //
  file fSpectrum;      // file to
  string spectrumData;  // dp to temperary store the spectrum data
  bool plotOneActive = TRUE;
  ////////////////////////////
  int dpXrangeMin, dpXrangeMax, dpYrangeMin, dpYrangeMax;
  unsigned dpUpdateRate; 
  dpGet($configDatapoint + \".xrangeMin\", dpXrangeMin);
  dpGet($configDatapoint + \".xrangeMax\", dpXrangeMax);
  dpGet($configDatapoint + \".yrangeMin\", dpYrangeMin);
  dpGet($configDatapoint + \".yrangeMax\", dpYrangeMax);
  dpGet($configDatapoint + \".updateRate\", dpUpdateRate);
  if(dpUpdateRate<=0)
  {
    UPDATE_RATE = 5;
  }
  else
  {
    UPDATE_RATE = dpUpdateRate;
  }
  
  if(dpXrangeMin==0 && dpXrangeMax==0)
  {
    xrangeMin = 0;
    xrangeMax = 0;
  }
  else
  {
    xrangeMin = dpXrangeMin;
    xrangeMax = dpXrangeMax;
  }
  
  if(dpYrangeMin==0 && dpYrangeMax==0)
  {
    yrangeMin = 0;
    yrangeMax = 0;
  }
  else
  {
    yrangeMin = dpYrangeMin;
    yrangeMax = dpYrangeMax;
  }

  ///////////////////////////
  
  while(1)
  {
    delay(1,0);
    if(\"PLAY\"==PLOT_STATE || \"STEP\"==PLOT_STATE) // 
    {
      // perform this for every datapoint configured to plot
      for(int i=1; i<=8; i++)
      {
        dpGet($configDatapoint + \".\" + i + \".active\", dpActive);
        if(dpActive)
        {
          dpGet($configDatapoint + \".\" + i + \".dpName\", dpNameToPlot);
          dpToConnect = navViewRetrieveDpName($datapoint, dpNameToPlot);
          
          //Check or a navPMLloadPropertySet must be performed for this datapoint
          if(dynContains(dpsLoaded, dpToConnect)<1)
          {
            navPMLloadPropertySet(dpToConnect);
            dpsLoaded[dynlen(dpsLoaded)+1] = dpToConnect;
          }
          dpGet(dpToConnect, spectrumData);
          if(\"\"==spectrumData || \"0\"==spectrumData || strpos(spectrumData, \" \")<1) //if not correct data available, create alternative data
          {
            spectrumData = \"0 0\\n\";
          }
	        //write content of string to spectrum[DP_number].dat
          fSpectrum = fopen(TEMP_PATH + l_outputFileName + i + \".dat\", \"w+\");
          fputs (spectrumData, fSpectrum );
          fclose(fSpectrum);
        }
        else // generate an empty file
        {
          spectrumData = \"0 0\\n100 100\\n200 0\\n\";
          fSpectrum = fopen(TEMP_PATH + l_outputFileName + i + \".dat\", \"w+\");
          fputs (spectrumData, fSpectrum );
          fclose(fSpectrum);
        }
      }

      // All needed datfile are generated, start generating the plot file
      string timeString = getCurrentTime();
      string plotTitle = \"[\"+timeString+\"]\";
      int plotNumber=1;
      if(\"PLAY\"==PLOT_STATE || \"STEP\"==PLOT_STATE) // 
      {
        navViewPlotGenerateGnuPlotScriptFile(plotNumber, plotTitle, xrangeMin, xrangeMax, yrangeMin, yrangeMax);
        navViewPlotGenerateGnuplotOutput(plotNumber);
        delay(0,0.400);
        navViewPlotConvertGnuplotOutput(plotNumber);        
        // Delay, minimal 1 second. Config item for user
        setValue(\"plotarea1\", \"fill\",\"[pattern,[tile,bmp,gnuplot1.bmp]]\");
        if(\"STEP\"==PLOT_STATE) 
        {
          PLOT_STATE=\"PAUSE\";
          navViewPlotChangeState();
        }
      }
  
    }

      int updateRateInternal;
      if(0==UPDATE_RATE)
      {
        int updateRate;
        dpGet($configDatapoint + \".updateRate\", updateRate);
        if(updateRate>0)
        {
          updateRateInternal = updateRate - 1;
        }
        else
          updateRateInternal = updateRate;
      }
      else
      {
        if(UPDATE_RATE>0)
        {
          updateRateInternal = UPDATE_RATE -1;
        }
        else
        {
          updateRateInternal = UPDATE_RATE;
        }
      }
      int secondCounter = 0;
      while(secondCounter<=updateRateInternal)
      {
        delay(1,0);
        secondCounter++;
      }

  }
}


//OLD code to try to change bmp's without blinking!!!
/*
      if(plotOneActive)
      {
        setValue(\"plot\", \"text\", \"2\");
        setValue(\"plotarea2\", \"fill\",\"[pattern,[tile,bmp,gnuplot2.bmp]]\");
        delay(1, 0.300); 
        setValue(\"plot\", \"text\", \"22\");
        setValue(\"plotarea2\", \"visible\", TRUE);
        //setValue(\"plotarea2\", \"position\", 10,40);
        delay(1, 0.300); 
        setValue(\"plot\", \"text\", \"222\");
        setValue(\"plotarea1\", \"visible\", FALSE);
        //setValue(\"plotarea1\", \"position\", 940,40);
        plotOneActive = FALSE;
      }
      else
      { 
        setValue(\"plot\", \"text\", \"1\");
        setValue(\"plotarea1\", \"fill\",\"[pattern,[tile,bmp,gnuplot1.bmp]]\");
        delay(1, 0.300); 
        setValue(\"plot\", \"text\", \"11\");
        setValue(\"plotarea1\", \"visible\", TRUE);
        //setValue(\"plotarea1\", \"position\", 10, 40);
        delay(1, 0.300); 
        setValue(\"plot\", \"text\", \"111\");
        setValue(\"plotarea2\", \"visible\", FALSE);
        //setValue(\"plotarea2\", \"position\", 940,40);
        plotOneActive = TRUE;
      }
*/" 0
"main()
{

  if(dynlen(dpsLoaded)>0)
  {
    for(int i=1; i<=dynlen(dpsLoaded); i++)
    {
      navPMLunloadPropertySet(dpsLoaded[i]);
    }
  }
}" 0
E E E 1 -1 -1 0  18 10
"" 0 1
E"#uses \"gcfnav_view.ctl\"
int local_plotSizeX;
int local_plotSizeY;
string PICTURE_PATH = PROJ_PATH + \"pictures/\";
string TEMP_PATH    = \"c:\\\\temp\\\\\";
string GNUPLOT_PATH = \"C:\\\\ETM\\\\GNUplot\\\\gnuplot\\\\bin\\\\\";
string PLOT_STATE = \"PLAY\";
dyn_string dpsLoaded;
int UPDATE_RATE = 0;
int xrangeMin, xrangeMax, yrangeMin, yrangeMax;
string XRANGE, YRANGE;
string l_outputFileName = \"output\";
int g_counter;" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
6 105
"Border1"
""
1 10 40 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  navViewPlotContextMenu();
}

void navViewPlotContextMenu()
{
  int Answer;

  string txt_pause, txt_play;

  if (PLOT_STATE==\"PLAY\")
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 1\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 0\";
  }
  else if (PLOT_STATE==\"PAUSE\")
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 0\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 1\";
  }
  else
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 1\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 1\";
  }
    
  //popupMenu(g_ContectMenuDpAccessableErrorText, Answer);
  //popupMenu(makeDynString(txt_plot_state), Answer);
  popupMenu(makeDynString(txt_pause, txt_play), Answer);
    
    switch (Answer)
    {
    case 1: // PAUSE
      PLOT_STATE=\"PAUSE\";
      navViewPlotChangeState();
      DebugN(\"case 1 - pause\");
      break;
    case 2: // PLAY
      PLOT_STATE=\"PLAY\";
      navViewPlotChangeState();
      DebugN(\"case 2 - play\");
      break;
    case 3:    
      dpSetWait($datapoint + \"_Board1_Maintenance.status:_original.._value\", 0);
      break;
    case 4:
      dpSetWait($datapoint + \"_Board1_Maintenance.status:_original.._value\", 1);
      break;
    default:
      break;
    }

}

void navViewPlotChangeState()
{
  DebugN(\"function entered\"); 
  DebugN(\"PLOT_STATE:\"+PLOT_STATE);
  if(\"PLAY\"==PLOT_STATE)
  {
    setValue(\"icon_play\",   \"visible\", TRUE);
    setValue(\"icon_pause1\", \"visible\", FALSE);
    setValue(\"icon_pause2\", \"visible\", FALSE);
    DebugN(\"play\"); 
  }
  else if (\"PAUSE\"==PLOT_STATE)
  {
    setValue(\"icon_play\",   \"visible\", FALSE);
    setValue(\"icon_pause1\", \"visible\", TRUE);
    setValue(\"icon_pause2\", \"visible\", TRUE);
    DebugN(\"pause\");
  }
  else
  {
    setValue(\"icon_play\",   \"visible\", FALSE);
    setValue(\"icon_pause1\", \"visible\", FALSE);
    setValue(\"icon_pause2\", \"visible\", FALSE);
  }


  
}


/*
void BPContextMenu()
{
  string txt_maintenance, txt_status;
  int Answer, maintenance, status;
  bool bOK;       //Variable with value FALSE
  if(dpAccessable($datapoint + \"_Board1_BP.status:_original.._value\"))
  {
    dpGet($datapoint + \"_Board1_BP.status:_original.._value\", status);
    dpGet($datapoint + \"_Board1_Maintenance.status:_original.._value\", maintenance);
    BuildContextMenu(status, maintenance, Answer);

    // Compute the chosen option
    switch (Answer)
    {
    case 2:
      dpSetWait($datapoint + \"_Board1_BP.status:_original.._value\", 0);
      break;
    case 3:
      dpSetWait($datapoint + \"_Board1_BP.status:_original.._value\", 1);
      break;
    case 10:    
      dpSetWait($datapoint + \"_Board1_Maintenance.status:_original.._value\", 0);
      //dpActivateAlert($datapoint + \"_Board1_BP.status\", bOK);
      break;
    case 11:
      dpSetWait($datapoint + \"_Board1_Maintenance.status:_original.._value\", 1);
      //dpDeactivateAlert($datapoint + \"_Board1_BP.status\", bOK);
      break;
    default:
      break;
    }
  }  
  else //$configDatapoint is not Accessable
  {
    popupMenu(g_ContectMenuDpAccessableErrorText, Answer);
  }     
}*/" 0
 E
93 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 40 940 740
6 87
"plotarea1"
""
1 10 40 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  navViewPlotContextMenu();
}

void navViewPlotContextMenu()
{
  int Answer;

  string txt_pause, txt_play, txt_ranges, txt_saveData, txt_step;
  string folderSelection = \"\";   // selected folder to write data to.
  string COPY_COMMAND = \"\";
  dyn_float resultFloat;
  dyn_string resultString;


  if (PLOT_STATE==\"PLAY\")
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 1\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 0\";
  }
  else if (PLOT_STATE==\"PAUSE\")
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 0\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 1\";
  }
  else if (PLOT_STATE==\"STEP\")
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 1\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 0\";
  }
  else
  {
    txt_pause = \"PUSH_BUTTON, Pause, 1, 1\";
    txt_play  = \"PUSH_BUTTON, Play,  2, 1\";
  }

  txt_step  = \"PUSH_BUTTON, Step,  13, 1\"; 
  txt_ranges = \"PUSH_BUTTON, Configure ..., 3, 1\";
  txt_saveData = \"PUSH_BUTTON, Save current data, 12, 1\";
  
  // Use of CASCADE button
  /*popupMenu(makeDynString(txt_pause, txt_play, txt_step, txt_ranges,
                          \"CASCADE_BUTTON,Update rate, 1\",
                          \"SEPARATOR\",
                          txt_saveData,
                          \"Update rate\",
                          \"PUSH_BUTTON,  1 sec. ,4,1\",
                          \"PUSH_BUTTON,  2 sec. ,5,1\",
                          \"PUSH_BUTTON,  3 sec. ,6,1\",
                          \"PUSH_BUTTON,  4 sec. ,7,1\",
                          \"PUSH_BUTTON,  5 sec. ,8,1\",
                          \"PUSH_BUTTON, 10 sec. ,9,1\",
                          \"PUSH_BUTTON, 20 sec. ,10,1\",
                          \"PUSH_BUTTON, 30 sec. ,11,1\"), Answer);
                   */
  popupMenu(makeDynString(txt_pause, txt_play, txt_step, txt_ranges,
                          \"SEPARATOR\", txt_saveData), Answer);
                          
    switch (Answer)
    {
    case 1: // PAUSE
      PLOT_STATE=\"PAUSE\";
      navViewPlotChangeState();
      break;
    case 2: // PLAY
      PLOT_STATE=\"PLAY\";
      navViewPlotChangeState();
      break;
    case 3:
      ChildPanelOnCentralModalReturn(\"navigator/views/plot_view_ranges.pnl\",
	                             \"Configure local settings\",
	                             makeDynString(\"$configDatapoint:\" + $configDatapoint,
				                                     \"$datapoint:\" + $datapoint,
				                                     \"$xrangeMin:\" + xrangeMin,
				                                     \"$xrangeMax:\" + xrangeMax, 
				                                     \"$yrangeMin:\" + yrangeMin, 
				                                     \"$yrangeMax:\" + yrangeMax,
				                                     \"$updateRate:\" + UPDATE_RATE), resultFloat, resultString);
      xrangeMin = resultString[1];
      xrangeMax = resultString[2];
      yrangeMin = resultString[3];
      yrangeMax = resultString[4];
      UPDATE_RATE = resultString[5];
      break;
    case 4:
      UPDATE_RATE = 1;
      break;
    case 5:
      UPDATE_RATE = 2;
      break;
    case 6:
      UPDATE_RATE = 3;
      break;
    case 7:
      UPDATE_RATE = 4;
      break;
    case 8:
      UPDATE_RATE = 5;
      break;
    case 9:
      UPDATE_RATE = 10;
      break;
    case 10:
      UPDATE_RATE = 20;
      break;
    case 11:
      UPDATE_RATE = 30;
      break;
    case 12:
      PLOT_STATE=\"PAUSE\";
      navViewPlotChangeState();
      folderSelector(folderSelection);
      DebugN(\"folderSelection: \"+folderSelection);
      if(folderSelection!=\"\")
      {
        if(_WIN32)
        {
          strreplace(folderSelection, \"/\", \"\\\\\");
          COPY_COMMAND = \"copy\";
        }
        else
        {
          strreplace(folderSelection, \"/\", \"//\");
          COPY_COMMAND = \"cp\";
        }
        for(int i=1; i<+4; i++)
        {
          bool Active;
          dpGet($configDatapoint + \".\"+i+\".active\", Active);
          if(Active)
          {
            system(COPY_COMMAND + \" \" + TEMP_PATH + l_outputFileName + i+\".dat \"+ folderSelection);
          }
        }
      }
      PLOT_STATE=\"PLAY\";
      navViewPlotChangeState();
      break;
    case 13: // STEP
      PLOT_STATE=\"STEP\";
      navViewPlotChangeState();
      break;
    default:
      break;
    }
}" 0
 E
76 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 40 940 740
10 92
"icon_play"
""
1 40 10 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
81 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 3 40 10
60 20
40 30
0
6 94
"icon_pause1"
""
1 70 30 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
83 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 70 10 75 30
6 95
"icon_pause2"
""
1 80 30 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
84 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 80 10 85 30
7 106
"icon_record"
""
1 20 20 E E E 1 E 0 E N {255,0,0} E N {255,0,0} E E
 E E
94 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 20 20 10 10
13 107
"Button1"
""
1 270 10 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
94 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
268 8 392 35
T 
1
LANG:1 7 Button1
"main()
{
DebugN($configDatapoint);
DebugN($datapoint);
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0