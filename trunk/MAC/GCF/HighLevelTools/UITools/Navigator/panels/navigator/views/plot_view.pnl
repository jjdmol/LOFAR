V 10
1
LANG:1 4 view
PANEL,405 201 969 740 N "_3DFace" 2
"$configDatapoint"
"$datapoint"
"main()
{
   strreplace(PICTURE_PATH, \"/\", \"\\\\\");
   DebugN(\"PICTURE_PATH:\"+PICTURE_PATH);

  if ((dpGetElementName($datapoint)==\"\") && dpAccessable($configDatapoint + \".fontSize\"))
  {
    //delete existing (old) datafiles
    if(access(TEMP_PATH + \"spectrum1.dat\", F_OK)==0)
      system(\"rm \" + TEMP_PATH + \"spectrum1.dat\");
    if ((access(TEMP_PATH + \"spectrum2.dat\", F_OK)==0))
      system(\"rm \" + TEMP_PATH + \"spectrum2.dat\");
    if ((access(TEMP_PATH + \"spectrum3.dat\", F_OK)==0))
      system(\"rm \" + TEMP_PATH + \"spectrum3.dat\");
    if ((access(TEMP_PATH + \"spectrum4.dat\", F_OK)==0))
      system(\"rm \" + TEMP_PATH + \"spectrum4.dat\");

  //dpConnect(\"navViewPlot\",	$configDatapoint + \".1.dpName:_online.._value\");
	//dpConnect(\"navViewPlot\",	$configDatapoint + \".2.dpName:_online.._value\");
	//dpConnect(\"navViewPlot\",	$configDatapoint + \".3.dpName:_online.._value\");
	//dpConnect(\"navViewPlot\",	$configDatapoint + \".4.dpName:_online.._value\");
	
    //Arranges the position and visisblity of the plot's on the subview
    dpConnect(\"navViewPlotArrangePlots\", $configDatapoint + \".1.active:_online.._value\",
                                         $configDatapoint + \".2.active:_online.._value\",
                                         $configDatapoint + \".3.active:_online.._value\",
                                         $configDatapoint + \".4.active:_online.._value\",
                                         $configDatapoint + \".5.active:_online.._value\",
                                         $configDatapoint + \".6.active:_online.._value\",
                                         $configDatapoint + \".7.active:_online.._value\",
                                         $configDatapoint + \".8.active:_online.._value\");

    //Connects the configured datapoint if active, otherwise, disconnect.
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".1.active:_online.._value\",
                                       $configDatapoint + \".1.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".2.active:_online.._value\",
                                       $configDatapoint + \".2.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".3.active:_online.._value\",
                                       $configDatapoint + \".3.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".4.active:_online.._value\",
                                       $configDatapoint + \".4.dpName:_online.._value\");
/*    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".5.active:_online.._value\",
                                       $configDatapoint + \".5.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".6.active:_online.._value\",
                                       $configDatapoint + \".6.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".7.active:_online.._value\",
                                       $configDatapoint + \".7.dpName:_online.._value\");
    dpConnect(\"navViewPlotWhenActive\", $configDatapoint + \".8.active:_online.._value\",
                                       $configDatapoint + \".8.dpName:_online.._value\");*/
                                       
    DebugN(\"PLOT_DPNAMES:\"+PLOT_DPNAMES);
  }
}

///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotWhenActive
//
// Input : 1. state or the specific plot is active or not
// Output: if active==1; dpConnect datapoint.
//         if active!=1; dpDisconnect datapoint.
///////////////////////////////////////////////////////////////////////////
navViewPlotWhenActive(string dp1, int active,
                      string dp2, string dpName)
{
  dyn_string dp1Split = strsplit(dp1, \".\");
 // string dpName;
//  dpGet($configDatapoint + \".\" + dp1Split[2] + \".dpName\", dpName);
  if(1==active)
  {
    // if(PLOT_DPNAMES[dp1Split[2]]!=$datapoint+dpName)
    // dpDisconnect(\"navViewPlotMainPlotSequence\" + dp1Split[2], PLOT_DPNAMES[dp1Split[2]]); 
    string dpToConnect = navViewRetrieveDpName($datapoint, dpName);
    navPMLloadPropertySet(dpToConnect);
    dpConnect(\"navViewPlotMainPlotSequence\" + dp1Split[2], dpToConnect);
//    PLOT_DPNAMES[dp1Split[2]]=$datapoint+dpName;
  }
  else
  {
//    if(PLOT_DPNAMES[dp1Split[2]]==$datapoint+dpName)
      dpDisconnect(\"navViewPlotMainPlotSequence\" + dp1Split[2], $datapoint+dpName);
  }
  
}

string navViewRetrieveDpName(string dollarDatapoint, string dpName)
{
  string systemName = dpSubStr(dpName, DPSUB_SYS);
  string dpToConnect;
  if(\"\"!=systemName)
  {
    dpToConnect = dpName;
  }
  else
  {
    dpToConnect = $datapoint + dpName;
  }
  return dpToConnect;
}

///////////////////////////////////////////////////////////////////////////
// Function: navViewPlot
//
// Input : variable off all the plots, whether they are active or not.
///////////////////////////////////////////////////////////////////////////
navViewPlotArrangePlots(string dp1, int dp1Active,
                        string dp2, int dp2Active,
                        string dp3, int dp3Active,
                        string dp4, int dp4Active,
                        string dp5, int dp5Active,
                        string dp6, int dp6Active,
                        string dp7, int dp7Active,
                        string dp8, int dp8Active)
{
  int panelSizeX=930;
  int panelSizeY=730;
  int totalActive = dp1Active + dp2Active + dp3Active + dp4Active;
  
  setValue(\"plot_1\", \"visible\", dp1Active );
  setValue(\"plot_2\", \"visible\", dp2Active );
  setValue(\"plot_3\", \"visible\", dp3Active );
  setValue(\"plot_4\", \"visible\", dp4Active );

  //Make a list of all the active plots
  dyn_string activePlots;
  if(dp1Active==1)
    activePlots[dynlen(activePlots)+1] = 1;
  if(dp2Active==1)
    activePlots[dynlen(activePlots)+1] = 2;
  if(dp3Active==1)
    activePlots[dynlen(activePlots)+1] = 3;
  if(dp4Active==1)
    activePlots[dynlen(activePlots)+1] = 4;

  float divider = dynlen(activePlots);
  if(totalActive>=1)
  {
    for(int i=1; i<=dynlen(activePlots); i++)
    {
      if(dynlen(activePlots)<5)
      {
        setValue(\"plot_\"+activePlots[i], \"scale\",  1.0, 1.0/divider);
        setValue(\"plot_\"+activePlots[i], \"position\", 10, (10 + (i-1)*(panelSizeY/divider)));
      }
      else
      {
        setValue(\"plot_\"+activePlots[i], \"scale\",  0.5, 0.25);
      }
    }
    getValue(\"plot_\"+activePlots[1], \"size\", local_plotSizeX, local_plotSizeY);
  }
}

///////////////////////////////////////////////////////////////////////////
// Function: navViewPlot
//
// Input : 1. datapoint name to plot
// Output: starts a specific plot, given as argument to the general
//         function
///////////////////////////////////////////////////////////////////////////
//navViewPlot(string dp1, string dpName)
//{
//  dyn_string dp1Split = strsplit(dp1, \".\");
//  dpConnect(\"navViewPlotMainPlotSequence\" + dp1Split[2], $datapoint+dpName);
//}


///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotMainPlotSequence1, used to start a specific gnuplot
//                                         sequence
// Input: 1. datapoint name  and spectrum data
///////////////////////////////////////////////////////////////////////////
navViewPlotMainPlotSequence1(string dp1, string spectrum_data)
{
  navViewPlotMainPlotSequence(spectrum_data, 1);
}

///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotMainPlotSequence2, used to start a specific gnuplot
//                                         sequence
// Input: 1. datapoint name  and spectrum data
///////////////////////////////////////////////////////////////////////////
navViewPlotMainPlotSequence2(string dp1, string spectrum_data)
{
  navViewPlotMainPlotSequence(spectrum_data, 2);
}

///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotMainPlotSequence
//
//
// Input: 1. datapoint name to plot
// Output: 
///////////////////////////////////////////////////////////////////////////
navViewPlotMainPlotSequence(string spectrum_data, int plotNumber)
{	

	file fSpectrum;
	int timeslot_size = 1;
  string plotTitle;
	//write content of string to spectrum[DP_number].dat
	fSpectrum = fopen(TEMP_PATH +\"spectrum\" + plotNumber+ \".tmp\", \"w+\");
	fputs (spectrum_data, fSpectrum );
	fclose(fSpectrum);

	if (timeslot_size<=1)
	{
		system(\"rm \" + TEMP_PATH + \"spectrum\" + plotNumber+ \".dat\");
		system(\"copy \" + TEMP_PATH + \"spectrum\" + plotNumber+ \".tmp \" + TEMP_PATH + \"spectrum\" + plotNumber+ \".dat\");
	}
	else
	{
		system(\"type \" + TEMP_PATH + \"spectrum\" + plotNumber+ \".tmp >> \" + TEMP_PATH + \"spectrum\" + plotNumber+ \".dat\");
	}
	
  dpGet($configDatapoint + \".\" + plotNumber + \".title\", plotTitle);
  string timeString = getCurrentTime();
  plotTitle = plotTitle + \" [\"+timeString+\"]\";
  
  navViewPlotGenerateGnuPlotScriptFile(plotNumber, plotTitle);
  navViewPlotGenerateGnuplotOutput(plotNumber);
  navViewPlotConvertGnuplotOutput(plotNumber);

  setValue(\"plot_\" + plotNumber+ \"\", \"fill\",\"[pattern,[tile,bmp,gnuplot\" + plotNumber+ \".bmp]]\");
}



///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotConvertGnuplotOutput   
//           Converts the GNUPlot outputfile to a format useable by PVSS
//
// Input: 1. plotNumber: which plot is currently processed
//
// Output: file gnuplot<plotNumber>.bmp
///////////////////////////////////////////////////////////////////////////
int navViewPlotConvertGnuplotOutput(int plotNumber)
{
		//string default_dir = \"c:\\\\etm\\\\GNUplot\\\\gnuplot\\\\bin\\\\\";
		string iview_dir = \"c:\\\\etm\\\\GNUplot\\\\iview\\\\\";

		if ((access(TEMP_PATH + \"gnuplot\" + plotNumber+ \".png\", R_OK)==0) &&
				(access(iview_dir + \"i_view32.exe\", F_OK)==0))
		{
			system(\"rm \" + PICTURE_PATH + +\"gnuplot\"+plotNumber+ \".bmp\");
			system(iview_dir + \"i_view32.exe \" + TEMP_PATH + \"gnuplot\" + plotNumber + \".png /convert=\" + PICTURE_PATH + \"gnuplot\" + plotNumber+ \".bmp\");
		}
		else
		{
		  system(\"copy \" + PICTURE_PATH + \"gnuplot_error.bmp \" + PICTURE_PATH + \"gnuplot\" + plotNumber+ \".bmp\");
		}

return 0;
}


///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotGenerateGnuPlotScriptFile   
//           Generates a script file, nessacery for useing wgnuplot
//
// Input: 1. plotNumber: which plot is currently processed
//        2. Title to be displayed in the plot 
//
// Output: file gnuplot<plotNumber>.dem, script for wgnuplot.exe
///////////////////////////////////////////////////////////////////////////
int navViewPlotGenerateGnuPlotScriptFile(int plotNumber, string plotTitle)
{
  int blue=2, green=4, yellow=6, red=8, timeslot_size=1;
  time t=getCurrentTime();
  int subbandLength = 511; //starting from zero (0-511)
  string current_time;
  string script_content, spectrum_data, test, font_size=1;
  file f, fSpectrum ;
  string data_file = \"spectrum\" + plotNumber + \".dat\";
  current_time = t;

		// Create and fill script file
		f = fopen(TEMP_PATH + \"gnuplot\" + plotNumber+ \".dem\", \"w+\");
		fputs (\"#[---------------- Generated by PVSS II ----------------]\\n\", f );
		fputs (\"#[ Date and time: \" + current_time + \"  \\n\", f );
		fputs (\"#[------------------------------------------------------]\\n\", f );
		fputs (\"set terminal png \"+ font_size +\" size \" + local_plotSizeX + \",\" + local_plotSizeY +\"\\n\" , f );
		fputs (\"set palette defined (0 \\\"black\\\", \" + blue + \" \\\"blue\\\", \" + green + \" \\\"green\\\", \" + yellow + \" \\\"yellow\\\", \" + red + \" \\\"red\\\")\\n\", f);
		fputs (\"set output \\\"C:\\\\\\\\temp\\\\\\\\gnuplot\" + plotNumber+ \".png\\\"\\n\" , f );
		if (timeslot_size<=1)
		{
			fputs (\"set xrange [0:\" + subbandLength + \"]\\n\", f );
			fputs (\"set yrange [0:140]\\n\", f);
		  fputs (\"plot \\\"C:\\\\\\\\temp\\\\\\\\\" + data_file + \"\\\" using (10*log10($2)) title \\\"\"+plotTitle+\"\\\" with lines\\n\" , f );
    }
		else if (timeslot_size>1)
		{
			fputs (\"set yrange [0:\" + subbandLength + \"]\\n\", f );
			fputs (\"set pm3d map\\n\" , f );
			fputs (\"splot \\\"C:\\\\\\\\temp\\\\\\\\\" + data_file + \"\\\" title \\\"\\\"\\n\" , f );
		}
		else
		{
			fputs (\"set xrange [0:\" + subbandLength + \"]\\n\", f );
		  fputs (\"plot \\\"C:\\\\\\\\temp\\\\\\\\\" + data_file + \"\\\" title \\\"Default plot: \"+plotTitle+\"\\\"\\n\" , f );
		}
		fputs (\"#[--------------- End of file ---------------------------]\\n\", f );
		fclose(f);

return 0;
}


///////////////////////////////////////////////////////////////////////////
// Function: navViewPlotGenerateGnuplotOutput   
//           Generates a wgnuplot output picture
//
// Input: 1. plotNumber: which plot is currently processed
//
// Output: file gnuplot<plotNumber>.png, gnuplot output picture
///////////////////////////////////////////////////////////////////////////
int navViewPlotGenerateGnuplotOutput(int plotNumber)
{
		string default_dir = \"c:\\\\etm\\\\GNUplot\\\\gnuplot\\\\bin\\\\\";

		if ((access(GNUPLOT_PATH + \"wgnuplot.exe\", F_OK)==0) && 
				(access(TEMP_PATH + \"gnuplot\" + plotNumber+ \".dem\", F_OK)==0))
    {
			system(\"rm \" + TEMP_PATH + \"gnuplot\" + plotNumber+ \".png\");
			system(GNUPLOT_PATH + \"wgnuplot.exe \" + TEMP_PATH + \"gnuplot\" + plotNumber+ \".dem\");
			if (access(TEMP_PATH + \"gnuplot\" + plotNumber + \".png\", F_OK)!=0)
				return -1;								
    }
		else
		{
      return -1;
    }

  return 0;
}" 0
"main()
{
  setValue(\"plot_1\", \"visible\", FALSE );
  setValue(\"plot_2\", \"visible\", FALSE );
  setValue(\"plot_3\", \"visible\", FALSE );
  setValue(\"plot_4\", \"visible\", FALSE );
}" 0
E E E 1 -1 -1 0  18 10
"" 0 1
E"#uses \"gcfnav_view.ctl\"
int local_plotSizeX;
int local_plotSizeY;
string PICTURE_PATH = PROJ_PATH + \"pictures/\";
string TEMP_PATH    = \"c:\\\\temp\\\\\";
string GNUPLOT_PATH = \"C:\\\\ETM\\\\GNUplot\\\\gnuplot\\\\bin\\\\\";
dyn_string PLOT_DPNAMES;

" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
6 87
"Border2"
""
1 10 10 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
76 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 940 740
6 83
"plot_2"
""
1 10 10 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
72 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 940 740
6 84
"plot_3"
""
1 10 10 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
73 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 940 740
6 85
"plot_4"
""
1 10 10 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
74 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 940 740
6 79
"plot_1"
""
1 10 10 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
69 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 940 740
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0