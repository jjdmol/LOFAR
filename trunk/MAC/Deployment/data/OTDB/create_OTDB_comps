#!/usr/bin/ksh 
#
# create_OTDB_comps : Expand all base-file to gcomp files.
#
# Copyright (C) 2006
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Syntax: create_OTDB_comps
#
# $Id$
#
VERSION="v1.0"

#
# SyntaxError msg
#
SyntaxError()
{
	Msg=$1

	[ -z "${Msg}" ] || echo "ERROR: ${Msg}"
	echo ""
	echo "Syntax: $(basename $0) [-d destdir] [-l] target(s)"
	echo "        destdir    Relative directory where the resultfiles are placed"
	echo "        targets	 PVSS | C++ | OTDB"
        echo "        -l: local use, assumes that this is run from a SVN checkout"
	echo ""
	exit 1
}


#
# cleanlist filename
#
# Removes all (partial) comment lines from the file
cleanlist()
{
	cut -d"#" -f1 $1 | awk '{ if (NF > 0) print $0 }'
}


#
# concatfile filename
#
# concatinates all lines of the file
concatfile()
{
	cleanlist $1 | while read line
	do
		result=$result":"$line
		echo $result
	done | tail -1 | sed "s/^://"
}


#
# substitute_marker objectname marker
#
# replaces all lines containing the marker with the contents of the markerfile
#
substitute_marker()
{
	echo "#"
	VALUELIST=`concatfile $1.list`
	awk -v VALUELIST=${VALUELIST} -v MARKER=$2 '
	BEGIN {
		nrMarkers=split(VALUELIST, valueName, ":");
	};
	{
		hasMarker=index($0, MARKER);
		if (hasMarker > 0) {
			for (someValue in valueName) {
				inputCopy = $0;
				sub(MARKER, valueName[someValue], inputCopy);
				sub(MARKER, valueName[someValue], inputCopy);
				sub(MARKER, valueName[someValue], inputCopy);
				print inputCopy;
			}
		}
		else {
			print $0;
		}
	} '
}


# expand_marker objectname marker ip-prefix
#
expand_marker()
{
	# expand the nodes
	echo -n "# This file was generated by $(basename $0) ${VERSION} on " ; date
	cleanlist $1.list | while read nodename
	do
		number=`echo ${nodename} | sed -e "s/[A-Za-z]//g"`
		ipaddr=`echo $3 | sed -e "s/@/${number}/"`
		(
		echo ""
		echo "#"
		cleanlist $1.base 
		) | sed -e "s/$2/${nodename}/g" -e "s/@IPaddress@/${ipaddr}/g"
	done

	substitute_marker $1 $2
}


# expand_dataproduct objectname marker
#
expand_dataproduct       ()
{
	# expand the nodes
	echo -n "# This file was generated by $(basename $0) ${VERSION} on " ; date
	cleanlist $1.list | while read dataproduct 
	do
		(
		echo ""
		echo "#"
		cleanlist $1.base 
		) | sed -e "s/$2/${dataproduct}/g"
	done

	substitute_marker $1 $2
}





#------------------------------ MAIN program ------------------------------
#
# Syntax: create_db_files [-d destdir] 
#
# where target is pvss / c++ / otdb
#
DESTDIR="."
INDIR="."
localUse=0
eval set argv=`getopt "d:hl" $*`		# reformat arguments
shift
while [ "$1" != "--" ]
do
	case "$1" in
		-d)	DESTDIR=$2
			[ -d ${DESTDIR} ] ||
				SyntaxError "Destination directory >${DESTDIR}< does not exist"
			shift 2
			;;
                -l)     localUse=1
                        shift
                        ;;
		-h)     SyntaxError
			;;
                 *)     SyntaxError
			;;    
	esac
done
shift								# remove --

if [ ${localUse} == 0 ]; then 
  DESTDIR="/opt/lofar/etc/otdb"
  INDIR="/opt/lofar/etc"
fi 

rm -f ${DESTDIR}/*.gcomp

if [ "${INDIR}" = "." ]; then 
  wdir="../StaticMetaData"
  otdbdir="."
  pvssdir="../PVSS/data"
else
  wdir="/opt/lofar/etc"
  otdbdir="/opt/lofar/etc/otdb"
  pvssdir="/opt/lofar/pvss/dpdef"
fi 

if [ "$wdir" = "/opt/lofar/etc" ]; then 
  cd $wdir/otdb # location of all component files, etc.
else
  cd $wdir/../OTDB
fi

for file in `ls -1 *.base | grep -v Node`
do
	rawname=`echo $file | cut -d'.' -f1`
	outputname=`echo ${DESTDIR}/$(basename $rawname)".gcomp"`
	echo "Creating ${outputname}..."

        grep @inputdataproduct@ $file >/dev/null 2>&1
        if [ $? -eq 0 ]; then
                cat $file | \
                expand_dataproduct "InputDataProductNode" "@inputdataproduct@" |\
		expand_dataproduct "OutputDataProductNode" "@outputdataproduct@" >${outputname}
        fi
        grep @cluster@ $file >/dev/null 2>&1
        if [ $? -eq 0 ]; then
                cat $file | \
                expand_dataproduct "ClusterNode" "@cluster@" >${outputname}
        fi


done
