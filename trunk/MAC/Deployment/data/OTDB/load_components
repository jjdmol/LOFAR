#!/usr/bin/ksh
#
# load_components : loads all components in an OTDB database
#
# Copyright (C) 2006
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Syntax: load_components databasename
#
# $Id$
#
VERSION="v1.0"

# SyntaxError msg
#
SyntaxError()
{
	Msg=$1

	[ -z "${Msg}" ] || echo "ERROR: ${Msg}"
	echo ""
	echo "Syntax: $(basename $0) databasename"
	echo ""
	exit 1
}

#
# Add all nodes that are not 'used' to the resultfile (COMPORDERFILE)
# and update the 'node' and 'uses' file by deleting the nodes or childs
# from these files.
solve_layer()
{
	echo -n "." 
	comm -23 ${NODEFILE} ${USESFILE} >>${COMPORDERFILE}
	comm -23 ${NODEFILE} ${USESFILE} | while read component
	do
		grep -v ^${component} ${NODEFILE} >tmp
		mv tmp ${NODEFILE}
		grep ^${component} ${RELFILE} | while read parent child
		do
			grep -v ^${child} ${USESFILE} >tmp
			mv tmp ${USESFILE}
		done
	done
}

#
# MAIN
#

# check invocation syntax
if [ $# -ne 1 ]; then
	SyntaxError
fi

# We use a lot of tmpfile to make life easier.
NODEFILE=/tmp/node
USESFILE=/tmp/uses
RELFILE=/tmp/relation
COMPORDERFILE=/tmp/comporder
COMPDEFFILE=/tmp/compdef
FILERELFILE=/tmp/filerel
RESULTFILE=fileOrder

# construct a file with 'node uses file' relations
grep -e '^node' -e '^uses' *comp | cut -d":" -f2 | awk '
	BEGIN {
		node="";
	};
	{
		if ($1 == "node") {
			node = $2;
		}
		else {
			print node"	"$2;
		}
	} ' | sort | uniq >${RELFILE}

# make file with all node-names and all uses-names.
grep -e '^node' *comp | awk '{ print $2 }' | sort | uniq >${NODEFILE}
grep -e '^uses' *comp | awk '{ print $2 }' | sort | uniq >${USESFILE}

# strip off layer for layer
>${COMPORDERFILE}
echo -n "Analysing load order: "
while [ -s ${USESFILE} ]
do
	solve_layer
done
cat ${NODEFILE} >>${COMPORDERFILE}
rm ${RELFILE} ${NODEFILE} ${USESFILE}
echo "."

# we now have a file with components (in reverse) order
# add the filenames in which the components are defined, remove duplicates
# and finally make sure each name only exists once in the resultfile
grep -e '^node' *comp | sed "s/:/ /" | awk '{ print $3"	"$1 }' | sort | uniq >${FILERELFILE}
tac ${COMPORDERFILE} | while read component
do
	grep ^${component} ${FILERELFILE} 
done | \
awk '{ print $2 }' | uniq | \
awk '{
	if (!($1 in names)) {
		print $1;
		names[$1]=$1;
	}
}' >${RESULTFILE}
rm ${COMPORDERFILE} ${FILERELFILE} 


../../build/gnu_debug/data/bin/load_OTDB_comps $1 ${RESULTFILE}
rm ${RESULTFILE}
