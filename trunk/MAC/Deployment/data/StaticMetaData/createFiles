#!/usr/bin/env python
#
# $Id: $
#
# Syntax: createFiles outputdir all | stationname [stationame ...])
#
# outputdir is teh root directory for the outputfiles:
#     <stationname>/etc/<files>
#
# Using 'all' as stationname will create files for all stations in file
# StationInfo
#

import re, sys, os
warnings = []

#
# setWarning(message)
#
def setWarning(message):
    """
    Adds the given warning to the list of warnings.
    """
    warnings.append(message)


#
# Find host IP number from DNS
#
def findIPNumber(stationName):
    """
    Returns the IPnumber for a station LCU.
    In case the station is not known, it will return -1.
    """
    
    localStationName = os.getenv("HOSTNAME")[0:5].lower()
    if (localStationName == stationName):
        command = "hostname -i"
        output = os.popen3(command)
        stdout = output[1].readlines()
        outline = stdout[0].strip()
        outwords = outline.split()
        if (len(outwords) != 1):
            return "-1"
        else:
            return outwords[0]
    else:
        command = "host "+stationName+"C"
        output = os.popen3(command)
        stdout = output[1].readlines()
        outline = stdout[0].strip()
        outwords = outline.split()
        if (len(outwords) != 4):
            return "10.150.1.1"
#            return "-1"
        else:
            return outwords[3]
        

#
# Copies a set of fixed test files to the config dir
# To be used when setting up a LCU for test/validation
#
def copyTestFiles(dataDir):

    testFile = dataDir+"/RSPDriver.conf.test"
    # the existence of /opt/lofar/etc has been checked in main() already
    destFile = "/opt/lofar/etc/RSPDriver.conf"
    command = "cp -f "+testFile+ " " + destFile
    os.system(command);
    testFile = dataDir+"/TBBDriver.conf.test"
    destFile = "/opt/lofar/etc/TBBDriver.conf"
    command = "cp -f "+testFile+ " " + destFile
    os.system(command);
    testFile = dataDir+"/RemoteStation.conf.test"
    destFile = "/opt/lofar/etc/RemoteStation.conf"
    command = "cp -f "+testFile+ " " + destFile
    os.system(command);

    
    
#
# findRSPDestNodes(stationName)
#
def findRSPDestNodes(stationName, dataDir):
    """
    Collects the destination nodes from each rspboard of the given station.
    Expected format of the RSPConnection file is:
    station		board	destinationnode
    CS001		RSP_0	BGL001
    """
    pattern=re.compile(stationName+"[ \t]*RSP_([0-9]+)[ \t]*(.*)", re.IGNORECASE)
    rspDestNode = {}
    for match in pattern.finditer(open(dataDir+"/RSPConnections.dat").read()):
        rspDestNode[match.group(1)] = match.group(2)
    if len(rspDestNode) == 0:
        setWarning(stationName+" not found in file 'RSPConnections'")
    return rspDestNode

#
# findTBBDestNodes(stationName)
#
def findTBBDestNodes(stationName, dataDir):
    """
    Collects the destination nodes from each tbbboard of the given station.
    Expected format of the TBBConnection file is:
    station  Boeard  node
    CS001    TBB-0   LIST004
    """
    # NOTE: for now we always take the first nodename
    pattern=re.compile(stationName+"[ \t]*TBB_([0-9]+)[ \t]*([a-zA-Z0-9]*)[, ]?.*", re.IGNORECASE)
    tbbDestNode = {}
    for match in pattern.finditer(open(dataDir+"/TBBConnections.dat").read()):
        tbbDestNode[match.group(1)] = match.group(2)
    if len(tbbDestNode) == 0:
        setWarning(stationName+" not found in file 'TBBConnections.dat'")
    return tbbDestNode

#
# findIPandMAC(node)
#
def findIPandMAC(nodeName, dataDir):
    """
    Translates the given nodename to an MAC address and and IP address.
    """
    pattern=re.compile("^"+nodeName+"[ \t]*([0-9\.]*)[ \t]*([0-9a-fA-F:]*)", re.IGNORECASE | re.MULTILINE)
    ipAndMac = ()
    ipAndMac = pattern.search(open(dataDir+"/MAC+IP.dat").read())
    if not ipAndMac:
        raise "\nFatal error: "+nodeName+" is not defined in file 'MAC+IP'"
    return ipAndMac.group(1), ipAndMac.group(2)

#
# findAllStations()
#
def findAllStations(dataDir):
    """
    Return a list of all stationnames that are found in file StationInfo
    """
    pattern = re.compile("^[A-Z][A-Z][0-9][0-9][0-9]",re.IGNORECASE | re.MULTILINE)
    match = pattern.findall(open(dataDir+"/StationInfo.dat").read())
    if not match:
        raise "\nFatal error: could not find any stationnames in file 'StationInfo'"
    return match

#
# findStationInfo(stationName)
#
def findStationInfo(stationName, dataDir):
    """
    Return all basic station info (eg. nr RSPboards) from a station.
    """
    pattern=re.compile("^"+stationName+"[ \t].*", re.IGNORECASE | re.MULTILINE)
    match = pattern.search(open(dataDir+"/StationInfo.dat").read())
    if not match:
        raise "\nFatal error: "+stationName+" is not defined in file 'StationInfo'"
    info = match.group().split()
    if (len(info) != 12):
        raise "\nFatal error: Data of "+stationName+" is not complete in file 'StationInfo'"
    return info

def createRSPDriverFile(resultDir, stationName, dataDir):
    """
    Fills in the markers in the RSPDriver.conf file to match the values for the given station.
    """
    # Find connections of the RSPBoards of the station
    rspDestNode = findRSPDestNodes(stationName, dataDir)
    #print stationName,"matches:",rspDestNode

    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal ) = findStationInfo(stationName, dataDir)

    # Substitute MAC and IP address of destination nodes
    RSPfile = open(dataDir+"/RSPDriver.conf.tmpl")
    RSPconfig = RSPfile.read()
    RSPfile.close()
    nrNodes = len(rspDestNode)
    print "NrNodes: ",nrNodes
    if (nrNodes == 1 or nrNodes == 2):
        if str(0) in rspDestNode.keys():
            (ip, mac) = findIPandMAC(rspDestNode[str(0)],dataDir)
            for rspNr in range(0,4):
                RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_MAC@", mac +"   # "+rspDestNode[str(0)])
                RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_IP@",  ip)
        if str(1) in rspDestNode.keys():
            (ip, mac) = findIPandMAC(rspDestNode[str(1)],dataDir)
            for rspNr in range(0,4):
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_MAC@", mac +"   # "+rspDestNode[str(1)])
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_IP@",  ip)

    if (nrNodes == 4):
        print rspDestNode.keys()
        for rspNr in range(0,4):
            if str(rspNr) in rspDestNode.keys():
                print "Replace: ",str(rspNr)
                (ip, mac) = findIPandMAC(rspDestNode[str(rspNr)],dataDir)
                RSPconfig = RSPconfig.replace("@LANE_"+str(rspNr)+"_MAC@", mac+"   # "+rspDestNode[str(rspNr)])
                RSPconfig = RSPconfig.replace("@LANE_"+str(rspNr)+"_IP@",  ip +"   # "+rspDestNode[str(rspNr)])


    # substitute StationInfo
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')
    if (ip_parts[1] == "151"):
        ip_prefix = "167"
    else:
        ip_prefix = "166"

    hexStationID = str("%02x" % int(stationID))
    ringID = '0'+stationName[2]

    RSPconfig = RSPconfig.replace("@STATION_NAME@", stationName)
    RSPconfig = RSPconfig.replace("@RING_ID@",   ringID)
    RSPconfig = RSPconfig.replace("@STATION_HID@",  hexStationID)
    RSPconfig = RSPconfig.replace("@IP_PREFIX@",   ip_prefix)
    RSPconfig = RSPconfig.replace("@IP_SUBNET@",   ip_parts[2])

    outFile = os.open(resultDir+"/RSPDriver.conf", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, RSPconfig)
    os.close(outFile)

def createTBBDriverFile(resultDir, stationName, dataDir):
    """
    Fills in the markers in the TBBDriver.conf file to match the values for the given station.
    """
    # Find connections of the TBBBoards of the station
    tbbDestNode = findTBBDestNodes(stationName, dataDir)
    print stationName,"matches:",tbbDestNode

    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal ) = findStationInfo(stationName, dataDir)
    print stationName," has ",nrTBB," TBBoards"
    
    # Substitute MAC and IP address of destination nodes
    TBBfile = open(dataDir+"/TBBDriver.conf.tmpl")
    TBBconfig = TBBfile.read()
    TBBfile.close()
    for tbbNr in range(0,int(nrTBB)):
        if (len(tbbDestNode) == 1):
            (ip, mac) = findIPandMAC(tbbDestNode["0"], dataDir)
            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC@", mac)
            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_IP@",  ip)
        else:
            if str(tbbNr) in tbbDestNode.keys():
                (ip, mac) = findIPandMAC(tbbDestNode[str(tbbNr)], dataDir)
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC@", mac)
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_IP@",  ip)
        

    # substitute StationInfo
    # Find IP number of data sending side of TBB board; use LCU's IP as basis
    # for the ip prefix and subnet 
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')
    if (ip_parts[1] == "151"):
        ip_prefix = "167"
    else:
        ip_prefix = "166"
    
    hexStationID = str("%02x" % int(stationID))
    ringID = '0'+stationName[2]
    
    TBBconfig = TBBconfig.replace("@STATION_NAME@", stationName)
    TBBconfig = TBBconfig.replace("@STATION_HID@",  hexStationID)
    TBBconfig = TBBconfig.replace("@STATION_ID@",   stationID)
    TBBconfig = TBBconfig.replace("@RING_ID@",   ringID)
    TBBconfig = TBBconfig.replace("@IP_PREFIX@",   ip_prefix)
    TBBconfig = TBBconfig.replace("@IP_SUBNET@",   ip_parts[2])
    outFile = os.open(dataDir+"/TBBDriver.conf.tmp", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, TBBconfig)
    os.close(outFile)
    # An ugly way to get rid of all lines in the template file that are not
    # filled yet.
    cmd = "grep -v '@' "+dataDir+"/TBBDriver.conf.tmp > "+resultDir+"/TBBDriver.conf";
    os.system(cmd);
    
def createRemoteStationFile(resultDir, stationName, dataDir):
    """
    Fills in the markers in the RemoteStation.conf file to match the values for the given station.
    """
    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal ) = findStationInfo(stationName, dataDir)
    RSconfig = open(dataDir+"/RemoteStation.conf.tmpl").read()
    RSconfig = RSconfig.replace("@STATION_NAME@", stationName)
    RSconfig = RSconfig.replace("@STATION_ID@",   stationID)
    RSconfig = RSconfig.replace("@NR_RSP@",       nrRSP)
    RSconfig = RSconfig.replace("@NR_TBB@",       nrTBB)
    RSconfig = RSconfig.replace("@NR_LBA@",       nrLBA)
    RSconfig = RSconfig.replace("@NR_HBA@",       nrHBA)
    RSconfig = RSconfig.replace("@HBA_SPLIT@",    HBAsplit)
    RSconfig = RSconfig.replace("@LBA_WIDE@",     LBAcal)

    outFile = os.open(resultDir+"/RemoteStation.conf", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, RSconfig)
    os.close(outFile)

# MAIN

if (len(sys.argv) == 1):
    print "Provide arguments: localhost or <rootdir> <stationname>"
    sys.exit(1)
    

# If argument is localhost, we can safely assume we are running on a station
# LCU and we need to create the config files for this station. They must be
# put in /opt/lofar/etc; the required datafiles will be in directory
# /opt/lofar/etc/StaticMetaData

if (sys.argv[1] == "localhost"):
    # Find out stationname from env. var. HOSTNAME (e.g., CS010C)
    if (os.getenv("HOSTNAME")) :
        stationName = os.getenv("HOSTNAME")[0:5].lower()
        print stationName
        if (os.path.exists("/opt/lofar/etc")):
            resultDir = "/opt/lofar/etc"
            dataDir = resultDir + "/StaticMetaData"
        else:
            print "Cannot find output directory /opt/lofar/etc"
            sys.exit(1)

        # If the hostname is like 'lcu001', this lcu is set up to be tested
        # in the lab before a station is assigned. We can then use a set of
        # fixed test configuration files.
        if (stationName[0:3].lower() == "lcu"):
            copyTestFiles(dataDir)
        else:
            createRSPDriverFile    (resultDir, stationName, dataDir) 
            createTBBDriverFile    (resultDir, stationName, dataDir)
            createRemoteStationFile(resultDir, stationName, dataDir)
    else:
        print "Cannot determine node name from HOSTNAME"
        sys.exit(1)
else:
    # We are not running on a station LCU. The user needs to provide
    # where we can find and put files, and for which station.
    
    if (len(sys.argv) < 4):
        print "Provide rootdir for output files, dir for datafiles, stationname(s) (or 'all')."
        sys.exit(1)
    
    resultRoot = sys.argv[1]
    dataDir = sys.argv[2]
    stationList = []
    print resultRoot, dataDir, stationList
    
    if sys.argv[3] == "all":
        stationList = findAllStations(dataDir)
    else:
        stationList = sys.argv[3:]

    for stationName in stationList:
        resultDir = resultRoot+"/"+stationName+"/"
        if os.path.exists(resultDir):
            for oldfile in os.listdir(resultDir):
                os.remove(resultDir+"/"+oldfile)
        else:
            os.makedirs(resultDir)

        print resultDir, stationName, dataDir
        createRSPDriverFile    (resultDir, stationName, dataDir) 
        createTBBDriverFile    (resultDir, stationName, dataDir)
        createRemoteStationFile(resultDir, stationName, dataDir)
        
if len(warnings) > 0:
    print "The following warnings occured:"
    print warnings



