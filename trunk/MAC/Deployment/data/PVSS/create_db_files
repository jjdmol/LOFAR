#!/usr/bin/ksh
#
# create_db_file : Creates files for generating the PVSS and OTDB contents
#
# Copyright (C) 2006
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Syntax: genDBbase modulename precompiled_headerfiles
#
# The generated files must be manually adjusted before they
# can be used by genDBcode.
#
# $Id$
#
VERSION="v1.0"

#
# SyntaxError msg
#
SyntaxError()
{
	Msg=$1

	[ -z "${Msg}" ] || echo "ERROR: ${Msg}"
	echo ""
	echo "Syntax: $(basename $0) [-d destdir] target(s)"
	echo "        destdir    Relative directory where the resultfiles are placed"
	echo "        targets	 PVSS | OBS | C++"
	echo ""
	exit 1
}

#
# cleanlist filename
#
# Removes all (partial) comment lines from the file
cleanlist()
{
	cut -d"#" -f1 $1 | awk '{ if (NF > 0) print $0 }'
}

#
# concatfile filename
#
# concatinates all lines of the file
concatfile()
{
	cleanlist $1 | while read line
	do
		result=$result":"$line
		echo $result
	done | tail -1 | sed "s/^://"
}

#
# create_ring_station_list
#
create_ring_station_list()
{
	cleanlist ${RINGFILE} | while read ring
	do 
		cleanlist ${ring}Stations.list | awk -v RING=${ring} \
		'{ 
			print RING"_"$1 
		}'
	done	>>/tmp/rslist
	concatfile /tmp/rslist
	rm -f /tmp/rslist
}

#
# labelize somename
#
# Capitalizes the name preceding initial capitals with an _
labelize()
{
	echo $1 | sed "s/[A-Z][a-z]/_&/g" | sed "s/^_//" | sed "s/\./_/g" | \
		awk '{ print toupper($1) }'
}

#
# substitute_arm
#
# replaces all lines containing the marker @arm@ with the arm names
#
# syntax of the lines must be: dp dpt
#
substitute_arm()
{
	awk -v ARMLIST=${ARMLIST} '
	BEGIN {
		nrArms=split(ARMLIST, armname, ":");
	};
	{
		hasArm=index($1,"@arm@");
		if (hasArm > 0) {
			for (arm in armname) {
				dpname=$1;
				sub("@arm@", armname[arm], dpname)
				print dpname"	"$2;
			}
		}
		else {
			print $1"	"$2;
		}
	} '
}

#
# substitute_ring_station
#
# replaces all lines containing the marker @ring@_@station@ with the ring_names
# and stationnames
#
# syntax of the lines must be: dp dpt
#
substitute_ring_station()
{
	awk -v RINGSTATIONLIST=${RINGSTATIONLIST} '
	BEGIN {
		nrRings=split(RINGSTATIONLIST, ringname, ":");
	};
	{
		hasRing=index($1,"@ring@_@station@");
		if (hasRing > 0) {
			for (ring in ringname) {
				dpname=$1;
				sub("@ring@_@station@", ringname[ring], dpname)
				print dpname"	"$2;
			}
		}
		else {
			print $1"	"$2;
		}
	} '
}

#
# substitute_ring
#
# replaces all lines containing the marker @ring@ with the ring_names
#
# syntax of the lines must be: dp dpt
#
substitute_ring()
{
	awk -v RINGLIST=${RINGLIST} '
	BEGIN {
		nrRings=split(RINGLIST, ringname, ":");
	};
	{
		hasRing=index($1,"@ring@");
		if (hasRing > 0) {
			for (ring in ringname) {
				dpname=$1;
				sub("@ring@", ringname[ring], dpname)
				print dpname"	"$2;
			}
		}
		else {
			print $1"	"$2;
		}
	} '
}

#
# substitute_instancenr
#
# replaces all lines containing the marker @instancenr@ with the instancenr
#
# syntax of the lines must be: dp dpt
#
substitute_instancenr()
{
	awk '
	{
		sub("@instance@", "", $1);
		print $1"	"$2;
	} '
}

#
# number_dps
#
# add datapoint number to dplines
#
number_dps()
{
	awk '
	BEGIN {
		count = 1000;
	};
	{
		print $1"	"$2"	"count;
		count+=1;
	} '
}

#
# create_dpt_file
#
create_dpt_file()
{
	rm -f ${ERRORFILE}

	(
		echo -n "# This file was generated by $(basename $0) ${VERSION} on " ; date
		echo	""
	) >${DESTDIR}/${PVSS_DPT_FILE}

	cleanlist $1 | while read dpt prefix dp
	do
		if [ ! -f ${dpt}.dpdef ]; then
			echo "TypeName"
			echo "${dpt}.${dpt}	1#1"
			echo "	state	25#2"
			if [ ${prefix} != "-" ]; then
				echo "No definition file for ${dpt}" >> ${ERRORFILE}
				echo "	error	25#3"
			fi
		else
			echo "TypeName"
			echo "${dpt}.${dpt}	1#1"
			echo "	state	25#2"
			echo "	error	25#3"
			let count=4
			let depth=1
			oldnode=""
			cleanlist ${dpt}.dpdef | awk -v elemNr=$count ' 
				BEGIN {  
					PVSStype["string"]	 = "25"
					PVSStype["bool"]	 = "23"
					PVSStype["uint"]	 = "20"
					PVSStype["int"]		 = "21"
					PVSStype["float"]	 = "22"
					PVSStype["double"]	 = "22"
					PVSStype["stringArr"]= "9"
					PVSStype["boolArr"]	 = "7"
					PVSStype["uintArr"]	 = "4"
					PVSStype["intArr"]	 = "5"
					PVSStype["floatArr"] = "6"
					PVSStype["doubleArr"]= "6"
				} 
				{
					dotpos=index($1,".");
					if (dotpos>0) {
						newnode=substr($1,0,dotpos-1)
						if (newnode != oldnode) {
							print "	"newnode"	1#"elemNr ;
							elemNr++;
							oldnode = newnode;
						}
						print "		"substr($1,dotpos+1)"	"PVSStype[$2]"#"elemNr
					}
					else {
						print "	"$1"	"PVSStype[$2]"#"elemNr
					}
					elemNr++;
				}'
		fi
		echo ""
	done >>${DESTDIR}/${PVSS_DPT_FILE}
	echo "created: ${DESTDIR}/${PVSS_DPT_FILE}"

	if [ -f ${ERRORFILE} ]; then
		echo "ERRORS During creation:"
		cat ${ERRORFILE}
		rm -f ${ERRORFILE}
	fi
}

#
# create_dp_file
#
create_dp_file()
{
	(
		echo -n "# This file was generated by $(basename $0) ${VERSION} on " ; date
		echo	""
		echo    "DpName"
	) >${DESTDIR}/${PVSS_DP_FILE}

	cleanlist $1 | awk '{ print $3"	"$1	}' | \
				substitute_ring_station  | \
				substitute_ring | \
				substitute_arm | \
				substitute_instancenr | \
				sort -k1,1 |\
				number_dps >>${DESTDIR}/${PVSS_DP_FILE}

	echo "created: ${DESTDIR}/${PVSS_DP_FILE}"
}

#
# create_cpp_pvss_headerfile
#
create_cpp_pvss_headerfile()
{
	cleanlist $1 | while read dpt prefix dp
	do
		if [ $prefix != "-" ]; then
			label=`labelize ${dpt}`
			echo "// $dpt"
			echo "#define PSN_${label}	\"${dp}\""
			echo "#define PST_${label}	\"${dpt}\""
			if [ -f ${dpt}.dpdef ]; then
				cleanlist ${dpt}.dpdef | while read varname vartype
				do
					varlabel=`labelize ${varname}`
					echo "#define PN_${prefix}_${varlabel}	\"${varname}\""
				done
			fi
			echo ""
		fi
	done >>${DESTDIR}/${CPP_PVSS_HEADERFILE}
}


#------------------------------ MAIN program ------------------------------
#
# Syntax: create_db_files [-d destdir] [-i inputfile] target
#
# where target is pvss / c++
#
DESTDIR="."
eval set argv=`getopt "d:h" $*`		# reformat arguments
shift
while [ "$1" != "--" ]
do
	case "$1" in
		-d)	DESTDIR=$2
			[ -d ${DESTDIR} ] ||
				SyntaxError "Destination directory >${DESTDIR}< does not exist"
			shift 2
			;;
		-h) SyntaxError
			;;
	esac
done
shift								# remove --

[ -n "$1" ] || SyntaxError

# define the input files
ARMFILE=Arms.list
RINGFILE=Rings.list
ERRORFILE=/tmp/Crea.Error

# define the output files
CPP_PVSS_HEADERFILE=PVSSDatapointDefs.h
FIXED_DP_FILE=PVSS_datapoints.dpl
FIXED_DPT_FILE=PVSS_datapointtypes.dpl
OBS_DP_FILE=OBS_datapoints.dpl
OBS_DPT_FILE=OBS_datapointtypes.dpl

# construct some lists
ARMLIST=`concatfile $ARMFILE`
RINGLIST=`concatfile $RINGFILE`
RINGSTATIONLIST=`create_ring_station_list`

while [ -n "$1" ]
do
	case "$1" in
		pvss|PVSS)	
			PVSS_DP_FILE=${FIXED_DP_FILE}
			PVSS_DPT_FILE=${FIXED_DPT_FILE}
			create_dpt_file FixedDataPoints.base;
			create_dp_file  FixedDataPoints.base;
			;;
		obs|OBS)	
			PVSS_DP_FILE=${OBS_DP_FILE}
			PVSS_DPT_FILE=${OBS_DPT_FILE}
			create_dpt_file ObservationDataPoints.base;
			create_dp_file  ObservationDataPoints.base;
			;;
		c++|C++)	
			(
				echo -n "// This file was generated by $(basename $0) ${VERSION} on " ; date
				echo	""
			) >${DESTDIR}/${CPP_PVSS_HEADERFILE}
			create_cpp_pvss_headerfile FixedDataPoints.base;
			create_cpp_pvss_headerfile ObservationDataPoints.base;
			echo "created: ${DESTDIR}/${CPP_PVSS_HEADERFILE}"
			cp ${DESTDIR}/${CPP_PVSS_HEADERFILE} ../../../../installed/*/include/Deployment/
			;;
	esac
	shift
done


