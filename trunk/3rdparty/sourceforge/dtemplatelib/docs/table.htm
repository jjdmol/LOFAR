<html>  
<head>
<style>
CODE {COLOR: #990000;}
.code{COLOR: #990000}
.codeComment{COLOR: #008000}
.codeHighlight{BACKGROUND-COLOR: #FFFF00}
.codeFileName{FONT-WEIGHT: bold;}
</style>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Mike Gradman">
<meta name="KeyWords"
content="DTL, Oracle, ODBC, database API, C++, Template Library">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<!--
  -- Copyright 2001
  -- Michael Gradman & Corwin Joy
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Corwin Joy & Michael Gradman make no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  --
  -- Copyright (c) 1996-1999
  -- Silicon Graphics Computer Systems, Inc.
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Silicon Graphics makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -- Copyright (c) 1994
  -- Hewlett-Packard Company
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Hewlett-Packard Company makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -->
<!-- Generated by htmldoc -->
<title>DTL_TABLE and DTL_STRUCT</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000EE"
vlink="#551A8B" alink="#FF0000">

<p><font size="6" face="Bookman Old Style"><em><strong><u>dtl</u></strong></em></font></p>

<p><img src="stat.gif" width="6" height="6"> <!--end header--> <br>
</p> 
<h1>DTL_TABLE and DTL_STRUCT</h1>


















<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td><img src="utilities.gif" width="194" height="38"></td>
        <td align="right"><img src="type.gif" width="194"
        height="39"></td>
    </tr>
    <tr>
        <td valign="top"><b>Category</b>: utilities</td>
        <td align="right" valign="top"><b>Component type</b>:
        type</td>
    </tr>
</table>
<h3>Description</h3>

<p>The DTL_TABLE and DTL_STRUCT
  macros provide a quick way to generate C++ structures and bind them to a database 
  table. The DTL_STRUCT
  macro takes a table name, field types and field names as arguments. Given these, 
  it creates a C++ structure with these field names as members and creates a 
  <a href="BCA.htm">BCA</a> that associates the members in the struct to fields 
  with the same name in a database table. The DTL_TABLE macro calls the DTL_STRUCT 
  macro, once the basic struct has been created it then creates an actual <a href="DBView.htm">DBView</a> to access the 
  records. Both macros require you to specify the number of fields in the table just afer the macro name: 
  <font face="Courier New, Courier, mono" size="2">DTL_TABLE4</font> 
  would indicate that there are 4 fields in the table, for example. These macros are best used at the global
  level or as part of a class defintion. These macros cannot be used locally in a function
  because they would create a locally defined struct and 14.3.1 [temp.arg.type] in the C++ standard does not allow programs to
  pass locally defined structures as template paramters.
</p>

<h3>Definition</h3>

<p>Defined in the <font size="2" face="Courier New">table.h </font>header file.</p>
<p>Here is conceptually what these macros do:</p>
<pre><code>
#define DTL_BIND_FIELD(FIELD) 
	cols[_TEXT( #FIELD )] >> row. ## FIELD

#define DTL_STRUCTN(STRUCT_NAME,TYPE1,FIELD1,TYPE2,FIELD2,...,TYPEN, FIELDN) 		
														
      <span class="codeComment">//Create struct with all the field names as given above</span>	
      struct STRUCT_NAME { 										
        TYPE1 FIELD1; 											
        TYPE2 FIELD2; 											
        ...													
        TYPEN FIELDN;											
      }; 													
														
      <span class="codeComment">//Declare a BCA to associate members in the structure with fields in the database of the same name</span>	
      BEGIN_DTL_NAMESPACE 										
      template&lt;&gt; class DefaultBCA&lt;struct_name&gt; 							
      { 												
      public:												
            void operator()(BoundIOs &cols, STRUCT_NAME &row) 				
            { 												
                  DTL_BIND_FIELD(FIELD1); 							
                  DTL_BIND_FIELD(FIELD2); 							
                  ...											
                  DTL_BIND_FIELD(FIELDN); 							
                  } 												
            };													
      END_DTL_NAMESPACE 										
														
      dtl::tostream &operator&lt;&lt;(dtl::tostream &o, const STRUCT_NAME &s) 		
      { 													
        <span class="codeComment">//Basic ostream operator for the class</span>	
      }; 													
														
      bool operator&lt;(const STRUCT_NAME &lhs, const STRUCT_NAME &rhs) { 			
        <span class="codeComment">//Basic operator &lt; for the class, compare fields in the order they are declared</span>					
      } 													


	
#define DTL_TABLEN(TABLE_NAME,TYPE1,FIELD1,TYPE2,FIELD2,...,TYPEN,FIELDN)
  <span class="codeComment">//Define a structure named after the TABLE_NAME provided by the user</span> 
  <span class="codeComment">//The structure will be named TABLE_NAME_row to indicate that this structure holds a row of data from the table</span> 
  DTL_STRUCTN(TABLE_NAME ## _row, TYPE1,FIELD1,TYPE2,FIELD2,...TYPEN,FIELDN); 

  <span class="codeComment">//Define a type for the DBView against the requested table</span>
  <span class="codeComment">//The general form will be TABLE_NAME_view</span> 
  typedef dtl::DBView&lt;TABLE_NAME ## _row&gt; TABLE_NAME ## _view;

  <span class="codeComment">//Create an actual instance of the DBView.  Name this after the TABLE_NAME.</span>  
  TABLE_NAME ## _view TABLE_NAME(_TEXT( #TABLE_NAME ))
													
</pre></code>



<h3>Refinement of</h3>

<p>None.</p>

<h3>Associated types</h3>

<p>None.</p>

<h3>Example:</h3>

<pre><code><span class="codeComment">// Generate a simple structure to read data from a table called 'db_example' 
// with five fields called 'int_value', 'string_value', 'double_value', 'example_long' and 'example_date'.
// Note: the macro must be invoked at namespace scope because templates are 
// not allowed  to take locally declared classes as template parameters.  
// See [temp.arg.type] 14.3.1  in the C++ standard for details.</span>

<a href="table.htm">DTL_TABLE5</a>(db_example,
   int, int_value,
   std::string, string_value,
   double, double_value,
   long, example_long,
   jtime_c, example_date
);

<span class="codeComment">//Note that the field names in the table are the same as the member names in the structure</span>
vector&lt;db_example_row&gt; ReadData()
{
   cout &lt;&lt; &quot;Read rows from the database: &quot; &lt;&lt; endl;
   vector&lt;db_example_row&gt; results;

   for (db_example_view::select_iterator read_it = db_example.begin();
          read_it  != db_example.end(); ++read_it)
   {
       cout &lt;&lt; read_it-&gt;int_value &lt;&lt; &quot; &quot; 
                 &lt;&lt; read_it-&gt;string_value &lt;&lt; &quot; &quot; 
                 &lt;&lt; read_it-&gt;double_value &lt;&lt; &quot; &quot;
                 &lt;&lt; read_it-&gt;example_long &lt;&lt; &quot; &quot; 
                 &lt;&lt; read_it-&gt;example_date   
                 &lt;&lt; endl;

       results.push_back(*read_it);
   }

   return results;
}
</pre></code>

<h3><font size="4">Public Base Classes</font></h3>

<p>None.</p>

<h3>Notation</h3>

<p>None.</p>

<h3>Expression semantics</h3>

<p>None.</p>

<h3>Notes</h3>

<p>None.</p>

<h3>See also</h3>

<p>None.</p>


<hr>

<p align="left"><a href="index.htm"><img src="dtl_home.gif" alt="[DTL Home]"
width="54" height="54"></a> <br>
</p>

<p>Copyright © 2002, Michael Gradman and Corwin Joy. <script
language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + modDate.getYear()+".");
 //-->
 </script> </p>

<p><i>Permission to use, copy, modify, distribute and sell this software and its 
  documentation for any purpose is hereby granted without fee, provided that the 
  above copyright notice appears in all copies and that both that copyright notice 
  and this permission notice appear in supporting documentation. Corwin Joy and 
  Michael Gradman make no representations about the suitability of this software 
  for any purpose. It is provided &quot;as is&quot; without express or implied 
  warranty. </i></p>
<A href="http://sourceforge.net"> <IMG src="http://sourceforge.net/sflogo.php?group_id=17082&amp;type=5" width="210" height="62" border="0" alt="SourceForge Logo"></A> 
<p align="right">This site written using the ORB. <a href="http://www.cinenet.net/~cberry/orbinfo.html"><img src="http://www.cinenet.net/~cberry/orb_icon.gif" alt="[The ORB]"
width="54" height="54"></a></p>
</body>
</html>
