## -----------------------------------------------------------------------------
## Set verbose

Set ( CMAKE_VERBOSE_MAKEFILE ON )

## ------------------------------------------------------------------------------
## Additional CMake modules

include (CheckIncludeFiles)
include (CheckLibraryExists)
include (CheckCXXSourceCompiles)
include (CheckTypeSize)
include (CTest)
enable_testing()

## ------------------------------------------------------------------------------
## Create lofar_config.h header

set (LOFAR_config ${LOFAR_BINARY_DIR}/lofar_config.h)
file (WRITE ${LOFAR_config} "/* lofar_config.h --  Generated by CMake. */\n\n")

## ------------------------------------------------------------------------------
## Create config header
set (config ${LOFAR_ROOT}/cmake/modules/lofar_config.h.in)

## ------------------------------------------------------------------------------
## Create lofar_config.h content

MACRO (CHECK_LOFAR_FUNCTION_NAME _FUNCTIONNAMEMACRO _RESULT)
  SET(_LOFAR_FUNCTION_NAME "
#include <stdio.h>

int main()
{
  puts(${_FUNCTIONNAMEMACRO});
  return 0;
}
")

  CHECK_CXX_SOURCE_COMPILES("${_LOFAR_FUNCTION_NAME}" ${_RESULT})
ENDMACRO (CHECK_LOFAR_FUNCTION_NAME)

SET (AUTO_FUNCTION_NAME 1)
SET (FUNCTIONNAMEMACRO "__PRETTY_FUNCTION__;__FUNCTION__")

foreach (item ${FUNCTIONNAMEMACRO})
  CHECK_LOFAR_FUNCTION_NAME("__FUNCTION__" RESULT)
  if (RESULT)
    file (WRITE ${config} "#cmakedefine AUTO_FUNCTION_NAME ${item}")
    break()
  endif (RESULT)
endforeach (item ${FUNCTIONNAMEMACRO})

if (NOT RESULT)
  file (WRITE ${config} "#cmakedefine AUTO_FUNCTION_NAME <unknown>")
endif (NOT RESULT)

configure_file (${config}
  ${LOFAR_BINARY_DIR}/tmp_lofar_config.h)

file(READ ${LOFAR_BINARY_DIR}/tmp_lofar_config.h tmpLofarConfig)
file(APPEND ${LOFAR_config} "${tmpLofarConfig}")

add_definitions(-DHAVE_CONFIG_H)

## ------------------------------------------------------------------------------
## Check system libraries

check_include_files (sys/socket.h  HAVE_SYS_SOCKET_H )
check_include_files (sys/types.h   HAVE_SYS_TYPES_H  )
check_include_files (unistd.h      HAVE_UNISTD_H     )
check_include_files (stdarg.h      HAVE_STDARG_H     )
check_include_files (time.h        HAVE_TIME_H       )
check_include_files (stdio.h       HAVE_STDIO_H      )
check_include_files (netinet/in.h  HAVE_NETINET_IN_H )

if (HAVE_SYS_TYPES_H)
  check_type_size ("uint" HAVE_UINT)
  if (HAVE_UINT)
    add_definitions (-DHAVE_UINT)
  endif (HAVE_UINT)
  ##
  check_type_size ("long" HAVE_LONG)
  if (HAVE_LONG)
    add_definitions (-DHAVE_LONG)
  endif (HAVE_LONG)
  ##
  check_type_size ("long long" HAVE_LONGLONG)
  if (HAVE_LONGLONG)
    add_definitions (-DHAVE_LONGLONG)
  endif (HAVE_LONGLONG)
  ##
  check_type_size ("ushort" HAVE_USHORT)
  if (HAVE_USHORT)
    add_definitions (-DHAVE_USHORT)
  endif (HAVE_USHORT)
else (HAVE_SYS_TYPES_H)
  message (STATUS "Unable to find sys/types.h")
endif (HAVE_SYS_TYPES_H)

## ------------------------------------------------------------------------------
## Check for required tools

find_program ( bison_bin bison )
find_program ( flex_bin  flex  )
find_program ( lex_bin   lex   )
find_program ( yacc_bin  yacc  )
