/*
 * BB_Gui.java
 *
 * Created on 15 december 2005, 10:03
 */

package nl.astron.lofar.cep.bb.bb_gui;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  coolen
 */
public class BB_Gui extends javax.swing.JFrame {
    
    BBSConfigFileRep itsConfigFile;
    SourcePatchPanel itsSourcePatchPanel;
            
    // ConfigurationFile variables
    private int              itsNrPrediffers=1;
    private int              itsNrStrategies=1;
    private double           itsStartFreq;
    private double           itsFreqLength;
    private double           itsFreqStepVal;
    private double           itsTimeStep;
    private int              itsTimeNSteps;
    private DefaultListModel itsSolvableParamsModel;
    private DefaultListModel itsExcludeParamsModel;
    private String           itsSubsetMSPath="";
    
    private File             itsConfigFileName;
    private String           itsGeneralMSPath;
    private boolean          saved=false;
    private boolean          changed=false;
    
    /**
     * Creates new form BB_Gui
     */
    public BB_Gui() {
        initComponents();
        
        // The Main Configuration file representation
        itsConfigFile = new BBSConfigFileRep();
        itsSourcePatchPanel = new SourcePatchPanel();
        
        // The listmodels
        itsSolvableParamsModel=new DefaultListModel();
        itsExcludeParamsModel=new DefaultListModel();
        solvableParamsInput.setModel(itsSolvableParamsModel);
        excludeParamsInput.setModel(itsExcludeParamsModel);
        
        //Initially disable the FlowEdit panel and the MainEdit panel
        // The FlowEditPanel can be enabled as soon as there is a Configuration file available (after save or load)
        // The MainEdit Panel can be used as soon as the Toplevel panel is filled(or loaded)
        
        enableMainEditPanel(false);
        enableFlowEditPanel(false);
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        TopLevelParamPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        BBDBnameInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        MSNameInput = new javax.swing.JTextField();
        MeasurementSetBrowseButton = new javax.swing.JButton();
        GetDescriptionFileButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        meqTableNameInput = new javax.swing.JTextField();
        CommonParameterBrowseButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        skyTableNameInput = new javax.swing.JTextField();
        LSMParametersButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        DBTypeInput = new javax.swing.JComboBox();
        DBHostLabel = new javax.swing.JLabel();
        DBHostInput = new javax.swing.JTextField();
        DBMasterPortLabel = new javax.swing.JLabel();
        DBMasterPortInput = new javax.swing.JTextField();
        SourcePatchButton = new javax.swing.JButton();
        FlowEditPanel = new javax.swing.JPanel();
        FlowScrollPane = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        DeleteStepButton = new javax.swing.JButton();
        AddStepButton = new javax.swing.JButton();
        MoveStepUpButton = new javax.swing.JButton();
        ParameterPanel = new javax.swing.JPanel();
        BB_GuiTabbedPane = new javax.swing.JTabbedPane();
        MainEditPanel = new javax.swing.JPanel();
        GeneralParameterPanel = new javax.swing.JPanel();
        parmSolutionTableLabel = new javax.swing.JLabel();
        writeIndividualParmsInput = new javax.swing.JCheckBox();
        parmSolutionTableInput = new javax.swing.JTextField();
        StratSpecParamPanel = new javax.swing.JPanel();
        strategyInput = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        MeasurementPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        startTimeInput = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        endTimeInput = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        startChannelInput = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        endChannelInput = new javax.swing.JTextField();
        useAutoCorrInput = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        XXInput = new javax.swing.JCheckBox();
        XYInput = new javax.swing.JCheckBox();
        YXInput = new javax.swing.JCheckBox();
        YYInput = new javax.swing.JCheckBox();
        jLabel22 = new javax.swing.JLabel();
        stationNamesInput = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        sourcesInput = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        modelTypeInput = new javax.swing.JTextField();
        calcUVWInput = new javax.swing.JCheckBox();
        useSVDInput = new javax.swing.JCheckBox();
        controlParmUpdateInput = new javax.swing.JCheckBox();
        writeParmsInput = new javax.swing.JCheckBox();
        writeInDataColInput = new javax.swing.JCheckBox();
        RunConfigButton = new javax.swing.JButton();
        SolvableParamPanel = new javax.swing.JPanel();
        newSolvParameter = new javax.swing.JTextField();
        SolveParamAddButton = new javax.swing.JButton();
        SolveParamDeleteButton = new javax.swing.JButton();
        SolveParamClearButton = new javax.swing.JButton();
        solvableParamsInput = new javax.swing.JList();
        ExcludeParamPanel = new javax.swing.JPanel();
        newExclParameter = new javax.swing.JTextField();
        ExclParamAddButton = new javax.swing.JButton();
        ExclParamDeleteButton = new javax.swing.JButton();
        excludeParamsInput = new javax.swing.JList();
        ExclParamClearButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        timeIntervalInput = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        maxNrIterationsInput = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        fitCriterionInput = new javax.swing.JTextField();
        RestoreDefaultButton = new javax.swing.JButton();
        ConfigurationFileLabel = new javax.swing.JLabel();
        LogScrollPane = new javax.swing.JScrollPane();
        LogPaneTextArea = new javax.swing.JTextArea();
        BB_GuiMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileMenuNewFile = new javax.swing.JMenuItem();
        FileMenuOpenFile = new javax.swing.JMenuItem();
        FileMenuSaveFile = new javax.swing.JMenuItem();
        FileMenuSaveFileAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        FileMenuClose = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        TopLevelParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TopLevelParamPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "TopLevel Parameters"));
        TopLevelParamPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        TopLevelParamPanel.setPreferredSize(new java.awt.Dimension(100, 100));
        TopLevelParamPanel.setVerifyInputWhenFocusTarget(false);
        jLabel4.setText("Blackboard Database Name");
        TopLevelParamPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 23));

        BBDBnameInput.setToolTipText("Postgres Database Name");
        TopLevelParamPanel.add(BBDBnameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 230, -1));

        jLabel5.setText("Measurement Set Name");
        TopLevelParamPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        MSNameInput.setToolTipText("Name of the Measurement Set");
        MSNameInput.setEnabled(false);
        TopLevelParamPanel.add(MSNameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 230, -1));

        MeasurementSetBrowseButton.setText("Browse");
        MeasurementSetBrowseButton.setToolTipText("Browse for the Measurement Set Name");
        MeasurementSetBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeasurementSetBrowseButtonActionPerformed(evt);
            }
        });

        TopLevelParamPanel.add(MeasurementSetBrowseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, -1, 20));

        GetDescriptionFileButton.setText("Get Description");
        GetDescriptionFileButton.setToolTipText("Get MeasurementSet Description File");
        GetDescriptionFileButton.setEnabled(false);
        GetDescriptionFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetDescriptionFileButtonActionPerformed(evt);
            }
        });

        TopLevelParamPanel.add(GetDescriptionFileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, -1, 20));

        jLabel9.setText("Common Parameters Table Name");
        TopLevelParamPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        meqTableNameInput.setToolTipText("Common Parameters Table Name");
        meqTableNameInput.setEnabled(false);
        TopLevelParamPanel.add(meqTableNameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 230, -1));

        CommonParameterBrowseButton.setText("Browse");
        CommonParameterBrowseButton.setToolTipText("Find Common Parameter File");
        CommonParameterBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommonParameterBrowseButtonActionPerformed(evt);
            }
        });

        TopLevelParamPanel.add(CommonParameterBrowseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, -1, 20));

        jLabel10.setText("LSM Parameters Table Name");
        TopLevelParamPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 160, -1));

        skyTableNameInput.setToolTipText("GSM Parameters Table Name");
        skyTableNameInput.setEnabled(false);
        TopLevelParamPanel.add(skyTableNameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 230, -1));

        LSMParametersButton.setText("Browse");
        LSMParametersButton.setToolTipText("Find LSM Parameters File");
        LSMParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LSMParametersButtonActionPerformed(evt);
            }
        });

        TopLevelParamPanel.add(LSMParametersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, -1, 20));

        jLabel11.setText("Parameter Database Type");
        TopLevelParamPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 24, -1, 20));

        DBTypeInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "aips", "bdb", "bdbrepl" }));
        DBTypeInput.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DBTypeInputItemStateChanged(evt);
            }
        });

        TopLevelParamPanel.add(DBTypeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, 110, -1));

        DBHostLabel.setText("Parameter Database Host Name");
        DBHostLabel.setVisible(false);
        TopLevelParamPanel.add(DBHostLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, -1, 20));

        DBHostInput.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        DBHostInput.setText("localhost");
        DBHostInput.setToolTipText("host where the parameter database runs");
        DBHostInput.setVisible(false);
        TopLevelParamPanel.add(DBHostInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 50, 110, -1));

        DBMasterPortLabel.setText("Port");
        DBMasterPortLabel.setVisible(false);
        TopLevelParamPanel.add(DBMasterPortLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, -1, 20));

        DBMasterPortInput.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        DBMasterPortInput.setText("13157");
        DBMasterPortInput.setToolTipText("Master Database Listen Portnumber");
        DBMasterPortInput.setVisible(false);
        TopLevelParamPanel.add(DBMasterPortInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, 50, -1));

        SourcePatchButton.setText("Source Patches");
        SourcePatchButton.setToolTipText("Define Source Patch List");
        SourcePatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourcePatchButtonActionPerformed(evt);
            }
        });

        TopLevelParamPanel.add(SourcePatchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, -1, 20));

        getContentPane().add(TopLevelParamPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1210, 140));

        FlowEditPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FlowEditPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Edit Flow"));
        FlowScrollPane.setViewportView(jList1);

        FlowEditPanel.add(FlowScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 270, 550));

        DeleteStepButton.setText("Delete Step");
        DeleteStepButton.setToolTipText("Delete Step From List");
        FlowEditPanel.add(DeleteStepButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 620, -1, -1));

        AddStepButton.setText("Add Step");
        AddStepButton.setToolTipText("Add Step to StepList");
        FlowEditPanel.add(AddStepButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 90, -1));

        MoveStepUpButton.setText("Move Up");
        MoveStepUpButton.setToolTipText("Move Step Up in List");
        FlowEditPanel.add(MoveStepUpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 590, -1, -1));

        getContentPane().add(FlowEditPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 300, 760));

        ParameterPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MainEditPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MainEditPanel.setMaximumSize(new java.awt.Dimension(1024, 1024));
        GeneralParameterPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GeneralParameterPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "General Parameters"));
        parmSolutionTableLabel.setText("To DataBase Table: ");
        parmSolutionTableLabel.setVisible(false);
        GeneralParameterPanel.add(parmSolutionTableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, 20));

        writeIndividualParmsInput.setText("Export Solutions");
        writeIndividualParmsInput.setToolTipText("Export Solutions to database");
        writeIndividualParmsInput.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                writeIndividualParmsInputItemStateChanged(evt);
            }
        });

        GeneralParameterPanel.add(writeIndividualParmsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        parmSolutionTableInput.setText("bbs3ParmSolutions");
        parmSolutionTableInput.setToolTipText("Table to store individual parameters in");
        parmSolutionTableInput.setVisible(false);
        GeneralParameterPanel.add(parmSolutionTableInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 230, -1));

        MainEditPanel.add(GeneralParameterPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 50));

        StratSpecParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        StratSpecParamPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Strategy Specific Parameters"));
        strategyInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Solve", "Subtract", "Correct", "WritePredData" }));
        strategyInput.setToolTipText("Strategy Type");
        strategyInput.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                strategyInputItemStateChanged(evt);
            }
        });

        StratSpecParamPanel.add(strategyInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 110, 20));

        jLabel1.setText("Strategy Type");
        StratSpecParamPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 20));

        MeasurementPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MeasurementPanel.setBorder(new javax.swing.border.TitledBorder("MS Selection"));
        jLabel14.setText("Start Time");
        MeasurementPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        startTimeInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        startTimeInput.setText("-1");
        MeasurementPanel.add(startTimeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 170, 20));

        jLabel15.setText("End Time");
        MeasurementPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, -1, 20));

        endTimeInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        endTimeInput.setText("-1");
        MeasurementPanel.add(endTimeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 180, -1));

        jLabel17.setText("Start Channel");
        MeasurementPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        startChannelInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        startChannelInput.setText("0");
        startChannelInput.setToolTipText("Enter Start Channel Number");
        MeasurementPanel.add(startChannelInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 100, -1));

        jLabel18.setText("End Channel");
        MeasurementPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, 20));

        endChannelInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        endChannelInput.setText("1");
        endChannelInput.setToolTipText("Give end channel number");
        MeasurementPanel.add(endChannelInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 100, -1));

        useAutoCorrInput.setText("Use AutoCorrelations");
        MeasurementPanel.add(useAutoCorrInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, -1, -1));

        jLabel24.setText("Correlations");
        MeasurementPanel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, 20));

        XXInput.setSelected(true);
        XXInput.setText("XX");
        MeasurementPanel.add(XXInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        XYInput.setText("XY");
        MeasurementPanel.add(XYInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, -1));

        YXInput.setText("YX");
        MeasurementPanel.add(YXInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, -1, -1));

        YYInput.setSelected(true);
        YYInput.setText("YY");
        MeasurementPanel.add(YYInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, -1, -1));

        jLabel22.setText("Station Names");
        MeasurementPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        stationNamesInput.setToolTipText("Comma Seperated List with Station Names");
        MeasurementPanel.add(stationNamesInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 440, -1));

        StratSpecParamPanel.add(MeasurementPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 550, 180));

        jLabel19.setText("Solvable Source Numbers");
        StratSpecParamPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, 20));

        sourcesInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sourcesInput.setToolTipText("Comma seperated array with sourcenumbers");
        StratSpecParamPanel.add(sourcesInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 700, 20));

        jLabel23.setText("Model Type");
        StratSpecParamPanel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 20));

        modelTypeInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        StratSpecParamPanel.add(modelTypeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 110, -1));

        calcUVWInput.setText("Calculate UVW Coordinates");
        StratSpecParamPanel.add(calcUVWInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        useSVDInput.setSelected(true);
        useSVDInput.setText("Use Singular Value Decomposition");
        StratSpecParamPanel.add(useSVDInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        controlParmUpdateInput.setText("Controller Updates Parameters");
        StratSpecParamPanel.add(controlParmUpdateInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        writeParmsInput.setText("Write Params");
        writeParmsInput.setToolTipText("Write Finale Parameters in Parameter Table");
        StratSpecParamPanel.add(writeParmsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        writeInDataColInput.setSelected(true);
        writeInDataColInput.setText("Write in CORRECTED_DATA column");
        writeInDataColInput.setToolTipText("Write Predicted Data in CORRECTED_DATA Column");
        writeInDataColInput.setVisible(false);
        StratSpecParamPanel.add(writeInDataColInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 20));

        RunConfigButton.setText("Run");
        RunConfigButton.setToolTipText("Run saved step configuration");
        RunConfigButton.setDefaultCapable(false);
        StratSpecParamPanel.add(RunConfigButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, -1, -1));

        SolvableParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SolvableParamPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Solvable Parameters"));
        newSolvParameter.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        newSolvParameter.setToolTipText("Give New Solvable Parameter Name");
        SolvableParamPanel.add(newSolvParameter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 250, -1));

        SolveParamAddButton.setText("Add");
        SolveParamAddButton.setToolTipText("Add New Parameter to List");
        SolveParamAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolveParamAddButtonActionPerformed(evt);
            }
        });

        SolvableParamPanel.add(SolveParamAddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));

        SolveParamDeleteButton.setText("Delete");
        SolveParamDeleteButton.setToolTipText("Delete Chosen Parameter from List");
        SolveParamDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolveParamDeleteButtonActionPerformed(evt);
            }
        });

        SolvableParamPanel.add(SolveParamDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, -1, -1));

        SolveParamClearButton.setText("Clear");
        SolveParamClearButton.setToolTipText("Clear Entire List");
        SolveParamClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolveParamClearButtonActionPerformed(evt);
            }
        });

        SolvableParamPanel.add(SolveParamClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, -1, -1));

        solvableParamsInput.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SolvableParamPanel.add(solvableParamsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 250, 140));

        StratSpecParamPanel.add(SolvableParamPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 410, 210));

        ExcludeParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ExcludeParamPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Excluded Solvable Parameters"));
        newExclParameter.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        newExclParameter.setToolTipText("Give New Exclude Parameter Name");
        ExcludeParamPanel.add(newExclParameter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 250, -1));

        ExclParamAddButton.setText("Add");
        ExclParamAddButton.setToolTipText("Add New Parameter to Exclusion List");
        ExclParamAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExclParamAddButtonActionPerformed(evt);
            }
        });

        ExcludeParamPanel.add(ExclParamAddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));

        ExclParamDeleteButton.setText("Delete");
        ExclParamDeleteButton.setToolTipText("Delete Chosen Parameter from Exclusion List");
        ExclParamDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExclParamDeleteButtonActionPerformed(evt);
            }
        });

        ExcludeParamPanel.add(ExclParamDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, -1, -1));

        excludeParamsInput.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ExcludeParamPanel.add(excludeParamsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 250, 140));

        ExclParamClearButton.setText("Clear");
        ExclParamClearButton.setToolTipText("Clear Entire Exclusion List");
        ExclParamClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExclParamClearButtonActionPerformed(evt);
            }
        });

        ExcludeParamPanel.add(ExclParamClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, -1, -1));

        StratSpecParamPanel.add(ExcludeParamPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 410, 210));

        jLabel16.setText("Time Interval Size (s)");
        StratSpecParamPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, 20));

        timeIntervalInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        timeIntervalInput.setText("1.0e12");
        StratSpecParamPanel.add(timeIntervalInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, 100, -1));

        jLabel20.setText("Maximum Iterations");
        StratSpecParamPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        maxNrIterationsInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxNrIterationsInput.setText("1");
        maxNrIterationsInput.setToolTipText("Maximum Number of Iterations");
        StratSpecParamPanel.add(maxNrIterationsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 500, 100, -1));

        jLabel21.setText("Fit Criterion");
        StratSpecParamPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, -1, 20));

        fitCriterionInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fitCriterionInput.setText("-1");
        StratSpecParamPanel.add(fitCriterionInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 530, 100, 20));

        RestoreDefaultButton.setText("Restore Default");
        RestoreDefaultButton.setToolTipText("Restore Default Settings");
        RestoreDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreDefaultButtonActionPerformed(evt);
            }
        });

        StratSpecParamPanel.add(RestoreDefaultButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 590, -1, -1));

        MainEditPanel.add(StratSpecParamPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 900, 630));

        ConfigurationFileLabel.setText("Currently working on configuration file: ");
        MainEditPanel.add(ConfigurationFileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 704, 560, 20));

        BB_GuiTabbedPane.addTab("Edit", null, MainEditPanel, "Edit Configuration File");

        LogScrollPane.setMaximumSize(new java.awt.Dimension(1024, 1024));
        LogPaneTextArea.setMaximumSize(new java.awt.Dimension(1024, 1024));
        LogScrollPane.setViewportView(LogPaneTextArea);

        BB_GuiTabbedPane.addTab("Log", LogScrollPane);

        ParameterPanel.add(BB_GuiTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 910, 770));

        getContentPane().add(ParameterPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, -1, 780));

        FileMenu.setText("File");
        FileMenu.setToolTipText("Access to fileMenu");
        FileMenuNewFile.setText("New");
        FileMenuNewFile.setToolTipText("Open a New ConfigurationFile");
        FileMenuNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuNewFileActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuNewFile);

        FileMenuOpenFile.setText("Open");
        FileMenuOpenFile.setToolTipText("Open a Configuration File");
        FileMenuOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuOpenFileActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuOpenFile);

        FileMenuSaveFile.setText("Save");
        FileMenuSaveFile.setToolTipText("Save ConfigurationFile");
        FileMenuSaveFile.setEnabled(false);
        FileMenuSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuSaveFileActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuSaveFile);

        FileMenuSaveFileAs.setText("Save As...");
        FileMenuSaveFileAs.setToolTipText("Save Configuration File With a New Name");
        FileMenuSaveFileAs.setEnabled(false);
        FileMenuSaveFileAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuSaveFileAsActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuSaveFileAs);

        FileMenu.add(jSeparator1);

        FileMenuClose.setText("Close");
        FileMenuClose.setToolTipText("Close the Program");
        FileMenuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuCloseActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuClose);

        BB_GuiMenuBar.add(FileMenu);

        HelpMenu.setText("Help");
        BB_GuiMenuBar.add(HelpMenu);

        setJMenuBar(BB_GuiMenuBar);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void RestoreDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreDefaultButtonActionPerformed
        boolean reload=true;
        if (!saved) {
           int anI=JOptionPane.showConfirmDialog(null,"This action will overwrite changes in the input screens\n"+
                   " Are you sure you want to continue?",
                   " Overwrite InputScreens Warning",
                   JOptionPane.YES_NO_OPTION);
           if (anI==JOptionPane.NO_OPTION){
                reload=false;
           }            
        }
       
        if (reload) {
            itsConfigFile.restoreParams("default");
            reloadPanels(itsConfigFile);
        }
    }//GEN-LAST:event_RestoreDefaultButtonActionPerformed

    private void strategyInputItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_strategyInputItemStateChanged
        checkStrategyChange();
    }//GEN-LAST:event_strategyInputItemStateChanged

    private void FileMenuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_FileMenuCloseActionPerformed

    private void FileMenuSaveFileAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuSaveFileAsActionPerformed
        File aFile=getFileName("ConfigSaveAs");
        if (aFile != null) {
            itsConfigFileName=aFile;
            saveFile();
        }
    }//GEN-LAST:event_FileMenuSaveFileAsActionPerformed

    private void MeasurementSetBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeasurementSetBrowseButtonActionPerformed
        File aFile=getFileName("MSName");
        if (aFile != null && aFile.exists()) {
            MSNameInput.setText(aFile.getName());
            GetDescriptionFileButton.setEnabled(true);
            itsGeneralMSPath=aFile.getParent();
            enableMainEditPanel(true);
            changed=true;
        }
    }//GEN-LAST:event_MeasurementSetBrowseButtonActionPerformed

    private void FileMenuSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuSaveFileActionPerformed
        saveFile();
    }//GEN-LAST:event_FileMenuSaveFileActionPerformed

    private void FileMenuOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuOpenFileActionPerformed
        File aFile=getFileName("LoadConfig");
        if (aFile != null && aFile.exists()) {
            BBSConfigFileRep aF = new BBSConfigFileRep();
            aF.loadFile(aFile);
            boolean reload=false;
            if (!saved) {
                int anI=JOptionPane.showConfirmDialog(null,"This action will overwrite changes in the input screens\n"+
                       " Are you sure you want to continue?",
                        "Overwrite InputScreens Warning",
                        JOptionPane.YES_NO_OPTION);                
                if (anI==JOptionPane.YES_OPTION){
                   reload=true;
                }            
            }
            if (reload) {
                reloadPanels(aF);
                itsConfigFileName=aFile;
                itsConfigFile=aF;
                FileMenuSaveFile.setEnabled(true);
                FileMenuSaveFileAs.setEnabled(true);
                enableMainEditPanel(true);
                ConfigurationFileLabel.setText("Currently working on configuration file: "+ itsConfigFileName.getName());
            }
        }
    }//GEN-LAST:event_FileMenuOpenFileActionPerformed

    private void FileMenuNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuNewFileActionPerformed
        File aFile=getFileName("NewConfig");
        if (aFile != null) {
            itsConfigFileName=aFile;
            itsConfigFile.setFile(itsConfigFileName);
            FileMenuSaveFile.setEnabled(true);
            FileMenuSaveFileAs.setEnabled(true);
            ConfigurationFileLabel.setText("Currently working on configuration file: "+ itsConfigFileName.getName());
        }
    }//GEN-LAST:event_FileMenuNewFileActionPerformed

    private void ExclParamClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExclParamClearButtonActionPerformed
        itsExcludeParamsModel.clear();
        newExclParameter.setText("");
        excludeParamsInput.validate();
    }//GEN-LAST:event_ExclParamClearButtonActionPerformed

    private void SolveParamClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolveParamClearButtonActionPerformed
        itsSolvableParamsModel.clear();
        newSolvParameter.setText("");
        solvableParamsInput.validate();       
    }//GEN-LAST:event_SolveParamClearButtonActionPerformed

    private void ExclParamDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExclParamDeleteButtonActionPerformed
        if (excludeParamsInput.getSelectedIndex() > -1) {
            itsExcludeParamsModel.remove(excludeParamsInput.getSelectedIndex());
            excludeParamsInput.validate();
        }
    }//GEN-LAST:event_ExclParamDeleteButtonActionPerformed

    private void SolveParamDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolveParamDeleteButtonActionPerformed
        if (solvableParamsInput.getSelectedIndex() > -1) {
            itsSolvableParamsModel.remove(solvableParamsInput.getSelectedIndex());
            solvableParamsInput.validate();
        }
    }//GEN-LAST:event_SolveParamDeleteButtonActionPerformed

    private void ExclParamAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExclParamAddButtonActionPerformed
        if (newExclParameter.getText().length() > 0) {
            String aS=newExclParameter.getText();
            itsExcludeParamsModel.addElement(aS);
            changed=true;
        }
        newExclParameter.setText("");
        excludeParamsInput.validate();
    }//GEN-LAST:event_ExclParamAddButtonActionPerformed

    private void SolveParamAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolveParamAddButtonActionPerformed
        if (newSolvParameter.getText().length() > 0) {
            String aS=newSolvParameter.getText();
            itsSolvableParamsModel.addElement(aS);
            changed=true;
        }
        newSolvParameter.setText("");
        solvableParamsInput.validate();
    }//GEN-LAST:event_SolveParamAddButtonActionPerformed

    private void SourcePatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourcePatchButtonActionPerformed
      itsSourcePatchPanel.setSize(450,350);
      itsSourcePatchPanel.setModal(true);
      itsSourcePatchPanel.setAlwaysOnTop(true);
      itsSourcePatchPanel.setVisible(true);
    }//GEN-LAST:event_SourcePatchButtonActionPerformed
    
    private void GetDescriptionFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetDescriptionFileButtonActionPerformed
        
        File aFile=new File(itsGeneralMSPath+"/"+MSNameInput.getText()+".dess");
        if (aFile != null && aFile.exists()) {
            showDescriptionFile(aFile);
        } else {
            JOptionPane.showMessageDialog(null,"There is no Description File for this MS",
                    "Get Description File Warning",
                    JOptionPane.WARNING_MESSAGE);            
        }
    }//GEN-LAST:event_GetDescriptionFileButtonActionPerformed
    
    private void LSMParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LSMParametersButtonActionPerformed
        File aFile = getFileName("skyTableName");
        if (aFile != null && aFile.exists()) {
            skyTableNameInput.setText(aFile.getAbsolutePath());
            changed=true;
        }
    }//GEN-LAST:event_LSMParametersButtonActionPerformed
    
    private void CommonParameterBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommonParameterBrowseButtonActionPerformed
        File aFile=getFileName("meqTableName");
        if (aFile != null && aFile.exists() ){
            meqTableNameInput.setText(aFile.getAbsolutePath());
            changed=true;
        }
    }//GEN-LAST:event_CommonParameterBrowseButtonActionPerformed
        
    private void DBTypeInputItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DBTypeInputItemStateChanged
        checkDBTypeChange();
    }//GEN-LAST:event_DBTypeInputItemStateChanged
    
    private void writeIndividualParmsInputItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_writeIndividualParmsInputItemStateChanged
        // Only set these fields visible when writeIndividualParms is checked
        parmSolutionTableLabel.setVisible(writeIndividualParmsInput.isSelected());
        parmSolutionTableInput.setVisible(writeIndividualParmsInput.isSelected());
        changed=true;
    }//GEN-LAST:event_writeIndividualParmsInputItemStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BB_Gui().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddStepButton;
    private javax.swing.JTextField BBDBnameInput;
    private javax.swing.JMenuBar BB_GuiMenuBar;
    private javax.swing.JTabbedPane BB_GuiTabbedPane;
    private javax.swing.JButton CommonParameterBrowseButton;
    private javax.swing.JLabel ConfigurationFileLabel;
    private javax.swing.JTextField DBHostInput;
    private javax.swing.JLabel DBHostLabel;
    private javax.swing.JTextField DBMasterPortInput;
    private javax.swing.JLabel DBMasterPortLabel;
    private javax.swing.JComboBox DBTypeInput;
    private javax.swing.JButton DeleteStepButton;
    private javax.swing.JButton ExclParamAddButton;
    private javax.swing.JButton ExclParamClearButton;
    private javax.swing.JButton ExclParamDeleteButton;
    private javax.swing.JPanel ExcludeParamPanel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuClose;
    private javax.swing.JMenuItem FileMenuNewFile;
    private javax.swing.JMenuItem FileMenuOpenFile;
    private javax.swing.JMenuItem FileMenuSaveFile;
    private javax.swing.JMenuItem FileMenuSaveFileAs;
    private javax.swing.JPanel FlowEditPanel;
    private javax.swing.JScrollPane FlowScrollPane;
    private javax.swing.JPanel GeneralParameterPanel;
    private javax.swing.JButton GetDescriptionFileButton;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JButton LSMParametersButton;
    private javax.swing.JTextArea LogPaneTextArea;
    private javax.swing.JScrollPane LogScrollPane;
    private javax.swing.JTextField MSNameInput;
    private javax.swing.JPanel MainEditPanel;
    private javax.swing.JPanel MeasurementPanel;
    private javax.swing.JButton MeasurementSetBrowseButton;
    private javax.swing.JButton MoveStepUpButton;
    private javax.swing.JPanel ParameterPanel;
    private javax.swing.JButton RestoreDefaultButton;
    private javax.swing.JButton RunConfigButton;
    private javax.swing.JPanel SolvableParamPanel;
    private javax.swing.JButton SolveParamAddButton;
    private javax.swing.JButton SolveParamClearButton;
    private javax.swing.JButton SolveParamDeleteButton;
    private javax.swing.JButton SourcePatchButton;
    private javax.swing.JPanel StratSpecParamPanel;
    private javax.swing.JPanel TopLevelParamPanel;
    private javax.swing.JCheckBox XXInput;
    private javax.swing.JCheckBox XYInput;
    private javax.swing.JCheckBox YXInput;
    private javax.swing.JCheckBox YYInput;
    private javax.swing.JCheckBox calcUVWInput;
    private javax.swing.JCheckBox controlParmUpdateInput;
    private javax.swing.JTextField endChannelInput;
    private javax.swing.JTextField endTimeInput;
    private javax.swing.JList excludeParamsInput;
    private javax.swing.JTextField fitCriterionInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField maxNrIterationsInput;
    private javax.swing.JTextField meqTableNameInput;
    private javax.swing.JTextField modelTypeInput;
    private javax.swing.JTextField newExclParameter;
    private javax.swing.JTextField newSolvParameter;
    private javax.swing.JTextField parmSolutionTableInput;
    private javax.swing.JLabel parmSolutionTableLabel;
    private javax.swing.JTextField skyTableNameInput;
    private javax.swing.JList solvableParamsInput;
    private javax.swing.JTextField sourcesInput;
    private javax.swing.JTextField startChannelInput;
    private javax.swing.JTextField startTimeInput;
    private javax.swing.JTextField stationNamesInput;
    private javax.swing.JComboBox strategyInput;
    private javax.swing.JTextField timeIntervalInput;
    private javax.swing.JCheckBox useAutoCorrInput;
    private javax.swing.JCheckBox useSVDInput;
    private javax.swing.JCheckBox writeInDataColInput;
    private javax.swing.JCheckBox writeIndividualParmsInput;
    private javax.swing.JCheckBox writeParmsInput;
    // End of variables declaration//GEN-END:variables
    
    private File getFileName(String aFileChoice) {
        File aFile=null;
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new MyFileFilter(aFileChoice));
        fc.setAcceptAllFileFilterUsed(false);
        if (aFileChoice.equals("MSName") || aFileChoice.equals("meqTableName") || aFileChoice.equals("skyTableName")) {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        int returnVal = fc.showOpenDialog(BB_Gui.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            aFile=fc.getSelectedFile();
        } else {
            JOptionPane.showMessageDialog(null,"You didn't select a file",
                    aFileChoice+" Selection Warning",
                    JOptionPane.WARNING_MESSAGE);
        }
        return aFile;
    }
    
    private void saveFile() {
        if (itsConfigFileName != null) {
            if (itsConfigFileName.exists()) {
                int anI=JOptionPane.showConfirmDialog(null,"This File allready exists, Are you sure you want to overwrite it?",
                    itsConfigFileName.getName()+" Overwrite Warning",
                    JOptionPane.YES_NO_OPTION);                
                if (anI==JOptionPane.YES_OPTION){
                    saveConfig();
                }
            } else {
                saveConfig();
            }
        }    
    }
    
    private void showDescriptionFile(File aFile) {
      MSDescriptionPanel aMSD=new MSDescriptionPanel(aFile,this);
      aMSD.setSize(700,550);
      aMSD.setModal(true);
      aMSD.setAlwaysOnTop(true);
      aMSD.setVisible(true);        
    }
    
    public void readDescriptionFile(File aFile) {
        //Open and read the description file for this MS (if any available)
        // and fill all possible GUI values from this file.
        // Keywords defined so far:
        // npart           (nrPrediffers) 
        // coortype        (XX,XY,YX,YY)
        // stations        (stationnames seperated by ,)
        // subsetMSPath    (Path for Measurement Subsets)
        // freq.start      (start frequency)
        // freq.end        (end frequency)
        // freq.step       (Frequency step size)
        // freq.nchan      (Number of frequence channels)
        // time.start      (start time)
        // time.end        (end time)
        // time.step       (time step size)
        // time.nsteps     (number of timesteps)
        
        
        try {
            BufferedReader in = new BufferedReader(new FileReader(aFile));
            String aStr;
            String keyword="";
            String value="";
            Double endFreq=0.0;
            
            while ((aStr = in.readLine()) != null) {
                // Split String in main parts keyword = value (# comment)
                //skip empty lines
                if (aStr.matches("^.*=.*$")) {
                    keyword=aStr.split("=")[0];
                    value=(aStr.split("=")[1]).split("#")[0];
                    // System.out.println("Found Keyword: "+keyword +"   value: "+value+".");
                    if (keyword.contains("npart")) {
                        try {
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");
                            itsNrPrediffers= Integer.valueOf(value).intValue();
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to integer.");
                        }
                    } else if(keyword.contains("coortype")) {
                        String aS[]=value.split(",");
                        XXInput.setSelected(false);
                        XYInput.setSelected(false);
                        YXInput.setSelected(false);
                        YYInput.setSelected(false);
                        for (int i=0; i< aS.length;i++){
                            if (aS[i].equals("XX")) {
                                XXInput.setSelected(true);
                            } else if (aS[i].equals("XY")) {
                                XYInput.setSelected(true);
                            } else if (aS[i].equals("YX")) {
                                YXInput.setSelected(true);
                            } else if (aS[i].equals("YY")) {
                                YYInput.setSelected(true);
                            }
                        }
                    } else if (keyword.contains("station")) {
                        stationNamesInput.setText(value);
                    } else if (keyword.contains("subsetMSPath")) {
                        itsSubsetMSPath=value;
                    } else if (keyword.contains("freq.start")) {
                        try {
                            value=value.split(" ")[0];
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                            
                            itsStartFreq=Double.valueOf(value);
                            
                        } catch (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to double.");
                        }
                    } else if (keyword.equals("freq.end")) {
                        try {
                            value=value.split(" ")[0];
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                            
                            endFreq = Double.valueOf(value);
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to double.");
                        }
                    } else if (keyword.contains("freq.step")) {
                        try {
                            value=value.split(" ")[0];
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                            
                            itsFreqStepVal = Double.valueOf(value);
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to double.");
                        }
                    } else if (keyword.contains("freq.nchan")) {
                        try {
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                                                        
                            Integer anI= Integer.valueOf(value).intValue()-1;
                            endChannelInput.setText(anI.toString());
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to integer.");
                        }
                    } else if (keyword.contains("time.start")) {
                        startTimeInput.setText(value);
                    } else if (keyword.contains("time.end")) {
                        endTimeInput.setText(value);
                    } else if (keyword.contains("time.step")) {
                        try {
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                                                        
                            itsTimeStep=Integer.valueOf(value).intValue();
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to integer.");
                        }
                    } else if (keyword.contains("time.nsteps")) {
                        try {
                            value=value.replaceAll("[\\p{Cntrl}\\p{Blank}\\p{Space}]*", "");                            
                            itsTimeNSteps=Integer.valueOf(value).intValue();
                        } catch  (NumberFormatException e) {
                            System.out.println("Error converting "+value+" to integer.");
                        }
                    }
                }
            }
            in.close();
            
            if (endFreq > 0 && itsStartFreq > 0){
                itsFreqLength=endFreq - itsStartFreq;   
            }
        } catch (IOException e) {
            System.out.println("Error reading from file: "+aFile.getName());
        }
    }
    
    
    private String listModel2String(DefaultListModel aListModel) {
            String aS="[";
            if (aListModel.size() > 0) {
                for (int i=0;i<aListModel.size();i++) {
                    if (i > 0) {
                        aS+=",";
                    } 
                    aS+=aListModel.get(i);
                }
            }
        aS+="]";
        return aS;
    }
    
    private DefaultListModel string2ListModel(String aStr) {
        DefaultListModel aModel= new DefaultListModel();
        String aS[]=aStr.split(",");
        for (int i=0;i<aS.length;i++) {
            aModel.addElement(aS[i]);
        }
        return aModel;
    }
    
    private String textList2String(String aStr) {
            String aS= "[";
            if (aStr.length() > 0) {
                String a[]=aStr.split(",");
                for (int i=0;i<a.length;i++) {  
                    if (i > 0) {
                        aS+=",";
                    } 
                    aS+=a[i];
                }                    
            }
        aS+="]";
        return aS;
    }
    
    private String text2IntArray(String aStr) {
        return "["+aStr+"]";
    }
    
    
    private void setCorrelations(String aStr) {
        XXInput.setSelected(false);
        XYInput.setSelected(false);
        YXInput.setSelected(false);
        YYInput.setSelected(false);

        String [] aI= aStr.split(",");
        for (int i=0; i< aI.length;i++) {
            if (aI[i].equals("0")) {
                XXInput.setSelected(true);
            } else if (aI[i].equals("1")) {
                XYInput.setSelected(true);
            } else if (aI[i].equals("2")) {
                YXInput.setSelected(true);
            } else if (aI[i].equals("3")) {
                YYInput.setSelected(true);
            }
        }
    }
    
    private String getCorrelationsArray() {
        String aS="[";
        boolean first=true;
        if (XXInput.isSelected()) {
            aS+="0";
            first=false;
        }
        if (XYInput.isSelected()) {
            if (!first) {
                aS+=",";
            }
            aS+="1";
            first=false;
        }
        if (YXInput.isSelected()) {
            if (!first) {
                aS+=",";
            }
            aS+="2";
            first=false;
        }
        if (YYInput.isSelected()) {
            if (!first) {
                aS+=",";
            }
            aS+="3";
            first=false;
        }
        aS+="]";
        return aS;
    }
    
    private String boolean2String(boolean aB) {
        if (aB) {
            return "T";
        }else{
            return "F";
        }
    }

    private Boolean string2Boolean(String aS) {
        boolean aB=false;
        if (aS.equals("T")) {
            aB=true;
        }
        return aB;
    }

    private void saveConfig() {
        itsConfigFile.saveParams("nrPrediffers",Integer.toString(itsNrPrediffers));
        itsConfigFile.saveParams("nrStrategies",Integer.toString(itsNrStrategies));
        itsConfigFile.saveParams("BBDBname",BBDBnameInput.getText());
        itsConfigFile.saveParams("writeIndividualParms",boolean2String(writeIndividualParmsInput.isSelected()));
        itsConfigFile.saveParams("parmSolutionTable",parmSolutionTableInput.getText());
        itsConfigFile.saveParams("strategy",strategyInput.getSelectedItem().toString());
        itsConfigFile.saveParams("MSName",MSNameInput.getText());
        itsConfigFile.saveParams("generalMSPath",itsGeneralMSPath);
        itsConfigFile.saveParams("subsetMSPath",itsSubsetMSPath);
        if (meqTableNameInput.getText().length() > 0) {
            itsConfigFile.saveParams("meqTableName",meqTableNameInput.getText());
        }
        if (skyTableNameInput.getText().length() > 0) {
            itsConfigFile.saveParams("skyTableName",skyTableNameInput.getText());
        }
        itsConfigFile.saveParams("DBType",DBTypeInput.getSelectedItem().toString());
        if (DBTypeInput.getSelectedItem().toString().equals("bdbrepl")) {
            itsConfigFile.saveParams("DBHost",DBHostInput.getText());
            itsConfigFile.saveParams("DBMasterPort",DBMasterPortInput.getText());
        }
        itsConfigFile.saveParams("solvableParams",listModel2String(itsSolvableParamsModel));
        itsConfigFile.saveParams("excludeParams",listModel2String(itsExcludeParamsModel));
        itsConfigFile.saveParams("startTime",startTimeInput.getText());
        itsConfigFile.saveParams("endTime",endTimeInput.getText());
        itsConfigFile.saveParams("timeInterval",Double.toString(itsTimeStep));
        itsConfigFile.saveParams("startChan",startChannelInput.getText());
        itsConfigFile.saveParams("endChan",endChannelInput.getText());
        itsConfigFile.saveParams("sources",text2IntArray(sourcesInput.getText()));
        itsConfigFile.saveParams("sourcePatches",listModel2String(itsSourcePatchPanel.getList()));
        itsConfigFile.saveParams("maxNrIterations",maxNrIterationsInput.getText());
        itsConfigFile.saveParams("fitCriterion",fitCriterionInput.getText());
        itsConfigFile.saveParams("stationNames",textList2String(stationNamesInput.getText()));
        itsConfigFile.saveParams("modelType",modelTypeInput.getText());
        itsConfigFile.saveParams("calcUVW",boolean2String(calcUVWInput.isSelected()));
        itsConfigFile.saveParams("useSVD",boolean2String(useSVDInput.isSelected()));
        itsConfigFile.saveParams("correlations",getCorrelationsArray());
        itsConfigFile.saveParams("useAutoCorr",boolean2String(useAutoCorrInput.isSelected()));
        itsConfigFile.saveParams("controlParmUpdate",boolean2String(controlParmUpdateInput.isSelected()));
        itsConfigFile.saveParams("writeParms",boolean2String(writeParmsInput.isSelected()));
        itsConfigFile.saveParams("writeInDataCol",boolean2String(writeInDataColInput.isSelected()));
                
        itsConfigFile.saveFile(itsConfigFileName);
        saved=true;
    }
    
    private void enableMainEditPanel(boolean aFlag) {
        enableGeneralParameterPanel(aFlag);
        enableStratSpecParamPanel(aFlag);
    }
    
    private void enableGeneralParameterPanel(boolean aFlag) {
        for (int i=0;i<GeneralParameterPanel.getComponentCount();i++) {
            GeneralParameterPanel.getComponent(i).setEnabled(aFlag);
        }               
    }
    
    private void enableStratSpecParamPanel(boolean aFlag) {
        for (int i=0;i<StratSpecParamPanel.getComponentCount();i++) {
            StratSpecParamPanel.getComponent(i).setEnabled(aFlag);
        }               
        enableMeasurementPanel(aFlag);
        enableSolvableParamPanel(aFlag);
        enableExcludeParamPanel(aFlag);
    }
    
    private void enableMeasurementPanel(boolean aFlag) {
        for (int i=0;i<MeasurementPanel.getComponentCount();i++) {
            MeasurementPanel.getComponent(i).setEnabled(aFlag);
        }               
    }

    private void enableSolvableParamPanel(boolean aFlag) {
        for (int i=0;i<SolvableParamPanel.getComponentCount();i++) {
            SolvableParamPanel.getComponent(i).setEnabled(aFlag);
        }               
    }

    private void enableExcludeParamPanel(boolean aFlag) {
        for (int i=0;i<ExcludeParamPanel.getComponentCount();i++) {
            ExcludeParamPanel.getComponent(i).setEnabled(aFlag);
        }               
    }
    
    
    private void enableFlowEditPanel(boolean aFlag) {
        for (int i=0;i<FlowEditPanel.getComponentCount();i++) {
            FlowEditPanel.getComponent(i).setEnabled(aFlag);
        }        
    }

    private void enableTopLevelParamPanel(boolean aFlag) {
        for (int i=0;i<TopLevelParamPanel.getComponentCount();i++) {
            Component aC=TopLevelParamPanel.getComponent(i);
            // The following components need to keep their (disabled) state
            if (aC.getName().equals("MSNameInput") ||
                    aC.getName().equals("skyTableInput") ||
                    aC.getName().equals("meqTableInput")) {
            } else {
                aC.setEnabled(aFlag);
            }
        }           
    }
    
    private void reloadPanels(BBSConfigFileRep aConfigFile) {        
        itsNrPrediffers=Integer.valueOf(aConfigFile.getParams("nrPrediffers")).intValue();
        itsNrStrategies=Integer.valueOf(aConfigFile.getParams("nrStrategies")).intValue();
        BBDBnameInput.setText(aConfigFile.getParams("BBDBname"));
        writeIndividualParmsInput.setSelected(string2Boolean(aConfigFile.getParams("writeIndividualParms")));
        parmSolutionTableInput.setText(aConfigFile.getParams("parmSolutionTable"));
        strategyInput.setSelectedItem(aConfigFile.getParams("strategy"));
        checkStrategyChange();
        MSNameInput.setText(aConfigFile.getParams("MSName"));
        itsGeneralMSPath=aConfigFile.getParams("generalMSPath");
        itsSubsetMSPath=aConfigFile.getParams("subsetMSPath");
        meqTableNameInput.setText(aConfigFile.getParams("meqTableName"));
        skyTableNameInput.setText(aConfigFile.getParams("skyTableName"));
        DBTypeInput.setSelectedItem(aConfigFile.getParams("DBType"));
        checkDBTypeChange();
        DBHostInput.setText(aConfigFile.getParams("DBHost"));
        DBMasterPortInput.setText(aConfigFile.getParams("DBMasterPort"));
        itsSolvableParamsModel=string2ListModel(aConfigFile.getParams("solvableParams"));
        solvableParamsInput.setModel(itsSolvableParamsModel);
        solvableParamsInput.validate();
        itsExcludeParamsModel=string2ListModel(aConfigFile.getParams("excludeParams"));
        excludeParamsInput.setModel(itsExcludeParamsModel);
        excludeParamsInput.validate();
        startTimeInput.setText(aConfigFile.getParams("startTime"));
        endTimeInput.setText(aConfigFile.getParams("endTime"));
        itsTimeStep=Double.valueOf(aConfigFile.getParams("timeInterval")).doubleValue();
        startChannelInput.setText(aConfigFile.getParams("startChan"));
        endChannelInput.setText(aConfigFile.getParams("endChan"));
        sourcesInput.setText(aConfigFile.getParams("sources"));
        itsSourcePatchPanel.setList(string2ListModel(aConfigFile.getParams("sourcePatches")));
        maxNrIterationsInput.setText(aConfigFile.getParams("maxNrIterations"));
        fitCriterionInput.setText(aConfigFile.getParams("fitCriterion"));
        stationNamesInput.setText(aConfigFile.getParams("stationNames"));
        modelTypeInput.setText(aConfigFile.getParams("modelType"));
        calcUVWInput.setSelected(string2Boolean(aConfigFile.getParams("calcUVW")));
        useSVDInput.setSelected(string2Boolean(aConfigFile.getParams("useSVD")));
        setCorrelations(aConfigFile.getParams("correlations"));
        useAutoCorrInput.setSelected(string2Boolean(aConfigFile.getParams("useAutoCorr")));
        controlParmUpdateInput.setSelected(string2Boolean(aConfigFile.getParams("controlParmUpdate")));
        writeParmsInput.setSelected(string2Boolean(aConfigFile.getParams("writeParms")));
        writeInDataColInput.setSelected(string2Boolean(aConfigFile.getParams("writeInDataCol")));        
     }
    
    private void checkDBTypeChange() {
        // If selection goes to bdbrepl then DBHost and Port should be filled also
        boolean isBDBRepl=false;
        if (DBTypeInput.getSelectedItem().toString().equals("bdbrepl")) {
            isBDBRepl=true;
        }
        DBHostLabel.setVisible(isBDBRepl);
        DBHostInput.setVisible(isBDBRepl);
        DBMasterPortLabel.setVisible(isBDBRepl);
        DBMasterPortInput.setVisible(isBDBRepl);
        changed=true;        
    }
    
    private void checkStrategyChange() {
        // When choice is WritePredData, writeInDataColumn choice needs to be visible
        // While TimeInterval,Maximum iterations, Fit criterion,Use singular value decomposition,
        // Control updates parameters and Write final parameters in parameter table can vanish.
        boolean aFlag=false;
        if (strategyInput.getSelectedItem().toString().equals("WritePredData")) {
            aFlag=true;
        }
        timeIntervalInput.setVisible(!aFlag);
        maxNrIterationsInput.setVisible(!aFlag);
        fitCriterionInput.setVisible(!aFlag);
        useSVDInput.setVisible(!aFlag);
        controlParmUpdateInput.setVisible(!aFlag);
        writeParmsInput.setVisible(!aFlag);
        
        writeInDataColInput.setVisible(aFlag);
        changed=true;        
    }
    
    
}
