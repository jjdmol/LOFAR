MEQ in general:

  * meqsink_test() exits when no such MS; it shouldn't
  
  * Update documentation!
                
  * check performance: why does privatizing message arguments in MeqServer
    sometimes lead to cloning? I don't see why anybody else would be holding
    onto the message.
    Update 14/01/04: in fact in a multi-threaded scenario the dispatcher
    is holding onto the message throughout send(). Even if there's only one
    recepient, there's a chance that the recepient thread wakes up, grabs
    the message and starts wastefully cloning it (via a privatize call) 
    because Dispatcher::send() is not yet complete. This ties into the COW
    issue as well; both need to be considered together. As an alternative, 
    perhaps there's a way for send() to block all updated recepients from 
    waking up until the entire send() cycle is complete.
    
  * Fix MeqServer/test/solver_test to run in a "clean" environment
    (i.e. no install, no .glishrc, etc -- mostly related to include paths)
    10/02/04: symlinks to ../pkginc/*.g do part of the job. What do we do
    about *.g files installed in subdirectories though?
   
  * How to tell all the nodes to shut up? (stop publishing)
  
    - Specify child labels in node constructor; check them in init().
      Process named children properly.
      01/01/04: done, need to test w/glish (glish not working on my laptop)
      16/01/04: tested with default tests; now need to make some nodes
                with child labels
  
        + Use the same mechanism to check the request rider as we do for state
          updates. E.g., polc values from the solver should be passed in this 
          manner -- and not via state.
          27/02/04: all done & tested
          
        + reconsider order or events in execute(): should cache be checked
          only after node_state and rider have been processed? Note that for
          repeated requests, this step is skipped, regardless. 
          11/02/04: no, leave as is. 
  
    
        + publish intermediate results
          29/01/04: done
  
        + Clear.Forest command 
          04/01/04: done, need to test w/glish (glish not working on my laptop)
          19/01/04: done
  
        + Persistent nodes: Save.Forest, Load.Forest, Clear.Cache commands
          01/01/04: done, need to test w/glish (glish not working on my laptop)
          16/01/04: MeqParm refuses to reload itself after a solve. Needs work.
          19/01/04: done
      
        + Document the two types of node_state lookups
        + Document pollChildren()
          12/12/03
  
        + re-work execute(). Make it possible to send up "empty" (command or
          state-only) requests.  
        + cache failed Results too (along with result_code and such)
        + do processRider()
        + map node_state to setState(), via configuration classes and such.
          Implement and document the two types of lookups.
          12/12/03

        + Store nodeindex in node, provide accessor.
        + rearrange init() and setState() to make use of DataRecord::merge().
          12/12/03

        + Rename Result to VellSet and ResultSet to Result
        + Rename getResult() to execute(), and getResultImpl to getResult.
          08/12/03

        + think through writability & privatization issues. Perhaps finally
          implement simple copy-on-write as the default policy in DMI?
          27/11/03: good to go for now. Still thinking about COW.
          
Solver:

        + Implement request ID hierarchy
          28/01/04: done
  
        + Generate a valid RequestId even if the input request is NULL.
          This ties in to hierarchical requests, so maybe something simple for now
          (i.e., append iteration index or something?)
          20/01/04: done for now; revisit with hierarchical requests
          
Spigot:

        + In deliver, just stick the result in the cache and let the caching code
          take care of everything else. 
          10/01/04: done, needs testing
          20/01/04: seems to work
    
        + Allow string specification for correlations
          09/01/04: no need, now that Spigots output all correlations at once.

Parm:

  * for grow_domain: use the envelope domain, rather than checking for 
    strict supersets.
    
  * rework parm so that predict-only requests may be satisfied without dropping
    the solvable polc (i.e. keep the solvable polc and the per-domain cached
    polcs separate)

  * develop different strategies for handling multiple polcs
  
        + move the update-via-FValue mechanism to the request rider; it doesn't
          really belong in state proper. (The rider needs to be reworked, see 
          entry above).
          25/02/04: done

        + If a polc with the right domain is already specified in the init-record,
          do not read the tables
          11/02/04: done: added inf_domain and grow_domain attributes to a polc
    
        + take over from GvD; log any issues that result
          06/02/04: done
    
        + Figure out how to specify default values (with, e.g., an infinite domain)
          28/01/04: emerged from discussions with JEN

Request: 

  * Buglet: when Jan supplied an illegal request (wrong fields, unmatched IDs), the 
    error message was not exactly descriptive
    
        + BUG: Figure out why state_test() (meqtest.g) causes Requests to be
          fail to unpack upon the first invocation. Possibly related to problem
          below. See details in report 1 below. 14/01/04: found; Cells was
          missing a clone() and thus wouldn't clone itself properly. Request
          would only occasionally be cloned (depending on whether the other
          thread already released the message or not), thus the error only
          showed up when true cloning occurred. Removing bug report from this
          file.

Vells and VellSets and Results:

  * Vells(DataArray*) constructor: if rank<2 but nelements==1, reform the 
    array (otherwise, won't instantiate from scalars!)
    09/02/04: perhaps unnecessary, seeing as we have a meqpolc() glish function?
    
    - double-differencing?
      02/02/04 done for VellSets, needs real testing
    
        + Problem with in-place operators (+= etc.) and type promotion
          15/01/04 fixed
    
Function:
  
        + Allow cases where a Result has 1 plane and another has N planes: treat
          the single-plane result as a scalar
          12/12/03 done
          
DMI & Debug:

  * add protect feature to container fields (for use in classes such as 
    Meq::Result etc.)
    (merged with: expose lock()/unlock() of DataRecord fields. Do not lock 
    fields by default. Use locking to "protect" fields, e.g., in the MEQ 
    Request & Result classes.)

  * ? implement CountedRef::makeWritable since this seems to be a very common
    operation
    
  * implement Hook = Hook and Hook <<= Hook, should be easy to do now
    
        + In Debug: add capability to redirect the debug message stream
          30/01/04 done

        + Keep thinking about COWs. Perhaps make hooks implicit-COW? This would 
          mean declaring an operator [] on CountedRefs? 
          30/01/04 done
          
        + provide conversions between scalars and single-element arrays
          09/02/04 done & tested

        + DataField: getting a non-existing element as an ObjRef makes the
          element MODIFIED. This can cause confusion later on. Perhaps it
          should only be returned as MODIFIED if write-access is requested?
          apparently fixed 25/01/04
    

OCTOPUSSY:

  * Bug: valgrind reports thread deadlock on the Dispatcher::startup_cond
    and Dispatcher::repoll_cond condition vars. How is this even possible?
    Perhaps related to problem below?
    
  * Bug: Figure out why the hell it freezes on a single-CPU machine sometimes. A
    race condition somewhere? NB: a sure way to do it (on zeppelin) seems to
    enable wait_reply=T in the Resolve.Children calls in meqtest.g.

  * Bug: Check how a zero-length string or hiid array from Glish shows up in
    AppAgent -- because it looked like a 1-element DataField when 
    processing child specs.
    
  * Bug: Ditto for zero-length arrays ('[]'), i.e., uninitialized domain, etc.

  * Check for USE_THREADS when playing with mutexes (or improve the definition
    of mutexes when compiling without threads: declare constructors for
    Mutex::Lock and all that crap)


General:

        + Bug: MSOutputSink: output to new column doesn't work, column stays
          'dummy'. Ask Ger for help, since I'm obviously misusing tables
          somehow. 20/01/04: not a bug -- it actually works perfectly. It's the
          bloody table browser that's broken!

        + How to use different (gcc-version-specific) libstdc++ versions?
          This can be addressed via LD_LIBRARY_PATH; ideally, we'd like to list
          all gcc/../lib dirs in /etc/ld.so.conf and not worry about it. Can we
          make the binary select the correct library via DT_RUNPATH somehow (see
          the ld.so(1) man page)?
        + solution: pass the following flags to the linker: 
            --enable-new-dtags -rpath /usr/local/gcc-x.y.z/lib/blahblahblah
          This adds an RPATH section to the binary which makes it select the
          correct library.

          merged: * tDataArray segfaults (gcc 3.3.2)
                    14/01/04: ldd was using wrong libstdc++ version.
    
        + test_dmi fails (gcc 3.2.1, 3.3.2)
          14/01/04: fixed, see problem with DataField

        + GlishUtil: interpret record field name "#nnn" as AtomicID(atoi("nnn"))
        + DataField: check how type mismatches are reported; clean up
          12/12/03
        + DataRecord: add a merge method
          8/12/03: done
          
          
