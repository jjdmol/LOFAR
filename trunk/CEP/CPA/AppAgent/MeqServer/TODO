MEQ in general:

    - Specify child labels in node constructor; check them in init().
      Process named children properly.
      01/01/04: done, need to test w/glish (glish not working on my laptop)
  
    - Persistent nodes: Save.Forest, Load.Forest, Clear.Cache commands
      01/01/04: done, need to test w/glish (glish not working on my laptop)
      
    - Clear.Forest command 
      04/01/04: done, need to test w/glish (glish not working on my laptop)
  
  * reconsider order or events in execute(): should cache be checked
    only after node_state and rider have been processed? Note that for
    repeated requests, this step is skipped, regardless. 
  
  * Implement request ID hierarchy
  
  * check performance: why does privatizing message arguments in MeqServer
    sometimes lead to cloning? I don't see why anybody else would be holding
    onto the message.
    Update 14/01/04: in fact in a multi-threaded scenario the dispatcher
    is holding onto the message throughout send(). Even if there's only one
    recepient, there's a chance that the recepient thread wakes up, grabs
    the message and starts wastefully cloning it (via a privatize call) 
    because Dispatcher::send() is not yet complete. This ties into the COW
    issue as well; both need to be considered together. As an alternative, 
    perhaps there's a way for send() to block all updated recepients from 
    waking up until the entire send() cycle is complete.
      
        + Document the two types of node_state lookups
        + Document pollChildren()
        12/12/03
  
        + re-work execute(). Make it possible to send up "empty" (command or
          state-only) requests.  
        + cache failed Results too (along with result_code and such)
        + do processRider()
        + map node_state to setState(), via configuration classes and such.
          Implement and document the two types of lookups.
          12/12/03

        + Store nodeindex in node, provide accessor.
        + rearrange init() and setState() to make use of DataRecord::merge().
          12/12/03

        + Rename Result to VellSet and ResultSet to Result
        + Rename getResult() to execute(), and getResultImpl to getResult.
          08/12/03

        + think through writability & privatization issues. Perhaps finally
          implement simple copy-on-write as the default policy in DMI?
          27/11/03: good to go for now. Still thinking about COW.
          
Spigot:

    - In deliver, just stick the result in the cache and let the caching code
      take care of everything else. 
      10/01/04: done, needs testing
    
        + Allow string specification for correlations
          09/01/04: no need, now that Spigots output all correlations at once.

Parm:

  * Figure out how to specify default values (with, e.g., an infinite domain)

Request: 

  * Buglet: when Jan supplied an illegal request (wrong fields, unmatched IDs), the 
    error message was not exactly descriptive
    
        + BUG: Figure out why state_test() (meqtest.g) causes Requests to be
          fail to unpack upon the first invocation. Possibly related to problem
          below. See details in report 1 below. 14/01/04: found; Cells was
          missing a clone() and thus wouldn't clone itself properly. Request
          would only occasionally be cloned (depending on whether the other
          thread already released the message or not), thus the error only
          showed up when true cloning occurred. Removing bug report from this
          file.

Vells:

  * Vells(DataArray*) constructor: if rank<2 but nelements==1, reform the 
    array (otherwise, won't instantiate from scalars!)
    
Function:
  
        + Allow cases where a Result has 1 plane and another has N planes: treat
          the single-plane result as a scalar
          12/12/03 done

General:

  * Keep thinking about COWs. Perhaps make hooks implicitl-COW? This would 
    mean declaring an operator [] on CountedRefs? 
  
  * Bug: MSOutputSink: output to new column doesn't work, column stays 'dummy'.
    Ask Ger for help, since I'm obviously misusing tables somehow.
  
  * Bug: Check how a zero-length string or hiid array from Glish shows up in
    AppAgent -- because it looked like a 1-element DataField when 
    processing child specs.
    
  * Bug: Ditto for zero-length arrays ('[]'), i.e., uninitialized domain, etc.

  * Check for USE_THREADS when playing with mutexes (or improve the definition
    of mutexes when compiling without threads: declare constructors for
    Mutex::Lock and all that crap)
    
  * Bug: Figure out why the hell it freezes on a single-CPU machine sometimes. A
    race condition somewhere? NB: a sure way to do it (on zeppelin) seems to
    enable wait_reply=T in the Resolve.Children calls in meqtest.g.

        + GlishUtil: interpret record field name "#nnn" as AtomicID(atoi("nnn"))
        + DataField: check how type mismatches are reported; clean up
          12/12/03
        + DataRecord: add a merge method
          8/12/03: done
          
          
