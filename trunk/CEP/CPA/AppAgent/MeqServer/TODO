MEQ in general:

    - Store nodeindex in node, provide accessor.

    - rearrange init() and setState() to make use of DataRecord::merge().
    
  * re-work execute(). Make it possible to send up "empty" (command or
    state-only) requests.  
 
  * cache failed Results too (along with result_code and such)
        
  * map node_state to setState(), via configuration classes and such.
    Implement and document the three types of lookups.
    
  * do processRider()
  
  * Specify child labels in node constructor; check them in init().
    Process named children properly.
  
  * Delete.All.Nodes command
  
  * Persistent nodes
    
    + Rename Result to VellSet and ResultSet to Result
      08/12/03

    + Rename getResult() to execute(), and getResultImpl to getResult.
      08/12/03
      
    + think through writability & privatization issues. Perhaps finally
      implement simple copy-on-write as the default policy in DMI?
      27/11/03: good to go for now. Still thinking about COW.
      
  * Keep thinking about COWs. 

Result:

  * Check for USE_THREADS when playing with mutexes

Spigot:

  * Allow string specification for correlations
  
  * In devliver, use some function like "Node::setCache" to store the result in
    cache, so as to unify the cache format

Parm:

  * Figure out how to specify default values

Request: 

  * when Jan supplied an illegal request (wrong fields, unmatched IDs), the 
    error message was not exactly descriptive

Vells:

  * Vells(DataArray*) constructor: if rank<2 but nelements==1, reform the 
    array (otherwise, won't instantiate from scalars!)
    
Function:
  
  * Allow cases where a Result has 1 plane and another has N planes: treat
    the single-plane result as a scalar

General:

  * Check how a zero-length string or hiid array from Glish shows up in
    AppAgent -- because it looked like a 1-element DataField when 
    processing child specs.
    
  * Ditto for zero-length arrays ('[]'), i.e., uninitialized domain, etc.
    
  * Figure out why the hell it freezes on a single-CPU machine sometimes. A
    race condition somewhere? NB: a sure way to do it (on zeppelin) seems to
    enable wait_reply=T in the Resolve.Children calls in meqtest.g.

        + DataRecord: add a merge method
          8/12/03: done
          

