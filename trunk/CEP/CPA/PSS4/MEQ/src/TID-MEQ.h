      #ifndef TID_MEQ_h
      #define TID_MEQ_h 1

      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../DMI/src/build_aid_maps.pl
      #include "DMI/TypeId.h"

      // should be called somewhere in order to link in the registry
      int aidRegistry_MEQ ();

#ifndef _defined_id_TpMEQAdd
#define _defined_id_TpMEQAdd 1
const TypeId TpMEQAdd(-1472);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:8
const int TpMEQAdd_int = -1472;
namespace MEQ { class Add; };
            template<>
            class DMIBaseTypeTraits<MEQ::Add> : public TypeTraits<MEQ::Add>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQAdd_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Add & ContainerReturnType;
              typedef const MEQ::Add & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQConj
#define _defined_id_TpMEQConj 1
const TypeId TpMEQConj(-1487);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:9
const int TpMEQConj_int = -1487;
namespace MEQ { class Conj; };
            template<>
            class DMIBaseTypeTraits<MEQ::Conj> : public TypeTraits<MEQ::Conj>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQConj_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Conj & ContainerReturnType;
              typedef const MEQ::Conj & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQCos
#define _defined_id_TpMEQCos 1
const TypeId TpMEQCos(-1476);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:10
const int TpMEQCos_int = -1476;
namespace MEQ { class Cos; };
            template<>
            class DMIBaseTypeTraits<MEQ::Cos> : public TypeTraits<MEQ::Cos>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQCos_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Cos & ContainerReturnType;
              typedef const MEQ::Cos & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQDivide
#define _defined_id_TpMEQDivide 1
const TypeId TpMEQDivide(-1474);                  // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:11
const int TpMEQDivide_int = -1474;
namespace MEQ { class Divide; };
            template<>
            class DMIBaseTypeTraits<MEQ::Divide> : public TypeTraits<MEQ::Divide>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQDivide_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Divide & ContainerReturnType;
              typedef const MEQ::Divide & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQExp
#define _defined_id_TpMEQExp 1
const TypeId TpMEQExp(-1475);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:12
const int TpMEQExp_int = -1475;
namespace MEQ { class Exp; };
            template<>
            class DMIBaseTypeTraits<MEQ::Exp> : public TypeTraits<MEQ::Exp>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQExp_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Exp & ContainerReturnType;
              typedef const MEQ::Exp & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQFunction
#define _defined_id_TpMEQFunction 1
const TypeId TpMEQFunction(-1491);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:13
const int TpMEQFunction_int = -1491;
namespace MEQ { class Function; };
            template<>
            class DMIBaseTypeTraits<MEQ::Function> : public TypeTraits<MEQ::Function>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQFunction_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Function & ContainerReturnType;
              typedef const MEQ::Function & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQMultiply
#define _defined_id_TpMEQMultiply 1
const TypeId TpMEQMultiply(-1466);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:14
const int TpMEQMultiply_int = -1466;
namespace MEQ { class Multiply; };
            template<>
            class DMIBaseTypeTraits<MEQ::Multiply> : public TypeTraits<MEQ::Multiply>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQMultiply_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Multiply & ContainerReturnType;
              typedef const MEQ::Multiply & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQNode
#define _defined_id_TpMEQNode 1
const TypeId TpMEQNode(-1470);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:15
const int TpMEQNode_int = -1470;
namespace MEQ { class Node; };
            template<>
            class DMIBaseTypeTraits<MEQ::Node> : public TypeTraits<MEQ::Node>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQNode_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Node & ContainerReturnType;
              typedef const MEQ::Node & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQParmPolcStored
#define _defined_id_TpMEQParmPolcStored 1
const TypeId TpMEQParmPolcStored(-1471);          // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:16
const int TpMEQParmPolcStored_int = -1471;
namespace MEQ { class ParmPolcStored; };
            template<>
            class DMIBaseTypeTraits<MEQ::ParmPolcStored> : public TypeTraits<MEQ::ParmPolcStored>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQParmPolcStored_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::ParmPolcStored & ContainerReturnType;
              typedef const MEQ::ParmPolcStored & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQPow
#define _defined_id_TpMEQPow 1
const TypeId TpMEQPow(-1465);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:17
const int TpMEQPow_int = -1465;
namespace MEQ { class Pow; };
            template<>
            class DMIBaseTypeTraits<MEQ::Pow> : public TypeTraits<MEQ::Pow>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQPow_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Pow & ContainerReturnType;
              typedef const MEQ::Pow & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQSin
#define _defined_id_TpMEQSin 1
const TypeId TpMEQSin(-1469);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:18
const int TpMEQSin_int = -1469;
namespace MEQ { class Sin; };
            template<>
            class DMIBaseTypeTraits<MEQ::Sin> : public TypeTraits<MEQ::Sin>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQSin_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Sin & ContainerReturnType;
              typedef const MEQ::Sin & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQSqr
#define _defined_id_TpMEQSqr 1
const TypeId TpMEQSqr(-1489);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:19
const int TpMEQSqr_int = -1489;
namespace MEQ { class Sqr; };
            template<>
            class DMIBaseTypeTraits<MEQ::Sqr> : public TypeTraits<MEQ::Sqr>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQSqr_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Sqr & ContainerReturnType;
              typedef const MEQ::Sqr & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQSqrt
#define _defined_id_TpMEQSqrt 1
const TypeId TpMEQSqrt(-1477);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:20
const int TpMEQSqrt_int = -1477;
namespace MEQ { class Sqrt; };
            template<>
            class DMIBaseTypeTraits<MEQ::Sqrt> : public TypeTraits<MEQ::Sqrt>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQSqrt_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Sqrt & ContainerReturnType;
              typedef const MEQ::Sqrt & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQSubtract
#define _defined_id_TpMEQSubtract 1
const TypeId TpMEQSubtract(-1467);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:21
const int TpMEQSubtract_int = -1467;
namespace MEQ { class Subtract; };
            template<>
            class DMIBaseTypeTraits<MEQ::Subtract> : public TypeTraits<MEQ::Subtract>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQSubtract_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::Subtract & ContainerReturnType;
              typedef const MEQ::Subtract & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMEQToComplex
#define _defined_id_TpMEQToComplex 1
const TypeId TpMEQToComplex(-1468);               // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/MEQ.aidlist:22
const int TpMEQToComplex_int = -1468;
namespace MEQ { class ToComplex; };
            template<>
            class DMIBaseTypeTraits<MEQ::ToComplex> : public TypeTraits<MEQ::ToComplex>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMEQToComplex_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const MEQ::ToComplex & ContainerReturnType;
              typedef const MEQ::ToComplex & ContainerParamType;
            };
#endif


#endif
