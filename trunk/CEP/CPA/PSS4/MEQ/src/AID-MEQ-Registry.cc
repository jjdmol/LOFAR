    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../DMI/src/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
    
#include "Add.h"
BlockableObject * __construct_MEQAdd (int n) { return n>0 ? new MEQ::Add [n] : new MEQ::Add; }
#include "Conj.h"
BlockableObject * __construct_MEQConj (int n) { return n>0 ? new MEQ::Conj [n] : new MEQ::Conj; }
#include "Cos.h"
BlockableObject * __construct_MEQCos (int n) { return n>0 ? new MEQ::Cos [n] : new MEQ::Cos; }
#include "Divide.h"
BlockableObject * __construct_MEQDivide (int n) { return n>0 ? new MEQ::Divide [n] : new MEQ::Divide; }
#include "Exp.h"
BlockableObject * __construct_MEQExp (int n) { return n>0 ? new MEQ::Exp [n] : new MEQ::Exp; }
#include "Function.h"
BlockableObject * __construct_MEQFunction (int n) { return n>0 ? new MEQ::Function [n] : new MEQ::Function; }
#include "Multiply.h"
BlockableObject * __construct_MEQMultiply (int n) { return n>0 ? new MEQ::Multiply [n] : new MEQ::Multiply; }
#include "Node.h"
BlockableObject * __construct_MEQNode (int n) { return n>0 ? new MEQ::Node [n] : new MEQ::Node; }
#include "ParmPolcStored.h"
BlockableObject * __construct_MEQParmPolcStored (int n) { return n>0 ? new MEQ::ParmPolcStored [n] : new MEQ::ParmPolcStored; }
#include "Pow.h"
BlockableObject * __construct_MEQPow (int n) { return n>0 ? new MEQ::Pow [n] : new MEQ::Pow; }
#include "Sin.h"
BlockableObject * __construct_MEQSin (int n) { return n>0 ? new MEQ::Sin [n] : new MEQ::Sin; }
#include "Sqr.h"
BlockableObject * __construct_MEQSqr (int n) { return n>0 ? new MEQ::Sqr [n] : new MEQ::Sqr; }
#include "Sqrt.h"
BlockableObject * __construct_MEQSqrt (int n) { return n>0 ? new MEQ::Sqrt [n] : new MEQ::Sqrt; }
#include "Subtract.h"
BlockableObject * __construct_MEQSubtract (int n) { return n>0 ? new MEQ::Subtract [n] : new MEQ::Subtract; }
#include "ToComplex.h"
BlockableObject * __construct_MEQToComplex (int n) { return n>0 ? new MEQ::ToComplex [n] : new MEQ::ToComplex; }
  
    int aidRegistry_MEQ ()
    {
      static int res = 

        AtomicID::registerId(-1472,"MEQAdd")+
        TypeInfoReg::addToRegistry(-1472,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1472,__construct_MEQAdd)+
        AtomicID::registerId(-1144,"Domain")+
        AtomicID::registerId(-1484,"Nfreq")+
        AtomicID::registerId(-1483,"Times")+
        AtomicID::registerId(-1485,"TimeSteps")+
        AtomicID::registerId(-1487,"MEQConj")+
        TypeInfoReg::addToRegistry(-1487,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1487,__construct_MEQConj)+
        AtomicID::registerId(-1476,"MEQCos")+
        TypeInfoReg::addToRegistry(-1476,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1476,__construct_MEQCos)+
        AtomicID::registerId(-1474,"MEQDivide")+
        TypeInfoReg::addToRegistry(-1474,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1474,__construct_MEQDivide)+
        AtomicID::registerId(-1475,"MEQExp")+
        TypeInfoReg::addToRegistry(-1475,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1475,__construct_MEQExp)+
        AtomicID::registerId(-1491,"MEQFunction")+
        TypeInfoReg::addToRegistry(-1491,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1491,__construct_MEQFunction)+
        AtomicID::registerId(-1466,"MEQMultiply")+
        TypeInfoReg::addToRegistry(-1466,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1466,__construct_MEQMultiply)+
        AtomicID::registerId(-1427,"Node")+
        AtomicID::registerId(-1481,"Class")+
        AtomicID::registerId(-1163,"Name")+
        AtomicID::registerId(-1052,"State")+
        AtomicID::registerId(-1423,"Child")+
        AtomicID::registerId(-1431,"Children")+
        AtomicID::registerId(-1351,"Request")+
        AtomicID::registerId(-1421,"Result")+
        AtomicID::registerId(-1482,"Rider")+
        AtomicID::registerId(-1457,"Id")+
        AtomicID::registerId(-1470,"MEQNode")+
        TypeInfoReg::addToRegistry(-1470,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1470,__construct_MEQNode)+
        AtomicID::registerId(-1488,"Tablename")+
        AtomicID::registerId(-1327,"Default")+
        AtomicID::registerId(-1471,"MEQParmPolcStored")+
        TypeInfoReg::addToRegistry(-1471,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1471,__construct_MEQParmPolcStored)+
        AtomicID::registerId(-1465,"MEQPow")+
        TypeInfoReg::addToRegistry(-1465,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1465,__construct_MEQPow)+
        AtomicID::registerId(-1478,"Cells")+
        AtomicID::registerId(-1486,"ReqId")+
        AtomicID::registerId(-1480,"CalcDeriv")+
        AtomicID::registerId(-1396,"Values")+
        AtomicID::registerId(-1479,"ParmValues")+
        AtomicID::registerId(-1490,"Spids")+
        AtomicID::registerId(-1473,"Perturbations")+
        AtomicID::registerId(-1469,"MEQSin")+
        TypeInfoReg::addToRegistry(-1469,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1469,__construct_MEQSin)+
        AtomicID::registerId(-1489,"MEQSqr")+
        TypeInfoReg::addToRegistry(-1489,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1489,__construct_MEQSqr)+
        AtomicID::registerId(-1477,"MEQSqrt")+
        TypeInfoReg::addToRegistry(-1477,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1477,__construct_MEQSqrt)+
        AtomicID::registerId(-1467,"MEQSubtract")+
        TypeInfoReg::addToRegistry(-1467,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1467,__construct_MEQSubtract)+
        AtomicID::registerId(-1468,"MEQToComplex")+
        TypeInfoReg::addToRegistry(-1468,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1468,__construct_MEQToComplex)+
    0;
    return res;
  }
  
  int __dum_call_registries_for_MEQ = aidRegistry_MEQ();

