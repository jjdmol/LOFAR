    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../DMI/aid/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
    
#include "Node.h"
BlockableObject * __construct_MeqNode (int n) { return n>0 ? new Meq::Node [n] : new Meq::Node; }
#include "Function.h"
BlockableObject * __construct_MeqFunction (int n) { return n>0 ? new Meq::Function [n] : new Meq::Function; }
#include "Parm.h"
BlockableObject * __construct_MeqParm (int n) { return n>0 ? new Meq::Parm [n] : new Meq::Parm; }
#include "Freq.h"
BlockableObject * __construct_MeqFreq (int n) { return n>0 ? new Meq::Freq [n] : new Meq::Freq; }
#include "Time.h"
BlockableObject * __construct_MeqTime (int n) { return n>0 ? new Meq::Time [n] : new Meq::Time; }
#include "Add.h"
BlockableObject * __construct_MeqAdd (int n) { return n>0 ? new Meq::Add [n] : new Meq::Add; }
#include "Subtract.h"
BlockableObject * __construct_MeqSubtract (int n) { return n>0 ? new Meq::Subtract [n] : new Meq::Subtract; }
#include "Multiply.h"
BlockableObject * __construct_MeqMultiply (int n) { return n>0 ? new Meq::Multiply [n] : new Meq::Multiply; }
#include "Divide.h"
BlockableObject * __construct_MeqDivide (int n) { return n>0 ? new Meq::Divide [n] : new Meq::Divide; }
#include "Sin.h"
BlockableObject * __construct_MeqSin (int n) { return n>0 ? new Meq::Sin [n] : new Meq::Sin; }
#include "Cos.h"
BlockableObject * __construct_MeqCos (int n) { return n>0 ? new Meq::Cos [n] : new Meq::Cos; }
#include "Exp.h"
BlockableObject * __construct_MeqExp (int n) { return n>0 ? new Meq::Exp [n] : new Meq::Exp; }
#include "Pow.h"
BlockableObject * __construct_MeqPow (int n) { return n>0 ? new Meq::Pow [n] : new Meq::Pow; }
#include "Sqr.h"
BlockableObject * __construct_MeqSqr (int n) { return n>0 ? new Meq::Sqr [n] : new Meq::Sqr; }
#include "Sqrt.h"
BlockableObject * __construct_MeqSqrt (int n) { return n>0 ? new Meq::Sqrt [n] : new Meq::Sqrt; }
#include "Conj.h"
BlockableObject * __construct_MeqConj (int n) { return n>0 ? new Meq::Conj [n] : new Meq::Conj; }
#include "ToComplex.h"
BlockableObject * __construct_MeqToComplex (int n) { return n>0 ? new Meq::ToComplex [n] : new Meq::ToComplex; }
#include "UVW.h"
BlockableObject * __construct_MeqUVW (int n) { return n>0 ? new Meq::UVW [n] : new Meq::UVW; }
#include "UVW.h"
BlockableObject * __construct_MeqU (int n) { return n>0 ? new Meq::U [n] : new Meq::U; }
  
    int aidRegistry_Meq ()
    {
      static int res = 

        AtomicID::registerId(-1322,"Domain")+
        AtomicID::registerId(-1357,"Nfreq")+
        AtomicID::registerId(-1356,"Times")+
        AtomicID::registerId(-1359,"TimeSteps")+
        AtomicID::registerId(-1253,"Node")+
        AtomicID::registerId(-1353,"Class")+
        AtomicID::registerId(-1145,"Name")+
        AtomicID::registerId(-1043,"State")+
        AtomicID::registerId(-1247,"Child")+
        AtomicID::registerId(-1265,"Children")+
        AtomicID::registerId(-1220,"Request")+
        AtomicID::registerId(-1217,"Result")+
        AtomicID::registerId(-1355,"Rider")+
        AtomicID::registerId(-1248,"Id")+
        AtomicID::registerId(-1367,"MeqNode")+
        TypeInfoReg::addToRegistry(-1367,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1367,__construct_MeqNode)+
        AtomicID::registerId(-1369,"MeqFunction")+
        TypeInfoReg::addToRegistry(-1369,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1369,__construct_MeqFunction)+
        AtomicID::registerId(-1361,"Tablename")+
        AtomicID::registerId(-1283,"Default")+
        AtomicID::registerId(-1368,"MeqParm")+
        TypeInfoReg::addToRegistry(-1368,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1368,__construct_MeqParm)+
        AtomicID::registerId(-1354,"MeqFreq")+
        TypeInfoReg::addToRegistry(-1354,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1354,__construct_MeqFreq)+
        AtomicID::registerId(-1360,"MeqTime")+
        TypeInfoReg::addToRegistry(-1360,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1360,__construct_MeqTime)+
        AtomicID::registerId(-1366,"MeqAdd")+
        TypeInfoReg::addToRegistry(-1366,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1366,__construct_MeqAdd)+
        AtomicID::registerId(-1345,"MeqSubtract")+
        TypeInfoReg::addToRegistry(-1345,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1345,__construct_MeqSubtract)+
        AtomicID::registerId(-1344,"MeqMultiply")+
        TypeInfoReg::addToRegistry(-1344,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1344,__construct_MeqMultiply)+
        AtomicID::registerId(-1347,"MeqDivide")+
        TypeInfoReg::addToRegistry(-1347,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1347,__construct_MeqDivide)+
        AtomicID::registerId(-1363,"MeqSin")+
        TypeInfoReg::addToRegistry(-1363,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1363,__construct_MeqSin)+
        AtomicID::registerId(-1342,"MeqCos")+
        TypeInfoReg::addToRegistry(-1342,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1342,__construct_MeqCos)+
        AtomicID::registerId(-1341,"MeqExp")+
        TypeInfoReg::addToRegistry(-1341,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1341,__construct_MeqExp)+
        AtomicID::registerId(-1358,"MeqPow")+
        TypeInfoReg::addToRegistry(-1358,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1358,__construct_MeqPow)+
        AtomicID::registerId(-1346,"MeqSqr")+
        TypeInfoReg::addToRegistry(-1346,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1346,__construct_MeqSqr)+
        AtomicID::registerId(-1343,"MeqSqrt")+
        TypeInfoReg::addToRegistry(-1343,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1343,__construct_MeqSqrt)+
        AtomicID::registerId(-1348,"MeqConj")+
        TypeInfoReg::addToRegistry(-1348,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1348,__construct_MeqConj)+
        AtomicID::registerId(-1350,"MeqToComplex")+
        TypeInfoReg::addToRegistry(-1350,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1350,__construct_MeqToComplex)+
        AtomicID::registerId(-1365,"MeqUVW")+
        TypeInfoReg::addToRegistry(-1365,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1365,__construct_MeqUVW)+
        AtomicID::registerId(-1362,"MeqU")+
        TypeInfoReg::addToRegistry(-1362,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1362,__construct_MeqU)+
        AtomicID::registerId(-1351,"Cells")+
        AtomicID::registerId(-1290,"Values")+
        AtomicID::registerId(-1352,"ParmValues")+
        AtomicID::registerId(-1364,"Spids")+
        AtomicID::registerId(-1349,"Perturbations")+
        AtomicID::registerId(-1389,"ReqId")+
        AtomicID::registerId(-1388,"CalcDeriv")+
    0;
    return res;
  }
  
  int __dum_call_registries_for_Meq = aidRegistry_Meq();

