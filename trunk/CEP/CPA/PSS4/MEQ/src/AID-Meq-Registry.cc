    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../DMI/src/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
    
#include "Add.h"
BlockableObject * __construct_MeqAdd (int n) { return n>0 ? new Meq::Add [n] : new Meq::Add; }
#include "Conj.h"
BlockableObject * __construct_MeqConj (int n) { return n>0 ? new Meq::Conj [n] : new Meq::Conj; }
#include "Cos.h"
BlockableObject * __construct_MeqCos (int n) { return n>0 ? new Meq::Cos [n] : new Meq::Cos; }
#include "Divide.h"
BlockableObject * __construct_MeqDivide (int n) { return n>0 ? new Meq::Divide [n] : new Meq::Divide; }
#include "Exp.h"
BlockableObject * __construct_MeqExp (int n) { return n>0 ? new Meq::Exp [n] : new Meq::Exp; }
#include "Freq.h"
BlockableObject * __construct_MeqFreq (int n) { return n>0 ? new Meq::Freq [n] : new Meq::Freq; }
#include "Function.h"
BlockableObject * __construct_MeqFunction (int n) { return n>0 ? new Meq::Function [n] : new Meq::Function; }
#include "Multiply.h"
BlockableObject * __construct_MeqMultiply (int n) { return n>0 ? new Meq::Multiply [n] : new Meq::Multiply; }
#include "Node.h"
BlockableObject * __construct_MeqNode (int n) { return n>0 ? new Meq::Node [n] : new Meq::Node; }
#include "Parm.h"
BlockableObject * __construct_MeqParm (int n) { return n>0 ? new Meq::Parm [n] : new Meq::Parm; }
#include "Pow.h"
BlockableObject * __construct_MeqPow (int n) { return n>0 ? new Meq::Pow [n] : new Meq::Pow; }
#include "Sin.h"
BlockableObject * __construct_MeqSin (int n) { return n>0 ? new Meq::Sin [n] : new Meq::Sin; }
#include "Sqr.h"
BlockableObject * __construct_MeqSqr (int n) { return n>0 ? new Meq::Sqr [n] : new Meq::Sqr; }
#include "Sqrt.h"
BlockableObject * __construct_MeqSqrt (int n) { return n>0 ? new Meq::Sqrt [n] : new Meq::Sqrt; }
#include "Subtract.h"
BlockableObject * __construct_MeqSubtract (int n) { return n>0 ? new Meq::Subtract [n] : new Meq::Subtract; }
#include "Time.h"
BlockableObject * __construct_MeqTime (int n) { return n>0 ? new Meq::Time [n] : new Meq::Time; }
#include "ToComplex.h"
BlockableObject * __construct_MeqToComplex (int n) { return n>0 ? new Meq::ToComplex [n] : new Meq::ToComplex; }
#include "UVW.h"
BlockableObject * __construct_MeqUVW (int n) { return n>0 ? new Meq::UVW [n] : new Meq::UVW; }
#include "UVW.h"
BlockableObject * __construct_MeqU (int n) { return n>0 ? new Meq::U [n] : new Meq::U; }
  
    int aidRegistry_Meq ()
    {
      static int res = 

        AtomicID::registerId(-1450,"MeqAdd")+
        TypeInfoReg::addToRegistry(-1450,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1450,__construct_MeqAdd)+
        AtomicID::registerId(-1144,"Domain")+
        AtomicID::registerId(-1442,"Nfreq")+
        AtomicID::registerId(-1441,"Times")+
        AtomicID::registerId(-1444,"TimeSteps")+
        AtomicID::registerId(-1433,"MeqConj")+
        TypeInfoReg::addToRegistry(-1433,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1433,__construct_MeqConj)+
        AtomicID::registerId(-1424,"MeqCos")+
        TypeInfoReg::addToRegistry(-1424,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1424,__construct_MeqCos)+
        AtomicID::registerId(-1432,"MeqDivide")+
        TypeInfoReg::addToRegistry(-1432,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1432,__construct_MeqDivide)+
        AtomicID::registerId(-1422,"MeqExp")+
        TypeInfoReg::addToRegistry(-1422,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1422,__construct_MeqExp)+
        AtomicID::registerId(-1468,"MeqFreq")+
        TypeInfoReg::addToRegistry(-1468,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1468,__construct_MeqFreq)+
        AtomicID::registerId(-1452,"MeqFunction")+
        TypeInfoReg::addToRegistry(-1452,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1452,__construct_MeqFunction)+
        AtomicID::registerId(-1428,"MeqMultiply")+
        TypeInfoReg::addToRegistry(-1428,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1428,__construct_MeqMultiply)+
        AtomicID::registerId(-1427,"Node")+
        AtomicID::registerId(-1439,"Class")+
        AtomicID::registerId(-1163,"Name")+
        AtomicID::registerId(-1052,"State")+
        AtomicID::registerId(-1423,"Child")+
        AtomicID::registerId(-1448,"Children")+
        AtomicID::registerId(-1351,"Request")+
        AtomicID::registerId(-1421,"Result")+
        AtomicID::registerId(-1440,"Rider")+
        AtomicID::registerId(-1425,"Id")+
        AtomicID::registerId(-1451,"MeqNode")+
        TypeInfoReg::addToRegistry(-1451,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1451,__construct_MeqNode)+
        AtomicID::registerId(-1446,"Tablename")+
        AtomicID::registerId(-1327,"Default")+
        AtomicID::registerId(-1472,"MeqParm")+
        TypeInfoReg::addToRegistry(-1472,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1472,__construct_MeqParm)+
        AtomicID::registerId(-1443,"MeqPow")+
        TypeInfoReg::addToRegistry(-1443,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1443,__construct_MeqPow)+
        AtomicID::registerId(-1436,"Cells")+
        AtomicID::registerId(-1445,"ReqId")+
        AtomicID::registerId(-1438,"CalcDeriv")+
        AtomicID::registerId(-1396,"Values")+
        AtomicID::registerId(-1437,"ParmValues")+
        AtomicID::registerId(-1449,"Spids")+
        AtomicID::registerId(-1434,"Perturbations")+
        AtomicID::registerId(-1447,"MeqSin")+
        TypeInfoReg::addToRegistry(-1447,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1447,__construct_MeqSin)+
        AtomicID::registerId(-1431,"MeqSqr")+
        TypeInfoReg::addToRegistry(-1431,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1431,__construct_MeqSqr)+
        AtomicID::registerId(-1426,"MeqSqrt")+
        TypeInfoReg::addToRegistry(-1426,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1426,__construct_MeqSqrt)+
        AtomicID::registerId(-1429,"MeqSubtract")+
        TypeInfoReg::addToRegistry(-1429,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1429,__construct_MeqSubtract)+
        AtomicID::registerId(-1469,"MeqTime")+
        TypeInfoReg::addToRegistry(-1469,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1469,__construct_MeqTime)+
        AtomicID::registerId(-1435,"MeqToComplex")+
        TypeInfoReg::addToRegistry(-1435,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1435,__construct_MeqToComplex)+
        AtomicID::registerId(-1471,"MeqUVW")+
        TypeInfoReg::addToRegistry(-1471,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1471,__construct_MeqUVW)+
        AtomicID::registerId(-1470,"MeqU")+
        TypeInfoReg::addToRegistry(-1470,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1470,__construct_MeqU)+
    0;
    return res;
  }
  
  int __dum_call_registries_for_Meq = aidRegistry_Meq();

