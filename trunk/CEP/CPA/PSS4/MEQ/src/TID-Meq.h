      #ifndef TID_Meq_h
      #define TID_Meq_h 1

      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../DMI/src/build_aid_maps.pl
      #include "DMI/TypeId.h"

      // should be called somewhere in order to link in the registry
      int aidRegistry_Meq ();

#ifndef _defined_id_TpMeqAdd
#define _defined_id_TpMeqAdd 1
const TypeId TpMeqAdd(-1450);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:9
const int TpMeqAdd_int = -1450;
namespace Meq { class Add; };
            template<>
            class DMIBaseTypeTraits<Meq::Add> : public TypeTraits<Meq::Add>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqAdd_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Add & ContainerReturnType;
              typedef const Meq::Add & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqConj
#define _defined_id_TpMeqConj 1
const TypeId TpMeqConj(-1433);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:10
const int TpMeqConj_int = -1433;
namespace Meq { class Conj; };
            template<>
            class DMIBaseTypeTraits<Meq::Conj> : public TypeTraits<Meq::Conj>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqConj_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Conj & ContainerReturnType;
              typedef const Meq::Conj & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqCos
#define _defined_id_TpMeqCos 1
const TypeId TpMeqCos(-1424);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:11
const int TpMeqCos_int = -1424;
namespace Meq { class Cos; };
            template<>
            class DMIBaseTypeTraits<Meq::Cos> : public TypeTraits<Meq::Cos>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqCos_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Cos & ContainerReturnType;
              typedef const Meq::Cos & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqDivide
#define _defined_id_TpMeqDivide 1
const TypeId TpMeqDivide(-1432);                  // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:12
const int TpMeqDivide_int = -1432;
namespace Meq { class Divide; };
            template<>
            class DMIBaseTypeTraits<Meq::Divide> : public TypeTraits<Meq::Divide>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqDivide_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Divide & ContainerReturnType;
              typedef const Meq::Divide & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqExp
#define _defined_id_TpMeqExp 1
const TypeId TpMeqExp(-1422);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:13
const int TpMeqExp_int = -1422;
namespace Meq { class Exp; };
            template<>
            class DMIBaseTypeTraits<Meq::Exp> : public TypeTraits<Meq::Exp>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqExp_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Exp & ContainerReturnType;
              typedef const Meq::Exp & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqFreq
#define _defined_id_TpMeqFreq 1
const TypeId TpMeqFreq(-1468);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Freq.h:29
const int TpMeqFreq_int = -1468;
namespace Meq { class Freq; };
            template<>
            class DMIBaseTypeTraits<Meq::Freq> : public TypeTraits<Meq::Freq>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqFreq_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Freq & ContainerReturnType;
              typedef const Meq::Freq & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqFunction
#define _defined_id_TpMeqFunction 1
const TypeId TpMeqFunction(-1452);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:14
const int TpMeqFunction_int = -1452;
namespace Meq { class Function; };
            template<>
            class DMIBaseTypeTraits<Meq::Function> : public TypeTraits<Meq::Function>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqFunction_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Function & ContainerReturnType;
              typedef const Meq::Function & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqMultiply
#define _defined_id_TpMeqMultiply 1
const TypeId TpMeqMultiply(-1428);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:15
const int TpMeqMultiply_int = -1428;
namespace Meq { class Multiply; };
            template<>
            class DMIBaseTypeTraits<Meq::Multiply> : public TypeTraits<Meq::Multiply>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqMultiply_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Multiply & ContainerReturnType;
              typedef const Meq::Multiply & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqNode
#define _defined_id_TpMeqNode 1
const TypeId TpMeqNode(-1451);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:16
const int TpMeqNode_int = -1451;
namespace Meq { class Node; };
            template<>
            class DMIBaseTypeTraits<Meq::Node> : public TypeTraits<Meq::Node>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqNode_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Node & ContainerReturnType;
              typedef const Meq::Node & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqParm
#define _defined_id_TpMeqParm 1
const TypeId TpMeqParm(-1472);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Parm.h:35
const int TpMeqParm_int = -1472;
namespace Meq { class Parm; };
            template<>
            class DMIBaseTypeTraits<Meq::Parm> : public TypeTraits<Meq::Parm>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqParm_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Parm & ContainerReturnType;
              typedef const Meq::Parm & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqPow
#define _defined_id_TpMeqPow 1
const TypeId TpMeqPow(-1443);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:18
const int TpMeqPow_int = -1443;
namespace Meq { class Pow; };
            template<>
            class DMIBaseTypeTraits<Meq::Pow> : public TypeTraits<Meq::Pow>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqPow_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Pow & ContainerReturnType;
              typedef const Meq::Pow & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSin
#define _defined_id_TpMeqSin 1
const TypeId TpMeqSin(-1447);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:19
const int TpMeqSin_int = -1447;
namespace Meq { class Sin; };
            template<>
            class DMIBaseTypeTraits<Meq::Sin> : public TypeTraits<Meq::Sin>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSin_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sin & ContainerReturnType;
              typedef const Meq::Sin & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqr
#define _defined_id_TpMeqSqr 1
const TypeId TpMeqSqr(-1431);                     // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:20
const int TpMeqSqr_int = -1431;
namespace Meq { class Sqr; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqr> : public TypeTraits<Meq::Sqr>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqr_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqr & ContainerReturnType;
              typedef const Meq::Sqr & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqrt
#define _defined_id_TpMeqSqrt 1
const TypeId TpMeqSqrt(-1426);                    // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:21
const int TpMeqSqrt_int = -1426;
namespace Meq { class Sqrt; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqrt> : public TypeTraits<Meq::Sqrt>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqrt_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqrt & ContainerReturnType;
              typedef const Meq::Sqrt & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSubtract
#define _defined_id_TpMeqSubtract 1
const TypeId TpMeqSubtract(-1429);                // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:22
const int TpMeqSubtract_int = -1429;
namespace Meq { class Subtract; };
            template<>
            class DMIBaseTypeTraits<Meq::Subtract> : public TypeTraits<Meq::Subtract>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSubtract_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Subtract & ContainerReturnType;
              typedef const Meq::Subtract & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqTime
#define _defined_id_TpMeqTime 1
const TypeId TpMeqTime(-1469);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Time.h:29
const int TpMeqTime_int = -1469;
namespace Meq { class Time; };
            template<>
            class DMIBaseTypeTraits<Meq::Time> : public TypeTraits<Meq::Time>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqTime_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Time & ContainerReturnType;
              typedef const Meq::Time & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqToComplex
#define _defined_id_TpMeqToComplex 1
const TypeId TpMeqToComplex(-1435);               // from /home/oms/LOFAR/autoconf_share/../CEP/CPA/PSS4/MEQ/src/Meq.aidlist:23
const int TpMeqToComplex_int = -1435;
namespace Meq { class ToComplex; };
            template<>
            class DMIBaseTypeTraits<Meq::ToComplex> : public TypeTraits<Meq::ToComplex>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqToComplex_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::ToComplex & ContainerReturnType;
              typedef const Meq::ToComplex & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqU
#define _defined_id_TpMeqU 1
const TypeId TpMeqU(-1470);                       // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/UVW.h:29
const int TpMeqU_int = -1470;
namespace Meq { class U; };
            template<>
            class DMIBaseTypeTraits<Meq::U> : public TypeTraits<Meq::U>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqU_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::U & ContainerReturnType;
              typedef const Meq::U & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqUVW
#define _defined_id_TpMeqUVW 1
const TypeId TpMeqUVW(-1471);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/UVW.h:29
const int TpMeqUVW_int = -1471;
namespace Meq { class UVW; };
            template<>
            class DMIBaseTypeTraits<Meq::UVW> : public TypeTraits<Meq::UVW>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqUVW_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::UVW & ContainerReturnType;
              typedef const Meq::UVW & ContainerParamType;
            };
#endif


#endif
