      #ifndef TID_Meq_h
      #define TID_Meq_h 1

      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../DMI/aid/build_aid_maps.pl
      #include "DMI/TypeId.h"

      // should be called somewhere in order to link in the registry
      int aidRegistry_Meq ();

#ifndef _defined_id_TpMeqAdd
#define _defined_id_TpMeqAdd 1
const TypeId TpMeqAdd(-1366);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Add.h:29
const int TpMeqAdd_int = -1366;
namespace Meq { class Add; };
            template<>
            class DMIBaseTypeTraits<Meq::Add> : public TypeTraits<Meq::Add>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqAdd_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Add & ContainerReturnType;
              typedef const Meq::Add & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqCells
#define _defined_id_TpMeqCells 1
const TypeId TpMeqCells(-1402);                   // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Cells.h:36
const int TpMeqCells_int = -1402;
namespace Meq { class Cells; };
            template<>
            class DMIBaseTypeTraits<Meq::Cells> : public TypeTraits<Meq::Cells>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqCells_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Cells & ContainerReturnType;
              typedef const Meq::Cells & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqComposer
#define _defined_id_TpMeqComposer 1
const TypeId TpMeqComposer(-1408);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Composer.h:29
const int TpMeqComposer_int = -1408;
namespace Meq { class Composer; };
            template<>
            class DMIBaseTypeTraits<Meq::Composer> : public TypeTraits<Meq::Composer>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqComposer_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Composer & ContainerReturnType;
              typedef const Meq::Composer & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqConj
#define _defined_id_TpMeqConj 1
const TypeId TpMeqConj(-1348);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Conj.h:29
const int TpMeqConj_int = -1348;
namespace Meq { class Conj; };
            template<>
            class DMIBaseTypeTraits<Meq::Conj> : public TypeTraits<Meq::Conj>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqConj_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Conj & ContainerReturnType;
              typedef const Meq::Conj & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqCos
#define _defined_id_TpMeqCos 1
const TypeId TpMeqCos(-1342);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Cos.h:29
const int TpMeqCos_int = -1342;
namespace Meq { class Cos; };
            template<>
            class DMIBaseTypeTraits<Meq::Cos> : public TypeTraits<Meq::Cos>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqCos_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Cos & ContainerReturnType;
              typedef const Meq::Cos & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqDivide
#define _defined_id_TpMeqDivide 1
const TypeId TpMeqDivide(-1347);                  // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Divide.h:29
const int TpMeqDivide_int = -1347;
namespace Meq { class Divide; };
            template<>
            class DMIBaseTypeTraits<Meq::Divide> : public TypeTraits<Meq::Divide>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqDivide_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Divide & ContainerReturnType;
              typedef const Meq::Divide & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqDomain
#define _defined_id_TpMeqDomain 1
const TypeId TpMeqDomain(-1399);                  // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Domain.h:39
const int TpMeqDomain_int = -1399;
namespace Meq { class Domain; };
            template<>
            class DMIBaseTypeTraits<Meq::Domain> : public TypeTraits<Meq::Domain>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqDomain_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Domain & ContainerReturnType;
              typedef const Meq::Domain & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqExp
#define _defined_id_TpMeqExp 1
const TypeId TpMeqExp(-1341);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Exp.h:29
const int TpMeqExp_int = -1341;
namespace Meq { class Exp; };
            template<>
            class DMIBaseTypeTraits<Meq::Exp> : public TypeTraits<Meq::Exp>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqExp_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Exp & ContainerReturnType;
              typedef const Meq::Exp & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqFreq
#define _defined_id_TpMeqFreq 1
const TypeId TpMeqFreq(-1354);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Freq.h:29
const int TpMeqFreq_int = -1354;
namespace Meq { class Freq; };
            template<>
            class DMIBaseTypeTraits<Meq::Freq> : public TypeTraits<Meq::Freq>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqFreq_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Freq & ContainerReturnType;
              typedef const Meq::Freq & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqFunction
#define _defined_id_TpMeqFunction 1
const TypeId TpMeqFunction(-1369);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Function.h:29
const int TpMeqFunction_int = -1369;
namespace Meq { class Function; };
            template<>
            class DMIBaseTypeTraits<Meq::Function> : public TypeTraits<Meq::Function>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqFunction_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Function & ContainerReturnType;
              typedef const Meq::Function & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqMultiply
#define _defined_id_TpMeqMultiply 1
const TypeId TpMeqMultiply(-1344);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Multiply.h:29
const int TpMeqMultiply_int = -1344;
namespace Meq { class Multiply; };
            template<>
            class DMIBaseTypeTraits<Meq::Multiply> : public TypeTraits<Meq::Multiply>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqMultiply_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Multiply & ContainerReturnType;
              typedef const Meq::Multiply & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqNode
#define _defined_id_TpMeqNode 1
const TypeId TpMeqNode(-1367);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Node.h:34
const int TpMeqNode_int = -1367;
namespace Meq { class Node; };
            template<>
            class DMIBaseTypeTraits<Meq::Node> : public TypeTraits<Meq::Node>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqNode_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Node & ContainerReturnType;
              typedef const Meq::Node & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqParm
#define _defined_id_TpMeqParm 1
const TypeId TpMeqParm(-1368);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Parm.h:35
const int TpMeqParm_int = -1368;
namespace Meq { class Parm; };
            template<>
            class DMIBaseTypeTraits<Meq::Parm> : public TypeTraits<Meq::Parm>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqParm_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Parm & ContainerReturnType;
              typedef const Meq::Parm & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqPow
#define _defined_id_TpMeqPow 1
const TypeId TpMeqPow(-1358);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Pow.h:29
const int TpMeqPow_int = -1358;
namespace Meq { class Pow; };
            template<>
            class DMIBaseTypeTraits<Meq::Pow> : public TypeTraits<Meq::Pow>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqPow_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Pow & ContainerReturnType;
              typedef const Meq::Pow & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqRequest
#define _defined_id_TpMeqRequest 1
const TypeId TpMeqRequest(-1407);                 // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Request.h:32
const int TpMeqRequest_int = -1407;
namespace Meq { class Request; };
            template<>
            class DMIBaseTypeTraits<Meq::Request> : public TypeTraits<Meq::Request>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqRequest_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Request & ContainerReturnType;
              typedef const Meq::Request & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqResult
#define _defined_id_TpMeqResult 1
const TypeId TpMeqResult(-1405);                  // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Result.h:36
const int TpMeqResult_int = -1405;
namespace Meq { class Result; };
            template<>
            class DMIBaseTypeTraits<Meq::Result> : public TypeTraits<Meq::Result>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqResult_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Result & ContainerReturnType;
              typedef const Meq::Result & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqResultSet
#define _defined_id_TpMeqResultSet 1
const TypeId TpMeqResultSet(-1401);               // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/ResultSet.h:34
const int TpMeqResultSet_int = -1401;
namespace Meq { class ResultSet; };
            template<>
            class DMIBaseTypeTraits<Meq::ResultSet> : public TypeTraits<Meq::ResultSet>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqResultSet_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::ResultSet & ContainerReturnType;
              typedef const Meq::ResultSet & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSelector
#define _defined_id_TpMeqSelector 1
const TypeId TpMeqSelector(-1409);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Selector.h:29
const int TpMeqSelector_int = -1409;
namespace Meq { class Selector; };
            template<>
            class DMIBaseTypeTraits<Meq::Selector> : public TypeTraits<Meq::Selector>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSelector_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Selector & ContainerReturnType;
              typedef const Meq::Selector & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSin
#define _defined_id_TpMeqSin 1
const TypeId TpMeqSin(-1363);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sin.h:29
const int TpMeqSin_int = -1363;
namespace Meq { class Sin; };
            template<>
            class DMIBaseTypeTraits<Meq::Sin> : public TypeTraits<Meq::Sin>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSin_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sin & ContainerReturnType;
              typedef const Meq::Sin & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqr
#define _defined_id_TpMeqSqr 1
const TypeId TpMeqSqr(-1346);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sqr.h:29
const int TpMeqSqr_int = -1346;
namespace Meq { class Sqr; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqr> : public TypeTraits<Meq::Sqr>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqr_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqr & ContainerReturnType;
              typedef const Meq::Sqr & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqrt
#define _defined_id_TpMeqSqrt 1
const TypeId TpMeqSqrt(-1343);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sqrt.h:29
const int TpMeqSqrt_int = -1343;
namespace Meq { class Sqrt; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqrt> : public TypeTraits<Meq::Sqrt>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqrt_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqrt & ContainerReturnType;
              typedef const Meq::Sqrt & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSubtract
#define _defined_id_TpMeqSubtract 1
const TypeId TpMeqSubtract(-1345);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Subtract.h:29
const int TpMeqSubtract_int = -1345;
namespace Meq { class Subtract; };
            template<>
            class DMIBaseTypeTraits<Meq::Subtract> : public TypeTraits<Meq::Subtract>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSubtract_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Subtract & ContainerReturnType;
              typedef const Meq::Subtract & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqTime
#define _defined_id_TpMeqTime 1
const TypeId TpMeqTime(-1360);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Time.h:29
const int TpMeqTime_int = -1360;
namespace Meq { class Time; };
            template<>
            class DMIBaseTypeTraits<Meq::Time> : public TypeTraits<Meq::Time>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqTime_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Time & ContainerReturnType;
              typedef const Meq::Time & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqToComplex
#define _defined_id_TpMeqToComplex 1
const TypeId TpMeqToComplex(-1350);               // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/ToComplex.h:29
const int TpMeqToComplex_int = -1350;
namespace Meq { class ToComplex; };
            template<>
            class DMIBaseTypeTraits<Meq::ToComplex> : public TypeTraits<Meq::ToComplex>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqToComplex_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::ToComplex & ContainerReturnType;
              typedef const Meq::ToComplex & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqUVW
#define _defined_id_TpMeqUVW 1
const TypeId TpMeqUVW(-1365);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/UVW.h:29
const int TpMeqUVW_int = -1365;
namespace Meq { class UVW; };
            template<>
            class DMIBaseTypeTraits<Meq::UVW> : public TypeTraits<Meq::UVW>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqUVW_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::UVW & ContainerReturnType;
              typedef const Meq::UVW & ContainerParamType;
            };
#endif


#endif
