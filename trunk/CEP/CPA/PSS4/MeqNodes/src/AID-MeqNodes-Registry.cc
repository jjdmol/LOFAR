    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../DMI/aid/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
    
#include "Constant.h"
BlockableObject * __construct_MeqConstant (int n) { return n>0 ? new Meq::Constant [n] : new Meq::Constant; }
#include "Parm.h"
BlockableObject * __construct_MeqParm (int n) { return n>0 ? new Meq::Parm [n] : new Meq::Parm; }
#include "Freq.h"
BlockableObject * __construct_MeqFreq (int n) { return n>0 ? new Meq::Freq [n] : new Meq::Freq; }
#include "Time.h"
BlockableObject * __construct_MeqTime (int n) { return n>0 ? new Meq::Time [n] : new Meq::Time; }
#include "Selector.h"
BlockableObject * __construct_MeqSelector (int n) { return n>0 ? new Meq::Selector [n] : new Meq::Selector; }
#include "Composer.h"
BlockableObject * __construct_MeqComposer (int n) { return n>0 ? new Meq::Composer [n] : new Meq::Composer; }
#include "Add.h"
BlockableObject * __construct_MeqAdd (int n) { return n>0 ? new Meq::Add [n] : new Meq::Add; }
#include "Subtract.h"
BlockableObject * __construct_MeqSubtract (int n) { return n>0 ? new Meq::Subtract [n] : new Meq::Subtract; }
#include "Multiply.h"
BlockableObject * __construct_MeqMultiply (int n) { return n>0 ? new Meq::Multiply [n] : new Meq::Multiply; }
#include "Divide.h"
BlockableObject * __construct_MeqDivide (int n) { return n>0 ? new Meq::Divide [n] : new Meq::Divide; }
#include "Sin.h"
BlockableObject * __construct_MeqSin (int n) { return n>0 ? new Meq::Sin [n] : new Meq::Sin; }
#include "Cos.h"
BlockableObject * __construct_MeqCos (int n) { return n>0 ? new Meq::Cos [n] : new Meq::Cos; }
#include "Exp.h"
BlockableObject * __construct_MeqExp (int n) { return n>0 ? new Meq::Exp [n] : new Meq::Exp; }
#include "Pow.h"
BlockableObject * __construct_MeqPow (int n) { return n>0 ? new Meq::Pow [n] : new Meq::Pow; }
#include "Sqr.h"
BlockableObject * __construct_MeqSqr (int n) { return n>0 ? new Meq::Sqr [n] : new Meq::Sqr; }
#include "Asin.h"
BlockableObject * __construct_MeqAsin (int n) { return n>0 ? new Meq::Asin [n] : new Meq::Asin; }
#include "Acos.h"
BlockableObject * __construct_MeqAcos (int n) { return n>0 ? new Meq::Acos [n] : new Meq::Acos; }
#include "Sqrt.h"
BlockableObject * __construct_MeqSqrt (int n) { return n>0 ? new Meq::Sqrt [n] : new Meq::Sqrt; }
#include "Conj.h"
BlockableObject * __construct_MeqConj (int n) { return n>0 ? new Meq::Conj [n] : new Meq::Conj; }
#include "ToComplex.h"
BlockableObject * __construct_MeqToComplex (int n) { return n>0 ? new Meq::ToComplex [n] : new Meq::ToComplex; }
#include "Polar.h"
BlockableObject * __construct_MeqPolar (int n) { return n>0 ? new Meq::Polar [n] : new Meq::Polar; }
#include "UVW.h"
BlockableObject * __construct_MeqUVW (int n) { return n>0 ? new Meq::UVW [n] : new Meq::UVW; }
#include "LMN.h"
BlockableObject * __construct_MeqLMN (int n) { return n>0 ? new Meq::LMN [n] : new Meq::LMN; }
#include "Log.h"
BlockableObject * __construct_MeqLog (int n) { return n>0 ? new Meq::Log [n] : new Meq::Log; }
#include "Cosh.h"
BlockableObject * __construct_MeqCosh (int n) { return n>0 ? new Meq::Cosh [n] : new Meq::Cosh; }
#include "Sinh.h"
BlockableObject * __construct_MeqSinh (int n) { return n>0 ? new Meq::Sinh [n] : new Meq::Sinh; }
#include "Tan.h"
BlockableObject * __construct_MeqTan (int n) { return n>0 ? new Meq::Tan [n] : new Meq::Tan; }
#include "Tanh.h"
BlockableObject * __construct_MeqTanh (int n) { return n>0 ? new Meq::Tanh [n] : new Meq::Tanh; }
#include "StatPointSourceDFT.h"
BlockableObject * __construct_MeqStatPointSourceDFT (int n) { return n>0 ? new Meq::StatPointSourceDFT [n] : new Meq::StatPointSourceDFT; }
#include "PointSourceDFT.h"
BlockableObject * __construct_MeqPointSourceDFT (int n) { return n>0 ? new Meq::PointSourceDFT [n] : new Meq::PointSourceDFT; }
#include "Condeq.h"
BlockableObject * __construct_MeqCondeq (int n) { return n>0 ? new Meq::Condeq [n] : new Meq::Condeq; }
#include "Solver.h"
BlockableObject * __construct_MeqSolver (int n) { return n>0 ? new Meq::Solver [n] : new Meq::Solver; }
#include "Ceil.h"
BlockableObject * __construct_MeqCeil (int n) { return n>0 ? new Meq::Ceil [n] : new Meq::Ceil; }
#include "Floor.h"
BlockableObject * __construct_MeqFloor (int n) { return n>0 ? new Meq::Floor [n] : new Meq::Floor; }
#include "Atan.h"
BlockableObject * __construct_MeqAtan (int n) { return n>0 ? new Meq::Atan [n] : new Meq::Atan; }
#include "Pow2.h"
BlockableObject * __construct_MeqPow2 (int n) { return n>0 ? new Meq::Pow2 [n] : new Meq::Pow2; }
#include "Pow3.h"
BlockableObject * __construct_MeqPow3 (int n) { return n>0 ? new Meq::Pow3 [n] : new Meq::Pow3; }
#include "Pow4.h"
BlockableObject * __construct_MeqPow4 (int n) { return n>0 ? new Meq::Pow4 [n] : new Meq::Pow4; }
#include "Pow5.h"
BlockableObject * __construct_MeqPow5 (int n) { return n>0 ? new Meq::Pow5 [n] : new Meq::Pow5; }
#include "Pow6.h"
BlockableObject * __construct_MeqPow6 (int n) { return n>0 ? new Meq::Pow6 [n] : new Meq::Pow6; }
#include "Pow7.h"
BlockableObject * __construct_MeqPow7 (int n) { return n>0 ? new Meq::Pow7 [n] : new Meq::Pow7; }
#include "Pow8.h"
BlockableObject * __construct_MeqPow8 (int n) { return n>0 ? new Meq::Pow8 [n] : new Meq::Pow8; }
#include "Abs.h"
BlockableObject * __construct_MeqAbs (int n) { return n>0 ? new Meq::Abs [n] : new Meq::Abs; }
#include "Fabs.h"
BlockableObject * __construct_MeqFabs (int n) { return n>0 ? new Meq::Fabs [n] : new Meq::Fabs; }
#include "Norm.h"
BlockableObject * __construct_MeqNorm (int n) { return n>0 ? new Meq::Norm [n] : new Meq::Norm; }
#include "Arg.h"
BlockableObject * __construct_MeqArg (int n) { return n>0 ? new Meq::Arg [n] : new Meq::Arg; }
#include "Real.h"
BlockableObject * __construct_MeqReal (int n) { return n>0 ? new Meq::Real [n] : new Meq::Real; }
#include "Imag.h"
BlockableObject * __construct_MeqImag (int n) { return n>0 ? new Meq::Imag [n] : new Meq::Imag; }
#include "MergeFlags.h"
BlockableObject * __construct_MeqMergeFlags (int n) { return n>0 ? new Meq::MergeFlags [n] : new Meq::MergeFlags; }
#include "ReqSeq.h"
BlockableObject * __construct_MeqReqSeq (int n) { return n>0 ? new Meq::ReqSeq [n] : new Meq::ReqSeq; }
#include "Min.h"
BlockableObject * __construct_MeqMin (int n) { return n>0 ? new Meq::Min [n] : new Meq::Min; }
#include "Max.h"
BlockableObject * __construct_MeqMax (int n) { return n>0 ? new Meq::Max [n] : new Meq::Max; }
#include "Mean.h"
BlockableObject * __construct_MeqMean (int n) { return n>0 ? new Meq::Mean [n] : new Meq::Mean; }
#include "DataCollect.h"
BlockableObject * __construct_MeqDataCollect (int n) { return n>0 ? new Meq::DataCollect [n] : new Meq::DataCollect; }
#include "DataConcat.h"
BlockableObject * __construct_MeqDataConcat (int n) { return n>0 ? new Meq::DataConcat [n] : new Meq::DataConcat; }
  
    int aidRegistry_MeqNodes ()
    {
      static int res = 

        AtomicID::registerId(-1387,"meqconstant")+
        TypeInfoReg::addToRegistry(-1387,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1387,__construct_MeqConstant)+
        AtomicID::registerId(-1244,"meqparm")+
        TypeInfoReg::addToRegistry(-1244,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1244,__construct_MeqParm)+
        AtomicID::registerId(-1219,"meqfreq")+
        TypeInfoReg::addToRegistry(-1219,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1219,__construct_MeqFreq)+
        AtomicID::registerId(-1225,"meqtime")+
        TypeInfoReg::addToRegistry(-1225,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1225,__construct_MeqTime)+
        AtomicID::registerId(-1255,"meqselector")+
        TypeInfoReg::addToRegistry(-1255,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1255,__construct_MeqSelector)+
        AtomicID::registerId(-1241,"meqcomposer")+
        TypeInfoReg::addToRegistry(-1241,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1241,__construct_MeqComposer)+
        AtomicID::registerId(-1236,"meqadd")+
        TypeInfoReg::addToRegistry(-1236,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1236,__construct_MeqAdd)+
        AtomicID::registerId(-1232,"meqsubtract")+
        TypeInfoReg::addToRegistry(-1232,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1232,__construct_MeqSubtract)+
        AtomicID::registerId(-1227,"meqmultiply")+
        TypeInfoReg::addToRegistry(-1227,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1227,__construct_MeqMultiply)+
        AtomicID::registerId(-1223,"meqdivide")+
        TypeInfoReg::addToRegistry(-1223,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1223,__construct_MeqDivide)+
        AtomicID::registerId(-1224,"meqsin")+
        TypeInfoReg::addToRegistry(-1224,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1224,__construct_MeqSin)+
        AtomicID::registerId(-1243,"meqcos")+
        TypeInfoReg::addToRegistry(-1243,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1243,__construct_MeqCos)+
        AtomicID::registerId(-1240,"meqexp")+
        TypeInfoReg::addToRegistry(-1240,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1240,__construct_MeqExp)+
        AtomicID::registerId(-1214,"meqpow")+
        TypeInfoReg::addToRegistry(-1214,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1214,__construct_MeqPow)+
        AtomicID::registerId(-1249,"meqsqr")+
        TypeInfoReg::addToRegistry(-1249,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1249,__construct_MeqSqr)+
        AtomicID::registerId(-1505,"meqasin")+
        TypeInfoReg::addToRegistry(-1505,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1505,__construct_MeqAsin)+
        AtomicID::registerId(-1506,"meqacos")+
        TypeInfoReg::addToRegistry(-1506,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1506,__construct_MeqAcos)+
        AtomicID::registerId(-1251,"meqsqrt")+
        TypeInfoReg::addToRegistry(-1251,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1251,__construct_MeqSqrt)+
        AtomicID::registerId(-1212,"meqconj")+
        TypeInfoReg::addToRegistry(-1212,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1212,__construct_MeqConj)+
        AtomicID::registerId(-1217,"meqtocomplex")+
        TypeInfoReg::addToRegistry(-1217,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1217,__construct_MeqToComplex)+
        AtomicID::registerId(-1503,"meqpolar")+
        TypeInfoReg::addToRegistry(-1503,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1503,__construct_MeqPolar)+
        AtomicID::registerId(-1239,"mequvw")+
        TypeInfoReg::addToRegistry(-1239,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1239,__construct_MeqUVW)+
        AtomicID::registerId(-1380,"ra")+
        AtomicID::registerId(-1379,"dec")+
        AtomicID::registerId(-1030,"x")+
        AtomicID::registerId(-1031,"y")+
        AtomicID::registerId(-1032,"z")+
        AtomicID::registerId(-1467,"meqlmn")+
        TypeInfoReg::addToRegistry(-1467,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1467,__construct_MeqLMN)+
        AtomicID::registerId(-1507,"meqlog")+
        TypeInfoReg::addToRegistry(-1507,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1507,__construct_MeqLog)+
        AtomicID::registerId(-1510,"meqcosh")+
        TypeInfoReg::addToRegistry(-1510,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1510,__construct_MeqCosh)+
        AtomicID::registerId(-1508,"meqsinh")+
        TypeInfoReg::addToRegistry(-1508,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1508,__construct_MeqSinh)+
        AtomicID::registerId(-1511,"meqtan")+
        TypeInfoReg::addToRegistry(-1511,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1511,__construct_MeqTan)+
        AtomicID::registerId(-1509,"meqtanh")+
        TypeInfoReg::addToRegistry(-1509,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1509,__construct_MeqTanh)+
        AtomicID::registerId(-1468,"meqstatpointsourcedft")+
        TypeInfoReg::addToRegistry(-1468,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1468,__construct_MeqStatPointSourceDFT)+
        AtomicID::registerId(-1476,"lmn")+
        AtomicID::registerId(-1158,"uvw")+
        AtomicID::registerId(-1469,"meqpointsourcedft")+
        TypeInfoReg::addToRegistry(-1469,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1469,__construct_MeqPointSourceDFT)+
        AtomicID::registerId(-1474,"st")+
        AtomicID::registerId(-1475,"dft")+
        AtomicID::registerId(-1020,"n")+
        AtomicID::registerId(-1365,"meqcondeq")+
        TypeInfoReg::addToRegistry(-1365,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1365,__construct_MeqCondeq)+
        AtomicID::registerId(-1367,"meqsolver")+
        TypeInfoReg::addToRegistry(-1367,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1367,__construct_MeqSolver)+
        AtomicID::registerId(-1520,"meqceil")+
        TypeInfoReg::addToRegistry(-1520,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1520,__construct_MeqCeil)+
        AtomicID::registerId(-1521,"meqfloor")+
        TypeInfoReg::addToRegistry(-1521,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1521,__construct_MeqFloor)+
        AtomicID::registerId(-1512,"meqatan")+
        TypeInfoReg::addToRegistry(-1512,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1512,__construct_MeqAtan)+
        AtomicID::registerId(-1513,"meqpow2")+
        TypeInfoReg::addToRegistry(-1513,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1513,__construct_MeqPow2)+
        AtomicID::registerId(-1514,"meqpow3")+
        TypeInfoReg::addToRegistry(-1514,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1514,__construct_MeqPow3)+
        AtomicID::registerId(-1515,"meqpow4")+
        TypeInfoReg::addToRegistry(-1515,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1515,__construct_MeqPow4)+
        AtomicID::registerId(-1516,"meqpow5")+
        TypeInfoReg::addToRegistry(-1516,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1516,__construct_MeqPow5)+
        AtomicID::registerId(-1517,"meqpow6")+
        TypeInfoReg::addToRegistry(-1517,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1517,__construct_MeqPow6)+
        AtomicID::registerId(-1518,"meqpow7")+
        TypeInfoReg::addToRegistry(-1518,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1518,__construct_MeqPow7)+
        AtomicID::registerId(-1519,"meqpow8")+
        TypeInfoReg::addToRegistry(-1519,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1519,__construct_MeqPow8)+
        AtomicID::registerId(-1524,"meqabs")+
        TypeInfoReg::addToRegistry(-1524,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1524,__construct_MeqAbs)+
        AtomicID::registerId(-1525,"meqfabs")+
        TypeInfoReg::addToRegistry(-1525,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1525,__construct_MeqFabs)+
        AtomicID::registerId(-1527,"meqnorm")+
        TypeInfoReg::addToRegistry(-1527,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1527,__construct_MeqNorm)+
        AtomicID::registerId(-1526,"meqarg")+
        TypeInfoReg::addToRegistry(-1526,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1526,__construct_MeqArg)+
        AtomicID::registerId(-1522,"meqreal")+
        TypeInfoReg::addToRegistry(-1522,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1522,__construct_MeqReal)+
        AtomicID::registerId(-1523,"meqimag")+
        TypeInfoReg::addToRegistry(-1523,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1523,__construct_MeqImag)+
        AtomicID::registerId(-1437,"meqmergeflags")+
        TypeInfoReg::addToRegistry(-1437,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1437,__construct_MeqMergeFlags)+
        AtomicID::registerId(-1135,"flag")+
        AtomicID::registerId(-1287,"mask")+
        AtomicID::registerId(-1478,"meqreqseq")+
        TypeInfoReg::addToRegistry(-1478,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1478,__construct_MeqReqSeq)+
        AtomicID::registerId(-1247,"cells")+
        AtomicID::registerId(-1477,"only")+
        AtomicID::registerId(-1532,"meqmin")+
        TypeInfoReg::addToRegistry(-1532,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1532,__construct_MeqMin)+
        AtomicID::registerId(-1530,"meqmax")+
        TypeInfoReg::addToRegistry(-1530,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1530,__construct_MeqMax)+
        AtomicID::registerId(-1528,"meqmean")+
        TypeInfoReg::addToRegistry(-1528,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1528,__construct_MeqMean)+
        AtomicID::registerId(-1550,"meqdatacollect")+
        TypeInfoReg::addToRegistry(-1550,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1550,__construct_MeqDataCollect)+
        AtomicID::registerId(-1548,"top")+
        AtomicID::registerId(-1549,"sub")+
        AtomicID::registerId(-1545,"label")+
        AtomicID::registerId(-1551,"attrib")+
        AtomicID::registerId(-1552,"plot")+
        AtomicID::registerId(-1116,"data")+
        AtomicID::registerId(-1553,"meqdataconcat")+
        TypeInfoReg::addToRegistry(-1553,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1553,__construct_MeqDataConcat)+
        AtomicID::registerId(-1557,"skeleton")+
    0;
    return res;
  }
  
  int __dum_call_registries_for_MeqNodes = aidRegistry_MeqNodes();

