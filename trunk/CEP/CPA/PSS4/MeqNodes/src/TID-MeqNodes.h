      #ifndef TID_MeqNodes_h
      #define TID_MeqNodes_h 1

      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../DMI/aid/build_aid_maps.pl
      #include "DMI/TypeId.h"

      // should be called somewhere in order to link in the registry
      int aidRegistry_MeqNodes ();

#ifndef _defined_id_TpMeqAdd
#define _defined_id_TpMeqAdd 1
const TypeId TpMeqAdd(-1236);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Add.h:29
const int TpMeqAdd_int = -1236;
namespace Meq { class Add; };
            template<>
            class DMIBaseTypeTraits<Meq::Add> : public TypeTraits<Meq::Add>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqAdd_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Add & ContainerReturnType;
              typedef const Meq::Add & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqComposer
#define _defined_id_TpMeqComposer 1
const TypeId TpMeqComposer(-1241);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Composer.h:29
const int TpMeqComposer_int = -1241;
namespace Meq { class Composer; };
            template<>
            class DMIBaseTypeTraits<Meq::Composer> : public TypeTraits<Meq::Composer>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqComposer_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Composer & ContainerReturnType;
              typedef const Meq::Composer & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqCondeq
#define _defined_id_TpMeqCondeq 1
const TypeId TpMeqCondeq(-1365);                  // from /home/gvd/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/Condeq.h:29
const int TpMeqCondeq_int = -1365;
namespace Meq { class Condeq; };
            template<>
            class DMIBaseTypeTraits<Meq::Condeq> : public TypeTraits<Meq::Condeq>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqCondeq_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Condeq & ContainerReturnType;
              typedef const Meq::Condeq & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqConj
#define _defined_id_TpMeqConj 1
const TypeId TpMeqConj(-1212);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Conj.h:29
const int TpMeqConj_int = -1212;
namespace Meq { class Conj; };
            template<>
            class DMIBaseTypeTraits<Meq::Conj> : public TypeTraits<Meq::Conj>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqConj_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Conj & ContainerReturnType;
              typedef const Meq::Conj & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqConstant
#define _defined_id_TpMeqConstant 1
const TypeId TpMeqConstant(-1387);                // from /home/gvd/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/Constant.h:32
const int TpMeqConstant_int = -1387;
namespace Meq { class Constant; };
            template<>
            class DMIBaseTypeTraits<Meq::Constant> : public TypeTraits<Meq::Constant>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqConstant_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Constant & ContainerReturnType;
              typedef const Meq::Constant & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqCos
#define _defined_id_TpMeqCos 1
const TypeId TpMeqCos(-1243);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Cos.h:29
const int TpMeqCos_int = -1243;
namespace Meq { class Cos; };
            template<>
            class DMIBaseTypeTraits<Meq::Cos> : public TypeTraits<Meq::Cos>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqCos_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Cos & ContainerReturnType;
              typedef const Meq::Cos & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqDivide
#define _defined_id_TpMeqDivide 1
const TypeId TpMeqDivide(-1223);                  // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Divide.h:29
const int TpMeqDivide_int = -1223;
namespace Meq { class Divide; };
            template<>
            class DMIBaseTypeTraits<Meq::Divide> : public TypeTraits<Meq::Divide>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqDivide_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Divide & ContainerReturnType;
              typedef const Meq::Divide & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqExp
#define _defined_id_TpMeqExp 1
const TypeId TpMeqExp(-1240);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Exp.h:29
const int TpMeqExp_int = -1240;
namespace Meq { class Exp; };
            template<>
            class DMIBaseTypeTraits<Meq::Exp> : public TypeTraits<Meq::Exp>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqExp_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Exp & ContainerReturnType;
              typedef const Meq::Exp & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqFreq
#define _defined_id_TpMeqFreq 1
const TypeId TpMeqFreq(-1219);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Freq.h:29
const int TpMeqFreq_int = -1219;
namespace Meq { class Freq; };
            template<>
            class DMIBaseTypeTraits<Meq::Freq> : public TypeTraits<Meq::Freq>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqFreq_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Freq & ContainerReturnType;
              typedef const Meq::Freq & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqLMN
#define _defined_id_TpMeqLMN 1
const TypeId TpMeqLMN(-1467);                     // from /home/diepen/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/LMN.h:29
const int TpMeqLMN_int = -1467;
namespace Meq { class LMN; };
            template<>
            class DMIBaseTypeTraits<Meq::LMN> : public TypeTraits<Meq::LMN>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqLMN_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::LMN & ContainerReturnType;
              typedef const Meq::LMN & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqMergeFlags
#define _defined_id_TpMeqMergeFlags 1
const TypeId TpMeqMergeFlags(-1437);              // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/MergeFlags.h:30
const int TpMeqMergeFlags_int = -1437;
namespace Meq { class MergeFlags; };
            template<>
            class DMIBaseTypeTraits<Meq::MergeFlags> : public TypeTraits<Meq::MergeFlags>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqMergeFlags_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::MergeFlags & ContainerReturnType;
              typedef const Meq::MergeFlags & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqMultiply
#define _defined_id_TpMeqMultiply 1
const TypeId TpMeqMultiply(-1227);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Multiply.h:29
const int TpMeqMultiply_int = -1227;
namespace Meq { class Multiply; };
            template<>
            class DMIBaseTypeTraits<Meq::Multiply> : public TypeTraits<Meq::Multiply>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqMultiply_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Multiply & ContainerReturnType;
              typedef const Meq::Multiply & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqParm
#define _defined_id_TpMeqParm 1
const TypeId TpMeqParm(-1244);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Parm.h:35
const int TpMeqParm_int = -1244;
namespace Meq { class Parm; };
            template<>
            class DMIBaseTypeTraits<Meq::Parm> : public TypeTraits<Meq::Parm>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqParm_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Parm & ContainerReturnType;
              typedef const Meq::Parm & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqPointSourceDFT
#define _defined_id_TpMeqPointSourceDFT 1
const TypeId TpMeqPointSourceDFT(-1469);          // from /home/diepen/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/PointSourceDFT.h:30
const int TpMeqPointSourceDFT_int = -1469;
namespace Meq { class PointSourceDFT; };
            template<>
            class DMIBaseTypeTraits<Meq::PointSourceDFT> : public TypeTraits<Meq::PointSourceDFT>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqPointSourceDFT_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::PointSourceDFT & ContainerReturnType;
              typedef const Meq::PointSourceDFT & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqPolar
#define _defined_id_TpMeqPolar 1
const TypeId TpMeqPolar(-1503);                   // from /home/oms/LOFAR/CEP/CPA/PSS4/MeqNodes/src/Polar.h:30
const int TpMeqPolar_int = -1503;
namespace Meq { class Polar; };
            template<>
            class DMIBaseTypeTraits<Meq::Polar> : public TypeTraits<Meq::Polar>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqPolar_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Polar & ContainerReturnType;
              typedef const Meq::Polar & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqPow
#define _defined_id_TpMeqPow 1
const TypeId TpMeqPow(-1214);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Pow.h:29
const int TpMeqPow_int = -1214;
namespace Meq { class Pow; };
            template<>
            class DMIBaseTypeTraits<Meq::Pow> : public TypeTraits<Meq::Pow>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqPow_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Pow & ContainerReturnType;
              typedef const Meq::Pow & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqReqSeq
#define _defined_id_TpMeqReqSeq 1
const TypeId TpMeqReqSeq(-1478);                  // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/ReqSeq.h:30
const int TpMeqReqSeq_int = -1478;
namespace Meq { class ReqSeq; };
            template<>
            class DMIBaseTypeTraits<Meq::ReqSeq> : public TypeTraits<Meq::ReqSeq>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqReqSeq_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::ReqSeq & ContainerReturnType;
              typedef const Meq::ReqSeq & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSelector
#define _defined_id_TpMeqSelector 1
const TypeId TpMeqSelector(-1255);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Selector.h:29
const int TpMeqSelector_int = -1255;
namespace Meq { class Selector; };
            template<>
            class DMIBaseTypeTraits<Meq::Selector> : public TypeTraits<Meq::Selector>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSelector_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Selector & ContainerReturnType;
              typedef const Meq::Selector & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSin
#define _defined_id_TpMeqSin 1
const TypeId TpMeqSin(-1224);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sin.h:29
const int TpMeqSin_int = -1224;
namespace Meq { class Sin; };
            template<>
            class DMIBaseTypeTraits<Meq::Sin> : public TypeTraits<Meq::Sin>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSin_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sin & ContainerReturnType;
              typedef const Meq::Sin & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSolver
#define _defined_id_TpMeqSolver 1
const TypeId TpMeqSolver(-1367);                  // from /home/gvd/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/Solver.h:31
const int TpMeqSolver_int = -1367;
namespace Meq { class Solver; };
            template<>
            class DMIBaseTypeTraits<Meq::Solver> : public TypeTraits<Meq::Solver>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSolver_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Solver & ContainerReturnType;
              typedef const Meq::Solver & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqr
#define _defined_id_TpMeqSqr 1
const TypeId TpMeqSqr(-1249);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sqr.h:29
const int TpMeqSqr_int = -1249;
namespace Meq { class Sqr; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqr> : public TypeTraits<Meq::Sqr>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqr_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqr & ContainerReturnType;
              typedef const Meq::Sqr & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSqrt
#define _defined_id_TpMeqSqrt 1
const TypeId TpMeqSqrt(-1251);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Sqrt.h:29
const int TpMeqSqrt_int = -1251;
namespace Meq { class Sqrt; };
            template<>
            class DMIBaseTypeTraits<Meq::Sqrt> : public TypeTraits<Meq::Sqrt>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSqrt_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Sqrt & ContainerReturnType;
              typedef const Meq::Sqrt & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqStatPointSourceDFT
#define _defined_id_TpMeqStatPointSourceDFT 1
const TypeId TpMeqStatPointSourceDFT(-1468);      // from /home/diepen/sim/LOFAR/CEP/CPA/PSS4/MEQ/src/StatPointSourceDFT.h:30
const int TpMeqStatPointSourceDFT_int = -1468;
namespace Meq { class StatPointSourceDFT; };
            template<>
            class DMIBaseTypeTraits<Meq::StatPointSourceDFT> : public TypeTraits<Meq::StatPointSourceDFT>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqStatPointSourceDFT_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::StatPointSourceDFT & ContainerReturnType;
              typedef const Meq::StatPointSourceDFT & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqSubtract
#define _defined_id_TpMeqSubtract 1
const TypeId TpMeqSubtract(-1232);                // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Subtract.h:29
const int TpMeqSubtract_int = -1232;
namespace Meq { class Subtract; };
            template<>
            class DMIBaseTypeTraits<Meq::Subtract> : public TypeTraits<Meq::Subtract>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqSubtract_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Subtract & ContainerReturnType;
              typedef const Meq::Subtract & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqTime
#define _defined_id_TpMeqTime 1
const TypeId TpMeqTime(-1225);                    // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/Time.h:29
const int TpMeqTime_int = -1225;
namespace Meq { class Time; };
            template<>
            class DMIBaseTypeTraits<Meq::Time> : public TypeTraits<Meq::Time>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqTime_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::Time & ContainerReturnType;
              typedef const Meq::Time & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqToComplex
#define _defined_id_TpMeqToComplex 1
const TypeId TpMeqToComplex(-1217);               // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/ToComplex.h:29
const int TpMeqToComplex_int = -1217;
namespace Meq { class ToComplex; };
            template<>
            class DMIBaseTypeTraits<Meq::ToComplex> : public TypeTraits<Meq::ToComplex>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqToComplex_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::ToComplex & ContainerReturnType;
              typedef const Meq::ToComplex & ContainerParamType;
            };
#endif
#ifndef _defined_id_TpMeqUVW
#define _defined_id_TpMeqUVW 1
const TypeId TpMeqUVW(-1239);                     // from /home/oms/LOFAR/CEP/CPA/PSS4/MEQ/src/UVW.h:29
const int TpMeqUVW_int = -1239;
namespace Meq { class UVW; };
            template<>
            class DMIBaseTypeTraits<Meq::UVW> : public TypeTraits<Meq::UVW>
            {
              public:
              enum { isContainable = true };
              enum { typeId = TpMeqUVW_int };
              enum { TypeCategory = TypeCategories::DYNAMIC };
              enum { ParamByRef = true, ReturnByRef = true };
              typedef const Meq::UVW & ContainerReturnType;
              typedef const Meq::UVW & ContainerParamType;
            };
#endif


#endif
