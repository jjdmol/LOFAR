//# This file was generated by genDBcode v2.0 on Wed Jan 14 16:15:23 CET 2004
//# with the command: genDBcode DH_PL_MessageRecord.map DH_PL_MessageRecord.fun P 
//# from the directory: /home/tanaka/prj/co-0351-1621/LOFAR/CEP/CEPFrame/src/genDH_PL_MessageRecord
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
//# only include this file once
#if !defined(PO_LCS_BASE_H)
#define PO_LCS_BASE_H

#include <PL/DTLHelperClasses.h>
#include <PL/ObjectId.h>
#include <PL/PersistentObject.h>
#include <dtl/DTL.h>

namespace LOFAR {
	namespace PL {


// --------------- generic DTL structures -----------------------
// The Persistency Layer uses an ObjectID to unique identify
// an object. This field can be used in queries to update
// or delete an object. Since the ObjectID is the same for
// every type of object some generic DTL structs can be defined.

template<>
struct DBRep<ObjectId> {
	ObjectId::oid_t		itsOid;
};

template<>
void BCA<ObjectId>::operator()(dtl::BoundIOs& cols, DataObj& rowbuf) {
	cols["ObjId"]	== rowbuf.itsOid;
}

template<>
void BPA<ObjectId>::operator()(dtl::BoundIOs& pos, ParamObj& param) {
	pos[0]	== param.itsOid;
}

template<>
struct DBRep<PersistentObject::MetaData> {
	ObjectId::oid_t		itsOid;
	ObjectId::oid_t		itsOwner;
	unsigned int		itsVersionNr;
};

template<>
void BCA<PersistentObject::MetaData>::operator()(dtl::BoundIOs& cols,
					 DataObj& rowbuf) {
	cols["ObjId"]		== rowbuf.itsOid;
	cols["Owner"]	    == rowbuf.itsOwner;
	cols["VersionNr"]	== rowbuf.itsVersionNr;
}

	} // close namespace PL
}	// close namespace LOFAR


#endif
