#!/usr/bin/env python

########################################################################
#                                                                      #
# Created by N.Vilchez (vilchez@astron.nl)                             #
# 14/11/2014                                                           #
#                                                                      #
########################################################################


########################################################################
# IMPORT general modules
########################################################################
import sys,os,glob,time
import getopt

########################################################################
# Import local modules (classes)
########################################################################
from lofar.selfcal import class_obsparMergedData
from lofar.selfcal import class_obsPreprocessing
from lofar.selfcal import class_selfcalparam
from lofar.selfcal import class_selfcalrun  


########################################################################
#							OVERVIEW
#
# 1) Inputs Iniatilzation using opts
#
# 2) Check conflicting values
#
# 3) Initialize default values
#
# 4) Check parameters values (check contradiction between parameters)
#
# 5) Check parameters format
#
# 6) Check values 
#
# 7) Warnings
#
# 7b) Paramters Overview
#
# 8) Main code started Now !!!!
#
# 9) Extract global observation characteristics and check data integrity 
#
# 10) Pre-processing phase (if required: outerFOVclean=yes)
#
# 11) Global parameters determination (preparation phase)
#
# 12) Start the Selfcal loop
#
# 13) Start the final cycle
#
# 14) End of Selfcal process, write final time infos
#
########################################################################



########################################################################
## Selfcalibration Main code 
########################################################################



def main(initparameterlist):



	try:

	      opts, args = getopt.getopt(sys.argv[1:], "h", ["help", "obsDir=", "outputDir=", "skyModel=", "nbCycle=", "outerFOVclean=", "VLSSuse=", "annulusRadius=", "startResolution=", "endResolution=", "resolutionVector=", "mask=", "UVmin=", "startingFactor=", "FOV=", "nofPixelPerBeam=", "robust=", "maskDilatation="])
	      print opts
      
	except getopt.GetoptError as err:
	      print ""		
	      print "Usage: selfcal.py --obsDir= --outputDir= [Options: --skyModel= --nbCycle= --outerFOVclean= --VLSSuse= --annulusRadius= --startResolution= --endResolution= --resolutionVector= --mask= --UVmin= --startingFactor= --FOV= --nofPixelPerBeam= --robust= --maskDilatation=]"
	      print ""
	      print "For more details: type selfcal.py -h"
	      print ""
	      sys.exit(2)
	      

	####################################################################
	## Reading directly options from opts
	####################################################################
	
	
	if len(opts) != 0:
		 	         	
			for par1, par2 in opts:
				
				if par1 in ("--help") or par1 in ("-h"):
						print ""
						print "Usage: selfcal.py PATH/parsetFile"
						print 'OR'
						print "Usage: selfcal.py --obsDir= --outputDir= [Options: --skyModel= --nbCycle= --outerFOVclean= --VLSSuse= --annulusRadius= --startResolution= --endResolution= --resolutionVector= --mask= --UVmin= --startingFactor= --FOV= --nofPixelPerBeam= --robust= --maskDilatation=]\n"
						
						print """
******************************************************************************
SELFCAL PARAMETERS (parameter provided manually):

*   --obsDir(string): This is the observation directory which contains data (or frequency merged data generated by mergeSB.py)
Data must contain the same number of subbands, have the same frequency range and the same pointing centre. Checks are done internally. The obsDir must contain ONLY data, no additional files. Due to this, if the outputDir is in the obsDir tree, the code will crash. Full path must be provided.
               
*  --outputDir(string): This is the Output directory where the selfcal process will be executed. If it doesn't exist, it will be created automatically.
Full path must be provided.

******************************************************************************
SELFCAL OPTIONS:

*   --skyModel(string,default:''): This option allows the user to provide a skymodel instead of using the VLSSuse option. The skymodel must be BBS compatible and the full path of the file provided.
 *** NB:  if skyModel option is used VLSSuse parameter must be set to 'no'. ***
               
*  --nbCycle(int, default:10): This is the number of selfcal cycles to perform. It must be between 5 and 20. The selfcal process will start at 15 times the best possible resolution and decrease the resolution at each cycle in linear steps.
   
*  --outerFOVclean(string,default:no): yes or no => if this option is activated, a preprocessing cleaning to subtract sources from outside the f.o.v will be applied before the selfcal process.
A first low resolution image will be generated (using core stations only) to obtain a sky model. This preliminary image has 30'' pixel size and a larger fov (fov=5/sin^2(average elevation) degrees instead of 5 degrees). A skymodel is extracted and separated into an 'annulus' skymodel (containing sources with angular distance >5deg from the target) and a 'centre' skymodel (containing sources with angular distance <5deg from the target). The 'annulus' skymodel is then subtracted from the visibilities. This cleaning is an iterative process and will continue until there are less than 10% of sources from the original annulus skymodel (typically 2-3 iterations are needed).
                               
*  --VLSSuse(string,default:no): yes or no => Use the VLSS Skymodel for the first iteration of selfcal (generated by gsm.py).
If the user does not want to use VLSSS Skymodel (VLSSuse=no), the code will create a preliminary image (see above the outerFOVclean parameter), and use the 'center' Skymodel as the input skymodel.
 *** NB:  if skyModel option is used VLSSuse parameter must be set to 'no'. ***

*  --annulusRadius(float, default:1): In degrees; if outerFOVclean=yes, you can select the radius of the outer annulus from which sources will be subtracted. By default, the value is 1deg, i.e the fov will be 5+2x1=7 degree, and all sources which are less than 1 degree of the border of the image will be subtracted.

*  --startResolution(float, default:15xbest resolution available in the data): The resolution to use in the first selfcal cycle. If not set, the starting resolution is automatically computed in arcseconds, using: Starting Resolution=15x[lambda/max(baseline)].
 *** NB:  startResolution option is in conflict with resolutionVector and startingFactor parameters. ***
 *** NB:  if startResolution is provided, endResolution must also be provided. ***


*  --endResolution(float, default:best resolution available in the data): The resolution to use in the final selfcal cycle. If not set, the best resolution available is calculated using: Best Resolution=lambda/max(baseline).
 *** NB:  endResolution option is in conflict with resolutionVector parameter, but NOT with startingFactor !!***
 *** NB:  if endResolution is provided, startResolution does not need to be provided. ***
 
*  --resolutionVector(list of float: --resolutionVector=x1, x2, x3  (do not use parenthesis),default:[none]): Select the resolution for each cycle. Format: list of float in arcseconds.
 *** NB: resolutionVector option is in conflict with startResolution,endResolution and startingFactor parameters. ***


*  --mask(string,default:yes): yes or no =>  Use clean masks when imaging.

*  --maskDilatation(integer,default:0): If mask is used (generated from pybdsm extracted skyModel), it is possible to dilate it. 0 => no dilatation, 1 => extend the no dilated mask by 1 pixel in all directions, etc ...
For more details see pybdsm export_image documentation.

*  --UVmin(float, default:0 or 0.1 in klambda): Set UVmin for each imaging run. If unset, UVmin=0.1 for observations with declinations below 35 degrees, otherwise UVmin=0. It is recommended to set UVmin=0 if the user is interested in imaging extended or diffuse emission.


*  --startingFactor(int, default:15):  The resolution of the initial selfcal cycle is set by Startingfactor*Best available Resolution, or Startingfactor*endResolution.
 *** NB:  startingFactor option is in conflict with startResolution and resolutionVector parameters, but not with endResolution !!***  

*  --FOV(float, default:5 in degree): Select the image size (in degrees).

*  --nofPixelPerBeam(float, default:4): Number of pixels per beam.

*  --robust(float, default:none): If robust parameter is set, it will be kept constant for all cycles. If unset, the robust parameter varies iteratively from 1 to -2. Must be in the interval: [2;-2] 

******************************************************************************
CAUTION:
If the final image is greater than 12000x12000 pixels, a warning will appear before the selfcal process is launched which will ask you if you really want to process with these parameters due to the expected computational time.
To check if it will be the case, check this condition:

FOV/[(endResolution/nofPixelPerBeam)/3600] <= 12000

It is recommended to run selfcal in screen (but not nohup anymore).

******************************************************************************
PARSET FILE EXAMPLE: 
Parameter contained in the file:

obsDir=/data/vilchez/Selfcal_new/data/  
outputDir=/data/vilchez/Selfcal_new/test3 
UVmin=0.0 
FOV=4 
resolutionVector=90,75,50,40  
robust=0 
nofPixelPerBeam  =  3

******************************************************************************         		
		""" 									
						print ""
						sys.exit(2)
					
				elif par1 in ("--obsDir"):
					initparameterlist[0]=strcompress(par2)				
				elif par1 in ("--outputDir"):
					initparameterlist[1]=strcompress(par2)						
				elif par1 in ("--nbCycle"):
					initparameterlist[2]=strcompress(par2)			
				elif par1 in ("--outerFOVclean"):
					initparameterlist[3]=strcompress(par2)				
				elif par1 in ("--VLSSuse"):
					initparameterlist[4]=strcompress(par2)			
				elif par1 in ("--annulusRadius"):
					initparameterlist[5]=strcompress(par2)			
				elif par1 in ("--startResolution"):
					initparameterlist[6]=strcompress(par2)				
				elif par1 in ("--endResolution"):
					initparameterlist[7]=strcompress(par2)				
				elif par1 in ("--resolutionVector"):
					initparameterlist[8]=strcompress(par2)				
				elif par1 in ("--mask"):
					initparameterlist[9]=strcompress(par2)							
				elif par1 in ("--UVmin"):
					initparameterlist[10]=strcompress(par2)				
				elif par1 in ("--startingFactor"):
					initparameterlist[11]=strcompress(par2)					
				elif par1 in ("--FOV"):
					initparameterlist[12]=strcompress(par2)				
				elif par1 in ("--skyModel"):
					initparameterlist[13]=strcompress(par2)	
				elif par1 in ("--nofPixelPerBeam"):
					initparameterlist[14]=strcompress(par2)			
				elif par1 in ("--robust"):
					initparameterlist[15]=strcompress(par2)		
				elif par1 in ("--maskDilatation"):
					initparameterlist[16]=strcompress(par2)				
																																																	
				else:
						print("Option {} Unknown".format(par1))
						sys.exit(2)

						
			# Check parameters		
			if initparameterlist[0] == "none" or initparameterlist[1] == "none":
				print ""
				print "MISSING Parameters:"
				print "--obsDir= --outputDir="	
				print ""
				print "Usage: selfcal.py PATH/parsetFile"
				print 'OR'
				print "Usage: selfcal.py --obsDir= --outputDir= [Options: --skyModel= --nbCycle= --outerFOVclean= --VLSSuse= --annulusRadius= --startResolution= --endResolution= --resolutionVector= --mask= --UVmin= --startingFactor= --FOV= --nofPixelPerBeam= --robust= --maskDilatation=]\n"
				print ""
				sys.exit(2)       	
 

	####################################################################
	## Reading directly parameters from args (use parset)
	####################################################################


	if len(args) != 0:

			if len(args) != 1:
				
				print ''
				print'#################################################'
				print 'If you use a parset, you must provide only the parset full path behind selfcal.py !'
				print 'All parameters must be in the parset !' 
				print'#################################################'
				print ''
				print sys.exit()
				
			else: 
				
				
				inlistParameter		= open(args[0],'r').readlines()
				nb_parameters		= len(inlistParameter)
				
				par1	= range(nb_parameters)
				par2	= range(nb_parameters)
				opts	= []
				print opts
				
				i = 0
		
				for line in inlistParameter:
					linesplit	= line.split('=')
					if len(linesplit) >= 2:
						par1[i]		= linesplit[0]
						par2[i]		= linesplit[1]
						opts.append((par1[i],par2[i]))
					i = i+1								
				
				
				
				for par1, par2 in opts:
				
						if strcompress(par1)	 in ("help"):
								print ""
								print "Usage: selfcal.py PATH/parsetFile"
								print 'OR'
								print "Usage: selfcal.py --obsDir= --outputDir= [Options: --skyModel= --nbCycle= --outerFOVclean= --VLSSuse= --annulusRadius= --startResolution= --endResolution= --resolutionVector= --mask= --UVmin= --startingFactor= --FOV= --nofPixelPerBeam= --robust= --maskDilatation=]\n"							
								
								print """
******************************************************************************
SELFCAL PARAMETERS (parameter provided using a parset file):

*   obsDir(string): This is the observation directory which contains data (or frequency merged data generated by mergeSB.py)
Data must contain the same number of subbands, have the same frequency range and the same pointing centre. Checks are done internally. The obsDir must contain ONLY data, no additional files. Due to this, if the outputDir is in the obsDir tree, the code will crash. Full path must be provided.
					   
*  outputDir(string): This is the Output directory where the selfcal process will be executed. If it doesn't exist, it will be created automatically.
Full path must be provided.

******************************************************************************
SELFCAL OPTIONS:

*   skyModel(string,default:''): This option allows the user to provide a skymodel instead of using the VLSSuse option. The skymodel must be BBS compatible and the full path of the file provided.
 *** NB:  if skyModel option is used VLSSuse parameter must be set to 'no'. ***
					   
*  nbCycle(int, default:10): This is the number of selfcal cycles to perform. It must be between 5 and 20. The selfcal process will start at 15 times the best possible resolution and decrease the resolution at each cycle in linear steps.
		   
*  outerFOVclean(string,default:no): yes or no => if this option is activated, a preprocessing cleaning to subtract sources from outside the f.o.v will be applied before the selfcal process.
A first low resolution image will be generated (using core stations only) to obtain a sky model. This preliminary image has 30'' pixel size and a larger fov (fov=5/sin^2(average elevation) degrees instead of 5 degrees). A skymodel is extracted and separated into an 'annulus' skymodel (containing sources with angular distance >5deg from the target) and a 'centre' skymodel (containing sources with angular distance <5deg from the target). The 'annulus' skymodel is then subtracted from the visibilities. This cleaning is an iterative process and will continue until there are less than 10% of sources from the original annulus skymodel (typically 2-3 iterations are needed).
									   
*  VLSSuse(string,default:no): yes or no => Use the VLSS Skymodel for the first iteration of selfcal (generated by gsm.py).
If the user does not want to use VLSSS Skymodel (VLSSuse=no), the code will create a preliminary image (see above the outerFOVclean parameter), and use the 'center' Skymodel as the input skymodel.
 *** NB:  if skyModel option is used VLSSuse parameter must be set to 'no'. ***

*  annulusRadius(float, default:1): In degrees; if outerFOVclean=yes, you can select the radius of the outer annulus from which sources will be subtracted. By default, the value is 1deg, i.e the fov will be 5+2x1=7 degree, and all sources which are less than 1 degree of the border of the image will be subtracted.

*  startResolution(float, default:15xbest resolution available in the data): The resolution to use in the first selfcal cycle. If not set, the starting resolution is automatically computed in arcseconds, using: Starting Resolution=15x[lambda/max(baseline)].
 *** NB:  startResolution option is in conflict with resolutionVector and startingFactor parameters. ***
 *** NB:  if startResolution is provided, endResolution must also be provided. ***


*  endResolution(float, default:best resolution available in the data): The resolution to use in the final selfcal cycle. If not set, the best resolution available is calculated using: Best Resolution=lambda/max(baseline).
 *** NB:  endResolution option is in conflict with resolutionVector parameter, but NOT with startingFactor !!***
 *** NB:  if endResolution is provided, startResolution does not need to be provided. ***
		 
*  resolutionVector(list of float: --resolutionVector=x1, x2, x3  (do not use parenthesis),default:[none]): Select the resolution for each cycle. Format: list of float in arcseconds.
 *** NB: resolutionVector option is in conflict with startResolution,endResolution and startingFactor parameters. ***


*  mask(string,default:yes): yes or no =>  Use clean masks when imaging.

*  maskDilatation(integer,default:0): If mask is used (generated from pybdsm extracted skyModel), it is possible to dilate it. 0 => no dilatation, 1 => extend the no dilated mask by 1 pixel in all directions, etc ...
For more details see pybdsm export_image documentation.

*  UVmin(float, default:0 or 0.1 in klambda): Set UVmin for each imaging run. If unset, UVmin=0.1 for observations with declinations below 35 degrees, otherwise UVmin=0. It is recommended to set UVmin=0 if the user is interested in imaging extended or diffuse emission.


*  startingFactor(int, default:15):  The resolution of the initial selfcal cycle is set by Startingfactor*Best available Resolution, or Startingfactor*endResolution.
 *** NB:  startingFactor option is in conflict with startResolution and resolutionVector parameters, but not with endResolution !!***  

*  FOV(float, default:5 in degree): Select the image size (in degrees).

*  nofPixelPerBeam(float, default:4): Number of pixels per beam.

*  robust(float, default:none): If robust parameter is set, it will be kept constant for all cycles. If unset, the robust parameter varies iteratively from 1 to -2. Must be in the interval: [2;-2] 

******************************************************************************
CAUTION:
If the final image is greater than 12000x12000 pixels, a warning will appear before the selfcal process is launched which will ask you if you really want to process with these parameters due to the expected computational time.
To check if it will be the case, check this condition:

FOV/[(endResolution/nofPixelPerBeam)/3600] <= 12000

It is recommended to run selfcal in screen (but not nohup anymore).

******************************************************************************
PARSET FILE EXAMPLE: 
Parameter contained in the file:

obsDir=/data/vilchez/Selfcal_new/data/  
outputDir=/data/vilchez/Selfcal_new/test3 
UVmin=0.0 
FOV=4 
resolutionVector=90,75,50,40  
robust=0 
nofPixelPerBeam  =  3

******************************************************************************         		
				""" 									
								print ""
								sys.exit(2)
							
						elif strcompress(par1)	 in ("obsDir"):
							initparameterlist[0]=strcompress(par2)			
						elif strcompress(par1)	 in ("outputDir"):
							initparameterlist[1]=strcompress(par2)					
						elif strcompress(par1)	 in ("nbCycle"):
							initparameterlist[2]=strcompress(par2)			
						elif strcompress(par1)	 in ("outerFOVclean"):
							initparameterlist[3]=strcompress(par2)				
						elif strcompress(par1)	 in ("VLSSuse"):
							initparameterlist[4]=strcompress(par2)			
						elif strcompress(par1)	 in ("annulusRadius"):
							initparameterlist[5]=strcompress(par2)			
						elif strcompress(par1)	 in ("startResolution"):
							initparameterlist[6]=strcompress(par2)				
						elif strcompress(par1)	 in ("endResolution"):
							initparameterlist[7]=strcompress(par2)				
						elif strcompress(par1)	 in ("resolutionVector"):
							initparameterlist[8]=strcompress(par2)				
						elif strcompress(par1)	 in ("mask"):
							initparameterlist[9]=strcompress(par2)							
						elif strcompress(par1)	 in ("UVmin"):
							initparameterlist[10]=strcompress(par2)				
						elif strcompress(par1)	 in ("startingFactor"):
							initparameterlist[11]=strcompress(par2)					
						elif strcompress(par1)	 in ("FOV"):
							initparameterlist[12]=strcompress(par2)				
						elif strcompress(par1)	 in ("skyModel"):
							initparameterlist[13]=strcompress(par2)	
						elif strcompress(par1)	 in ("nofPixelPerBeam"):
							initparameterlist[14]=strcompress(par2)			
						elif strcompress(par1)	 in ("robust"):
							initparameterlist[15]=strcompress(par2)		
						elif strcompress(par1)	 in ("maskDilatation"):
							initparameterlist[16]=strcompress(par2)				
																																																			
						else:
								print("Option {} Unknown".format(par1))
								sys.exit(2)

								
				# Check parameters		
				if initparameterlist[0] == "none" or initparameterlist[1] == "none":
					print ""
					print "MISSING Parameters:"
					print "--obsDir= --outputDir="	
					print ""
					print "Usage: selfcal.py PATH/parsetFile"
					print 'OR'
					print "Usage: selfcal.py --obsDir= --outputDir= [Options: --skyModel= --nbCycle= --outerFOVclean= --VLSSuse= --annulusRadius= --startResolution= --endResolution= --resolutionVector= --mask= --UVmin= --startingFactor= --FOV= --nofPixelPerBeam= --robust= --maskDilatation=]\n"				
					print ""
					sys.exit(2)       	
						
						
				
  
  
  
  

		  
 		
 	return initparameterlist 



########################################################################
# Main Program
########################################################################


# Function to clean empty space in the parset file
def strcompress(mystring):
		mystring_compressed = ''.join(mystring.split())
		return mystring_compressed
    


if __name__=='__main__':
  

    tstart=time.time()
  
	
	####################################################################
    # 1a) Inputs Iniatilzation using opts
	####################################################################

	
    initparameterlist=range(17)
    
    initparameterlist[0]	= "none"	# Observation Directory
    initparameterlist[1]	= "none"	# Output Directory
    initparameterlist[2]	= "none"	# Number Of cycle for the selfcal loop
    initparameterlist[3]	= "none"	# outerFOVclean parameter => yes or no
    initparameterlist[4]	= "none"	# VLSSuse parameter => yes or no    
    initparameterlist[5]	= "none"	# annulusRadius => in degree 
    initparameterlist[6]	= "none"	# startResolution
    initparameterlist[7]	= "none"	# endResolution
    initparameterlist[8]	= ["none"]	# resolutionVector
    initparameterlist[9]	= "none"	# mask             
    initparameterlist[10]	= "none"	# UVmin
    initparameterlist[11]	= "none"	# startingFactor
    initparameterlist[12]	= "none"	# FOV
    initparameterlist[13]	= "none"	# skyModel path     
    initparameterlist[14]	= "none"	# nofPixelPerBeam
    initparameterlist[15]	= "none"	# robust param   
    initparameterlist[16]	= "none"	# mask Dilatation param  
     
        
    # Read and check parameters	
    initparameterlist = main(initparameterlist)

    obsDir			= initparameterlist[0]
    outputDir		= initparameterlist[1]
    nbCycle			= initparameterlist[2]
    nIteration		= 1000000    
    outerFOVclean	= initparameterlist[3]
    VLSSuse			= initparameterlist[4]
    annulusRadius	= initparameterlist[5]
    startResolution	= initparameterlist[6]
    endResolution	= initparameterlist[7]
    
    resolutionVector= initparameterlist[8]   
    if resolutionVector != ['none']:
		resolutionVector= resolutionVector.split(',')		
   
    mask			= initparameterlist[9]
    UVmin			= initparameterlist[10]
    startingFactor	= initparameterlist[11]
    FOV				= initparameterlist[12]
    skyModel		= initparameterlist[13]
    nofPixelPerBeam	= initparameterlist[14]
    robust			= initparameterlist[15]
    maskDilatation	= initparameterlist[16]


	####################################################################
	# 2) Check conflicting values
	####################################################################

    
    # startResolution
    if startResolution != 'none':
		    try:
				  startResolution = float(startResolution)     
		    except:
				  print ""
				  print "startResolution parameter must be a float or not provided !"
				  print ""
				  sys.exit(2)    
				  
		    try:
				  endResolution = float(endResolution)     
		    except:
				  print ""
				  print "endResolution parameter must be a float or not provided !"
				  print ""
				  sys.exit(2)
				  
		    if resolutionVector != ['none']:
				  print ''
				  print 'PARAMETERS CONFLICT, startResolution and resolutionVector parameters must not be provided together, if startResolution is provided'
				  print ""
				  sys.exit(2)				   								      				  

		    if startingFactor != 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, startResolution and startingFactor parameters must not be provided together, if startResolution is provided'
				  print ""
				  sys.exit(2)	

    # endResolution
    if endResolution != 'none':  
				  
		    try:
				  endResolution = float(endResolution)     
		    except:
				  print ""
				  print "endResolution parameter must be a float or not provided !"
				  print ""
				  sys.exit(2)
				  
		    if resolutionVector != ['none']:
				  print ''
				  print 'PARAMETERS CONFLICT, endResolution and resolutionVector parameters must not be provided together, if endResolution is provided'
				  print ""
				  sys.exit(2)	


    # resolutionVector
    if resolutionVector != ['none']:
		    
		    if type(resolutionVector) != type(list()):
				print ''
				print 'bad conversion of resolutionVector parameter. Must be provided like: --resolutionVector=x1,x2,x3...xn'
				print ''
				sys.exit(2)		    
				  
		    try:
				  for i in range(len(resolutionVector)):
							resolutionVector[i] = float(resolutionVector[i])
							if i != 0: 
								if resolutionVector[i-1] < resolutionVector[i]:
									print ''
									print 'resolutionVector must be in a decrease order !!'
									print ''
									sys.exit(2)
								
		    except:
				  print ""
				  print "If resolutionVector parameter is provided. It must be a a list of FLOAT or INTEGER  !"
				  print ""
				  sys.exit(2)   				  
				  				
		    if startResolution != 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, resolutionVector and startResolution parameters must not be provided together, if resolutionVector is provided'
				  print ""
				  sys.exit(2)	
				  				  
		    if endResolution != 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, resolutionVector and endResolution parameters must not be provided together, if resolutionVector is provided'
				  print ""
				  sys.exit(2)				   								      				  

		    if startingFactor != 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, resolutionVector and startingFactor parameters must not be provided together, if resolutionVector is provided'
				  print ""
				  sys.exit(2)	    


    # startingFactor
    if startingFactor != 'none':
		    try:
				  startingFactor = float(startingFactor)     
		    except:
				  print ""
				  print "startingFactor parameter must be a float or not provided !"
				  print ""
				  sys.exit(2)    
				  
		    if startResolution != 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, startingFactor and startResolution parameters must not be provided together, if startingFactor is provided'
				  print ""
				  sys.exit(2)	
			  
		    if resolutionVector != ['none']:
				  print ''
				  print 'PARAMETERS CONFLICT, startingFactor and resolutionVector parameters must not be provided together, if startingFactor is provided'
				  print ""
				  sys.exit(2)				   								      				  

	# Skymodel conflict
    if skyModel !='none' and VLSSuse!= 'none':
				  print ''
				  print 'PARAMETERS CONFLICT, skyModel and VLSSuse parameters must not be provided together !\nREMINDER:\nVLSSuse=yes => use VLSS catalogue for initial calibration\nVLSSuse=no  => use a LOFAR low resolution skymodel for initial calibration\nskymodel=PATH/file => use your own skymodel for initial calibration'
				  print ''
				  sys.exit(2)			



	####################################################################
	# 3) Initialize default values
	####################################################################


    if resolutionVector != ['none']:
			nbCycle=len(resolutionVector)
			if nbCycle < 1:
				print ''
				print 'resolutionVector must contains at least 3 components !!'
				print ''
				sys.exit(2)
					
    else:
		if nbCycle == 'none':
			nbCycle=10
				
		
    if outerFOVclean == 'none':
		outerFOVclean='no'
		
    if VLSSuse == 'none':
		VLSSuse='yes'
	
    if annulusRadius == 'none':
		annulusRadius=1.0
		
    if UVmin == 'none':
		UVmin= 0.0		

    if mask == 'none':
		mask='yes'
		if maskDilatation == 'none':
			maskDilatation = 0
		
    if startingFactor == 'none':
		startingFactor=15.0

    if FOV == 'none':
		FOV=5.0

    if nofPixelPerBeam == 'none':
		nofPixelPerBeam=4.0



	####################################################################
	# 4) Check parameters values (check contradiction between parameters)
	####################################################################

		
    if startResolution <= endResolution and startResolution != 'none' and endResolution != 'none':
		print ''
		print 'The startResolution must be greater than the endResolution parameter' 
		print ""
		sys.exit(2) 			
		

    if outerFOVclean != 'yes' and  outerFOVclean!= 'no' and   outerFOVclean!= 'none': 
		print ''
		print 'outerFOVclean parameter must be equal to yes or no or not provided !' 
 		print ""
		sys.exit(2) 
 

    if VLSSuse != 'yes' and VLSSuse != 'no' and   VLSSuse!= 'none': 
		print ''
		print 'VLSSuse parameter must be equal to yes or no or not provided !' 
 		print ""
		sys.exit(2) 


    if  mask!= 'yes' and  mask!= 'no' and  mask != 'none': 
		print ''
		print 'mask parameter must be equal to yes or no or not provided !' 
 		print ""
		sys.exit(2)
		
    if  maskDilatation < 0: 
		print ''
		print 'maskDilatation parameter must be equal or greater to 0 !' 
 		print ""
		sys.exit(2)
	
		
				
	####################################################################
	# 5) Check parameters format
	####################################################################
  
    
    try:
	      nbCycle = int(nbCycle)     
    except:
	      print ""
	      print "nbCycle parameter must be an integer or not provided !"
	      print ""
	      sys.exit(2)


    try:
	      outerFOVclean = str(outerFOVclean)     
    except:
	      print ""
	      print "outerFOVclean parameter must be a string or not provided !"
	      print ""
	      sys.exit(2)


    try:
	      VLSSuse = str(VLSSuse)     
    except:
	      print ""
	      print "VLSSuse parameter must be a string or not provided !"
	      print ""
	      sys.exit(2)


    try:
	      annulusRadius = float(annulusRadius)     
    except:
	      print ""
	      print "annulusRadius parameter must be a float or not provided !"
	      print ""
	      sys.exit(2)


    try:
	      mask = str(mask)     
    except:
	      print ""
	      print "mask parameter must be a string or not provided !"
	      print ""
	      sys.exit(2)

    try:
	      maskDilatation = int(maskDilatation)     
    except:
	      print ""
	      print "maskDilatation parameter must be an integer or not provided !"
	      print ""
	      sys.exit(2)


    try:
	      FOV = float(FOV)     
    except:
	      print ""
	      print "FOV parameter must be a float or not provided !"
	      print ""
	      sys.exit(2)
	
	      
    try:
	      UVmin = float(UVmin)     
    except:
	      print ""
	      print "UVmin parameter must be a float or not provided !"
	      print ""
	      sys.exit(2)	      


    try:
	      nofPixelPerBeam = float(nofPixelPerBeam)     
    except:
	      print ""
	      print "nofPixelPerBeam parameter must be a float or not provided !"
	      print ""
	      sys.exit(2)
	      
    
    if  robust != "none": 	      
		try:
			  robust = float(robust)
			  print robust
			       
		except:	      
			  print ""
			  print "robust parameter must be a float or not provided !"
			  print ""
			  sys.exit(2)
	      
		if float(robust) <= -2.0 or float(robust) >= 2.0:
			  print ""
			  print "robust parameter must be in the interval: [-2;2]"
			  print ""
			  sys.exit(2)
			  
		else:
			  robust = float(robust)						 	      
	      
	
	      	      
	####################################################################
    # 6) Check values 
	####################################################################
   
    
    if resolutionVector == ['none']:
		if nbCycle <1:
			nbCycle = 1
			print ''
			print 'The number of cycle must be greater or equal to 5 and lower or equal to 20'
			print 'The value of the number of cycle has been automatiquely changed to %s.\n'%(nbCycle)
			print ''
			
		if nbCycle >20:
			nbCycle = 20		
			print ''
			print 'The number of cycle must be greater or equal to 5 and lower or equal to 20'
			print 'The value of the number of cycle has been automatiquely changed to %s.\n'%(nbCycle)
			print ''
    
    else:
			print ''
			print 'The number of cycle is defined in priority by the size of the resolutionVector'
			print 'The value of the number of cycle has been automatiquely changed to %s.\n'%(nbCycle)
			print ''    		
    
    
	####################################################################
    # 7) Warnings
	####################################################################
 
    
    # WARNINGS on the obsDir 
    if obsDir[-1] != '/':
		obsDir = obsDir+'/'
	
    if os.path.isdir(obsDir) != True:
		print ''
		print "The observation directory do not exists ! Check it Please."
		print ""
		sys.exit(2)  
   
   
    # WARNINGS on the outputDir 
    if outputDir[-1] != '/':
		outputDir = outputDir+'/'
	
    if os.path.isdir(outputDir) != True:
		cmd="""mkdir -p %s"""%(outputDir)
		os.system(cmd)
		print ""
		print "The output directory do not exists !\n%s has been created"%(outputDir)
		print ""
		


    # WARNINGS on the outputDir 
    if outerFOVclean == 'yes':
		preprocessDir	= '%sPreprocessDir/'%(outputDir)
		cmd="""mkdir -p %s"""%(preprocessDir)
		os.system(cmd)
		print ''
		print 'The PreProcess directory: %s\nhas been created'%(preprocessDir)
		print ''

		preprocessImageDir	= '%sImage/'%(preprocessDir)
		cmd="""mkdir -p %s"""%(preprocessImageDir)
		os.system(cmd)
		print ''
		print 'The PreProcess Image directory: %s\nhas been created'%(preprocessImageDir)
		print ''
	
		preprocessSkymodelDir	= '%sSkymodel/'%(preprocessDir)
		cmd="""mkdir -p %s"""%(preprocessSkymodelDir)
		os.system(cmd)
		print ''
		print 'The PreProcess Skymodel directory: %s\nhas been created'%(preprocessSkymodelDir)
		print ''	
	
		preprocessBBSDir	= '%sBBS-Dir/'%(preprocessDir)
		cmd="""mkdir -p %s"""%(preprocessBBSDir)
		os.system(cmd)
		print ''
		print 'The PreProcess BBS directory: %s\nhas been created'%(preprocessSkymodelDir)
		print ''
	
		
    # WARNINGS on the Skymodel file
    if skyModel != 'none':    
		if os.path.isfile(skyModel) != True:
			print ''
			print "The path to the skyModel parameter do not exists ! Check it Please."
			print ""
			sys.exit(2)     
	
	
	####################################################################
    ## End of parameters initialization and checks up
	####################################################################

	####################################################################
    # 7b) Paramters Overview
	####################################################################
    
    print '############################################################'
    print ' 			PARAMETERS OVERVIEW                            '
    print '############################################################'
	print ''
	print 'obsDir = %s'%(obsDir)
	print ''
	print 'outputDir = %s'%(outputDir)	
	print ''
	print 'nbCycle = %s'%(nbCycle)	
	print ''
	print 'outerFOVclean = %s'%(outerFOVclean)	
	print ''
	print 'VLSSuse = %s'%(VLSSuse)
	print ''
	print 'annulusRadius = %s'%(annulusRadius)	
	print ''
	print 'startResolution = %s'%(startResolution)	
	print ''
	print 'endResolution = %s'%(endResolution)
	print ''
	print 'resolutionVector = %s'%(resolutionVector)
	print ''
	print 'mask = %s'%(mask)
	print ''
	print 'UVmin = %s'%(UVmin)
	print ''
	print 'startingFactor = %s'%(startingFactor)
	print ''
	print 'FOV = %s'%(FOV)
	print ''
	print 'skyModel = %s'%(skyModel)
	print ''
	print 'nofPixelPerBeam = %s'%(nofPixelPerBeam)
	print ''
	print 'robust = %s'%(robust)
	print ''
	print 'maskDilatation = %s'%(maskDilatation)	
	print ''		
    print '############################################################'

	####################################################################
    # 8) Main code started Now !!!!
	####################################################################


	####################################################################
	# 9) Extract global observation characteristics and check data integrity 
	####################################################################
      
    
    print ''
    print '############################################################'
    print 'Start Observation directory global parameters determination'
    print '############################################################'
    print ''

  
    # Observation Directory Parameter determination
    obsPar_Obj																												= class_obsparMergedData.observationMergedDataParam(obsDir,UVmin)
    listFiles,Files,NbFiles,nbChan,frequency,maxBaseline,integTimeOnechunk,observationIntegTime,UVmin,ra_target,dec_target	= obsPar_Obj.obsParamMergedDataFunc()    


    tstop=time.time()
    timeDuration=tstop-tstart	
    
    print ''
    print '############################################################'
    print 'End Observation directory global parameters determination'
    print 'Time ellapsed: %s seconds'%(timeDuration)
    print '############################################################'
    

 
	####################################################################
	# 10) Pre-processing phase (if required: outerFOVclean=yes)
	####################################################################
   
    
    initNofAnnulusSources	= 1000
    nb_annulus				= 1000 
    preprocessIndex			= 0
    

    if outerFOVclean =='yes':


			tstop=time.time()
			timeDuration=tstop-tstart	

    
			print ''
			print '####################################################'
			print 'Start Observation Preprocessing'
			print 'Time ellapsed: %s seconds'%(timeDuration)	
			print '####################################################'
			print ''
			 
			# index for iteration cleaning
			i = 0
		  
			while (nb_annulus > 0.1*initNofAnnulusSources):
				
					# Observation Directory Parameter determination
					obsPreprocess_Obj	= class_obsPreprocessing.obsPreprocessing(obsDir,preprocessDir,preprocessImageDir,preprocessSkymodelDir,preprocessBBSDir,i,listFiles,Files,NbFiles,frequency,UVmin,nIteration,ra_target,dec_target,initNofAnnulusSources,annulusRadius,FOV)


					print '############################################'
					print 'Start Imaging Preprocessing at step %s'%(i)
					print 'Time ellapsed: %s seconds'%(timeDuration)	
					print '############################################'
					print ''
					  
					  
					obsPreprocess_Obj.obsPreprocessImagingFunc()    
					
					
					print '############################################'
					print 'End Imaging Preprocessing at step %s, and Start Source Extraction at step %s'%(i,i)
					print 'Time ellapsed: %s seconds'%(timeDuration)	
					print '############################################'
					print ''					
					
					
					obsPreprocess_Obj.obsPreprocessSrcExtractionFunc()				
					
					initNofAnnulusSources,nb_annulus	= obsPreprocess_Obj.obsPreprocessAnnulusExtractionFunc()
					
					if nb_annulus > 0:
					
							print '####################################'
							print ''
							print 'At step %s: Init source annulus:%s and now we have in the annulus %s'%(i,initNofAnnulusSources,nb_annulus)
							print ''
							print '####################################'
							print ''
							print '####################################'
							print 'End Source Extraction at step %s and Start BBS annulus substraction at step %s and NDPPP'%(i,i)
							print 'Time ellapsed: %s seconds'%(timeDuration)	
							print '####################################'
							print ''					
							
							
							obsPreprocess_Obj.obsPreprocessCreateBBSFunc()
							
							preprocessIndex	= i
							i = i+1


							print '####################################'
							print 'End Start BBS annulus substraction at step %s and NDPPP'%(i)
							print 'END OF STEP %s'%(i)
							print 'Time ellapsed: %s seconds'%(timeDuration)	
							print '####################################'
							print ''					

					else:
						
							initNofAnnulusSources	= 1000
							nb_annulus				= 1
							

						
					# no need to substract again with number of sources less than 20 	
					if initNofAnnulusSources < 20:
						
							initNofAnnulusSources	= 1000
							nb_annulus				= 1
							outerFOVclean			= 'no'

			tstop=time.time()
			timeDuration=tstop-tstart	
			
			print ''
			print '####################################################'
			print 'End Observation Preprocessing'
			print 'Time ellapsed: %s seconds'%(timeDuration)
			print '####################################################'
			print ''
			
    else: 
			print ''
			print '####################################################'
			print 'No preprocessing has been requested by the user, Start selfcal parameter determination'
			print '####################################################'
			print ''
    



	####################################################################
	# 11) Global parameters determination (preparation phase)
	####################################################################
     
     
    print ''
    print '############################################################'
    print 'Start Determination of Selfcal parameters'
    print '############################################################'
    print ''  	
	

    # selfcal parameters determination
    selfCalParam_Obj																								= class_selfcalparam.selfCalParam(obsDir,outputDir,listFiles,Files,NbFiles,nbChan,frequency,maxBaseline,integTimeOnechunk,observationIntegTime,nbCycle,ra_target,dec_target,outerFOVclean,VLSSuse,preprocessIndex,FOV,nofPixelPerBeam,startResolution,endResolution,resolutionVector,startingFactor,robust,skyModel,UVmin)
    ImagePathDir,pixsize,nbpixel,robust,UVmax,wmax,SkymodelPath,GSMSkymodel,RMS_BOX,RMS_BOX_Bright,BBSParset,thresh_isl,thresh_pix	= selfCalParam_Obj.selfCalParamFunc()
	
    tstop=time.time()
    timeDuration=tstop-tstart	
	
    print ''
    print '############################################################'
    print 'End Determination of Selfcal parameters'
    print 'Time ellapsed: %s seconds'%(timeDuration)
    print '############################################################'
    print ''    


    
    
	####################################################################
	# 12) Start the Selfcal loop
	####################################################################

    
    print ''
    print '############################################################'
    print 'Start Selfcal Computation'
    print '############################################################'
    print ''  
        
    k		= range(nbCycle)
     
    
    for i in k:
		
			# Define a step process for using a mask
			# 0: Initial (generate mask if needed)
			# 1: cleaning with mask and extract the catalog
			
			
			# 0: Initial (generate mask if needed)
			stepProcess = 0
			
			tstop=time.time()
			timeDuration=tstop-tstart		
			
			print ''
			print '####################################################'
			print 'Start Selfcal Cycle %s on %s'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
			print ''
			 
			
			# Selfcal Initialization
			selfCalRun_Obj	= class_selfcalrun.selfCalRun(i,obsDir,outputDir,nbCycle,listFiles,Files,NbFiles,BBSParset,SkymodelPath,GSMSkymodel,ImagePathDir,UVmin,UVmax,wmax,pixsize,nbpixel,robust,nIteration,RMS_BOX,RMS_BOX_Bright,thresh_isl,thresh_pix,outerFOVclean,VLSSuse,preprocessIndex,mask,maskDilatation)
			
			
			# Run the BBS-cal on each Time chunks
			selfCalRun_Obj.selfCalRunFuncCalibBBSNDPPP()
			
			
			tstop=time.time()
			timeDuration=tstop-tstart		

			print ''
			print '####################################################'
			print 'BBS and NDPPP at Cycle %s on %s is finished'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
			print ''
			
			
			#Concatenate in time and imaging 
			selfCalRun_Obj.selfCalRunFuncImaging(stepProcess)


			tstop=time.time()
			timeDuration=tstop-tstart		

			print ''
			print '####################################################'
			print 'Image at Cycle %s on %s has been generated'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
			print ''
			
			
			#Extract the skymodel
			selfCalRun_Obj.selfCalRunFuncSrcExtraction(stepProcess)
			
			
			tstop=time.time()
			timeDuration=tstop-tstart	
			
			print ''
			print '####################################################'
			print 'End Selfcal Cycle %s on %s, model extraction is done (if no mask)'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
			print''		
			
			
			
			if mask == 'yes':

					# 1: cleaning with mask and extract the catalog
					stepProcess = 1


					tstop=time.time()
					timeDuration=tstop-tstart

					print ''
					print '############################################'
					print 'Start Imaging with mask: Cycle %s on %s'%(i,nbCycle-1)
					print 'Time ellapsed: %s seconds'%(timeDuration)		
					print '############################################'
					print ''
					
					
					# Imaging with mask 
					selfCalRun_Obj.selfCalRunFuncImaging(stepProcess)					
					

					tstop=time.time()
					timeDuration=tstop-tstart
					
					print ''
					print '############################################'
					print 'End Imaging with mask: Cycle %s on %s'%(i,nbCycle-1)
					print 'Time ellapsed: %s seconds'%(timeDuration)		
					print '############################################'
					print ''
					
					
					# Extract the skymodel
					selfCalRun_Obj.selfCalRunFuncSrcExtraction(stepProcess)


					tstop=time.time()
					timeDuration=tstop-tstart
					
					print ''
					print '############################################'
					print 'End Selfcal (with mask) Cycle %s on %s, model extraction is done'%(i,nbCycle-1)
					print 'Time ellapsed: %s seconds'%(timeDuration)		
					print '############################################'
					print ''										
				
			

    tstop=time.time()
    timeDuration=tstop-tstart
    

	####################################################################
	# 13) Start the final cycle
	####################################################################

    print ''
    print '##############################################'
    print 'Start Final Image Computation'
    print 'Time ellapsed: %s seconds'%(timeDuration)
    print '##############################################'   
    print ''    
    
    
    # Define a step process for using a mask
    # 0: Initial (generate mask if needed)
    # 1: cleaning with mask and extract the catalog
			
			
    # 0: Initial (generate mask if needed)
    stepProcess = 0    
      
    # Iniatialization (Object creation)
    i=nbCycle	
    selfCalRun_Obj	= class_selfcalrun.selfCalRun(i,obsDir,outputDir,nbCycle,listFiles,Files,NbFiles,BBSParset,SkymodelPath,GSMSkymodel,ImagePathDir,UVmin,UVmax,wmax,pixsize,nbpixel,robust,nIteration,RMS_BOX,RMS_BOX_Bright,thresh_isl,thresh_pix,outerFOVclean,VLSSuse,preprocessIndex,mask,maskDilatation)
	
    
    # Run the BBS-cal on each Time chunks
    selfCalRun_Obj.selfCalRunFuncCalibBBSNDPPP()	
    
    
    tstop=time.time()
    timeDuration=tstop-tstart		
    
    print ''
    print '############################################################'
    print 'BBS and NDPPP at Final Cycle %s is finished'%(nbCycle)
    print 'Time ellapsed: %s seconds'%(timeDuration)		
    print '#############################################################'
    print ''    
    
    
    #Concatenate in time and imaging 
    selfCalRun_Obj.selfCalRunFuncImaging(stepProcess)


    tstop=time.time()
    timeDuration=tstop-tstart	    
    
    print ''
    print '############################################################'
    print 'Image (without mask) at Final Cycle %s has been generated'%(nbCycle)
    print 'Time ellapsed: %s seconds'%(timeDuration)		
    print '############################################################'
    print ''	    
 
    
    # Extract the skymodel
    selfCalRun_Obj.selfCalRunFuncSrcExtraction(stepProcess)


    tstop=time.time()
    timeDuration=tstop-tstart	     
    
    print ''
    print '############################################################'
    print 'End Selfcal (without mask) Final Cycle %s, model extraction is done'%(nbCycle)
    print 'Time ellapsed: %s seconds'%(timeDuration)		
    print '############################################################'
    print ''	    

    if mask == 'yes':

			# 1: cleaning with mask and extract the catalog
			stepProcess = 1

			timeDuration=tstop-tstart

			print ''
			print '####################################################'
			print 'Start Imaging with mask: Cycle %s on %s'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
					
					
			# Imaging with mask 
			selfCalRun_Obj.selfCalRunFuncImaging(stepProcess)					
					

			tstop=time.time()
			timeDuration=tstop-tstart
					
			print ''
			print '####################################################'
			print 'End Imaging with mask: Cycle %s on %s'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'
					
					
			# Extract the skymodel
			selfCalRun_Obj.selfCalRunFuncSrcExtraction(stepProcess)


			tstop=time.time()
			timeDuration=tstop-tstart
					
			print ''
			print '####################################################'
			print 'End Selfcal (with mask) Cycle %s on %s, model extraction is done'%(i,nbCycle-1)
			print 'Time ellapsed: %s seconds'%(timeDuration)		
			print '####################################################'



	####################################################################
	# 14) End of Selfcal process, write final time infos
	####################################################################
    
    
    print ''
    print '##############################################'
    print 'End of Final Image Computation'
    print '##############################################\n' 		
		

    print ''
    print '##############################################'
    print 'End Selfcal Computation'
    print '##############################################\n' 

    tstop=time.time()
    timeDuration=tstop-tstart
    
    print ''
    print '##############################################'
    print 'Self-Calibration is finished'
    print 'Time ellapsed: %s seconds'%(timeDuration)
    print '##############################################'   
    print ''
