#!/bin/sh

showhelp() 
{
  echo ''
  echo ' cexecms runs a command on cluster nodes for files matching'
  echo ' the given file name glob pattern.'
  echo ''
  echo ' usage:'
  echo '    cexecms [-c cluster] command nameglob [arg1 arg2 ...]'
  echo ''
  echo '      -c cluster    cluster name as defined for cexec'
  echo '                    default is lce:'
  echo '      command       command to be executed remotely'
  echo '                    Quotes are needed if it contains spaces, etc.'
  echo '      nameglob      file name glob pattern (# is a shorthand for [0-9])'
  echo '                    E.g., one can use SB### for any subband'
  echo '      arg1 arg2 ..  Optional extra arguments given to the command'
  echo ''
  echo ' Using cexec, the script cexecms-part is executed on the given cluster'
  echo ' nodes. It looks for files matching the given file name glob pattern.'
  echo ' The given command will be executed for each matching file name.'
  echo ' The actual file name can be made part of the command using:'
  echo '     :FILENAME: or :FN:  for the full file name'
  echo '     :BASENAME: or :BN:  for the basename part'
  echo '     :DIRNAME:  or :DN:  for the directory part'
  echo ' The first two can be followed by a . (e.g. :FN.:) meaning that the'
  echo ' basename is used till the first dot (thus the extension is removed.)'
  echo ' If no substitutions have been done, the command is executed like'
  echo '     command filename arg1 arg2 ...'
  echo ' otherwise like'
  echo '     command arg1 arg2...'
  echo ''
  echo ' For example:'
  echo '   cexecms "ls -d" "/data/scratch/pipeline/L2011_22663/*"'
  echo ' is a trivial example and could also be done with cexec. Note that'
  echo '   cexecms "ls -d :FN:" "/data/scratch/pipeline/L2011_22663/*"'
  echo ' is doing the same.'
  echo ' The following example is more elaborate and creates a _sel.MS table'
  echo ' in another directory for each MS of subband 000 till 099.'
  echo '   cexecms "taql '"'"'select from :FN: where ANTENNA1 in [0,1,2]'
  echo '                 giving /data/scratch/diepen/:BN.:_sel.MS'"'"'"'
  echo '           "/data/scratch/pipeline/L2011_22663/*SB0##*"'
  echo ''
  echo ' Note that the current environment (paths, etc.) is copied. You should'
  echo ' have done "use LofIm" if you need LofIm in the (remote) command.'
  echo ''
}

if test $# -lt 2; then
    showhelp
    exit 1
fi
cluster="lce:"
if test "$1" = "-c"; then
    shift
    cluster="$1"
    shift
fi
if test $# -lt 2; then
    showhelp
    exit 1
fi
command="$1"
shift
nameglob="$1"
shift

# Find all PATH and ROOT variables and store in a file with the pid in its name.
envfile=$HOME/${USER}-$$.env
grex='[^=]*(PATH|ROOT|APS_LOCAL)'
printenv | egrep "^$grex=" | sed -e "s/^\([^=]*\)=\(.*\)/\1='\2'; export \1/;" > $envfile

# Execute on all compute nodes.
# cexec does not keep quotes around the command, so substitute all shell
# characters like space and brackets.
commandnew=`echo "$command" | sed \
    -e 's% %:SPACE:%g' \
    -e 's%<%:LT:%g' \
    -e 's%>%:GT:%g' \
    -e 's%(%:LPAR:%g' \
    -e 's%)%:RPAR:%g' \
    -e 's%{%:LBRACE:%g' \
    -e 's%}%:RBRACE:%g' \
    -e 's%\\[%:LBRACKET:%g' \
    -e 's%]%:RBRACKET:%g' \
    -e 's%|%:VBAR:%g' \
    -e 's%&%:AMPERSAND:%g' \
    -e 's%\\*%:ASTERIX:%g' \
    -e 's%!%:NOT:%g' \
    -e 's%#%:HASH:%g' \
    -e 's%~%:TILDE:%g' \
    -e 's%,%:COMMA:%g' \
    -e 's%\\?%:QMARK:%g' \
    -e 's%;%:SEMICOLON:%g' \
    -e 's%"%:DQUOTE:%g' \
    -e "s%'%:SQUOTE:%g" \
    -e 's%\\$%:DOLLAR:%g'`

cexec $cluster cexecms-part -e "$envfile" "'$commandnew'" "$nameglob" "$@"
rm -f "$envfile"
