
      I/O to MeasurementSet
      
0.  Note the two distinct concepts:

    * MS columns: AIPS++ table columns as you know them

    * VisTile (tile) columns: columns of the VisTile object. These are abstract
      & independent of the MS. Current tile columns are DATA, PREDICT and
      RESIDUALS. All three columns are optional.
      
    The system in effect does double mapping on each side:
    
    MS column --[via input agent]--> tile column --[via Spigot]--> MeqVellSets
    
    MeqvellSets --[via Sink]--> tile column --[via output agent]--> MS column

1.  Make sure meqserver is started with option "-meq:M:M:MeqServer" (see
    meqserver constructor). This ties the inputs and outputs of the MeqServer
    app to an MS agent.

2.  Initialize the meqserver as follows: 

    mqs.init([output_col="PREDICT"],
              output=[write_flags=F,predict_column='MODEL_DATA'],
              wait=T);

    output_col tells the server what output columns to initialize in the tiles.
    This should match the output column of the Sink (see below).
    
    The 'output' record  configures the MS output agent. The three optional
    fields are data_column, predict_column and residuals_column. The presense
    of one of these fields will cause the corresponding tile column to be
    mapped to the named MS column. E.g. 'DATA', "MODEL_DATA", etc. New columns
    can be inserted, but this does not work properly as of 12/16/03.

3.  The 'input' record. This is passed to meqserver to start reading an MS:

    inputrec := [ 
      ms_name = 'test.ms',
      data_column_name = 'DATA',
      tile_size = 5,
      selection = [=]  ];
    mqs.init(input=inputrec); 
    
    data_column_name maps an MS column to the DATA column of the tile.
    
    tile_size determines the tile size (and therefore domain size),  
    in # timeslots.
    
    selection can be used to apply a selection to the MS. It can contain the
    following fields:
    
      channel_start_index   first channel (1-based)
      channel_end_index     last channel (1-based) 
      ddid_index            DATA_DESCRIPTION_ID (default: 1)
      field_index           FIELD_ID (default: 1)
      selection_string      any TaQL string 
    
4.  Configuring Spigots:

    station_1_index, station_2_index: station indices (1-based)

    input_col: one of "DATA" (default), "PREDICT", "RESIDUALS". Maps tile
    column to Spigot result.
    
5.  Configuring Sinks:

    station_1_index, station_2_index: station indices (1-based)

    output_col: one of "DATA", "PREDICT", "RESIDUALS", or empty (default). Maps
    result of Sink's child to an output tile column. If empty, then tile is
    not modified.


Example:

  # initialize meqserver
  mqs.init([output_col="PREDICT"],
      output=[write_flags=F,predict_column='MODEL_DATA'],
      wait=T);
  #    
  # ...
  # create spigot (note! for now, a spigot MUST be created first)
  spigrec1 := meqnode('MeqSpigot','spigot1');
  spigrec1.input_col := 'DATA';
  spigrec1.station_1_index := 1;
  spigrec1.station_2_index := 2;
  mqs.meq('Create.Node',spigrec1);
  #
  # ...
  # create sink
  sinkrec := meqnode('MeqSink','sink1',children="compare");
  sinkrec.output_col := 'PREDICT'; 
  sinkrec.station_1_index := 1;
  sinkrec.station_2_index := 2;
  mqs.meq('Create.Node',sinkrec);

  # ...
  inputrec := [ ms_name = 'test.ms',data_column_name = 'DATA',tile_size=5,
                selection = [=]  ];
  mqs.init(input=inputrec); 
  
  
This ties MS column DATA to tile column DATA to input of spigot, and
output of sink to tile column PREDICT to MS column MODEL_DATA.


  

