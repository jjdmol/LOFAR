#!/usr/bin/ksh
#
# genLCScode
#
# Generates DTL code for storing/saving an object to a database
# Uses a .map file to lookup the references and a .fun file
# for looking up the routines that should be generated
#
# Syntax: genDTL mapfile functionfile R|P [class]
#
# $Id$
#
VERSION="v1.0"

#
# RECaddBCA class
#
RECaddBCA()
{
	Class=$1
	
	echo "// The ${Class}_BCA structure 'binds' the database columns"
	echo "// to the members of the ${Class} class."
	echo "class ${Class}_BCA {"
	echo "public:"
	echo "	void operator()(BoundIOs& cols, ${Class}& rowbuf) {"
	# get all 'basic' members of the class
	grep ^$Class ${MAPWRKFILE} | grep "::" | while read line
	do
		ColName=`echo $line | cut -d":" -f5`
		Member=`echo $line | cut -d":" -f4`
		echo "		cols[\"${ColName}\"]	== rowbuf.${Member};"
	done
	echo "	}"
	echo "};\n"
}

#
# RECaddInsertRoutine class 
#
RECaddInsertRoutine()
{
	Class=$1
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	echo "//"
	echo "// Routine for insert this ${Class} object in the database."
	echo "//"
	echo "void insert_${Class}(${Class}&	insRec) {"
	echo "	DBView<${Class}>	insView(\"${Table}\", ${Class}_BCA());"
	echo "	DBView<${Class}>::insert_iterator	insIter = insView;\n"

	echo "	*insIter = *insRec;"
	echo "}\n"
}

#
# RECaddSearchRoutine class clause
#
RECaddSearchRoutine()
{
	Class=$1
	Clause=$2
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	echo "vector<${Class}> read_${Class}() {"
	echo "	vector<${Class}> 		results;"
	echo "	DBView<${Class}>			view(\"${Table}\", ${Class}_BCA(),"
	echo "								\"${Clause}\");"
	echo "	DBView<${Class}>::select_iterator	readIter = view.begin();\n"
	echo "	for ( ; readIter != view.end(); ++readIter) {"
	echo "		results.push_back(*readIter);"
	echo "	}"
	echo "	return results;"
	echo "}\n"
}

#
# RECaddUpdateRoutine class clause
#
RECaddUpdateRoutine()
{
	Class=$1
	Clause=$2
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	echo "//"
	echo "// Routine for updating this ${Class} object in the database."
	echo "//"
	echo "void update_${Class}(${Class}&	theRecord) {"
	echo "	DBView<${Class}>			view(\"${Table}\", ${Class}_BCA(),"
	echo "								\"${Clause}\");"
	echo "	DBView<${Class}>::update_iterator	updIter = view;"
	echo ""
	echo "	// update the database"
	echo "	*updIter=*theRecord;"
	echo "}\n"
}

#---------------------- Persistency layer routines ----------------------------

#
# TPOopenNamespace
#
TPOopenNamespace()
{
	echo "namespace LCS {"
	echo "	namespace PL {"
	echo ""
}

#
# TPOcloseNamespace
#
TPOcloseNamespace()
{
	echo "	} // close namespace PL"
	echo "}	// close namespace LCS"
	echo ""
}

#
# TPOcloseSrcFile class
#
TPOcloseSrcFile()
{
	Class=$1

	echo "template class TPersistentObject<${Class}>;"
	echo ""

	TPOcloseNamespace
}

#
# TPOaddGenericStructures
#
# All TPO types have one thing in common: the ObjectId field. Many database
# actions are based on this field, so we define some generic structures that
# may be used by all kind of TPO's
#
TPOaddGenericStructures()
{
	# define a struct with the PO fields and the DataObj fields
	echo "using namespace LCS::PL;"
	echo ""
	echo "// --------------- generic DTL structures -----------------------"
	echo "// The Persistency Layer uses an ObjectID to unique identify"
	echo "// an object. This field can be used in queries to update"
	echo "// or delete an object. Since the ObjectID is the same for"
	echo "// every type of object some generic DTL structs can be defined."
	echo ""
	echo "BEGIN_DTL_NAMESPACE"
	echo ""
	echo "struct Generic_DTL_OID {"
	echo "	ObjectId::oid_t		Oid;"
	echo "};"
	echo ""
	echo "class Generic_OID_BCA {"
	echo "public:"
	echo "	void operator()(BoundIOs& cols, Generic_DTL_OID& rowbuf) {"
	echo "		cols[\"ObjId\"]	== rowbuf.Oid;"
	echo "	}"
	echo "};"
	echo ""
	echo "class Generic_OID_BPA {"
	echo "public:"
	echo "	void operator()(BoundIOs& pos, Generic_DTL_OID& param) {"
	echo "		pos[0]	== param.Oid;"
	echo "	}"
	echo "};"
	echo ""
	echo "struct Generic_DTL_PO_info {"
	echo "	ObjectId::oid_t		Oid;"
	echo "	ObjectId::oid_t		Owner;"
	echo "	SQLTimeStamp		TimeStamp;"
	echo "};"
	echo ""
	echo "class Generic_PO_BCA {"
	echo "public:"
	echo "	void operator()(BoundIOs& cols, Generic_DTL_PO_info& rowbuf) {"
	echo "		cols[\"ObjId\"]		== rowbuf.Oid;"
	echo "		cols[\"Owner\"]	== rowbuf.Owner;"
	echo "		cols[\"ModTime\"]	== rowbuf.TimeStamp;"
	echo "	}"
	echo "};"
	echo ""
	echo "END_DTL_NAMESPACE"
	echo ""
	echo "#endif"
}

#
# TPOaddRoutineRedefinitions class
#
TPOaddRoutineRedefinitions()
{
	Class=$1

	# construct a headerfile for all the methods and members of the TPO
	echo ""
	echo "// Define the TPersistentObject routines for ${Class}."

	cleanlist $FUNFILE | grep ^${Class} | while read theClass theAction rest
	do
		typeset -u theAction=${theAction}
		case $theAction in
		I)	FunctionName="doInsert"		;;
		U)	FunctionName="doUpdate"		;;
		D)	FunctionName="doErase"		;;
		S)	FunctionName="doRetrieve"	;;
		esac

		# Construct function prototype
		if [ ${theAction} == "S" ]; then
			echo -n "Collection<TPersistentObject<${Class}> > TPersistentObject<${Class}>::${FunctionName}("
		else
			echo -n "void TPersistentObject<${Class}>::${FunctionName}("
		fi

		if [ ${ROLLBACKCODE} = true ]; then
			echo "const long			theState,"
		fi

		if [ ${theAction} == "S" ]; then
			echo "							const Query&	query,"
			echo "							int				maxObjects);"
		else
			echo "							MetaData&	mdOwner) const;"
		fi
	done

	echo ""
}

#
# TPOaddClassRedefinition class
#
# When the class has subclasses the whole TPO<X> must be redefined to 
# include members for holding the TPO's of the subclasses.
#
TPOaddClassRedefinition()
{
	Class=$1

	# construct a headerfile for all the methods and members of the TPO
	echo ""
	echo "// Redefine the TPersistentObject class for ${Class}."
	echo "template<>"
	echo "class TPersistentObject<${Class}> : public TPersistentObjectBase<${Class}>"
	echo "{"
	echo "public:"

	echo "	TPersistentObject() : TPersistentObjectBase<${Class}>() {};"
	echo "	explicit TPersistentObject(${Class}&	t) : TPersistentObjectBase<${Class}>(t)"
	# This is where it all about:
	grep ^$Class ${MAPWRKFILE} | grep -v "::" | while read line
	do
		MemberName=`echo $line | cut -d':' -f4`
		echo "	, its${MemberName}TPO(t.${MemberName})"
	done
	echo "{};"

	echo "	~TPersistentObject() {};"
	echo "	static Collection<TPersistentObject<${Class}> >  "
	echo "						retrieve(const Query& query,int maxObjects) "
	echo "		{ return doRetrieve(query, maxObjects); };"
	echo "public:"
	echo "	virtual void doInsert  (MetaData& md) const;"
	echo "	virtual void doUpdate  (MetaData& md) const;"
	echo "	virtual void doErase   (MetaData& md) const;"
	echo "	static Collection<TPersistentObject<${Class}> >  doRetrieve(const Query& query, int maxObjects);"
	echo "private:"

	# This is where it all about:
	grep ^$Class ${MAPWRKFILE} | grep -v "::" | while read line
	do
		MemberType=`echo $line | cut -d':' -f3`
		MemberName=`echo $line | cut -d':' -f4`
		echo "	TPersistentObject<${MemberType}>	its${MemberName}TPO;"
	done

	echo "	void toDatabaseRep(${Class}_DBRep& dest) const;"
	echo "	void fromDatabaseRep(const ${Class}_DBRep &org);"
	echo "};"
	echo ""
}

#
# TPOaddDTLstruct class
#
TPOaddDTLstruct()
{
	Class=$1
	
	echo ""
	echo "// The ${Class}_DBRep structure is a compilation of the fields"
	echo "// of the ${Class} class and the persistency layer. It contains"
	echo "// all fields that should be stored to the database"

	# define a struct with the PO fields and the DataObj fields
	# When this class has subclasses we have to redefined the whole TPO
	# class. The DBrep struct cannot longer be an template.
	if [ ${RedefineTPOclass} == true ]; then
		echo "struct ${Class}_DBRep {"
	else
		echo "template<>"
		echo "struct TPersistentObject<${Class}>::DBRep {"
	fi

	# First add the PO fields, this is always the same
	echo "	ObjectId::oid_t		Oid;"
	echo "	ObjectId::oid_t		Owner;"
	echo "	SQLTimeStamp		TimeStamp;"

	# add all 'basic' members of the DataObj
	grep ^$Class ${MAPWRKFILE} | grep "::" | while read line
	do
		MemType=`echo $line | cut -d":" -f3`
		Member=`echo $line | cut -d":" -f4`
		echo "	${MemType}			${Member};"
	done

	echo "};"
	echo ""

	# Add a typedef to make the code mode readable
	if [ ${RedefineTPOclass} == false ]; then
		echo "typedef TPersistentObject<${Class}>::DBRep	${Class}_DBRep;"
		echo ""
	fi

}

#
# TPOaddBCA class
#
TPOaddBCA()
{
	Class=$1
	
	echo "// The ${Class}_DTL_BCA structure 'binds' the database columns"
	echo "// to the members of the ${Class}_DBRep class."
	echo "class ${Class}_DTL_BCA {"
	echo "public:"
	echo "	void operator()(BoundIOs& cols, ${Class}_DBRep& rowbuf) {"
	# First add the PO fields, this is always the same
	echo "		cols[\"ObjID\"]		== rowbuf.Oid;"
	echo "		cols[\"Owner\"]	== rowbuf.Owner;"
	echo "		cols[\"ModTime\"]	== rowbuf.TimeStamp;"

	# add all 'basic' members of the class
	grep ^$Class ${MAPWRKFILE} | grep "::" | while read line
	do
		ColName=`echo $line | cut -d":" -f5`
		Member=`echo $line | cut -d":" -f4`
		echo "		cols[\"${ColName}\"]	== rowbuf.${Member};"
	done

	echo "	}"
	echo "};"
	echo ""
}

#
# TPOaddToDatabaseRep class 
#
# Adds code that copies the values from the real data-objects and the
# persistency object to a local xxx_DBRep class.
#
TPOaddToDatabaseRep() 
{
	Class=$1

	echo ""
	echo "// toDatabaseRep copies the fields of the persistency layer"
	echo "// and of the ${Class} class to the given ${Class}_DBRep structure"
	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi

	echo "void TPersistentObject<${Class}>::toDatabaseRep(${Class}_DBRep& dest) const"
	echo "{"
	echo "	// copy info of the ${Class} to the ${Class}_DBRep class"
	echo "	// First copy the PO part"
	echo "	dest.Oid		= metaData().itsOid.get();"
	echo "	dest.Owner		= metaData().itsOwnerOid.get();"
	echo "	dest.TimeStamp	= metaData().itsTimeStamp;"
	echo ""
	echo "	// Finally copy the info from ${Class}"

	# add all 'basic' members of the Dataobj
	grep ^$Class ${MAPWRKFILE} | grep "::" | while read line
	do
		Member=`echo $line | cut -d":" -f4`
		echo "	dest.${Member}	= itsObjectPtr->${Member};"
	done
	echo "}\n"
}

#
# TPOaddFromDatabaseRep class
#
# Adds code that copies the values from the local XXX_DBRep class to the
# real data-objects and the persistency object.
#
TPOaddFromDatabaseRep() 
{
	Class=$1
	Action=$2

	echo ""
	echo "// fromDatabaseRep copies the fields of the ${Class}_DBRep structure"
	echo "// to the persistency layer and the ${Class} class."

	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi
	echo "void TPersistentObject<${Class}>::fromDatabaseRep(const ${Class}_DBRep& org)"
	echo "{"
	echo "	// copy info of the ${Class} to the ${Class}_DBRep class"
	echo "	// First copy the PO part"
	echo "	metaData().itsOid.set   (org.Oid);"
	echo "	metaData().itsOwnerOid.set(org.Owner);"
	echo "	metaData().itsTimeStamp	= SQLTimeStamp(org.TimeStamp);"
	echo ""
	echo "	// Finally copy the info from ${Class}"

	# add all 'basic' members of the Dataobj
	grep ^$Class ${MAPWRKFILE} | grep "::" | while read line
	do
		Member=`echo $line | cut -d":" -f4`
		echo "	itsObjectPtr->${Member}	= org.${Member};"
	done
	echo "}\n"
}

#
# TPOcodeCopyToLocal class action
#
# Adds code that copies the values from the real data-objects and the
# persistency object to a local xxx_DBRep class.
#
TPOcodeCopyToLocal() 
{
	Class=$1
	Action=$2

	echo "	// copy info of the ${Class} to the ${Class}_DBRep class"
	echo "	${Class}_DBRep		rec;"
	echo "	toDatabaseRep (rec);"

	echo "	rec.Owner		= mdOwner.itsOid.get();"
	if [ "${Action}" == "insert" ]; then
		echo "	rec.Oid			= metaData().itsOid.get();"
		echo "	// Note: TimeStamp must contain a legal value for ODBC"
		echo "	const TIMESTAMP_STRUCT someDate = { 2001, 1, 1, 1, 1, 1, 0 };"
		echo "	rec.TimeStamp = someDate;"
	fi
}

#
# TPOcodeHandleAllSubclasses class action
#
# Adds code for calling the same routine for all sub-classes of this
# object, and code for handling any errors from these subclass routines.
# When the object has no subclasses a comment line is generated.
#
TPOcodeHandleAllSubclasses()
{
	Class=$1
	Action=$2
	if [ "${Action}" == "Erase" ]; then
		ErrName="Delete"
	else
		ErrName=${Action}
	fi

	# Grep all subclasses of this class.
	# Note: grep returns 0 if something found, 1 or -1 if not.
	grep ^$Class ${MAPWRKFILE} | grep -v "::" >>/dev/null
	GrepOk=`echo $?`
	
	if [ ${GrepOk} != "0" ]; then			# nothing found?
		echo "	// No subclasses"
		echo ""
		echo "	// Update the PO members to reflect the database"
		return
	fi

	# There are subclasses construct a try-catch area
	echo "	// ${Action} all subclasses"
	echo "	try {"

	# Call all subclasses
	grep ^$Class ${MAPWRKFILE} | grep -v "::" | while read line
	do
		Member=`echo $line | cut -d':' -f4`
		echo "		its${Member}TPO.do${Action}(metaData());"
	done

	# Close the try and build the catch
	echo "	}"
	echo "	catch (${ErrName}Error&	errObj) {"
	if [ "${Action}" == "Erase" ]; then
		echo "		DBConnection::GetDefaultConnection().RollbackAll();"
	fi
	grep ^$Class ${MAPWRKFILE} | grep -v "::" | while read line
	do
		Member=`echo $line | cut -d':' -f4`
#		echo "		PO_${Member}.rollback(theState);"
	done
	echo "		return;"
	echo "	}"
	echo ""
	echo "	// We didn't ran into the catch, so everything went well"
}


#
# TPOcodeGetDBTimestamp 
#
# Adds code to retrieve the key-fields from the current object from the 
# database and copy the timestamp to the current object
#
TPOcodeGetDBTimestamp()
{
	echo "	//Now get the new timestamp from the database."
	echo "	DBView<Generic_DTL_PO_info, Generic_DTL_OID>"
	echo "						selView(\"${Table}\", Generic_PO_BCA(),"
	echo "						\"WHERE OID=(?)\", Generic_OID_BPA());"
	echo "	DBView<Generic_DTL_PO_info, Generic_DTL_OID>::select_iterator"
	echo "						selIter = selView.begin();"
	echo ""
	echo "	// setup the selection parameters"
	echo "	selIter.Params().Oid = metaData().itsOid.get();"
	echo ""
	echo "	Generic_DTL_PO_info	db_keys = *selIter;"
	echo "	metaData().itsTimeStamp = SQLTimeStamp(db_keys.TimeStamp);"
	echo ""
}


#
# TPOcodeUpdateCurrentState action
#
# Adds code to update the PO-members to reflect thedatabase changes.
# For 'erase' this means clear the members, for the other actions this
# means copy the values of the local record 'rec' to the PO-members
#
TPOcodeUpdateCurrentState()
{
	Action=$1

	if [ "${Action}" == "erase" ]; then
		echo "	itsOid.set   (0);"
		echo "	itsOwnerOid.set(0);"
		echo "//REO	itsTimeStamp  = 0;"
		echo "	itsIsPersistent = false;"
	else
		echo "	itsOid.set   (rec.Oid);"
		echo "	itsOwnerOid.set(rec.Owner);"
		echo "	itsTimeStamp  = SQLTimeStamp(rec.TimeStamp);"
		echo "	itsIsPersistent = true;"
	fi
	echo ""
}

#
# TPOaddInsertRoutine class 
#
# Adds code to insert an instance of the data-object to the database,
# including its subclasses
#
TPOaddInsertRoutine()
{
	Class=$1
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	# generate a DBview with table and standard BCA
	echo "//"
	echo "// Routine for insert this ${Class} object in the database."
	echo "//"
	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi
	echo -n "void TPersistentObject<${Class}>::doInsert("
	if [ ${ROLLBACKCODE} == true ]; then
		echo "const long			theState,\n							"
	fi
	echo "MetaData&	mdOwner) const {"
	echo "	DBView<${Class}_DBRep>	insView(\"${Table}\", ${Class}_DTL_BCA());"
	echo "	DBView<${Class}_DBRep>::insert_iterator	insIter = insView;"
	echo ""

	if [ ${ROLLBACKCODE} == true ]; then
		echo "	saveState(theState);		// remember values for rollback"
		echo ""
	fi

	TPOcodeCopyToLocal ${Class} insert

	echo ""
	echo "	// save this record"
	echo "	*insIter = rec;"
	echo ""

	TPOcodeHandleAllSubclasses ${Class} Insert

	TPOcodeGetDBTimestamp 

	if [ ${ROLLBACKCODE} == true ]; then
		TPOcodeUpdateCurrentState insert
	fi

	echo "}\n"
}

#
# TPOaddUpdateRoutine class clause
#
# Adds a routine for updating a data-object in the database. The data-object
# is searched using its unique ObjectId.
#
TPOaddUpdateRoutine()
{
	Class=$1
	Clause=$2
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	# generate a DBview with table and standard BCA
	echo "//"
	echo "// Routine for updating this ${Class} object in the database."
	echo "//"
	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi
	echo -n "void TPersistentObject<${Class}>::doUpdate("
	if [ ${ROLLBACKCODE} == true ]; then
		echo "const long			theState,\n							"
	fi
	echo "MetaData&	mdOwner) const {"
	echo "	DBView<${Class}_DBRep, Generic_DTL_OID>"
	echo "			updView(\"${Table}\", ${Class}_DTL_BCA(),"
	echo "			\"WHERE ObjId=(?)\", Generic_OID_BPA());"
	echo "	DBView<${Class}_DBRep, Generic_DTL_OID>::update_iterator"
	echo "			updIter = updView;"
	echo ""

	if [ ${ROLLBACKCODE} == true ]; then
		echo "	saveState(theState);		// remember values for rollback"
		echo ""
	fi

	TPOcodeCopyToLocal ${Class} update

	echo ""
	echo "	// setup the selection parameters"
	echo "	updIter.Params().Oid = rec.Oid;"
	echo ""
	echo "	// save this record"
	echo "	*updIter = rec;"
	echo ""

	TPOcodeHandleAllSubclasses ${Class} Update

	if [ ${ROLLBACKCODE} == true ]; then
		TPOcodeUpdateCurrentState update
	fi

	echo "}\n"
}

#
# TPOaddDeleteRoutine class clause
#
# Adds a routine for deleting a data-object from the database. The deletion
# is based on the unique ObjectID of the object.
#
TPOaddDeleteRoutine()
{
	Class=$1
	Clause=$2
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	# generate a DBview with table and standard BCA
	echo "//"
	echo "// Routine for deleting this ${Class} object in the database."
	echo "//"
	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi
	echo -n "void TPersistentObject<${Class}>::doErase("
	if [ ${ROLLBACKCODE} == true ]; then
		echo "const long			theState,\n							"
	fi
	echo "MetaData&	mdOwner) const {"
	echo "	DBView<Generic_DTL_OID>"
	echo "			delView(\"${Table}\", Generic_OID_BCA());"
	echo "	DBView<Generic_DTL_OID>::delete_iterator"
	echo "			delIter = delView;"
	echo ""

	if [ ${ROLLBACKCODE} == true ]; then
		echo "	saveState(theState);		// remember values for rollback"
		echo ""
	fi

	echo "	// setup the selection parameters"
	echo "	Generic_DTL_OID		rec;"
	echo "	rec.Oid = metaData().itsOid.get();"
	echo ""
	echo "	// delete this record"
	echo "	*delIter = rec;"
	echo ""

	TPOcodeHandleAllSubclasses ${Class} Erase

	if [ ${ROLLBACKCODE} == true ]; then
		TPOcodeUpdateCurrentState erase
	fi

	echo "}\n"
}

#
# TPOaddSearchRoutine class 
#
# Adds code to retrieve an instance of the data-object to the database,
# including its subclasses
#
TPOaddSearchRoutine()
{
	Class=$1
	Table=`grep ^$Class ${MAPWRKFILE} | head -1 | cut -d":" -f2`

	# generate a DBview with table and standard BCA
	echo "//"
	echo "// Routine to retrieve this ${Class} object from the database."
	echo "//"
	if [ ${RedefineTPOclass} == false ]; then
		echo "template<>"
	fi
	echo -n "Collection<TPersistentObject<${Class}> > TPersistentObject<${Class}>::doRetrieve("
	if [ ${ROLLBACKCODE} == true ]; then
		echo "const long			theState,\n							"
	fi
	echo "const Query&	query, int maxObjects) {"
	echo "	DBView<${Class}_DBRep>	selView(\"${Table}\", ${Class}_DTL_BCA(),"
	echo "													query.getSql());"
	echo "	DBView<${Class}_DBRep>::select_iterator	selIter = selView;"
	echo "	Collection<TPersistentObject<${Class}> > 	selResult;"
	echo ""

	if [ ${ROLLBACKCODE} == true ]; then
		echo "	saveState(theState);		// remember values for rollback"
		echo ""
	fi

	echo "	for (int nrRecs = 0; selIter != selView.end() && nrRecs < maxObjects; ++selIter, ++nrRecs) {"
	echo "		TPersistentObject<${Class}>		TPO${Class};"
	echo "		TPO${Class}.fromDatabaseRep(*selIter);"
	echo "		selResult.add(TPO${Class});"
	echo "	}"
	echo "		// @@@ TO BE DEFINED @@@"
	echo ""

	if [ ${ROLLBACKCODE} == true ]; then
		TPOcodeUpdateCurrentState insert
	fi

	echo "	return (selResult);"
	echo "}\n"
}

#---------------------------- Global routines ---------------------------------
#
# initTmpfile
#
# Writes an informational header to the tempfile in case the file was not
# removed by this script.
#
initTmpfile()
{
	echo "#This temporarely file was generated by genDTL"
	echo "#It should have been cleaned up by genDTL, please remove it"
	echo "#ClassName:TableName:Ctype:MemberName:ColumnName:SubclassName:DBtype"
}

#
# initSrcfile filetype class
#
# Adds an informational header to the C++ source- of headerfile.
#
initSrcfile()
{
	FileType=$1
	Class=$2

	echo -n "//# This file was generated by genDTL ${VERSION} on " ; date
	echo "//# with the command: genDTL ${MAPFILE} ${FUNFILE} ${LAYER} ${CLASS}"
	echo -n "//# from the directory: " ; pwd
	echo "//#"
	echo "//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK"
	echo "//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT"
	echo "//#"

	# include the headerfiles in the C++ sourcefile
	if [ "${FileType}" == "cc" ]; then
		echo "#include <PL/TPersistentObject.h>"
		echo "#include <PL/Query.h>"
		echo "#include \"LCS_base.h\""
		echo "#include \"${Class}.h\""
		echo "#include \"${FILEPREFIX}${Class}.h\""
		# Grep all subclasses of this class and include those headerfiles also.
		grep ^${Class} ${MAPWRKFILE} | grep -v "::" | while read line
		do
			subClass=`echo $line | cut -d':' -f6`
			echo "#include \"${FILEPREFIX}${subClass}.h\""
		done
		echo ""
		echo "using namespace dtl;"
		echo ""
	else	# its a headerfile
		typeset -u FileLabel=${FILEPREFIX}${Class}_H
		echo "//# only include this file once"
		echo "#if !defined(${FileLabel})"
		echo "#define ${FileLabel}"
		echo ""
		if [ "${Class}" == "lcs_base" ]; then
			echo "#include <dtl/DTL.h>"
		else
			echo "#include <PL/TPersistentObject.h>"
			echo "#include <PL/SQLTimeStamp.h>"
			echo "#include \"${Class}.h\""
		fi

		# Grep all subclasses of this class and include those headerfiles also.
		grep ^${Class} ${MAPWRKFILE} | grep -v "::" | while read line
		do
			subClass=`echo $line | cut -d':' -f6`
			echo "#include \"${subClass}.h\""
			echo "#include \"${FILEPREFIX}${subClass}.h\""
		done
		echo ""
	fi
}

#
# closeHeaderfile class
#
# write the last '#endif' to the headerfile
#
closeHeaderfile()
{
	Class=$1

	echo "#include \"${FILEPREFIX}${Class}.tcc\"	// Include template code"
	echo ""
	echo "#endif"
}

#
# cleanupWorkFiles
#
# Removes all temporary workfiles
#
cleanupWorkFiles()
{
	rm -f ${MAPWRKFILE} ${ALLCLASSESWRKFILE}
}

#
# cleanlist filename
#
# Removes all (partial) comment lines from the file
#
cleanlist()
{
	cut -d"#" -f1 $1 | awk '{ if (NF > 0) print $0 }'
}

#
# convertMapfile mapfile
#
# Convert the user format from the mapfile into something more convenient
# and store this in the tempfile.
#
# Allowed linesyntax of  the mapfile:
#	Class	<ClassName>
#	Table	<TableName>
#	<Ctype>	<MemberName>	<ColumnName>	<DBtype>
#	<Ctype>	<MemberName>	class			<ClassName>
#
# Syntax of the constructed temp-file:
# ClassName:TableName:Ctype:MemberName:ColumnName:SubclassName:DBtype
#
# NOTE: THIS ROUTINE ALSO EXISTS IN genLCSsql
#
convertMapfile()
{
	Mapfile=$1

	cleanlist ${Mapfile} | while read label name dbname fldtype
	do
		# comment is stripped off, check rest of line
		if [ -z "$label" -o -z "$name" ]; then		# need two fields
			continue
		fi

		case $label in
		Class|class|CLASS)				# Class keyword
			CurClass=$name
			;;
		Table|table|TABLE)				# Table keyword
			CurTable=$name
			;;
		*)								# no keyword, assume fieldname
			typeset -l SubClass=`echo $dbname | cut -d" " -f1`
			# what kind of field is this?
			if [ "${SubClass}" == "class" -o "${SubClass}" == "baseclass" ]; then
				# it's a (sub)class, get its name.
				SubClassName=`echo $fldtype | cut -d" " -f1`
				echo "$CurClass:$CurTable:$label:$name:$dbname:$SubClassName:BIGINT"
			else
				echo "$CurClass:$CurTable:$label:$name:$dbname::$fldtype"
			fi
			;;
		esac
	done
}

# hasSubClasses class
#
# Routine that figures out if the given class has subclasses.
# Returns true or false
#
hasSubClasses()
{
	Class=$1

	# Note: grep returns 0 if something found, 1 or -1 if not.
	grep ^$Class ${MAPWRKFILE} | grep -v "::" >>/dev/null
	GrepOk=`echo $?`
	
	if [ ${GrepOk} == "0" ]; then			# something found?
		echo true
	else
		echo false
	fi

}
#------------------------------- MAIN program ---------------------------------
#
# Check invocation syntax: [-d destdir] genDTL mapfile cmdfile layer [class]
#

# Check option argument
DESTDIR="./"						# assume no destination directory
eval set argv=`getopt "d:" $*`		# reformat arguments
shift
case "$1" in
	-d)	DESTDIR=$2
		if [ ! -d ${DESTDIR} ]; then
			echo "Destination directory >${DESTDIR}< does not exist"
			exit 1
		fi
		shift 2
		;;
esac
shift								# remove --

# Check other arguments
case $# in
	3)	MAPFILE=$1					# genDTL mapfile funfile layer
		FUNFILE=$2
		typeset -u LAYER=$3
		GREPMASK=""
		CLASS=""
		;;
	4)	MAPFILE=$1					# genDTL mapfile funfile layer classname
		FUNFILE=$2
		typeset -u LAYER=$3
		GREPMASK=" | grep ^$4"
		CLASS=$4
		;;
	*)	echo "Syntax: $0 mapfile functionfile layer [class]"
		echo "        where layer is R(ecord) or P(ersistency)"
		exit 0
		;;
esac

# Mapfile must exist
#
if [ ! -s ${MAPFILE} ]; then
	echo "File ${MAPFILE} doesn't exist\n"
	exit 1
fi

# Functionfile must exist
#
if [ ! -s ${FUNFILE} ]; then
	echo "File ${FUNFILE} doesn't exist\n"
	exit 1
fi

# Check Layer type
#
case "${LAYER}" in
R)		FILEPREFIX="Rec"		;;
P)		FILEPREFIX="PO_"		;;
*)		echo "Layer should be R(ecord) or P(ersistency), not >${LAYER}<\n"
		exit 1
esac

# All arguments seem ok, continue processing

# Initialize some variables
#
ROLLBACKCODE=false				# whether or not generate rollback code
LCSBASEFILE=${DESTDIR}/LCS_base.h
MAPWRKFILE=/tmp/mapinfo.LCS.$$
ALLCLASSESWRKFILE=/tmp/created.LCS.$$

# Make sure there are no old workfiles left
cleanupWorkFiles

# Set trap handler before we create anything
trap "cleanupWorkFiles ; exit" 1 2 3 13 15

# convert the human readable format of the mapfile into something
# more convenient for shell-programming
echo "Analysing mapfile"
initTmpfile					> ${MAPWRKFILE}
convertMapfile ${MAPFILE}	>>${MAPWRKFILE}

#
# Build the sourcecode for the record- or the persistency-layer
#
if [ "${LAYER}" == "P" ]; then
	# always need this in the tpo layer
	initSrcfile "h" lcs_base 	> ${LCSBASEFILE}
	TPOaddGenericStructures		>>${LCSBASEFILE}
fi

# Scan the functionfile to determine what code should be generated
#
PrevClass="Unknown"
eval "cleanlist $FUNFILE $GREPMASK" | \
while read class action clause
do
	# minimal check on layout of line
	if [ -z "$class" -o -z "$action" ]; then
		continue
	fi

	# New class? generate the necc. structures in the new sourcefile.
	# generate exacly one BCA for each class
	if [ "${PrevClass}" != "${class}" ]; then
		#RedefineTPOclass=`hasSubClasses ${class}`
		RedefineTPOclass=true
		case ${LAYER} in
		R) 	SOURCEFILE=${DESTDIR}/${FILEPREFIX}${class}.cc
			HEADERFILE=${DESTDIR}/${FILEPREFIX}${class}.h
			initSrcfile "cc" ${class}  > ${SOURCEFILE}
			RECaddBCA 	     ${class}  >>${SOURCEFILE}
			;;
		P) 	# start a new headerfile and sourcefile
			SOURCEFILE=${DESTDIR}/${FILEPREFIX}${class}.tcc
			HEADERFILE=${DESTDIR}/${FILEPREFIX}${class}.h
			echo ${class}	 							>>${ALLCLASSESWRKFILE}
			initSrcfile "cc"				${class} 	> ${SOURCEFILE}
			TPOopenNamespace							>>${SOURCEFILE}
			TPOaddBCA 						${class} 	>>${SOURCEFILE}
			TPOaddToDatabaseRep				${class} 	>>${SOURCEFILE} 
			TPOaddFromDatabaseRep			${class} 	>>${SOURCEFILE} 
			initSrcfile "h"					${class} 	> ${HEADERFILE}
			TPOopenNamespace							>>${HEADERFILE}
			TPOaddDTLstruct					${class} 	>>${HEADERFILE}
			if [ ${RedefineTPOclass} == true ]; then
				TPOaddClassRedefinition		${class} 	>>${HEADERFILE}
			else
				TPOaddRoutineRedefinitions	${class} 	>>${HEADERFILE}
			fi
			TPOcloseNamespace							>>${HEADERFILE}
			closeHeaderfile					${class}	>>${HEADERFILE}
			;;
		esac
		PrevClass=${class}
	fi

	# dispatch the action
	typeset -u action=${action}						# to uppercase
	case ${LAYER} in
	R)
		case $action in
		I) RECaddInsertRoutine $class 			>>${SOURCEFILE}		;;
		U) RECaddUpdateRoutine $class "$clause"	>>${SOURCEFILE}		;;
		D) RECaddDeleteRoutine $class "$clause"	>>${SOURCEFILE}		;;
		S) RECaddSearchRoutine $class "$clause"	>>${SOURCEFILE}		;;
		*) echo "ERROR:Unknown function >$action< for class >$class< in file >$FUNFILE<"
		   ;;
		esac
		;;
	P)
		case $action in
		I) TPOaddInsertRoutine $class 			>>${SOURCEFILE}		;;
		U) TPOaddUpdateRoutine $class "$clause"	>>${SOURCEFILE}		;;
		D) TPOaddDeleteRoutine $class "$clause"	>>${SOURCEFILE}		;;
		S) TPOaddSearchRoutine $class "$clause"	>>${SOURCEFILE}		;;
		*) echo "ERROR:Unknown function >$action< for class >$class< in file >$FUNFILE<"
		   ;;
		esac
		;;
	esac
done

# Finish all created .tcc files
if [ "${LAYER}" == "P" ]; then
	cat ${ALLCLASSESWRKFILE} | while read Class
	do
		TPOcloseSrcFile	${Class} >>${DESTDIR}/${FILEPREFIX}${Class}.tcc
	done
fi

# Finally cleanup our mess
cleanupWorkFiles
