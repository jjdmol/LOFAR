#!/usr/bin/ksh
#
# genLCSsql
#
# Generates a mapfile and a functionfile for genLCScode.
# The generated files must be manually adjusted before they
# can be used by genLCScode.
#
# Syntax: genLCSsql modulename headerfiles
#
# $Id$
#
VERSION="v1.0"

#---------------------------- Global routines ---------------------------------
#
# InitTmpfile
#
# Writes an informational header to the tempfile in case the file was not
# removed by this script.
#
InitTmpfile()
{
	echo "#This temporarely file was generated by genDTL"
	echo "#It should have been cleaned up by genDTL, please remove it"
	echo "#ClassName:TableName:Ctype:MemberName:ColumnName:SubclassName:DBtype"
}

#
# InitSQLfile filetype name
#
# Adds an informational header to a sql file.
#
InitSQLfile()
{
	echo -n "-- This file was generated by genLCSsql ${VERSION} on " ; date
	echo "-- with the command: genLCSsql ${MODULE}"
	echo -n "-- from the directory: " ; pwd
	echo "--"
	echo "-- EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK"
	echo "-- IT MIGHT BE OVERWRITTEN THE NEXT TIME YOU RUN genLCSsql"
	echo "--"

	if [ "$1" == "m" ]; then
		echo "-- When you run this file all databasetables for module $2"
		echo "-- are created."
		echo "--"
		echo "-- WARNING: EXISTING TABLES ARE DROPPED BEFORE CREATION!!!"
		echo "--"
	else
		echo "-- This file creates the databasetable for class $2"
		echo "--"
		echo "-- WARNING: THE TABLE IS DROPPED BEFORE CREATION!!!"
		echo "--"
	fi
}

#
# ConvertMapfile mapfile
#
# Convert the user format from the mapfile into something more convenient
#
# Allowed linesyntax of the mapfile:
#	Class	<ClassName>
#	Table	<TableName>
#	<Ctype>	<MemberName>	<ColumnName>	<DBtype>
#	<Ctype>	<MemberName>	class			<ClassName>
#
# Syntax of the constructed temp-file:
# ClassName:TableName:Ctype:MemberName:ColumnName:SubclassName:DBtype
#
# NOTE: THIS ROUTINE ALSO EXISTS IN genLCScode
#
ConvertMapfile()
{
	Mapfile=$1

	cleanlist ${Mapfile} | while read label name dbname fldtype
	do
		# comment is stripped off, check rest of line
		if [ -z "$label" -o -z "$name" ]; then		# need two fields
			continue
		fi

		case $label in
		Class|class|CLASS)				# Class keyword
			CurClass=$name
			;;
		Table|table|TABLE)				# Table keyword
			CurTable=$name
			;;
		*)								# no keyword, assume fieldname
			typeset -l SubClass=`echo $dbname | cut -d" " -f1`
			# what kind of field is this?
			if [ "${SubClass}" == "class" ]; then
				# it's a (sub)class, get its name.
				SubClassName=`echo $fldtype | cut -d" " -f1`
			echo "$CurClass:$CurTable:$label:$name:$dbname:$SubClassName:BIGINT"
			else
				echo "$CurClass:$CurTable:$label:$name:$dbname::$fldtype"
			fi
			;;
		esac
	done
}

#
# AddCreateTableCommand tablename
#
# Generates the SQL command for creating the table
#
AddCreateTableCommand()
{
	Table=$1

	echo "drop table ${Table};"
	echo "create table ${Table} ("
	echo    "	ObjId		INTEGER		NOT NULL UNIQUE PRIMARY KEY,"
	echo    "	Parent		INTEGER		NOT	NULL,"
	echo -n "	ModTime		TIMESTAMP	NOT NULL"
	
	cleanlist ${TMPFILE} | grep ":${Table}:" | while read line
	do
		TableName=`echo $line | cut -d':' -f2`
		if [ "${TableName}" != "${Table}" ]; then
			continue
		fi

		ColumnName=`echo $line | cut -d':' -f5`
		ColumnType=`echo $line | cut -d':' -f7`
		if [ "${ColumnName}" == "Class" ]; then
			ColumnName=`echo $line | cut -d':' -f6`
		fi
		echo ","
		echo -n "	${ColumnName}	${ColumnType}"
	done

	echo "\n);\n"

}
#
# cleanlist filename
#
# Removes all (partial) comment lines from the file
#
cleanlist()
{
	cut -d"#" -f1 $1 | awk '{ if (NF > 0) print $0 }'
}


#------------------------------- MAIN program ---------------------------------
#
# Check invocation syntax: genLCSsql module headerfiles
#
case $# in
	1)	MAPFILE=$1
		MODULE=`echo ${MAPFILE} | cut -d"." -f1`
		;;
	*)	echo "Syntax: $0 mapfile"
		exit 0
		;;
esac

# Mapfile must exist
#
if [ ! -s ${MAPFILE} ]; then
    echo "File ${MAPFILE} doesn't exist\n"
    exit 1
fi


# Initialize some variables
#
TMPFILE=map.genLCSsql.$$
MODFILE=${MODULE}_create_databases.sql

# initialize the files we have to create.
InitTmpfile					> ${TMPFILE}
ConvertMapfile ${MAPFILE}	>>${TMPFILE}
InitSQLfile m ${MODULE}		> ${MODFILE}

# Scan the functionfile to determine what code should be generated
#
PrevTable="Unknown"
cleanlist ${TMPFILE} | while read line
do
	ClassName=`echo $line | cut -d':' -f1`
	TableName=`echo $line | cut -d':' -f2`
	if [ "${TableName}" != "${PrevTable}" ]; then	# new table?
		SQLFILE=${ClassName}.sql
		InitSQLfile c ${ClassName}			 >${SQLFILE}
		AddCreateTableCommand ${TableName}  >>${SQLFILE}
		echo "\i ${SQLFILE}"				>>${MODFILE}
		PrevTable=${TableName}
	fi
done

rm -f ${TMPFILE}
