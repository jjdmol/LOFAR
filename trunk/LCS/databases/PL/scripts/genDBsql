#!/usr/bin/ksh
#
# genDBsql: Generates SQL scripts for creating tables in Postgres.
#
# Copyright (C) 2003-2004
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Generates a mapfile and a functionfile for genDBcode.
# The generated files must be manually adjusted before they
# can be used by genDBcode.
#
# Syntax: genDBsql modulename headerfiles
#
# $Id$
#
VERSION="v1.5"

#---------------------------- Global routines ---------------------------------
#
# initTmpfile
#
# Writes an informational header to the tempfile in case the file was not
# removed by this script.
#
initTmpfile()
{
	echo "#This temporarely file was generated by genDTL"
	echo "#It should have been cleaned up by genDTL, please remove it"
	echo "#ClassName!TableName!Ctype!MemberName!ColumnName!SubclassName!DBtype!File"
}

#
# initSQLfile filetype name
#
# Adds an informational header to a sql file.
#
initSQLfile()
{
	echo -n "-- This file was generated by genDBsql ${VERSION} on " ; date
	echo "-- with the command: genDBsql ${MODULE}"
	echo -n "-- from the directory: " ; pwd
	echo "--"
	echo "-- EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK"
	echo "-- IT MIGHT BE OVERWRITTEN THE NEXT TIME YOU RUN genDBsql"
	echo "--"

	if [ "$1" == "m" ]; then
		echo "-- When you run this file all databasetables for module $2"
		echo "-- are created."
		echo "--"
		echo "-- WARNING: EXISTING TABLES ARE DROPPED BEFORE CREATION!!!"
		echo "--"
	else
		echo "-- This file creates the databasetable for class $2"
		echo "--"
		echo "-- WARNING: THE TABLE IS DROPPED BEFORE CREATION!!!"
		echo "--"
	fi
}

#
# convertMapfile mapfile
#
# Convert the user format from the mapfile into something more convenient
# and store this in the tempfile.
#
# Allowed linesyntax of  the mapfile:
#	Class	<ClassName>
#	Table	<TableName>
#	File	<Filename>
#	<Ctype>	<MemberName> <Symb.Name> <ColumnName> <DBtype>
#	<Ctype>	<MemberName> <Symb.Name> Class		  <ClassName>
#	<Ctype>	<MemberName> <Symb.Name> BaseClass	  <ClassName>
#
# Syntax of the constructed temp-file:
# ClassName!TableName!Ctype!MemberName!SymbName!ColumnName!SubclassName!DBtype!File
#
# ATTENTION: The are some issues to remind:
#	Ctype      may be of the form xxx:yyy (like std::string)
#	MemberName may be of the form X::y or X.y when the user merged some 
#			   tables manually
#
# NOTE: THIS ROUTINE ALSO EXISTS IN genDBsql
#
convertMapfile()
{
	Mapfile=$1

	cleanlist ${Mapfile} | while read label name symbname dbname fldtype
	do
		# comment is stripped off, check rest of line
		if [ -z "$label" -o -z "$name" ]; then		# need two fields
			continue
		fi

		case $label in
		Class|class|CLASS)				# Class keyword
			CurClass=$name
			;;
		Table|table|TABLE)				# Table keyword
			CurTable=$name
			;;
		File|file|FILE)					# File keyword
			CurFile=$name				
			# NOTE: we assume that File always comes after Class!!!
			echo "${CurClass}!${CurFile}" >> ${CLASSLOCATIONWRKFILE}
			;;
		*)								# no keyword, assume fieldname
			ctype=$label				# less confusing
			typeset -l SubClass=`echo $dbname | cut -d" " -f1`
			# what kind of field is this?
			if [ "${SubClass}" == "class" -o "${SubClass}" == "baseclass" ]; then
				# it's a (sub)class, get its name.
				SubClassName=`echo $fldtype | cut -d" " -f1`
				echo "$CurClass!$CurTable!$ctype!$name!$symbname!$dbname!$SubClassName!BIGINT!$CurFile"
			else
				echo "$CurClass!$CurTable!$ctype!$name!$symbname!$dbname!!$fldtype!$CurFile"
			fi
			;;
		esac
	done
}

#
# addCreateTableCommand tablename
#
# Generates the SQL command for creating the table
#
addCreateTableCommand()
{
	Table=$1

	echo "drop table ${Table};"
	echo "create table ${Table} ("
	echo    "	ObjId		BIGINT		NOT NULL UNIQUE PRIMARY KEY,"
	echo    "	Owner		BIGINT		NOT	NULL,"
	echo -n "	VersionNr	INTEGER		NOT NULL"
	
	cleanlist ${MAPWORKFILE} | grep "!${Table}!" | while read line
	do
		TableName=`echo $line | cut -d'!' -f2`
		if [ "${TableName}" != "${Table}" ]; then
			continue
		fi

		ColumnName=`echo $line | cut -d'!' -f6`
		ColumnType=`echo $line | cut -d'!' -f8`
		if [ "${ColumnName}" != "Class" -a "${ColumnName}" != "BaseClass" ]; then
			echo ","
			echo -n "	${ColumnName}	${ColumnType}"
		fi
	done

	echo "\n);"
	echo ""

}
#
# addCreateTriggerCommand tablename
#
addCreateTriggerCommand()
{
	Table=$1

	echo "CREATE TRIGGER ${Table}UpdateVersionNr BEFORE INSERT OR UPDATE ON ${Table}"
	echo "FOR EACH ROW EXECUTE PROCEDURE UpdateVersionNr();"
	echo ""
}

#
# cleanupWorkFiles
#
# Cleanup the temporary workfiles we used
#
cleanupWorkFiles()
{
	rm -f ${MAPWORKFILE}
}

#
# cleanlist filename
#
# Removes all (partial) comment lines from the file
#
cleanlist()
{
	cut -d"#" -f1 $1 | awk '{ if (NF > 0) print $0 }'
}


#------------------------------- MAIN program ---------------------------------
#
# Check invocation syntax: genDBsql [-d destdir] mapfile
#

# Check option argument
DESTDIR="."							# assume no destination directory
eval set argv=`getopt "d:" $*`		# reformat arguments
shift
case "$1" in
	-d)	DESTDIR=$2
		if [ ! -d ${DESTDIR} ]; then
			echo "Destination directory >${DESTDIR}< does not exist"
			exit 1
		fi
		shift 2
		;;
esac
shift								# remove --

# Check other arguments
case $# in
	1)	MAPFILE=$1
		MODULE=`echo ${MAPFILE} | cut -d"." -f1`
		;;
	*)	echo "Syntax: $0 [-d destdir] mapfile"
		exit 0
		;;
esac

# Mapfile must exist
#
if [ ! -s ${MAPFILE} ]; then
    echo "File ${MAPFILE} doesn't exist\n"
    exit 1
fi

# Initialize some variables
#
MAPWORKFILE=/tmp/mapinfo.sql.LCS.$$
MODULEFILE=${DESTDIR}/${MODULE}_create_databases.sql
CLASSLOCATIONWRKFILE=/dev/null

# Make sure there are no old workfiles left
cleanupWorkFiles

# Set trap handler before we create anything
trap "cleanupWorkFiles ; exit" 1 2 3 13 15

# initialize the files we have to create.
initTmpfile					> ${MAPWORKFILE}
convertMapfile ${MAPFILE}	>>${MAPWORKFILE}
initSQLfile m ${MODULE}		> ${MODULEFILE}

# Scan the functionfile to determine what code should be generated
#
PrevTable="Unknown"
cleanlist ${MAPWORKFILE} | while read line
do
	ClassName=`echo $line | cut -d'!' -f1`
	TableName=`echo $line | cut -d'!' -f2`
	if [ "${TableName}" != "${PrevTable}" ]; then	# new table?
		SQLFILE=${DESTDIR}/${ClassName}.sql
		echo "Creating file ${SQLFILE}"
		initSQLfile c ${ClassName}				  >${SQLFILE}
		addCreateTableCommand ${TableName} 		 >>${SQLFILE}
		addCreateTriggerCommand ${TableName}	 >>${SQLFILE}
		echo "\i ${SQLFILE}"					 >>${MODULEFILE}
		PrevTable=${TableName}
	fi
done
echo "Creating file ${MODULEFILE}"

# Finally cleanup our mess
cleanupWorkFiles
