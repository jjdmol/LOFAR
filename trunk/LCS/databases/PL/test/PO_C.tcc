//# This file was generated by genLCScode v1.0 on Tue Nov 11 17:20:45 CET 2003
//# with the command: genLCScode MyModule.map.proto MyModule.fun.proto P 
//# from the directory: /export/home/loose/temp
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_A.h"
#include "PO_C.h"
#include <PL/TPersistentObject.h>

using namespace dtl;

namespace LOFAR {

  namespace PL {

    // bindCols() 'binds' the database columns represented by \a cols
    // to the members of the DBRep<A> class.
    void DBRep<C>::bindCols(BoundIOs& cols)
    {
      cols["ITSBLOB"]  == itsBlob;
      cols["ITSSTRING"]  == itsString;
    }

    // toDBRep copies the fields from the C class to the DBRep<C> structure.
    void TPersistentObject<C>::toDBRep(DBRep<C>& dest) const
    {
      dest.itsBlob  = data().itsBlob;
      dest.itsString  = data().itsString;
    }


    // fromDBRep copies the fields from the DBRep<C> structure to the C class.
    void TPersistentObject<C>::fromDBRep(const DBRep<C>& src)
    {
      data().itsBlob  = src.itsBlob;
      data().itsString  = src.itsString;
    }

    // Initialize the internals of TPersistentObject<C>
    void TPersistentObject<C>::init()
    {
      // create new TPersistentObject for A.
      Pointer p(new TPersistentObject<A>(*itsObjectPtr));
      // associate A's owner object-id with C's object-id
      p->metaData().ownerOid() = metaData().oid();
      // add newly created TPersistentObject to container of ownedPOs.
      ownedPOs().push_back(p);
      // Set the correct database table name
      tableName("C");
    }

    // Initialize the attribute map for TPersistentObject<C>
    void TPersistentObject<C>::initAttribMap()
    {
      theirAttribMap["itsBlob"]   = "ITSBLOB";
      theirAttribMap["itsString"] = "ITSSTRING";
    }

  } // close namespace PL

}  // close namespace LOFAR

