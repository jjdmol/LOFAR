//# This file was generated by genLCScode v1.0 on Tue Nov 11 17:20:45 CET 2003
//# with the command: genLCScode MyModule.map.proto MyModule.fun.proto P 
//# from the directory: /export/home/loose/temp
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_A.h"
#include "PO_B.h"
#include <PL/TPersistentObject.h>

using namespace dtl;

namespace LOFAR {

  namespace PL {

    // The BCA<A> structure 'binds' the database columns
    // to the members of the DBRep<A> class.
    template<>
    void BCA<A>::operator()(BoundIOs& cols, DataObj& rowbuf) {
	  cols["ObjID"]    == rowbuf.itsOid;
	  cols["Owner"]  == rowbuf.itsOwnerOid;
	  cols["VersionNr"]  == rowbuf.itsVersionNr;
	  cols["ITSINT"]  == rowbuf.itsInt;
	  cols["ITSDOUBLE"]  == rowbuf.itsDouble;
	  cols["ITSSTRING"]  == rowbuf.itsString;
	}

    // toDatabaseRep copies the fields of the persistency layer
    // and of the A class to the given DBRep<A> structure
    template<>
    void TPersistentObject<A>::toDatabaseRep(DBRep<A>& dest) const
    {
      // copy info of the A to the DBRep<A> class
      // First copy the meta data
      dest.itsOid   = metaData().oid()->get();
      dest.itsOwnerOid = metaData().ownerOid()->get();
      dest.itsVersionNr  = metaData().versionNr();

      // Finally copy the info from A
      dest.itsInt  = itsObjectPtr->itsInt;
      dest.itsDouble  = itsObjectPtr->itsDouble;
      dest.itsString  = itsObjectPtr->itsString;
    }


    // fromDatabaseRep copies the fields of the DBRep<A> structure
    // to the persistency layer and the A class.
    template<>
    void TPersistentObject<A>::fromDatabaseRep(const DBRep<A>& org)
    {
      // copy info of the A to the DBRep<A> class
      // First copy the PO part
      metaData().oid()->set(org.itsOid);
      metaData().ownerOid()->set(org.itsOwnerOid);
      metaData().versionNr() = org.itsVersionNr;

      // Finally copy the info from A
      itsObjectPtr->itsInt  = org.itsInt;
      itsObjectPtr->itsDouble  = org.itsDouble;
      itsObjectPtr->itsString  = org.itsString;
    }

    //
    // Initialize the internals of TPersistentObject<A>
    //
    template<>
    void TPersistentObject<A>::init()
    {
      // create new TPersistentObject for B.
      Pointer p(new TPersistentObject<B>(itsObjectPtr->itsB));
      // associate B's owner object-id with the A's object-id
      p->metaData().ownerOid() = metaData().oid();
      // add newly created TPersistentObject to container of ownedPOs.
      ownedPOs().push_back(p);
      // Set the correct database table name
      tableName("A");
     }

   } // close namespace PL

}  // close namespace LOFAR

