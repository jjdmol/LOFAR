//# This file was generated by genDBcode v2.8 on Wed Mar 10 09:58:09 CET 2004
//# with the command: genDBcode P tAttrib.plmap.proto  
//# from the directory: /home/loose/LOFAR/LCS/databases/PL/test
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_tAttrib.h"
#include <PL/TPersistentObject.h>

namespace LOFAR {
	namespace PL {

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< Z > class.
void DBRep< Z >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the Z class to the
// DBRep< Z > structure
void TPersistentObject< Z >::toDBRep(DBRep< Z >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< Z > structure
// to the Z class.
void TPersistentObject< Z >::fromDBRep(const DBRep< Z >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< Z >
void TPersistentObject< Z >::init()
{
	// set the correct database table name
	tableName("Z");
}


// Initialize the attribute map for TPersistenObject< Z >
template<>
void TPersistentObject< Z >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< Y > class.
void DBRep< Y >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the Y class to the
// DBRep< Y > structure
void TPersistentObject< Y >::toDBRep(DBRep< Y >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< Y > structure
// to the Y class.
void TPersistentObject< Y >::fromDBRep(const DBRep< Y >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< Y >
void TPersistentObject< Y >::init()
{
	{
	// create new TPersistentObject for Class Z
	Pointer p(new TPersistentObject< Z >(data().z));
	// associate Z's owner object-id with Y's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("Y");
}


// Initialize the attribute map for TPersistenObject< Y >
template<>
void TPersistentObject< Y >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["z"]	=
		"@" + string(typeid(TPersistentObject< Z >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< X > class.
void DBRep< X >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the X class to the
// DBRep< X > structure
void TPersistentObject< X >::toDBRep(DBRep< X >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< X > structure
// to the X class.
void TPersistentObject< X >::fromDBRep(const DBRep< X >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< X >
void TPersistentObject< X >::init()
{
	// set the correct database table name
	tableName("X");
}


// Initialize the attribute map for TPersistenObject< X >
template<>
void TPersistentObject< X >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< A > class.
void DBRep< A >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the A class to the
// DBRep< A > structure
void TPersistentObject< A >::toDBRep(DBRep< A >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< A > structure
// to the A class.
void TPersistentObject< A >::fromDBRep(const DBRep< A >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< A >
void TPersistentObject< A >::init()
{
	// set the correct database table name
	tableName("A");
}


// Initialize the attribute map for TPersistenObject< A >
template<>
void TPersistentObject< A >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< B > class.
void DBRep< B >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the B class to the
// DBRep< B > structure
void TPersistentObject< B >::toDBRep(DBRep< B >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< B > structure
// to the B class.
void TPersistentObject< B >::fromDBRep(const DBRep< B >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< B >
void TPersistentObject< B >::init()
{
	{
	// create new TPersistentObject for Class X
	Pointer p(new TPersistentObject< X >(data().x));
	// associate X's owner object-id with B's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass A
	Pointer p(new TPersistentObject< A >(data()));
	// associate A's owner object-id with B's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("B");
}


// Initialize the attribute map for TPersistenObject< B >
template<>
void TPersistentObject< B >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["x"]	=
		"@" + string(typeid(TPersistentObject< X >).name());
	theirAttribMap["A::"]	=
		"@" + string(typeid(TPersistentObject< A >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< C > class.
void DBRep< C >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the C class to the
// DBRep< C > structure
void TPersistentObject< C >::toDBRep(DBRep< C >& dest) const
{
	dest.s	= data().s;
}


// fromDBRep copies the fields of the DBRep< C > structure
// to the C class.
void TPersistentObject< C >::fromDBRep(const DBRep< C >& src)
{
	data().s	= src.s;
}


// Initialize the internals of TPersistentObject< C >
void TPersistentObject< C >::init()
{
	{
	// create new TPersistentObject for Class Y
	Pointer p(new TPersistentObject< Y >(data().y));
	// associate Y's owner object-id with C's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass B
	Pointer p(new TPersistentObject< B >(data()));
	// associate B's owner object-id with C's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("C");
}


// Initialize the attribute map for TPersistenObject< C >
template<>
void TPersistentObject< C >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["y"]	=
		"@" + string(typeid(TPersistentObject< Y >).name());
	theirAttribMap["B::"]	=
		"@" + string(typeid(TPersistentObject< B >).name());
}

	} // close namespace PL
}	// close namespace LOFAR

