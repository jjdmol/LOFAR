#!/bin/sh

# Drastically limit the maximum number of file descriptors
ulimit -n 20

# Use LimitExec if available. Let the program run for at most half an hour.
if [ -x $LOFARROOT/bin/LimitExec ]
then
  EXEC="$LOFARROOT/bin/LimitExec 1800"
elif [ -x $lofar_sharedir/limitexec.sh ]
then
  EXEC="$lofar_sharedir/limitexec.sh 1800"
fi

# The type of test to run is specified in the file tConverterStress.in.
# If type is "client" the third (optional) argument is the port number
INFILE="`dirname $0`/tConverterStress.in"
if [ -f $INFILE ]
then
   TYPE=`head -1 $INFILE | cut -d' ' -f1 | tr '[A-Z]' '[a-z]'`
   PORT=`head -1 $INFILE | cut -d' ' -f3 -s`
fi

# Variable to keep track of the return status.
STATUS=0

# If we must run a client/server test, we must first start the server process.
if [ "$TYPE" = "client" ]
then

  # This is the AMC server executable
  SERVER="`dirname $0`/../src/amcserver"

  # The AMC server process needs its own log_prop file. We will copy 
  # tConverterStress.log_prop so that the same logging levels are set.
  if [ -f tConverterStress.log_prop ]
  then
    sed -e "s/tConverterStress_tmp/amcserver_tmp/" \
      tConverterStress.log_prop > $SERVER.log_prop
  fi

  # Exit and interrupt handler. $! is the process id of the last background 
  # process started, i.e. the converter server.
  trap 'if [ $STATUS != 0 ]; then \
          mv amcserver_tmp.log amcserver.err 2>/dev/null; \
        else \
          rm -f amcserver_tmp.log; \
        fi; \
        if kill -0 $! 2>/dev/null; then kill -9 $! 2>/dev/null; fi; \
        exit $STATUS' 0 1 2 3 15

  # Start the server in the background.
  $SERVER $PORT &

  # Sleep for 2 seconds to make sure the server has started.
  sleep 2

fi

# Start the test program.
$EXEC ./tConverterStress
STATUS=$?

# If something went wrong, secure the log file(s)
if [ $STATUS != 0 ]
then
  mv tConverterStress_tmp.log tConverterStress_$TYPE.err 2>/dev/null
fi

exit $STATUS
