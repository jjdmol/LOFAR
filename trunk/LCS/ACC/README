*** README LOFAR/LCS/ACC ***

This directory contains prototype software that was developed to try out
the distribution of parametersets from a central point the several processes.

The rough idea is that MAC instructs an ApplicationController which application
should be started at what time. The AC of his turn constructs the appropriate
parameterfiles for the processes the application consists of and starts up the
processes passing the name of the parameterfile.
The processes are all based on a framework that communicates with the AC. This
framework is called the ProcessController.

This prototype demonstrates:
 - how parametersets can be handled.
 - how the framework can look like
 - how the functionality of the process is linked into the framework
 - how the AC can construct parametersets
 - how the AC and the PC can communicate
It also exposes what kind of administration has to be done by the AC.

The prototype is not ment to be complete, nor in functionality nor in error-
handling.

Executables
-----------
There are three executables build:
tParameterSet	test program to test the ParameterSet class
				Needs: tParameterSet.ps and merge.ps
				Constructs: newset.ps
				Syntax: tParameterSet

tDemoProg		A demo proces to be started and controlled by the AC
				the parameterfiles are generated by the AC.

tDemoAC			A demo AC where the user is in control. Through a menu the
				user can start, stop and ocntrol the processes.
				Needs: DemoAC.ps. You can modify this file to startup another
				number of processes, the IP port they use, etc.
				Constructs: tDemoPrognnn.ps
				Syntax: tDemoAC DemoAC.ps

All executables use the LofarLogger and expect the file ACCdemo.logprop to be
available in the execute directory.

Sources
-------
ACCEvents		Enum of the defined events.
ACCProcess		Class for internal administration of the AC. Could also be
				implemented as a struct.
ACCProcessList	Collection of ACCProcess-es. Mainly used to handle actions
				that should be executed by all processes.
Event			Simple class that describes a QAD designed event. The Event
				is used in the communication between the AC and the PC.
ParameterSet	The most complete class. It allows you to constucts parameter-
				Sets from a file of a buffer, merge paramsets, split paramsets,
				store paramsets, etc. The class does a lot of error-checking.
				It should be expanded with some extra getXxx functions to make
				it suitable for real life.
ProcessState	A class the forms the API between the PC and the functionality
				implemented in the executable.
Socket			Allows you to communicate through TCP/IP sockets. The code is
				based on a proven C-library. The architecture allows easy
				implementation of all kinds of message protocols.

