#!/bin/bash
#
# This test aims to determine the bandwith available from the Cobalt cluster to
# the Locus cluster using iperf. Traffic will be distributed in a way that is
# similar to that being used in operations. The cobalt nodes are pair-wise
# connected to one of four router PC's, which in turn are connected to
# twenty-five locus nodes. So, cbt001..002 and locus001..025 are connected to
# the first router PC; cbt003..004 and locus025..050 to the second; etc.
#
# $Id$

# Source useful functions.
. $(dirname $0)/../funcs.sh

# Setup cleanup handler.
trap teardown 0 1 2 3 15

# List of Cobalt nodes used in this test
CBT_NODES=($(for i in $(seq 1 8); do printf "cbt%03d " $i; done))

# Number of ethernet devices per Cobalt node
n_eth=4

# Number of connection to be created per ethernet device
n_conn=3

# Number of seconds the iperf client should run
n_seconds=15

# Start a iperf server daemon process on every locus node
# Return a list of locus nodes that actually run the iperf server
setup()
{
  rm -f iperf-*.log
  # The daemonize option (-D) of iperf is utterly broken; do it another way
  run_command "ssh lhn001 cexec locus: iperf -s > /dev/null 2>&1 & sleep 1"
  # Check on which nodes iperf actually runs.
  local nodes
  nodes=$(run_command "ssh lhn001 cexec -p locus: pgrep -u $USER iperf") || exit
  # Sometimes, more than one iperf instance appears to be running (a glitch?),
  # so remove duplicates.
  echo "$nodes" | sed -n 's,^locus \(locus[0-9]\+\): [0-9]\+$,\1,p' | uniq
}

# Stop the iperf server deamon process on every locus node
teardown()
{
  local STATUS=$?
  run_command -q "ssh lhn001 cexec locus: pkill -KILL -u $USER iperf"
  return $STATUS
}

# Print statistics for iperf CSV results that are read from the files given as
# input arguments. The CSV output contains the following columns:
# timestamp, source_address, source_port, destination_address, destination_port,
# transfer_id, time_interval, transferred_bytes, bits_per_second.
# We're only interested in the last column: bits per second
print_stats()
{
  # Sort input values numerically
  local bits_per_second=($(cut -d, -f9 $@ 2>/dev/null | sort -n))
  [[ -n "$bits_per_second" ]] || return 1
  # Calcuate min, max, and avg and scale to GB/s
  local fact=$(echo "(8 * 1024 * 1024 * 1024)" | bc -l)
  local unit="GB/s"
  local min=$(echo "scale=2; ${bits_per_second[0]} / $fact" | bc -l)
  local max=$(echo "scale=2; ${bits_per_second[@]:(-1)} / $fact" | bc -l)
  local avg=$(
    printf "%s\n" "${bits_per_second[@]}" | awk -v fact="$fact" '{
      sum += $1; n++ } END { printf "%.2f", sum/(n * fact); }')
  echo "min = $min $unit, max = $max $unit, avg = $avg $unit"
}

# List of locus nodes reachable from lhn001 as returned by setup()
LOCUS_NODES=$(setup) || exit
#LOCUS_NODES=$(for i in \
#  $(seq 1 12) $(seq 14 29) $(seq 31 50) \
#  $(seq 51 67) $(seq 69 83) $(seq 85 100); do \
#  printf "locus%03d%b\n" $i; done)

# Determine list of available locus nodes per ethernet device. 
for ((eth=0; eth<$n_eth; eth++))
do
  first=$(printf "locus%03d" $(expr 25 '*' $eth + 1))
  last=$(printf "locus%03d" $(expr 25 '*' $eth + 25))
  for node in $LOCUS_NODES
  do
    [[ "$node" < "$first" ]] || [[ "$node" > "$last" ]] && continue;
    ETH_DEV[$eth]+="$node "
  done
done

# associative array 
# (key is name of the Cobalt node, value is an array of Locus nodes)
declare -A IPERF_NODES

for eth in ${!ETH_DEV[*]}
do
  eth_nodes=(${ETH_DEV[$eth]})
  # Are there enough locus nodes available for the current ethernet device?
  [[ ${#eth_nodes[*]} -ge $(expr 2 '*' $n_eth '*' $n_conn) ]] || \
    error "Too few locus nodes available to run test"
  for cbt in ${!CBT_NODES[*]}
  do
    for ((conn = 0; conn < $n_conn; conn++))
    do
      idx=$(expr $n_conn '*' $cbt + $conn)
      IPERF_NODES[${CBT_NODES[$cbt]}]+="${eth_nodes[$idx]} "
    done
  done
done

# Run a whole shebang of iperf clients.
for cbt in ${CBT_NODES[*]}
do
  targets=(${IPERF_NODES[$cbt]})
  for target in ${targets[*]}
  do
    iperf -t $n_seconds -y c -c $target >> iperf-$cbt.log &
  done
done

# Wait for the results
wait

# Print results
echo -e "\nResults per Cobalt node:\n-----------------------"
for cbt in ${CBT_NODES[*]}
do
  result=$(echo -n "$cbt: "; print_stats iperf-$cbt.log) || continue;
  echo "$result"
done
echo -e "\nAggregate results:\n----------------- "
print_stats iperf-*.log
echo

