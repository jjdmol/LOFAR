/*

 * otbgui.ja

*

 * Created on April 26, 2005, 2:09 PM

 */



package gui;



import jOTDB.jConverterInterface;
import jOTDB.jOTDBinterface;
import jOTDB.jOTDBnode;
import jOTDB.jOTDBparam;
import jOTDB.jTreeMaintenanceInterface;
import jOTDB.jTreeValueInterface;
import java.awt.Cursor;
import java.io.File;
import java.rmi.Naming;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;


/**
 *
 * @author  Arthur Coolen
 */





public class otbgui extends javax.swing.JFrame {
    
    // ---------------- Private vars ---------------

    // Param Defaults
    private String aParamName        = "None";
    private String aParamIndex       = "-1";
    private int aParamType           = 0;
    private int aParamUnit           = 0;
    private String aParamPruning     = "-1";
    private String aParamValMoment   = "-1";
    private int aParamRTMod          = 0;
    private String aParamLimits      = "None";
    private String aParamDescription = "None";
    
    // Node defaults
    private String aNodeName         = "None";
    private String aNodeIndex        = "-1";
    private boolean aNodeLeaf        = false;
    private String aNodeInstances    = "-1";
    private String aNodeLimits       = "None";
    private String aNodeDescription  = "None";
    
    // Log defaults
    private boolean setMostRecent=false;
    private String  itsStartTime="2001-01-01 00:00:00";
    private String  itsEndTime="2005-12-31 23:59:59";
    private String  itsParamName="None";
    
    // initial button states
    private boolean nodeButtonsEnabled=false;
    private boolean paramButtonsEnabled=false;
    private boolean logButtonsEnabled=false;
    
    // RMI interfaces
    private static jOTDBinterface remoteOTDB;    
    private static jTreeMaintenanceInterface remoteMaintenance;
    private static jTreeValueInterface remoteValue;
    private static jConverterInterface remoteTypes;
    
    private DefaultMutableTreeNode root  = new DefaultMutableTreeNode();
    private DefaultMutableTreeNode aNode = new DefaultMutableTreeNode();
    
    private boolean isTreeFilled = false;
    private boolean isOTDB =false;
    private boolean isFile=true;
    
    private String itsTreeTabbedPaneFocus="NodePanel";
    
    private jOTDBparam itsPresentParam;
    private jOTDBnode itsPresentNode;

    // -------------- public vars ------------------

    public boolean itsDebugFlag              = false;
    public static String itsSelectedTree     = "None";
    public String itsSelectedTreeType        = "";
    public Integer SelectedTreeID            = -1;
    public String  SelectedTreeState         = "";
    public Integer SelectedNodeID            = -1;
   
    // SettingsDialog Defaults
    public static String RMIServerName      = "lofar17.astron.nl";
    public static String RMIServerPort      = "10099";
    public static String RMIRegistryName    = jOTDBinterface.SERVICENAME;
    public static String RMIMaintenanceName = jTreeMaintenanceInterface.SERVICENAME;
    public static String RMIValName         = jTreeValueInterface.SERVICENAME;
    public static String RMIConverterName   = jConverterInterface.SERVICENAME; 
    public static String OTDBUserName       = "paulus";
    public static String OTDBPassword       = "boskabouter";
    public static String OTDBDBName         = "verhoef";   
    
    
    /** Creates new form otbgui */
    public otbgui() {
        initComponents();
    }  

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */   
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        MainPane = new javax.swing.JTabbedPane();
        TreePanel = new javax.swing.JPanel();
        TreeTableScrollPane = new javax.swing.JScrollPane();
        TreeTable = new javax.swing.JTable();
        TreeSelectButton = new javax.swing.JButton();
        BrowsePanel = new javax.swing.JPanel();
        treeScrollPane = new javax.swing.JScrollPane();
        VICTree = new javax.swing.JTree(root);
        treeTabbedPane = new javax.swing.JTabbedPane();
        NodePanel = new javax.swing.JPanel();
        NodeNameLabel = new javax.swing.JLabel();
        NodeIndexLabel = new javax.swing.JLabel();
        NodeInstancesLabel = new javax.swing.JLabel();
        NodeLimitsLabel = new javax.swing.JLabel();
        NodeDescriptionLabel = new javax.swing.JLabel();
        NodeIndexText = new javax.swing.JTextField();
        NodeInstancesText = new javax.swing.JTextField();
        NodeDescriptionText = new javax.swing.JTextField();
        NodeLimitsText = new javax.swing.JTextField();
        NodeNameText = new javax.swing.JTextField();
        NodeCancelButton = new javax.swing.JButton();
        NodeApplyButton = new javax.swing.JButton();
        ParamPanel = new javax.swing.JPanel();
        ParamNameLabel = new javax.swing.JLabel();
        ParamIndexLabel = new javax.swing.JLabel();
        ParamTypeLabel = new javax.swing.JLabel();
        ParamUnitLabel = new javax.swing.JLabel();
        ParamPruningLabel = new javax.swing.JLabel();
        ParamValMomentLabel = new javax.swing.JLabel();
        ParamRTmodLabel = new javax.swing.JLabel();
        ParamLimitsLabel = new javax.swing.JLabel();
        ParamDescriptionLabel = new javax.swing.JLabel();
        ParamNameText = new javax.swing.JTextField();
        ParamIndexText = new javax.swing.JTextField();
        ParamTypeSelection = new javax.swing.JComboBox();
        ParamUnitSelection = new javax.swing.JComboBox();
        ParamPruningText = new javax.swing.JTextField();
        ParamValMomentText = new javax.swing.JTextField();
        ParamLimitsText = new javax.swing.JTextField();
        ParamDescriptionText = new javax.swing.JTextField();
        ParamCancelButton = new javax.swing.JButton();
        ParamApplyButton = new javax.swing.JButton();
        ParamRTModSelection = new javax.swing.JComboBox();
        LogPanel = new javax.swing.JPanel();
        LogTableScrollPane = new javax.swing.JScrollPane();
        LogTable = new javax.swing.JTable();
        LogParamNameLabel = new javax.swing.JLabel();
        LogParamNameText = new javax.swing.JTextField();
        LogParamRecentOnlyCheckbox = new javax.swing.JCheckBox();
        LogParamEndTimeLabel = new javax.swing.JLabel();
        LogParamStartTimeLabel = new javax.swing.JLabel();
        LogParamStartTimeText = new javax.swing.JTextField();
        LogParamEndTimeText = new javax.swing.JTextField();
        logParamApplyButton = new javax.swing.JButton();
        logParamCancelButton = new javax.swing.JButton();
        ControlPanel = new javax.swing.JPanel();
        CtrlInstButton = new javax.swing.JButton();
        CtrlDeleteButton = new javax.swing.JButton();
        CtrlCopyButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        CtrlChangeTreeStateLabel = new javax.swing.JLabel();
        infoPanel = new javax.swing.JPanel();
        SelectedInputLabel = new javax.swing.JLabel();
        SelectedTreeLabel = new javax.swing.JLabel();
        selectedTreeTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileMenuExit = new javax.swing.JMenuItem();
        SourceMenu = new javax.swing.JMenu();
        SourceMenuInputFile = new javax.swing.JRadioButtonMenuItem();
        SourceMenuInputOTDB = new javax.swing.JRadioButtonMenuItem();
        SettingsMenu = new javax.swing.JMenu();
        SettingsMenuRMISettings = new javax.swing.JMenuItem();
        SettingsMenuDebugSetting = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1280, 1024));
        setName("mainFrame");
        MainPane.setMinimumSize(new java.awt.Dimension(750, 500));
        MainPane.setPreferredSize(new java.awt.Dimension(750, 500));
        MainPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MainPaneStateChanged(evt);
            }
        });

        TreePanel.setLayout(new java.awt.BorderLayout());

        TreePanel.setToolTipText("Search on one or more of the given constraints");
        TreePanel.setMinimumSize(new java.awt.Dimension(700, 475));
        TreePanel.setPreferredSize(new java.awt.Dimension(700, 475));
        TreeTableScrollPane.setMinimumSize(new java.awt.Dimension(750, 22));
        TreeTableScrollPane.setPreferredSize(new java.awt.Dimension(750, 403));
        TreeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TreeID", "Creator", "Creation Date", "Class", "Type", "State", "MomID", "Campaign", "Start Time", "Stop Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TreeTableScrollPane.add(TreeTable);
        TreeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TreeTableMouseClicked(evt);
            }
        });

        TreeTableScrollPane.setViewportView(TreeTable);

        TreePanel.add(TreeTableScrollPane, java.awt.BorderLayout.CENTER);

        TreeSelectButton.setText("Select");
        TreeSelectButton.setToolTipText("Select the highlighted Tree to work with");
        TreeSelectButton.setEnabled(false);
        TreeSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TreeSelectButtonActionPerformed(evt);
            }
        });

        TreePanel.add(TreeSelectButton, java.awt.BorderLayout.SOUTH);

        MainPane.addTab("TreeList", null, TreePanel, "change tree search");

        BrowsePanel.setLayout(new java.awt.BorderLayout());

        BrowsePanel.setMinimumSize(new java.awt.Dimension(750, 475));
        BrowsePanel.setPreferredSize(new java.awt.Dimension(750, 475));
        VICTree.setAutoscrolls(true);
        VICTree.setMinimumSize(new java.awt.Dimension(25, 72));
        VICTree.setShowsRootHandles(true);
        VICTree.setToggleClickCount(1);
        VICTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TreeSelectionListener(evt);
            }
        });

        treeScrollPane.setViewportView(VICTree);

        BrowsePanel.add(treeScrollPane, java.awt.BorderLayout.WEST);

        treeTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                treeTabbedPaneStateChanged(evt);
            }
        });

        NodePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NodeNameLabel.setText("Name");
        NodePanel.add(NodeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        NodeIndexLabel.setText("Index");
        NodePanel.add(NodeIndexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 35, -1, -1));

        NodeInstancesLabel.setText("Instances");
        NodePanel.add(NodeInstancesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        NodeLimitsLabel.setText("Limits");
        NodePanel.add(NodeLimitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 85, -1, -1));

        NodeDescriptionLabel.setText("Description");
        NodePanel.add(NodeDescriptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        NodeIndexText.setText("None");
        NodeIndexText.setEnabled(false);
        NodeIndexText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeIndexText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeIndexText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodePanel.add(NodeIndexText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 200, -1));

        NodeInstancesText.setText("-1");
        NodeInstancesText.setToolTipText("Number of Instances for this Node ");
        NodeInstancesText.setEnabled(false);
        NodeInstancesText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeInstancesTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeInstancesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 200, -1));

        NodeDescriptionText.setText("None");
        NodeDescriptionText.setToolTipText("Description for this Node");
        NodeDescriptionText.setEnabled(false);
        NodeDescriptionText.setMaximumSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.setMinimumSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.setPreferredSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeDescriptionTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeDescriptionText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 440, -1));

        NodeLimitsText.setText("None");
        NodeLimitsText.setToolTipText("Limits for this Node");
        NodeLimitsText.setEnabled(false);
        NodeLimitsText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeLimitsTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeLimitsText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 85, 200, -1));

        NodeNameText.setText("None");
        NodeNameText.setToolTipText("Name for this Node");
        NodeNameText.setEnabled(false);
        NodeNameText.setMaximumSize(new java.awt.Dimension(440, 19));
        NodeNameText.setMinimumSize(new java.awt.Dimension(440, 19));
        NodeNameText.setPreferredSize(new java.awt.Dimension(440, 19));
        NodePanel.add(NodeNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 440, -1));

        NodeCancelButton.setText("Cancel");
        NodeCancelButton.setEnabled(false);
        NodeCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodeCancelButtonActionPerformed(evt);
            }
        });

        NodePanel.add(NodeCancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        NodeApplyButton.setText("Apply");
        NodeApplyButton.setEnabled(false);
        NodeApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodeApplyButtonActionPerformed(evt);
            }
        });

        NodePanel.add(NodeApplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 70, -1));

        treeTabbedPane.addTab("Node", null, NodePanel, "Node Page");

        ParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ParamPanel.setEnabled(false);
        ParamNameLabel.setText("Name");
        ParamPanel.add(ParamNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        ParamIndexLabel.setText("Index");
        ParamPanel.add(ParamIndexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 35, -1, -1));

        ParamTypeLabel.setText("Type");
        ParamPanel.add(ParamTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        ParamUnitLabel.setText("Unit");
        ParamPanel.add(ParamUnitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 85, -1, -1));

        ParamPruningLabel.setText("Pruning");
        ParamPanel.add(ParamPruningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        ParamValMomentLabel.setText("ValMoment");
        ParamValMomentLabel.setVerifyInputWhenFocusTarget(false);
        ParamPanel.add(ParamValMomentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 135, -1, -1));

        ParamRTmodLabel.setText("RTmod");
        ParamPanel.add(ParamRTmodLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));

        ParamLimitsLabel.setText("(Default) Value");
        ParamPanel.add(ParamLimitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 185, -1, -1));

        ParamDescriptionLabel.setText("Description");
        ParamPanel.add(ParamDescriptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, -1));

        ParamNameText.setText("None");
        ParamNameText.setToolTipText("Name for this Parameter");
        ParamNameText.setEnabled(false);
        ParamNameText.setMaximumSize(new java.awt.Dimension(440, 19));
        ParamNameText.setMinimumSize(new java.awt.Dimension(440, 19));
        ParamNameText.setPreferredSize(new java.awt.Dimension(440, 19));
        ParamPanel.add(ParamNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 440, -1));

        ParamIndexText.setText("None");
        ParamIndexText.setToolTipText("Index from this Parameter");
        ParamIndexText.setEnabled(false);
        ParamIndexText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamIndexText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamIndexText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamPanel.add(ParamIndexText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 200, -1));

        ParamTypeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "node", "bool", "int", "long", "flt", "dbl", "icpx", "lcpx", "fcpx", "dcpx", "text", "bin", "uint" }));
        ParamTypeSelection.setToolTipText("Type of this Parameter");
        ParamTypeSelection.setEnabled(false);
        ParamTypeSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParamTypeSelectionMouseClicked(evt);
            }
        });

        ParamPanel.add(ParamTypeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));

        ParamUnitSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Ampere", "m/s", "dB", "time4", "time6", "RAM", "GFLOP", "MB/s", "Mhz" }));
        ParamUnitSelection.setToolTipText("Unit for this Parameter");
        ParamUnitSelection.setEnabled(false);
        ParamUnitSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParamUnitSelectionMouseClicked(evt);
            }
        });

        ParamPanel.add(ParamUnitSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 85, -1, -1));

        ParamPruningText.setText("-1");
        ParamPruningText.setToolTipText("Pruning for this Parameter");
        ParamPruningText.setEnabled(false);
        ParamPruningText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamPruningText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamPruningText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamPruningText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamPruningTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamPruningText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 200, -1));

        ParamValMomentText.setText("-1");
        ParamValMomentText.setToolTipText("Valmoment for the Parameter");
        ParamValMomentText.setEnabled(false);
        ParamValMomentText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamValMomentTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamValMomentText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 135, 200, -1));

        ParamLimitsText.setText("None");
        ParamLimitsText.setToolTipText("Limits for this Parameter");
        ParamLimitsText.setEnabled(false);
        ParamLimitsText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamLimitsTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamLimitsText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 185, 200, -1));

        ParamDescriptionText.setText("None");
        ParamDescriptionText.setToolTipText("Description for this Parameter");
        ParamDescriptionText.setEnabled(false);
        ParamDescriptionText.setMaximumSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.setMinimumSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.setPreferredSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamDescriptionTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamDescriptionText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 440, -1));

        ParamCancelButton.setText("Cancel");
        ParamCancelButton.setEnabled(false);
        ParamCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamCancelButtonActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamCancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        ParamApplyButton.setText("Apply");
        ParamApplyButton.setEnabled(false);
        ParamApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamApplyButtonActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamApplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, -1));

        ParamRTModSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "False", "True" }));
        ParamRTModSelection.setToolTipText("RunTime Modification for this Parameter");
        ParamRTModSelection.setEnabled(false);
        ParamRTModSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParamRTModSelectionMouseClicked(evt);
            }
        });

        ParamPanel.add(ParamRTModSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, -1));

        treeTabbedPane.addTab("Param", null, ParamPanel, "Param Page");

        LogPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LogTableScrollPane.setPreferredSize(new java.awt.Dimension(453, 350));
        LogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ParamName", "Value", "TimeStamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LogTable.setAutoscrolls(false);
        LogTable.setEnabled(false);
        LogTableScrollPane.add(LogTable);
        LogTableScrollPane.setViewportView(LogTable);

        LogPanel.add(LogTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 796, 350));

        LogParamNameLabel.setText("ParamName");
        LogPanel.add(LogParamNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));

        LogParamNameText.setText("None");
        LogParamNameText.setEnabled(false);
        LogPanel.add(LogParamNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 430, -1));

        LogParamRecentOnlyCheckbox.setText("Most Recent Only");
        LogParamRecentOnlyCheckbox.setToolTipText("Select to get only the most recent log val");
        LogParamRecentOnlyCheckbox.setEnabled(false);
        LogParamRecentOnlyCheckbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogParamRecentOnlyCheckboxMouseClicked(evt);
            }
        });

        LogPanel.add(LogParamRecentOnlyCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 400, -1, -1));

        LogParamEndTimeLabel.setText("EndTime");
        LogPanel.add(LogParamEndTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));

        LogParamStartTimeLabel.setText("StartTime");
        LogPanel.add(LogParamStartTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, -1));

        LogParamStartTimeText.setText("2005-01-01 00:00:00.000");
        LogParamStartTimeText.setToolTipText("Give Start date/time for logging");
        LogParamStartTimeText.setEnabled(false);
        LogParamStartTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LogParamStartTimeTextKeyTyped(evt);
            }
        });

        LogPanel.add(LogParamStartTimeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, 180, -1));

        LogParamEndTimeText.setText("2005-12-31 59:59:59.000");
        LogParamEndTimeText.setToolTipText("Give end date/time for log search");
        LogParamEndTimeText.setEnabled(false);
        LogParamEndTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LogParamEndTimeTextKeyTyped(evt);
            }
        });

        LogPanel.add(LogParamEndTimeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 410, 180, -1));

        logParamApplyButton.setText("Apply");
        logParamApplyButton.setToolTipText("Apply changes to logform");
        logParamApplyButton.setEnabled(false);
        logParamApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logParamApplyButtonActionPerformed(evt);
            }
        });

        LogPanel.add(logParamApplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, -1, -1));

        logParamCancelButton.setText("Cancel");
        logParamCancelButton.setToolTipText("restore defaults");
        logParamCancelButton.setEnabled(false);
        logParamCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logParamCancelButtonActionPerformed(evt);
            }
        });

        LogPanel.add(logParamCancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        treeTabbedPane.addTab("Log", null, LogPanel, "Log Page");

        BrowsePanel.add(treeTabbedPane, java.awt.BorderLayout.CENTER);

        MainPane.addTab("Browse", null, BrowsePanel, "Treeview");

        ControlPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ControlPanel.setMinimumSize(new java.awt.Dimension(750, 475));
        ControlPanel.setPreferredSize(new java.awt.Dimension(700, 475));
        CtrlInstButton.setText("Instanciate Tree");
        CtrlInstButton.setToolTipText("Make an instantiated tree from a template");
        CtrlInstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CtrlInstButtonActionPerformed(evt);
            }
        });

        ControlPanel.add(CtrlInstButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        CtrlDeleteButton.setText("Delete");
        CtrlDeleteButton.setEnabled(false);
        CtrlDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CtrlDeleteButtonActionPerformed(evt);
            }
        });

        ControlPanel.add(CtrlDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        CtrlCopyButton.setText("Copy");
        CtrlCopyButton.setEnabled(false);
        ControlPanel.add(CtrlCopyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "idle", "being specified", "specified", "scheduled", "queued", "active", "finished", "aborted", "obsolete" }));
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        ControlPanel.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 160, -1));

        CtrlChangeTreeStateLabel.setText("changeTreeState");
        ControlPanel.add(CtrlChangeTreeStateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 130, 20));

        MainPane.addTab("Control", null, ControlPanel, "ControlPanel");

        getContentPane().add(MainPane, java.awt.BorderLayout.CENTER);
        MainPane.getAccessibleContext().setAccessibleName("");

        infoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoPanel.setMinimumSize(new java.awt.Dimension(750, 29));
        infoPanel.setPreferredSize(new java.awt.Dimension(750, 29));
        SelectedInputLabel.setText("Input from: None");
        infoPanel.add(SelectedInputLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        SelectedTreeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SelectedTreeLabel.setText("SelectedTree");
        infoPanel.add(SelectedTreeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        selectedTreeTextField.setColumns(25);
        selectedTreeTextField.setEditable(false);
        selectedTreeTextField.setText("None");
        selectedTreeTextField.setOpaque(false);
        infoPanel.add(selectedTreeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 350, -1));

        getContentPane().add(infoPanel, java.awt.BorderLayout.SOUTH);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(750, 19));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(750, 19));
        FileMenu.setToolTipText("File Menu");
        FileMenu.setLabel("File");
        FileMenuExit.setLabel("Exit");
        FileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuExitActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuExit);

        jMenuBar1.add(FileMenu);

        SourceMenu.setText("Source");
        SourceMenu.setToolTipText("Source selection Menu");
        SourceMenuInputFile.setSelected(true);
        SourceMenuInputFile.setText("Input from File");
        SourceMenuInputFile.setToolTipText("Set input to file");
        SourceMenuInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceMenuInputFileActionPerformed(evt);
            }
        });

        SourceMenu.add(SourceMenuInputFile);

        SourceMenuInputOTDB.setText("Input from OTDB");
        SourceMenuInputOTDB.setToolTipText("Set input to OTDB");
        SourceMenuInputOTDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceMenuInputOTDBActionPerformed(evt);
            }
        });

        SourceMenu.add(SourceMenuInputOTDB);

        jMenuBar1.add(SourceMenu);

        SettingsMenu.setText("Settings");
        SettingsMenu.setToolTipText("Settings Menu");
        SettingsMenuRMISettings.setText("RMISettings");
        SettingsMenuRMISettings.setToolTipText("set RMI server & database");
        SettingsMenuRMISettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuRMISettingsActionPerformed(evt);
            }
        });

        SettingsMenu.add(SettingsMenuRMISettings);

        SettingsMenuDebugSetting.setText("Debug on");
        SettingsMenuDebugSetting.setToolTipText("Set Debug on to get more debug output");
        SettingsMenuDebugSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuDebugSettingActionPerformed(evt);
            }
        });

        SettingsMenu.add(SettingsMenuDebugSetting);

        jMenuBar1.add(SettingsMenu);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-627)/2, 800, 627);
    }
    // </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void CtrlInstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CtrlInstButtonActionPerformed
        instanciateTree(SelectedTreeID);
    }//GEN-LAST:event_CtrlInstButtonActionPerformed

    private void CtrlDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CtrlDeleteButtonActionPerformed
        deleteTree(SelectedTreeID);
    }//GEN-LAST:event_CtrlDeleteButtonActionPerformed

    private void MainPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MainPaneStateChanged
        if (MainPane.getSelectedIndex() == 2) {
            if (SelectedTreeState=="obsolete") {
                CtrlDeleteButton.setEnabled(true);
            } else {
                CtrlDeleteButton.setEnabled(false);                
            }
        }
    }//GEN-LAST:event_MainPaneStateChanged

    private void TreeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TreeTableMouseClicked
        if (evt.getClickCount() == 2) {
            selectWorkTree();
        }
    }//GEN-LAST:event_TreeTableMouseClicked

    private void ParamRTModSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParamRTModSelectionMouseClicked
         if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamRTModSelectionMouseClicked

    private void ParamUnitSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParamUnitSelectionMouseClicked
         if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamUnitSelectionMouseClicked

    private void ParamTypeSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParamTypeSelectionMouseClicked
         if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamTypeSelectionMouseClicked

    private void LogParamRecentOnlyCheckboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogParamRecentOnlyCheckboxMouseClicked
        if (!logButtonsEnabled) setLogButtons(true);
    }//GEN-LAST:event_LogParamRecentOnlyCheckboxMouseClicked

    private void LogParamEndTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LogParamEndTimeTextKeyTyped
        if (!logButtonsEnabled) setLogButtons(true);
    }//GEN-LAST:event_LogParamEndTimeTextKeyTyped

    private void LogParamStartTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LogParamStartTimeTextKeyTyped
        if (!logButtonsEnabled) setLogButtons(true);
    }//GEN-LAST:event_LogParamStartTimeTextKeyTyped

    private void treeTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_treeTabbedPaneStateChanged
        if (treeTabbedPane.getSelectedIndex() == 0) {
            itsTreeTabbedPaneFocus="NodePanel";
            if (isTreeFilled && SelectedNodeID != -1) {
               updateNodePanel(SelectedNodeID);
            }        
        } else if (treeTabbedPane.getSelectedIndex() == 1) {
            itsTreeTabbedPaneFocus="ParamPanel";
            if (isTreeFilled && SelectedNodeID != -1) {
               updateParamPanel(SelectedNodeID);
            }
        } else if (treeTabbedPane.getSelectedIndex() == 2) {
            itsTreeTabbedPaneFocus="LogPanel";
            if (isTreeFilled && SelectedNodeID != -1) {
               updateLogPanel(SelectedNodeID);
            }
        }
    }//GEN-LAST:event_treeTabbedPaneStateChanged

    private void SettingsMenuDebugSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuDebugSettingActionPerformed
        itsDebugFlag=SettingsMenuDebugSetting.isSelected();
    }//GEN-LAST:event_SettingsMenuDebugSettingActionPerformed

    private void ParamDescriptionTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamDescriptionTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamDescriptionTextKeyTyped

    private void ParamLimitsTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamLimitsTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamLimitsTextKeyTyped

    private void ParamValMomentTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamValMomentTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamValMomentTextKeyTyped

    private void ParamPruningTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamPruningTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamPruningTextKeyTyped

    private void NodeDescriptionTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeDescriptionTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeDescriptionTextKeyTyped

    private void NodeLimitsTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeLimitsTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeLimitsTextKeyTyped

    private void NodeInstancesTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeInstancesTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeInstancesTextKeyTyped

    private void logParamApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logParamApplyButtonActionPerformed
        setLogValues();
    }//GEN-LAST:event_logParamApplyButtonActionPerformed

    private void logParamCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logParamCancelButtonActionPerformed
        LogParamNameText.setText(itsPresentParam.name);
        LogParamStartTimeText.setText(itsStartTime);
        LogParamEndTimeText.setText(itsEndTime);
        LogParamRecentOnlyCheckbox.setSelected(setMostRecent);
    }//GEN-LAST:event_logParamCancelButtonActionPerformed

    private void ParamApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamApplyButtonActionPerformed
        setParamValues();
    }//GEN-LAST:event_ParamApplyButtonActionPerformed

    private void ParamCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamCancelButtonActionPerformed
        // ParamNameText.setText(aParamName);
        // ParamIndexText.setText(aParamIndex);
        ParamTypeSelection.setSelectedIndex(aParamType);
        ParamUnitSelection.setSelectedIndex(aParamUnit);
        ParamPruningText.setText(aParamPruning);
        ParamValMomentText.setText(aParamValMoment);
        ParamRTModSelection.setSelectedIndex(aParamRTMod);
        ParamLimitsText.setText(aParamLimits);
        ParamDescriptionText.setText(aParamDescription);
        setParamButtons(false);
    }//GEN-LAST:event_ParamCancelButtonActionPerformed

        
    private void NodeApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodeApplyButtonActionPerformed
        setNodeValues();
    }//GEN-LAST:event_NodeApplyButtonActionPerformed

    private void NodeCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodeCancelButtonActionPerformed
        // NodeNameText.setText(aNodeName);
        // NodeIndexText.setText(aNodeIndex);
        NodeInstancesText.setText(aNodeInstances);
        NodeLimitsText.setText(aNodeLimits);
        NodeDescriptionText.setText(aNodeDescription);
        setNodeButtons(false);         
    }//GEN-LAST:event_NodeCancelButtonActionPerformed


    private void TreeSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TreeSelectButtonActionPerformed
        selectWorkTree();
    }//GEN-LAST:event_TreeSelectButtonActionPerformed


    private void SourceMenuInputOTDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceMenuInputOTDBActionPerformed
        createTreeList(-1);
    }//GEN-LAST:event_SourceMenuInputOTDBActionPerformed



    private void SourceMenuInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceMenuInputFileActionPerformed
      itsSelectedTree = "None";
      SelectedInputLabel.setText("Input from: File");
      selectedTreeTextField.setText(itsSelectedTree);
      TreeSelectButton.setEnabled(false);

      JFileChooser fc = new JFileChooser();
      int returnVal = fc.showOpenDialog(otbgui.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
          File aFile = fc.getSelectedFile();
          SourceMenuInputOTDB.setSelected(true);
          isFile=true;
          isOTDB=false;
      } else {
          JOptionPane.showMessageDialog(null,"You didn't select a file",
                  "Source selection warning",
                  JOptionPane.WARNING_MESSAGE);
          SourceMenuInputFile.setSelected(false);
      }
    }//GEN-LAST:event_SourceMenuInputFileActionPerformed



    private void SettingsMenuRMISettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuRMISettingsActionPerformed
        SettingsDialog aSW = new SettingsDialog();
        aSW.setSize(400, 300);
        aSW.setVisible(true);     
    }//GEN-LAST:event_SettingsMenuRMISettingsActionPerformed



   

    private void TreeSelectionListener(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_TreeSelectionListener
        TreePath tp = evt.getNewLeadSelectionPath();
        if (tp != null) {
            changeTreeSelection(tp.getLastPathComponent());
        }
    }//GEN-LAST:event_TreeSelectionListener



    private void FileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuExitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_FileMenuExitActionPerformed

    

    /**

     * @param args the command line arguments

     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new otbgui().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BrowsePanel;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JLabel CtrlChangeTreeStateLabel;
    private javax.swing.JButton CtrlCopyButton;
    private javax.swing.JButton CtrlDeleteButton;
    private javax.swing.JButton CtrlInstButton;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuExit;
    private javax.swing.JPanel LogPanel;
    private javax.swing.JLabel LogParamEndTimeLabel;
    private javax.swing.JTextField LogParamEndTimeText;
    private javax.swing.JLabel LogParamNameLabel;
    private javax.swing.JTextField LogParamNameText;
    private javax.swing.JCheckBox LogParamRecentOnlyCheckbox;
    private javax.swing.JLabel LogParamStartTimeLabel;
    private javax.swing.JTextField LogParamStartTimeText;
    private javax.swing.JTable LogTable;
    private javax.swing.JScrollPane LogTableScrollPane;
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton NodeApplyButton;
    private javax.swing.JButton NodeCancelButton;
    private javax.swing.JLabel NodeDescriptionLabel;
    private javax.swing.JTextField NodeDescriptionText;
    private javax.swing.JLabel NodeIndexLabel;
    private javax.swing.JTextField NodeIndexText;
    private javax.swing.JLabel NodeInstancesLabel;
    private javax.swing.JTextField NodeInstancesText;
    private javax.swing.JLabel NodeLimitsLabel;
    private javax.swing.JTextField NodeLimitsText;
    private javax.swing.JLabel NodeNameLabel;
    private javax.swing.JTextField NodeNameText;
    private javax.swing.JPanel NodePanel;
    private javax.swing.JButton ParamApplyButton;
    private javax.swing.JButton ParamCancelButton;
    private javax.swing.JLabel ParamDescriptionLabel;
    private javax.swing.JTextField ParamDescriptionText;
    private javax.swing.JLabel ParamIndexLabel;
    private javax.swing.JTextField ParamIndexText;
    private javax.swing.JLabel ParamLimitsLabel;
    private javax.swing.JTextField ParamLimitsText;
    private javax.swing.JLabel ParamNameLabel;
    private javax.swing.JTextField ParamNameText;
    private javax.swing.JPanel ParamPanel;
    private javax.swing.JLabel ParamPruningLabel;
    private javax.swing.JTextField ParamPruningText;
    private javax.swing.JComboBox ParamRTModSelection;
    private javax.swing.JLabel ParamRTmodLabel;
    private javax.swing.JLabel ParamTypeLabel;
    private javax.swing.JComboBox ParamTypeSelection;
    private javax.swing.JLabel ParamUnitLabel;
    private javax.swing.JComboBox ParamUnitSelection;
    private javax.swing.JLabel ParamValMomentLabel;
    private javax.swing.JTextField ParamValMomentText;
    private javax.swing.JLabel SelectedInputLabel;
    private javax.swing.JLabel SelectedTreeLabel;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JRadioButtonMenuItem SettingsMenuDebugSetting;
    private javax.swing.JMenuItem SettingsMenuRMISettings;
    private javax.swing.JMenu SourceMenu;
    private javax.swing.JRadioButtonMenuItem SourceMenuInputFile;
    private javax.swing.JRadioButtonMenuItem SourceMenuInputOTDB;
    private javax.swing.JPanel TreePanel;
    private javax.swing.JButton TreeSelectButton;
    private javax.swing.JTable TreeTable;
    private javax.swing.JScrollPane TreeTableScrollPane;
    private javax.swing.JTree VICTree;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton logParamApplyButton;
    private javax.swing.JButton logParamCancelButton;
    private javax.swing.JTextField selectedTreeTextField;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JTabbedPane treeTabbedPane;
    // End of variables declaration//GEN-END:variables

    private boolean openRemoteConnection(String RMIRegHostName) {
        try {
            if (itsDebugFlag) System.out.println("openRemoteConnection for "+RMIRegHostName);
        
            // create a remote object
            remoteOTDB = (jOTDBinterface) Naming.lookup (RMIRegHostName);     
//	    Registry remoteRegistry = LocateRegistry.getRegistry(RMIRegHostName.toCharArray()[0]);
//	    remoteOTDB = (jOTDBinterface) remoteRegistry.lookup (RMIRegistryName);
            if (itsDebugFlag) System.out.println (remoteOTDB);
					    
	    // do the test	
	    if (itsDebugFlag) System.out.println("Trying to connect to the database");
	    assert remoteOTDB.connect() : "Connection failed";	
	    assert remoteOTDB.isConnected() : "Connnection flag failed";
	     
	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Open Remote Connection via RMI and JNI failed: " + e);
	  }
        return false;
    }   
    
    private boolean openRemoteMaintenance(String RMIMaintName) {
        try {
            if (itsDebugFlag) System.out.println("openRemoteMaintenance for "+RMIMaintName);
        
            // create a remote object
            remoteMaintenance = (jTreeMaintenanceInterface) Naming.lookup (RMIMaintName);     
//	    Registry remoteRegistry = LocateRegistry.getRegistry(RMIMaintName.toCharArray()[0]);
//	    remoteMaintenance = (jTreeMaintenanceInterface) remoteRegistry.lookup (RMIMaintName);
            if (itsDebugFlag) System.out.println (remoteMaintenance);
					    
     	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Getting Remote Maintenance via RMI and JNI failed: " + e);
	  }
        return false;
    }  
    
        
    private boolean openRemoteValue(String RMIValName) {
        try {
            if (itsDebugFlag) System.out.println("OpenRemoteValue for "+RMIValName);
        
            // create a remote object
            remoteValue = (jTreeValueInterface) Naming.lookup (RMIValName);     
//	    Registry remoteRegistry = LocateRegistry.getRegistry(RMIMaintName.toCharArray()[0]);
//	    remoteValue = (jTreeValueInterface) remoteRegistry.lookup (RMIValName);
            if (itsDebugFlag) System.out.println (remoteValue);
					    
     	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Getting Remote Value via RMI and JNI failed: " + e);
	  }
        return false;
    }

    private boolean openRemoteConverter(String RMIConverterName) {
        try {
            if (itsDebugFlag) System.out.println("openRemoteConverter for "+RMIConverterName);
        
            // create a remote object\
            remoteTypes = (jConverterInterface) Naming.lookup (RMIConverterName); 
//	    Registry remoteTypes = LocateRegistry.getRegistry(RMIConverterName.toCharArray()[0]);
//	    remoteValue = (jConverterInterface) remoteRegistry.lookup (RMIConverterName);
            if (itsDebugFlag) System.out.println (remoteValue);
					    
     	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Getting remote Converter via RMI and JNI failed: " + e);
	  }
        return false;
    }

    
    
    private boolean fillTreeTable(int aSelectedTreeID) {
        if (itsDebugFlag) System.out.println("fillTreeTable for "+aSelectedTreeID);

        BrowsePanel.setEnabled(false);
        LogPanel.setEnabled(false);

        Vector treeList=new Vector();
        
       
        try {            
          treeList=remoteOTDB.getTreeList((short)0, (short)0);
          if (itsDebugFlag) System.out.println("returned treeList has size: "+treeList.size());
          if (treeList.size() <= 0) {
            if (itsDebugFlag) System.out.println("Error:" + remoteOTDB.errorMsg());
            return false;
          } else {
            if (itsDebugFlag) System.out.println("Collected tree list");
            java.util.Collections.sort(treeList);
          }
        } 
        catch (Exception e)
	{
	  System.out.println ("getTreeList via RMI and JNI failed: " + e);
	}        
        
        BrowsePanel.setEnabled(true);
        LogPanel.setEnabled(true);
        // Give our own model to the TreeTable
        treeModel tm = new treeModel(remoteOTDB,treeList);
        tm.setDebugFlag(itsDebugFlag);
        TreeTable.setModel(tm);       
        TreeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        if (aSelectedTreeID >= 0 ) {
            for (int i=0; i < tm.getRowCount();i++ ) {
                if (((Integer)tm.getValueAt(i, 0)).intValue() == aSelectedTreeID) {
                    TreeTable.setRowSelectionInterval(i,i);
                }
            }
        }
        TreeSelectButton.setEnabled(true);
       return true;
    }

    private void setParamValues() {
        if (itsDebugFlag) System.out.println("setParamValues");

        // aParamName=ParamNameText.getText();
        // aParamIndex=ParamIndexText.getText();
        boolean hasChanged=false;
        if (aParamType != ParamTypeSelection.getSelectedIndex()) {
            aParamType=ParamTypeSelection.getSelectedIndex();
            itsPresentParam.type=(short)aParamType;
            hasChanged=true;
        }
        if (aParamUnit != ParamUnitSelection.getSelectedIndex()) {
            aParamUnit=ParamUnitSelection.getSelectedIndex();
            itsPresentParam.unit=(short)aParamUnit;
            hasChanged=true;
        }
        if (!aParamPruning.equals(ParamPruningText.getText())) {
            aParamPruning=ParamPruningText.getText();
            itsPresentParam.pruning=Integer.valueOf(aParamPruning).shortValue();            
            hasChanged=true;
        }
        if (!aParamValMoment.equals(ParamValMomentText.getText())) {
            aParamValMoment=ParamValMomentText.getText();
            itsPresentParam.valMoment=Integer.valueOf(aParamValMoment).shortValue();            
            hasChanged=true;
        }
        if (aParamRTMod != ParamRTModSelection.getSelectedIndex()) {    
            aParamRTMod=ParamRTModSelection.getSelectedIndex();
            boolean aFlag=false;
            if (aParamRTMod==0) {
                aFlag=false;
            } else {
                aFlag=true;
            }
            itsPresentParam.runtimeMod=aFlag;                        
            hasChanged=true;
        }
        if (!aParamLimits.equals(ParamLimitsText.getText())) {
            aParamLimits=ParamLimitsText.getText();
            itsPresentParam.limits=aParamLimits;
            hasChanged=true;
        }

        setParamButtons(false);
        if (hasChanged) {
            if (saveParam(itsPresentParam) ) {
                if (itsDebugFlag) System.out.println("Saving Param succeeded.");
            } else {
                if (itsDebugFlag) System.out.println("Saving Param FAILED.");                
            }
        }
    }
    
    private void setNodeValues() {
        if (itsDebugFlag) System.out.println("setNodeValues");
        
        boolean hasChanged=false;
        // aNodeName=NodeNameText.getText();
        // aNodeIndex=NodeIndexText.getText();
        if (!aNodeInstances.equals(NodeInstancesText.getText())) {
            aNodeInstances=NodeInstancesText.getText();
            itsPresentNode.instances=Integer.valueOf(aNodeInstances).shortValue();            
            if (itsDebugFlag) System.out.println("Node Instances changed to "+itsPresentNode.instances);

            hasChanged=true;
        }
        if (!aNodeLimits.equals(NodeLimitsText.getText())) {
            aNodeLimits=NodeLimitsText.getText();
            itsPresentNode.limits=aNodeLimits;
            if (itsDebugFlag) System.out.println("Node limits changed to "+itsPresentNode.limits);
            hasChanged=true;
        }

        setNodeButtons(false);
        if (hasChanged) {
            if (saveNode(itsPresentNode) ) {
                if (itsDebugFlag) System.out.println("Saving Node succeeded.");
            } else {
                if (itsDebugFlag) System.out.println("Saving Node FAILED.");                
            }
        }
    }
    
    private void setLogValues() {
        if (itsDebugFlag) System.out.println("setLogValues");
        boolean hasChanged=false;
        
        if (!itsStartTime.equals(LogParamStartTimeText.getText())) {
            itsStartTime=LogParamStartTimeText.getText();
            hasChanged=true;
        }
        if (!itsEndTime.equals(LogParamEndTimeText.getText())) {
            itsEndTime=LogParamEndTimeText.getText();
            hasChanged=true;
        }
        
        if (!LogParamRecentOnlyCheckbox.isSelected() == setMostRecent ) {
            setMostRecent=LogParamRecentOnlyCheckbox.isSelected();
            hasChanged=true;
        }
        //
        // refresh the logs following the new settings
        setLogButtons(false);
        refreshLogPanel();
        
    }
    
    private void setParamButtons(boolean flag) {
        if (itsDebugFlag) System.out.println("setParamButtons "+flag);

        // To avoid that saving is available for type hardware and type VHtree trees we 
        // set flag to false for now
        if (!itsSelectedTreeType.equals("VItemplate")) flag=false;
        ParamApplyButton.setEnabled(flag);
        ParamCancelButton.setEnabled(flag);
        paramButtonsEnabled=flag;
    }
    
    private void setNodeButtons(boolean flag) {
        if (itsDebugFlag) System.out.println("setNodeButtons "+flag);
        // To avoid that saving is available for type hardware and type VHtree trees we 
        // set flag to false for now
        if (!itsSelectedTreeType.equals("VItemplate")) flag=false;
        NodeApplyButton.setEnabled(flag);
        NodeCancelButton.setEnabled(flag);
        nodeButtonsEnabled=flag;
    }
    
    private void setLogButtons(boolean flag) {
        if (itsDebugFlag) System.out.println("setLogButtons "+flag);
        logParamApplyButton.setEnabled(flag);
        logParamCancelButton.setEnabled(flag);
        logButtonsEnabled=flag;
    }

    private boolean getTreeList() {
        if (itsDebugFlag) System.out.println("getTreeList");
        boolean aFlag=false;
        if (isTreeFilled){
           clearTree();
        }
        
            String aRMS="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIMaintenanceName;
            String aRMV="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIValName;
            String aRMC="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIConverterName;
          
            if (openRemoteMaintenance(aRMS) && openRemoteValue(aRMV) && openRemoteConverter(aRMC)) {  
               if (fillTreeList()) {
                  if (itsDebugFlag) System.out.println("Tree should be filled now");
                  aFlag=true;
               } else {
                   if (itsDebugFlag) System.out.println("Error in filling the treeList");
                  aFlag=false;
               }
             }   
        
        isTreeFilled=true;
        return aFlag;
    }
    
    private boolean fillTreeList() {        
        if (itsDebugFlag) System.out.println("fillTreeList");

        boolean aFlag=false;
        try {
            if (itsDebugFlag) System.out.println("Trying to get the topnode of the tree:"+ SelectedTreeID);
            jOTDBnode topNode = remoteMaintenance.getTopNode (SelectedTreeID.intValue ());
            aFlag=true;
            
            // Check should be possible......
            
            
            if (itsDebugFlag) System.out.println ("TopNode name: "+topNode.name);   
            if (itsDebugFlag) System.out.println(topNode.treeID()+" "+topNode.nodeID()+" "+topNode.parentID());
            
            //set rootlevel for tree and keep parentID
            String [] aS=topNode.name.split("[.]");
            String aName=topNode.nodeID()+":"+aS[aS.length-1];
            root.setUserObject(new DefaultMutableTreeNode(aName));
            
            addChildren(root,topNode);
            
            // set initialselection to topnode
            TreePath aTreePath = new TreePath(root.getPath());
            VICTree.scrollPathToVisible(aTreePath);
            VICTree.expandPath(aTreePath);
            VICTree.setSelectionPath(aTreePath);
            VICTree.updateUI();          
	    //	showNodeList(nodeList);           
        } catch (Exception e){
            System.out.println ("getTopNode via RMI and JNI failed: " + e); 
            aFlag=false;
        }
        return aFlag;
    }

    private void addChildren(DefaultMutableTreeNode root,jOTDBnode aTopNode){
        if (itsDebugFlag) System.out.println("addChildren");

        if (itsDebugFlag) System.out.println("Trying to get a node list with depth=1");
        try {
            
            Vector aNodeList = remoteMaintenance.getItemList (SelectedTreeID.intValue (), aTopNode.nodeID(), 1);
            if (itsDebugFlag) System.out.println("TreeId NodeID ParentID");
	    for (int k=0; k< aNodeList.size();k++) {
                jOTDBnode aNewNode = (jOTDBnode)aNodeList.elementAt(k);
                if (itsDebugFlag) System.out.println(aNewNode.treeID()+" "+aNewNode.nodeID()+" "+aNewNode.parentID());
                String [] aS=aNewNode.name.split("[.]");
                String aName=aNewNode.nodeID()+":"+aS[aS.length-1];
                aNode= new DefaultMutableTreeNode(aName);
                root.add(aNode);
                addChildren(aNode, aNewNode);
            }
        } catch (Exception e){
            System.out.println ("Maintenance.getItemList via RMI and JNI failed: " + e); 
        }        
    }
    
    private void clearAll() {
        if (itsDebugFlag) System.out.println("clearAll");
        
        itsPresentNode=null;
        itsPresentParam=null;
        SelectedNodeID=-1;
        SelectedTreeID=-1;
        SelectedTreeState="";
        enableParamPanel(false);
        enableNodePanel(false);
        enableLogPanel(false);
        clearParamPanel();
        clearNodePanel();
        clearLogPanel();
        clearTree();
    }
    
    private void clearTree() {
        if (itsDebugFlag) System.out.println("clearTree");
        root.removeAllChildren();
        root.setUserObject(new DefaultMutableTreeNode());
        isTreeFilled=false;
        itsSelectedTree="None";
        itsSelectedTreeType="";
        selectedTreeTextField.setText("None");       
        VICTree.updateUI();
    }
    
    private void changeTreeSelection(Object aO) {
        if (itsDebugFlag) System.out.println("changeTreeSelection");

        String aS = aO.toString();
        changeSelection(aS);
    }
    
    private void changeSelection(String aNodeName){
        if (itsDebugFlag) System.out.println("changeSelection for"+aNodeName);
        boolean found = false;
        
        // No reason to do this when Tree is not filled yet anyway
        if (! isTreeFilled) return;
        
        
        // strip nodeID from Name
        String [] aS=aNodeName.split("[:]");
        int aNodeID=Integer.parseInt(aS[0]);
        if (SelectedNodeID == -1) {
           enableNodePanel(true);
           enableParamPanel(true);
        }
        SelectedNodeID=aNodeID;
        //find arrayindex that contains this nodeName
        Enumeration e = ((DefaultMutableTreeNode)VICTree.getModel().getRoot()).breadthFirstEnumeration();
        
        DefaultMutableTreeNode aFoundNode;
        boolean personDone=false;
        while (e.hasMoreElements()) {
            aFoundNode=(DefaultMutableTreeNode)e.nextElement();
            if (aFoundNode.getUserObject().toString().equals(aNodeName)) {
                setPresentNode(aNodeID);      
                if (itsPresentNode.leaf) {
                    treeTabbedPane.setSelectedIndex(1);
                    itsTreeTabbedPaneFocus="ParamPanel";
                    updateParamPanel(aNodeID);
                    clearNodePanel();
                } else {
                    treeTabbedPane.setSelectedIndex(0);
                    itsTreeTabbedPaneFocus="NodePanel";
                    updateNodePanel(aNodeID);
                    clearParamPanel();
                }
                found = true;
                TreePath aTreePath = new TreePath(aFoundNode.getPath());
                VICTree.scrollPathToVisible(aTreePath);
                VICTree.expandPath(aTreePath);
                VICTree.setSelectionPath(aTreePath);
            }
        }
    }
    
    private void setPresentNode(int aNodeID) {
        if (itsDebugFlag) System.out.println("setPresentNode to "+aNodeID + " for TreeID: "+ SelectedTreeID);
        
        try {
            itsPresentNode=remoteMaintenance.getNode(SelectedTreeID, aNodeID);
        } catch (Exception e) {
            System.out.println ("Maintenance.getNode via RMI and JNI failed: " + e); 
        }
    }
    

    private void updateNodePanel(int aNodeID) {
        if (itsDebugFlag) System.out.println("updateNodePanel"+aNodeID);
        
        setPresentNode(aNodeID);
        NodeNameText.setText(itsPresentNode.name);
        NodeIndexText.setText(Short.toString(itsPresentNode.index));
        NodeInstancesText.setText(Short.toString(itsPresentNode.instances));
        NodeLimitsText.setText(itsPresentNode.limits);
        NodeDescriptionText.setText(itsPresentNode.description);
        if (!itsPresentNode.leaf) {
            aNodeName=NodeNameText.getText();
            aNodeIndex=NodeIndexText.getText();
            aNodeLeaf=itsPresentNode.leaf;
            aNodeInstances=NodeInstancesText.getText();
            aNodeLimits=NodeLimitsText.getText();
            aNodeDescription=NodeDescriptionText.getText();
            enableNodePanel(true);
        } else {
            enableNodePanel(false);
        }
    }

    private void updateParamPanel(int aNodeID) {
        if (itsDebugFlag) System.out.println("updateParamPanel. nodeiD: "+aNodeID);
        try {
            setPresentNode(aNodeID);
            if (itsDebugFlag) System.out.println("Present Node: "+itsPresentNode.name);
            // Check if valid parameter found
            jOTDBparam aP=remoteMaintenance.getParam(SelectedTreeID, itsPresentNode.paramDefID());
            if (itsDebugFlag) System.out.println("Input TreeID: "+SelectedTreeID);
            if (itsDebugFlag) System.out.println("Input NodeID: "+aNodeID);
            if (itsDebugFlag) System.out.println("pNode NodeID: "+itsPresentNode.nodeID());
            if (itsDebugFlag) System.out.println("pNode NodeParamDefID: "+itsPresentNode.paramDefID());
            
            if (itsDebugFlag) printParam(aP);
            
            if (itsPresentNode.leaf && aP.paramID() > 0) {
                itsPresentParam=aP;

                
                ParamNameText.setText(itsPresentParam.name);
                ParamIndexText.setText(Short.toString(itsPresentParam.index));
                ParamTypeSelection.setSelectedIndex(getTypeIndex(itsPresentParam.type));
                ParamUnitSelection.setSelectedIndex(itsPresentParam.unit);
                ParamPruningText.setText(Short.toString(itsPresentParam.pruning));
                ParamValMomentText.setText(Short.toString(itsPresentParam.valMoment));
                int i;
                if (!itsPresentParam.runtimeMod) {
                    i=0;
                } else {
                    i=1;
                }
                ParamRTModSelection.setSelectedIndex(i);
                ParamLimitsText.setText(itsPresentParam.limits);
                ParamDescriptionText.setText(itsPresentParam.description);  
                aParamName=ParamNameText.getText();
                aParamIndex=ParamIndexText.getText();
                aParamType=ParamTypeSelection.getSelectedIndex();
                aParamUnit=ParamUnitSelection.getSelectedIndex();
                aParamPruning=ParamPruningText.getText();
                aParamValMoment=ParamValMomentText.getText();
                aParamRTMod=ParamRTModSelection.getSelectedIndex();
                aParamLimits=ParamLimitsText.getText();
                aParamDescription=ParamDescriptionText.getText();
                enableParamPanel(true);
            } else {
                enableParamPanel(false);
            }
        } catch (Exception e) {
            System.out.println ("maintenance.getParam via RMI and JNI failed: " + e); 
        }
    }

    private int getTypeIndex(Short aType) {
        if (itsDebugFlag) System.out.println("getTypeIndex for: "+aType);
        
        try {
            if (itsDebugFlag) System.out.println("Type in: " + aType);
            
            for (int i=0;i<ParamTypeSelection.getItemCount();i++) {
                if (itsDebugFlag) System.out.println("List nr: " + i + " : "+ ParamTypeSelection.getItemAt(i));
                if (itsDebugFlag) System.out.println("Remote Type found: "+remoteTypes.getParamType(aType));
                if (remoteTypes.getParamType(aType).equals(ParamTypeSelection.getItemAt(i))) return i;
            }
        } catch (Exception e) {
            System.out.println ("Remote Conversion via RMI and JNI failed: " + e); 
        }            
        return -1;
    }
    
    private void updateLogPanel(int aNodeID) {
        if (itsDebugFlag) System.out.println("updateLogPanel NodeID: "+aNodeID);

        try {
    
            setPresentNode(aNodeID);
            jOTDBparam aP=remoteMaintenance.getParam(SelectedTreeID, itsPresentNode.paramDefID());
            
            refreshLogPanel();
            // Check if param is valid
            if (itsPresentNode.leaf && aP.paramID() > 0) {
                itsPresentParam=aP;
                
                enableLogPanel(true);
            } else {
                enableLogPanel(false);
            }
                
        } catch (Exception e) {
            System.out.println ("Maintenance.getParam OTDB via RMI and JNI failed: " + e); 
        }
    }
    
    private boolean saveParam(jOTDBparam aP) {
        if (itsDebugFlag) System.out.println("saveParam");
        
        boolean aFlag=false;
        try {
          if (itsDebugFlag) System.out.println("Saving Param:");
          if (itsDebugFlag) printParam(aP);
            
          if (aP.nodeID() > 0) {
              aFlag=remoteMaintenance.saveParam(aP);
          } else {
              if (itsDebugFlag) System.out.println("Invalid parameter. NOT saved!");
          }
          
            
        } catch (Exception e) {
            System.out.println ("Maintenance.saveParam via RMI and JNI failed: " + e); 
        }
        return aFlag;
    }
    
    private boolean saveNode(jOTDBnode aN) {
        if (itsDebugFlag) System.out.println("saveNode");
        
        boolean aFlag=false;
        try {
            if (itsDebugFlag) System.out.println("Saving Node:");
            if (itsDebugFlag) printNode(aN);
            
            if(aN.nodeID() > 0)  {
                aFlag=remoteMaintenance.saveNode(aN);
            } else {
               System.out.println("Invalid node. NOT saved!");               
            }
            
        } catch (Exception e) {
            System.out.println ("Maintenance.saveNode via RMI and JNI failed: " + e); 
        }
        return aFlag;
    }
    
    private void clearParamPanel() {
        if (itsDebugFlag) System.out.println("clearParamPanel");
        
        aParamName        = "None";
        aParamIndex       = "-1";
        aParamType           = 0;
        aParamUnit           = 0;
        aParamPruning     = "-1";
        aParamValMoment   = "-1";
        aParamRTMod          = 0;
        aParamLimits      = "None";
        aParamDescription = "None";
        ParamNameText.setText(aParamName);
        ParamIndexText.setText(aParamIndex);
        ParamTypeSelection.setSelectedIndex(aParamType);
        ParamUnitSelection.setSelectedIndex(aParamUnit);
        ParamPruningText.setText(aParamPruning);
        ParamValMomentText.setText(aParamValMoment);
        ParamRTModSelection.setSelectedIndex(aParamRTMod);
        ParamLimitsText.setText(aParamLimits);
        ParamDescriptionText.setText(aParamDescription);
    }
    
    private void clearNodePanel() {
        if (itsDebugFlag) System.out.println("clearNodePanel");
        
        aNodeName         = "None";
        aNodeIndex        = "-1";
        aNodeInstances    = "-1";
        aNodeLimits       = "None";
        aNodeDescription  = "None";
        NodeNameText.setText(aNodeName);
        NodeIndexText.setText(aNodeIndex);
        NodeInstancesText.setText(aNodeInstances);
        NodeLimitsText.setText(aNodeLimits);
        NodeDescriptionText.setText(aNodeDescription);
    }
    
    private void clearLogPanel() {
        if (itsDebugFlag) System.out.println("clearLogPanel");
        
        itsParamName="None";
        itsStartTime="2001-01-01 00:00:00";
        itsEndTime="2005-12-31 23:59:59";
        setMostRecent=false;
        LogParamNameText.setText(itsParamName);
        LogParamStartTimeText.setText(itsStartTime);
        LogParamEndTimeText.setText(itsEndTime);
        LogParamRecentOnlyCheckbox.setSelected(setMostRecent);
        emptyLogList();
    }
    
    private void emptyLogList() {
        if (itsDebugFlag) System.out.println("emptyLogList");
        
        LogTable.removeAll();
    }
    
    private void enableNodePanel(boolean aFlag) {
        if (itsDebugFlag) System.out.println("enableNodePanel "+aFlag);

        NodeInstancesText.setEnabled(aFlag);
        NodeLimitsText.setEnabled(aFlag);
    }
    
    private void enableLogPanel(boolean aFlag) {
        if (itsDebugFlag) System.out.println("enableLogPanel "+aFlag);
        
        LogParamStartTimeText.setEnabled(aFlag);
        LogParamEndTimeText.setEnabled(aFlag);
        LogParamRecentOnlyCheckbox.setEnabled(aFlag);
    }

    private void enableParamPanel(boolean aFlag) {
        if (itsDebugFlag) System.out.println("enableParamPanel "+aFlag);
        
        ParamTypeSelection.setEnabled(aFlag);
        ParamUnitSelection.setEnabled(aFlag);
        ParamPruningText.setEnabled(aFlag);
        ParamValMomentText.setEnabled(aFlag);
        ParamRTModSelection.setEnabled(aFlag);
        ParamLimitsText.setEnabled(aFlag);      
    }

    private void printParam(jOTDBparam aP) {
        if (itsDebugFlag) System.out.println("printParam");
        
        System.out.println("TreeID: "+aP.treeID());
        System.out.println("NodeID: "+aP.nodeID());
        System.out.println("ParamID: "+aP.paramID());

        // Check if valid param
        if (aP.nodeID() > 0) {
            System.out.println("Name: "+aP.name);
            System.out.println("Index: "+aP.index);
            System.out.println("Type: "+aP.type);
            System.out.println("Unit: "+aP.unit);
            System.out.println("Pruning: "+aP.pruning);
            System.out.println("ValMoment: "+aP.valMoment);
            System.out.println("runtimeMod: "+aP.runtimeMod);
            System.out.println("Limits: "+aP.limits);
            System.out.println("Description: "+aP.description);
        }
    }

    private void printNode(jOTDBnode aN) {
        if (itsDebugFlag) System.out.println("printNode");
        
        System.out.println("TreeID: "+aN.treeID());
        System.out.println("NodeID: "+aN.nodeID());
        System.out.println("ParentID: "+aN.parentID());
        System.out.println("ParamDefID: "+aN.paramDefID());

        // Check if valid param
        if (aN.nodeID() > 0) {
            System.out.println("Name: "+aN.name);
            System.out.println("Index: "+aN.index);
            System.out.println("Leaf: "+aN.leaf);
            System.out.println("Instances: "+aN.instances);
            System.out.println("Limits: "+aN.limits);
            System.out.println("Dscription: "+aN.description);
        }
    }
    
    private void refreshLogPanel() {
        if (itsDebugFlag) System.out.println("refreshLogPanel");
        
        try {
            if (itsDebugFlag) System.out.println("Trying to call searchInPeriod with: ");
            if (itsDebugFlag) System.out.println("TreeID: "+SelectedTreeID.intValue());
            if (itsDebugFlag) System.out.println("NodeID: "+itsPresentNode.nodeID());
            if (itsDebugFlag) System.out.println("Start: "+itsStartTime);
            if (itsDebugFlag) System.out.println("End: "+itsEndTime);
            LogParamNameText.setText(itsPresentNode.name);
            Vector aLogList=remoteValue.searchInPeriod(SelectedTreeID.intValue(), itsPresentNode.nodeID(),1,itsStartTime,itsEndTime,setMostRecent);
            // Give our own model to the LogTable Object
            LogTableModel tm = new LogTableModel(remoteValue,aLogList);
            tm.setDebugFlag(itsDebugFlag);
            LogTable.setModel(tm);
            LogTable.setEnabled(false);
        } catch (Exception e) {
            System.out.println ("Value.searchInPeriod via RMI and JNI failed: " + e); 
        }
    }
    
    private void selectWorkTree() {
        if (itsDebugFlag) System.out.println("selectWorkTree");
        
        itsSelectedTree     = "None";
        int aRow= TreeTable.getSelectedRow();
        if ( aRow != -1) {
            SelectedTreeID=new Integer((Integer)TreeTable.getValueAt(aRow, 0));
            SelectedTreeState=new String((String)TreeTable.getValueAt(aRow, 5));
            itsSelectedTree=TreeTable.getValueAt(aRow, 0).toString()+"."+
                    TreeTable.getValueAt(aRow, 3).toString()+"."+
                    TreeTable.getValueAt(aRow, 4).toString()+"."+
                    TreeTable.getValueAt(aRow, 5).toString();
        }
        selectedTreeTextField.setText(itsSelectedTree);
        Date aD1 = new Date();
        System.out.println("Treeload Started: "+aD1.toString());
        Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
        setCursor(hourglassCursor);
            
        // Start filling the TreeView
        if (itsSelectedTree != "None") {
            if (getTreeList()) {
                itsSelectedTreeType=TreeTable.getValueAt(aRow,4).toString();
            } else {
                if (itsDebugFlag) System.out.println("Error getting the Treelist from the server");
            }
        }
        Date aD2 = new Date();
        System.out.println("Treeload Finished: "+aD2.toString());
        Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
        setCursor(normalCursor);
        MainPane.setSelectedIndex(1);
    }
    
    private void createTreeList(int aSelectedTreeID) {
        if (itsDebugFlag) System.out.println("createTreeList for TreeID: "+aSelectedTreeID);
        
        itsSelectedTree = "None";

        SelectedInputLabel.setText("Input from: OTDB via RMI");
        selectedTreeTextField.setText(itsSelectedTree);
        TreeSelectButton.setEnabled(false);

        // set default failed values
        SourceMenuInputFile.setSelected(false);
        SourceMenuInputFile.setSelected(false);
        isFile=false;
        isOTDB=false;
        MainPane.setSelectedIndex(0);
        clearAll();

        if (RMIServerName.length()==0 || RMIServerPort.length()==0 ||
              RMIRegistryName.length()==0 || OTDBUserName.length() ==0 ||
              OTDBPassword.length()==0 || OTDBDBName.length()==0) {

            JOptionPane.showMessageDialog(null,"You didn't set the RMI settings",
                    "Source selection warning",
                    JOptionPane.WARNING_MESSAGE);
        }  else {
            String aS="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIRegistryName;
            if (openRemoteConnection(aS)) {
               if (fillTreeTable(aSelectedTreeID)) {
                  if (itsDebugFlag) System.out.println("Table should be filled now");
                  SourceMenuInputOTDB.setSelected(true);
                  isOTDB=true;
               } else {
                   if (itsDebugFlag) System.out.println("Error in filling the table");
               }
             }   
      }        
   }
    
    private void deleteTree(int aTreeID) {
        if (itsDebugFlag) System.out.println("deleteTree: "+aTreeID);
        
        try {
            if (aTreeID >= 0) {
                int ans=JOptionPane.showConfirmDialog(null,"Are you sure to delete "+aTreeID+" ?", "Delete Tree", JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                switch(ans) {
                    case JOptionPane.YES_OPTION:
                        if (remoteMaintenance.deleteTree(aTreeID) ) {
                            if (itsDebugFlag) System.out.println("Tree "+ aTreeID+" deleted");
                                clearTree();
                                createTreeList(-1);
                            } else {
                                if (itsDebugFlag) System.out.println("ERROR: Tree "+aTreeID+" NOT deleted");                
                            }
                    }
            }
        } catch (Exception e){
             System.out.println ("maintenance.deleteTree via RMI and JNI failed: " + e);
        }
    }
    
    private void instanciateTree(int aTreeID) {
        if (itsDebugFlag) System.out.println("instanciateTree: "+aTreeID);
        
        try {
            if (aTreeID >= 0 && itsSelectedTreeType.equals("VItemplate")) {
                int ans=JOptionPane.showConfirmDialog(null,"Are you sure to instanciate tree: "+aTreeID+" ?", "Instanciate Tree", JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                switch(ans) {
                    case JOptionPane.YES_OPTION:
                        int aNewTreeID=remoteMaintenance.instanciateTree(aTreeID);
                        if (aNewTreeID >= 0) {
                            if (itsDebugFlag) System.out.println("Created a new Tree with ID: "+aNewTreeID);
                                clearTree();
                                createTreeList(aNewTreeID);
                            } else {
                                if (itsDebugFlag) System.out.println("ERROR: Tree "+aTreeID+" NOT instanciate");                
                            }
                    }
            }
        } catch (Exception e){
             System.out.println ("maintenance.instanciateTree via RMI and JNI failed: " + e);
        }
    }
    private void changeTreeState(int aTreeID,String aStatus) {
        if (itsDebugFlag) System.out.println("changeTreeState: "+aTreeID);
        
        try {
            if (aTreeID >= 0) {
                int ans=JOptionPane.showConfirmDialog(null,"Are you sure to change tree: "+aTreeID+" to state "+aStatus+"?", "Delete Tree", JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                switch(ans) {
                    case JOptionPane.YES_OPTION:
                        if (remoteMaintenance.setTreeState(aTreeID,remoteTypes.getTreeState(aStatus))) {
                            if (itsDebugFlag) System.out.println("Tree "+ aTreeID+" state changed to: "+aStatus);
                                clearTree();
                                createTreeList(-1);
                            } else {
                                if (itsDebugFlag) System.out.println("ERROR: Tree "+aTreeID+" state NOT changed");                
                            }
                    }
            }
        } catch (Exception e){
             System.out.println ("maintenance.changeTreeState via RMI and JNI failed: " + e);
        }
    }
}

 
            
            

