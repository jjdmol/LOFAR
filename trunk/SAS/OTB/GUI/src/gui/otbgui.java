/*

 * otbgui.java

 *

 * Created on April 26, 2005, 2:09 PM

 */



package gui;



import jOTDB.jOTDBinterface;
import jOTDB.jOTDBnode;
import jOTDB.jOTDBparam;
import jOTDB.jTreeMaintenanceInterface;
import java.io.File;
import java.rmi.Naming;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;


/**
 *
 * @author  Alex Gerdes & Arthur Coolen
 */





public class otbgui extends javax.swing.JFrame {
    
    public boolean itsDebugFlag=false;
    
    // Param Defaults
    private String aParamName        = "None";
    private String aParamIndex       = "-1";
    private int aParamType           = 0;
    private int aParamUnit           = 0;
    private String aParamPruning     = "-1";
    private String aParamValMoment   = "-1";
    private int aParamRTMod          = 0;
    private String aParamLimits      = "None";
    private String aParamDescription = "None";
    
    // Node defaults
    private String aNodeName         = "None";
    private String aNodeIndex        = "-1";
    private int aNodeLeaf            = 0;
    private String aNodeInstances    = "-1";
    private String aNodeLimits       = "None";
    private String aNodeDescription  = "None";
    
    private boolean nodeButtonsEnabled=false;
    private boolean paramButtonsEnabled=false;
    
    private static jOTDBinterface remoteOTDB;    
    private static jTreeMaintenanceInterface remoteTreeMaintenance;
    
     // SettingsDialog Defaults
    public static String RMIServerName      = "lofar17.astron.nl";
    public static String RMIServerPort      = "1099";
    public static String RMIRegistryName    = jOTDBinterface.SERVICENAME;
    public static String RMIMaintenanceName = jTreeMaintenanceInterface.SERVICENAME;
    public static String OTDBUserName       = "paulus";
    public static String OTDBPassword       = "boskabouter";
    public static String OTDBDBName         = "otdbtest";   
    public static String aSelectedTree      = "None";
    
    
    DefaultMutableTreeNode root  = new DefaultMutableTreeNode();
    DefaultMutableTreeNode aNode = new DefaultMutableTreeNode();
    
    public Integer SelectedTreeID;
    
    private boolean isTreeFilled = false;
    private boolean isOTDB =false;
    private boolean isFile=true;
    
    private String itsTreeTabbedPaneFocus="NodePanel";
    
    private jOTDBparam itsPresentParam;
    private jOTDBnode itsPresentNode;
       
    /** Creates new form otbgui */
    public otbgui() {
        initComponents();
    }  

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */   
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        MainPane = new javax.swing.JTabbedPane();
        TreePanel = new javax.swing.JPanel();
        TreeTableScrollPane = new javax.swing.JScrollPane();
        TreeTable = new javax.swing.JTable();
        TreeSelectButton = new javax.swing.JButton();
        BrowsePanel = new javax.swing.JPanel();
        treeScrollPane = new javax.swing.JScrollPane();
        VICTree = new javax.swing.JTree(root);
        treeTabbedPane = new javax.swing.JTabbedPane();
        NodePanel = new javax.swing.JPanel();
        NodeNameLabel = new javax.swing.JLabel();
        NodeIndexLabel = new javax.swing.JLabel();
        NodeInstancesLabel = new javax.swing.JLabel();
        NodeLimitsLabel = new javax.swing.JLabel();
        NodeDescriptionLabel = new javax.swing.JLabel();
        NodeIndexText = new javax.swing.JTextField();
        NodeInstancesText = new javax.swing.JTextField();
        NodeDescriptionText = new javax.swing.JTextField();
        NodeLimitsText = new javax.swing.JTextField();
        NodeNameText = new javax.swing.JTextField();
        NodeOkButton = new javax.swing.JButton();
        NodeCancelButton = new javax.swing.JButton();
        NodeApplyButton = new javax.swing.JButton();
        ParamPanel = new javax.swing.JPanel();
        ParamNameLabel = new javax.swing.JLabel();
        ParamIndexLabel = new javax.swing.JLabel();
        ParamTypeLabel = new javax.swing.JLabel();
        ParamUnitLabel = new javax.swing.JLabel();
        ParamPruningLabel = new javax.swing.JLabel();
        ParamValMomentLabel = new javax.swing.JLabel();
        ParamRTmodLabel = new javax.swing.JLabel();
        ParamLimitsLabel = new javax.swing.JLabel();
        ParamDescriptionLabel = new javax.swing.JLabel();
        ParamNameText = new javax.swing.JTextField();
        ParamIndexText = new javax.swing.JTextField();
        ParamTypeSelection = new javax.swing.JComboBox();
        ParamUnitSelection = new javax.swing.JComboBox();
        ParamPruningText = new javax.swing.JTextField();
        ParamValMomentText = new javax.swing.JTextField();
        ParamLimitsText = new javax.swing.JTextField();
        ParamDescriptionText = new javax.swing.JTextField();
        ParamOkButton = new javax.swing.JButton();
        ParamCancelButton = new javax.swing.JButton();
        ParamApplyButton = new javax.swing.JButton();
        ParamRTModSelection = new javax.swing.JComboBox();
        LogPanel = new javax.swing.JPanel();
        LogTableScrollPane = new javax.swing.JScrollPane();
        LogTable = new javax.swing.JTable();
        LogParamNamePanel = new javax.swing.JPanel();
        LogParamNameLabel = new javax.swing.JLabel();
        LogParamNameText = new javax.swing.JTextField();
        ControlPanel = new javax.swing.JPanel();
        CtrlInstButton = new javax.swing.JButton();
        CtrlDeleteButton = new javax.swing.JButton();
        CtrlCopyButton = new javax.swing.JButton();
        CtrlChangeTreeStateButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        SelectedLabel = new javax.swing.JLabel();
        selectedTreeTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileMenuExit = new javax.swing.JMenuItem();
        SourceMenu = new javax.swing.JMenu();
        SourceMenuInputFile = new javax.swing.JRadioButtonMenuItem();
        SourceMenuInputOTDB = new javax.swing.JRadioButtonMenuItem();
        SettingsMenu = new javax.swing.JMenu();
        SettingsMenuRMISettings = new javax.swing.JMenuItem();
        SettingsMenuDebugSetting = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1000, 400));
        setName("mainFrame");
        MainPane.setMinimumSize(new java.awt.Dimension(750, 500));
        MainPane.setPreferredSize(new java.awt.Dimension(750, 500));
        TreePanel.setLayout(new java.awt.BorderLayout());

        TreePanel.setToolTipText("Search on one or more of the given constraints");
        TreePanel.setMinimumSize(new java.awt.Dimension(700, 475));
        TreePanel.setPreferredSize(new java.awt.Dimension(700, 475));
        TreeTableScrollPane.setMinimumSize(new java.awt.Dimension(750, 22));
        TreeTableScrollPane.setPreferredSize(new java.awt.Dimension(750, 403));
        TreeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TreeID", "Creator", "Creation Date", "Class", "Type", "State", "Campaign", "Start Time", "Stop Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TreeTableScrollPane.add(TreeTable);
        TreeTableScrollPane.setViewportView(TreeTable);

        TreePanel.add(TreeTableScrollPane, java.awt.BorderLayout.CENTER);

        TreeSelectButton.setText("Select");
        TreeSelectButton.setToolTipText("Select the highlighted Tree to work with");
        TreeSelectButton.setEnabled(false);
        TreeSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TreeSelectButtonActionPerformed(evt);
            }
        });

        TreePanel.add(TreeSelectButton, java.awt.BorderLayout.SOUTH);

        MainPane.addTab("TreeList", null, TreePanel, "change tree search");

        BrowsePanel.setLayout(new java.awt.BorderLayout());

        BrowsePanel.setMinimumSize(new java.awt.Dimension(750, 475));
        BrowsePanel.setPreferredSize(new java.awt.Dimension(750, 475));
        VICTree.setAutoscrolls(true);
        VICTree.setMinimumSize(new java.awt.Dimension(25, 72));
        VICTree.setShowsRootHandles(true);
        VICTree.setToggleClickCount(1);
        VICTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TreeSelectionListener(evt);
            }
        });

        treeScrollPane.setViewportView(VICTree);

        BrowsePanel.add(treeScrollPane, java.awt.BorderLayout.WEST);

        NodePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NodePanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NodePanelFocusGained(evt);
            }
        });

        NodeNameLabel.setText("Name");
        NodePanel.add(NodeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        NodeIndexLabel.setText("Index");
        NodePanel.add(NodeIndexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 35, -1, -1));

        NodeInstancesLabel.setText("Instances");
        NodePanel.add(NodeInstancesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        NodeLimitsLabel.setText("Limits");
        NodePanel.add(NodeLimitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 85, -1, -1));

        NodeDescriptionLabel.setText("Description");
        NodePanel.add(NodeDescriptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        NodeIndexText.setText("None");
        NodeIndexText.setEnabled(false);
        NodeIndexText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeIndexText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeIndexText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodePanel.add(NodeIndexText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 200, -1));

        NodeInstancesText.setText("-1");
        NodeInstancesText.setToolTipText("Number of Instances for this Node ");
        NodeInstancesText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodeInstancesText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeInstancesTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeInstancesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 200, -1));

        NodeDescriptionText.setText("None");
        NodeDescriptionText.setToolTipText("Description for this Node");
        NodeDescriptionText.setMaximumSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.setMinimumSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.setPreferredSize(new java.awt.Dimension(440, 19));
        NodeDescriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeDescriptionTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeDescriptionText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 440, -1));

        NodeLimitsText.setText("None");
        NodeLimitsText.setToolTipText("Limits for this Node");
        NodeLimitsText.setMaximumSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.setMinimumSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.setPreferredSize(new java.awt.Dimension(200, 19));
        NodeLimitsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NodeLimitsTextKeyTyped(evt);
            }
        });

        NodePanel.add(NodeLimitsText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 85, 200, -1));

        NodeNameText.setText("None");
        NodeNameText.setToolTipText("Name for this Node");
        NodeNameText.setEnabled(false);
        NodeNameText.setMaximumSize(new java.awt.Dimension(440, 19));
        NodeNameText.setMinimumSize(new java.awt.Dimension(440, 19));
        NodeNameText.setPreferredSize(new java.awt.Dimension(440, 19));
        NodePanel.add(NodeNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 440, -1));

        NodeOkButton.setText("Ok");
        NodeOkButton.setEnabled(false);
        NodeOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodeOkButtonActionPerformed(evt);
            }
        });

        NodePanel.add(NodeOkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        NodeCancelButton.setText("Cancel");
        NodeCancelButton.setEnabled(false);
        NodeCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodeCancelButtonActionPerformed(evt);
            }
        });

        NodePanel.add(NodeCancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, -1, -1));

        NodeApplyButton.setText("Apply");
        NodeApplyButton.setEnabled(false);
        NodeApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodeApplyButtonActionPerformed(evt);
            }
        });

        NodePanel.add(NodeApplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, -1, -1));

        treeTabbedPane.addTab("Node", null, NodePanel, "Node Page");

        ParamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ParamPanel.setEnabled(false);
        ParamPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ParamPanelFocusGained(evt);
            }
        });

        ParamNameLabel.setText("Name");
        ParamPanel.add(ParamNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        ParamIndexLabel.setText("Index");
        ParamPanel.add(ParamIndexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 35, -1, -1));

        ParamTypeLabel.setText("Type");
        ParamPanel.add(ParamTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        ParamUnitLabel.setText("Unit");
        ParamPanel.add(ParamUnitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 85, -1, -1));

        ParamPruningLabel.setText("Pruning");
        ParamPanel.add(ParamPruningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        ParamValMomentLabel.setText("ValMoment");
        ParamValMomentLabel.setVerifyInputWhenFocusTarget(false);
        ParamPanel.add(ParamValMomentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 135, -1, -1));

        ParamRTmodLabel.setText("RTmod");
        ParamPanel.add(ParamRTmodLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));

        ParamLimitsLabel.setText("Limits");
        ParamPanel.add(ParamLimitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 185, -1, -1));

        ParamDescriptionLabel.setText("Description");
        ParamPanel.add(ParamDescriptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, -1));

        ParamNameText.setText("None");
        ParamNameText.setToolTipText("Name for this Parameter");
        ParamNameText.setEnabled(false);
        ParamNameText.setMaximumSize(new java.awt.Dimension(440, 19));
        ParamNameText.setMinimumSize(new java.awt.Dimension(440, 19));
        ParamNameText.setPreferredSize(new java.awt.Dimension(440, 19));
        ParamPanel.add(ParamNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 440, -1));

        ParamIndexText.setText("None");
        ParamIndexText.setToolTipText("Index from this Parameter");
        ParamIndexText.setEnabled(false);
        ParamIndexText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamIndexText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamIndexText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamPanel.add(ParamIndexText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 200, -1));

        ParamTypeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "node", "boolean", "int", "long", "float", "double", "icpx", "lcpx", "fcpx", "dcpx", "text", "bin", "PVSS float", "PVSS uint", "PVSS int", "PVSS float", "PVSS boolean", "PVSS text" }));
        ParamTypeSelection.setToolTipText("Type of this Parameter");
        ParamTypeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamTypeSelectionActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamTypeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));

        ParamUnitSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Ampere", "m/s", "dB", "time4", "time6", "RAM", "GFLOP", "MB/s", "Mhz" }));
        ParamUnitSelection.setToolTipText("Unit for this Parameter");
        ParamUnitSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamUnitSelectionActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamUnitSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 85, -1, -1));

        ParamPruningText.setText("-1");
        ParamPruningText.setToolTipText("Pruning for this Parameter");
        ParamPruningText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamPruningText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamPruningText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamPruningText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamPruningTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamPruningText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 200, -1));

        ParamValMomentText.setText("-1");
        ParamValMomentText.setToolTipText("Valmoment for the Parameter");
        ParamValMomentText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamValMomentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamValMomentTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamValMomentText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 135, 200, -1));

        ParamLimitsText.setText("None");
        ParamLimitsText.setToolTipText("Limits for this Parameter");
        ParamLimitsText.setMaximumSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.setMinimumSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.setPreferredSize(new java.awt.Dimension(200, 19));
        ParamLimitsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamLimitsTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamLimitsText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 185, 200, -1));

        ParamDescriptionText.setText("None");
        ParamDescriptionText.setToolTipText("Description for this Parameter");
        ParamDescriptionText.setMaximumSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.setMinimumSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.setPreferredSize(new java.awt.Dimension(440, 19));
        ParamDescriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ParamDescriptionTextKeyTyped(evt);
            }
        });

        ParamPanel.add(ParamDescriptionText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 440, -1));

        ParamOkButton.setText("Ok");
        ParamOkButton.setEnabled(false);
        ParamOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamOkButtonActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamOkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        ParamCancelButton.setText("Cancel");
        ParamCancelButton.setEnabled(false);
        ParamCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamCancelButtonActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamCancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, -1, -1));

        ParamApplyButton.setText("Apply");
        ParamApplyButton.setEnabled(false);
        ParamApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamApplyButtonActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamApplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, -1, -1));

        ParamRTModSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "False", "True" }));
        ParamRTModSelection.setToolTipText("RunTime Modification for this Parameter");
        ParamRTModSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamRTModSelectionActionPerformed(evt);
            }
        });

        ParamPanel.add(ParamRTModSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, -1));

        treeTabbedPane.addTab("Param", null, ParamPanel, "Param Page");

        LogPanel.setLayout(new java.awt.BorderLayout());

        LogPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                LogPanelFocusGained(evt);
            }
        });

        LogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TimeStamp", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LogTable.setEnabled(false);
        LogTableScrollPane.add(LogTable);
        LogTableScrollPane.setViewportView(LogTable);

        LogPanel.add(LogTableScrollPane, java.awt.BorderLayout.NORTH);

        LogParamNameLabel.setText("ParamName");
        LogParamNamePanel.add(LogParamNameLabel);

        LogParamNameText.setText("None");
        LogParamNamePanel.add(LogParamNameText);

        LogPanel.add(LogParamNamePanel, java.awt.BorderLayout.SOUTH);

        treeTabbedPane.addTab("Log", null, LogPanel, "Value Page");

        BrowsePanel.add(treeTabbedPane, java.awt.BorderLayout.CENTER);

        MainPane.addTab("Browse", null, BrowsePanel, "Treeview");

        ControlPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ControlPanel.setMinimumSize(new java.awt.Dimension(750, 475));
        ControlPanel.setPreferredSize(new java.awt.Dimension(700, 475));
        CtrlInstButton.setText("Inst");
        ControlPanel.add(CtrlInstButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        CtrlDeleteButton.setText("Delete");
        ControlPanel.add(CtrlDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        CtrlCopyButton.setText("Copy");
        ControlPanel.add(CtrlCopyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        CtrlChangeTreeStateButton.setText("Change Tree State");
        ControlPanel.add(CtrlChangeTreeStateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, -1, -1));

        MainPane.addTab("Control", null, ControlPanel, "ControlPanel");

        getContentPane().add(MainPane, java.awt.BorderLayout.CENTER);
        MainPane.getAccessibleContext().setAccessibleName("");

        infoPanel.setMinimumSize(new java.awt.Dimension(750, 29));
        infoPanel.setPreferredSize(new java.awt.Dimension(750, 29));
        SelectedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SelectedLabel.setText("SelectedTree");
        infoPanel.add(SelectedLabel);

        selectedTreeTextField.setColumns(25);
        selectedTreeTextField.setEditable(false);
        selectedTreeTextField.setText("None");
        selectedTreeTextField.setOpaque(false);
        infoPanel.add(selectedTreeTextField);

        getContentPane().add(infoPanel, java.awt.BorderLayout.SOUTH);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(750, 19));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(750, 19));
        FileMenu.setToolTipText("File Menu");
        FileMenu.setLabel("File");
        FileMenuExit.setLabel("Exit");
        FileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuExitActionPerformed(evt);
            }
        });

        FileMenu.add(FileMenuExit);

        jMenuBar1.add(FileMenu);

        SourceMenu.setText("Source");
        SourceMenu.setToolTipText("Source selection Menu");
        SourceMenuInputFile.setSelected(true);
        SourceMenuInputFile.setText("Input from File");
        SourceMenuInputFile.setToolTipText("Set input to file");
        SourceMenuInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceMenuInputFileActionPerformed(evt);
            }
        });

        SourceMenu.add(SourceMenuInputFile);

        SourceMenuInputOTDB.setText("Input from OTDB");
        SourceMenuInputOTDB.setToolTipText("Set input to OTDB");
        SourceMenuInputOTDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceMenuInputOTDBActionPerformed(evt);
            }
        });

        SourceMenu.add(SourceMenuInputOTDB);

        jMenuBar1.add(SourceMenu);

        SettingsMenu.setText("Settings");
        SettingsMenu.setToolTipText("Settings Menu");
        SettingsMenuRMISettings.setText("RMISettings");
        SettingsMenuRMISettings.setToolTipText("set RMI server & database");
        SettingsMenuRMISettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuRMISettingsActionPerformed(evt);
            }
        });

        SettingsMenu.add(SettingsMenuRMISettings);

        SettingsMenuDebugSetting.setText("RadioButton");
        SettingsMenuDebugSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuDebugSettingActionPerformed(evt);
            }
        });

        SettingsMenu.add(SettingsMenuDebugSetting);

        jMenuBar1.add(SettingsMenu);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-600)/2, 800, 600);
    }
    // </editor-fold>//GEN-END:initComponents

    private void SettingsMenuDebugSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuDebugSettingActionPerformed
        itsDebugFlag=SettingsMenuDebugSetting.isSelected();
    }//GEN-LAST:event_SettingsMenuDebugSettingActionPerformed

    private void LogPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LogPanelFocusGained
        itsTreeTabbedPaneFocus="LogPanel";
    }//GEN-LAST:event_LogPanelFocusGained

    private void ParamPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ParamPanelFocusGained
        itsTreeTabbedPaneFocus="ParamPanel";
    }//GEN-LAST:event_ParamPanelFocusGained

    private void NodePanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NodePanelFocusGained
        itsTreeTabbedPaneFocus="NodePanel";
    }//GEN-LAST:event_NodePanelFocusGained

    private void ParamDescriptionTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamDescriptionTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamDescriptionTextKeyTyped

    private void ParamLimitsTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamLimitsTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamLimitsTextKeyTyped

    private void ParamValMomentTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamValMomentTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamValMomentTextKeyTyped

    private void ParamPruningTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ParamPruningTextKeyTyped
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamPruningTextKeyTyped

    private void NodeDescriptionTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeDescriptionTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeDescriptionTextKeyTyped

    private void NodeLimitsTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeLimitsTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeLimitsTextKeyTyped

    private void NodeInstancesTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NodeInstancesTextKeyTyped
        if (!nodeButtonsEnabled) setNodeButtons(true);
    }//GEN-LAST:event_NodeInstancesTextKeyTyped

    private void ParamRTModSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamRTModSelectionActionPerformed
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamRTModSelectionActionPerformed

    private void ParamUnitSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamUnitSelectionActionPerformed
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamUnitSelectionActionPerformed

    private void ParamTypeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamTypeSelectionActionPerformed
        if (!paramButtonsEnabled) setParamButtons(true);
    }//GEN-LAST:event_ParamTypeSelectionActionPerformed

    private void ParamCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamCancelButtonActionPerformed
        // ParamNameText.setText(aParamName);
        // ParamIndexText.setText(aParamIndex);
        ParamTypeSelection.setSelectedIndex(aParamType);
        ParamUnitSelection.setSelectedIndex(aParamUnit);
        ParamPruningText.setText(aParamPruning);
        ParamValMomentText.setText(aParamValMoment);
        ParamRTModSelection.setSelectedIndex(aParamRTMod);
        ParamLimitsText.setText(aParamLimits);
        ParamDescriptionText.setText(aParamDescription);
        setParamButtons(false);
    }//GEN-LAST:event_ParamCancelButtonActionPerformed

    
    private void ParamOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamOkButtonActionPerformed
        setParamValues();
    }//GEN-LAST:event_ParamOkButtonActionPerformed
    
    private void NodeCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodeCancelButtonActionPerformed
        // NodeNameText.setText(aNodeName);
        // NodeIndexText.setText(aNodeIndex);
        NodeInstancesText.setText(aNodeInstances);
        NodeLimitsText.setText(aNodeLimits);
        NodeDescriptionText.setText(aNodeDescription);
        setNodeButtons(false);         
    }//GEN-LAST:event_NodeCancelButtonActionPerformed

    private void NodeOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodeOkButtonActionPerformed
        setNodeValues();
    }//GEN-LAST:event_NodeOkButtonActionPerformed

    private void ParamApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamApplyButtonActionPerformed
        setParamValues();
    }//GEN-LAST:event_ParamApplyButtonActionPerformed

    private void NodeApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodeApplyButtonActionPerformed
        setNodeValues();
    }//GEN-LAST:event_NodeApplyButtonActionPerformed

    private void TreeSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TreeSelectButtonActionPerformed
        aSelectedTree = "None";
        int aRow= TreeTable.getSelectedRow();
        if ( aRow != -1) {
            SelectedTreeID=new Integer((Integer)TreeTable.getValueAt(aRow, 0));
            aSelectedTree=TreeTable.getValueAt(aRow, 0).toString()+"."+
                    TreeTable.getValueAt(aRow, 3).toString()+"."+
                    TreeTable.getValueAt(aRow, 4).toString()+"."+
                    TreeTable.getValueAt(aRow, 5).toString();
        }
        if (!aSelectedTree.equals(selectedTreeTextField)){
            selectedTreeTextField.setText(aSelectedTree);
            Date aD1 = new Date();
            System.out.println("Treeload Started: "+aD1.toString());
            // Start filling the TreeView
            if (aSelectedTree != "None") {
                if (getTreeList()) {
                    
                } else {
                    if (itsDebugFlag) System.out.println("Error getting the Treelist from the server");
                }
            }
            Date aD2 = new Date();
            System.out.println("Treeload Finished: "+aD2.toString());

        }
    }//GEN-LAST:event_TreeSelectButtonActionPerformed


    private void SourceMenuInputOTDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceMenuInputOTDBActionPerformed
        aSelectedTree = "None";
        selectedTreeTextField.setText(aSelectedTree);

        // set default failed values
        SourceMenuInputFile.setSelected(false);
        SourceMenuInputFile.setSelected(false);
        isFile=false;
        isOTDB=false;

        if (RMIServerName.length()==0 || RMIServerPort.length()==0 ||
              RMIRegistryName.length()==0 || OTDBUserName.length() ==0 ||
              OTDBPassword.length()==0 || OTDBDBName.length()==0) {

            JOptionPane.showMessageDialog(null,"You didn't set the RMI settings",
                    "Source selection warning",
                    JOptionPane.WARNING_MESSAGE);
        }  else {
          try {
            String aS="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIRegistryName;
            if (openRemoteConnection(aS)) {
               if (fillTreeTable()) {
                  if (itsDebugFlag) System.out.println("Table should be filled now");
                  SourceMenuInputOTDB.setSelected(true);
                  isOTDB=true;
               } else {
                   if (itsDebugFlag) System.out.println("Error in filling the table");
               }
             }   
          } catch (Exception e){
             System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
          }
      }

    }//GEN-LAST:event_SourceMenuInputOTDBActionPerformed



    private void SourceMenuInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceMenuInputFileActionPerformed
      aSelectedTree = "None";
      selectedTreeTextField.setText(aSelectedTree);
      JFileChooser fc = new JFileChooser();
      int returnVal = fc.showOpenDialog(otbgui.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
          File aFile = fc.getSelectedFile();
          SourceMenuInputOTDB.setSelected(true);
          isFile=true;
          isOTDB=false;
      } else {
          JOptionPane.showMessageDialog(null,"You didn't select a file",
                  "Source selection warning",
                  JOptionPane.WARNING_MESSAGE);
          SourceMenuInputFile.setSelected(false);
      }
    }//GEN-LAST:event_SourceMenuInputFileActionPerformed



    private void SettingsMenuRMISettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuRMISettingsActionPerformed
        SettingsDialog aSW = new SettingsDialog();
        aSW.setSize(400, 300);
        aSW.setVisible(true);     
    }//GEN-LAST:event_SettingsMenuRMISettingsActionPerformed



   

    private void TreeSelectionListener(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_TreeSelectionListener
        TreePath tp = evt.getNewLeadSelectionPath();
        if (tp != null) {
            changeTreeSelection(tp.getLastPathComponent());
        }
    }//GEN-LAST:event_TreeSelectionListener



    private void FileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuExitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_FileMenuExitActionPerformed

    

    /**

     * @param args the command line arguments

     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new otbgui().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BrowsePanel;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JButton CtrlChangeTreeStateButton;
    private javax.swing.JButton CtrlCopyButton;
    private javax.swing.JButton CtrlDeleteButton;
    private javax.swing.JButton CtrlInstButton;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuExit;
    private javax.swing.JPanel LogPanel;
    private javax.swing.JLabel LogParamNameLabel;
    private javax.swing.JPanel LogParamNamePanel;
    private javax.swing.JTextField LogParamNameText;
    private javax.swing.JTable LogTable;
    private javax.swing.JScrollPane LogTableScrollPane;
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton NodeApplyButton;
    private javax.swing.JButton NodeCancelButton;
    private javax.swing.JLabel NodeDescriptionLabel;
    private javax.swing.JTextField NodeDescriptionText;
    private javax.swing.JLabel NodeIndexLabel;
    private javax.swing.JTextField NodeIndexText;
    private javax.swing.JLabel NodeInstancesLabel;
    private javax.swing.JTextField NodeInstancesText;
    private javax.swing.JLabel NodeLimitsLabel;
    private javax.swing.JTextField NodeLimitsText;
    private javax.swing.JLabel NodeNameLabel;
    private javax.swing.JTextField NodeNameText;
    private javax.swing.JButton NodeOkButton;
    private javax.swing.JPanel NodePanel;
    private javax.swing.JButton ParamApplyButton;
    private javax.swing.JButton ParamCancelButton;
    private javax.swing.JLabel ParamDescriptionLabel;
    private javax.swing.JTextField ParamDescriptionText;
    private javax.swing.JLabel ParamIndexLabel;
    private javax.swing.JTextField ParamIndexText;
    private javax.swing.JLabel ParamLimitsLabel;
    private javax.swing.JTextField ParamLimitsText;
    private javax.swing.JLabel ParamNameLabel;
    private javax.swing.JTextField ParamNameText;
    private javax.swing.JButton ParamOkButton;
    private javax.swing.JPanel ParamPanel;
    private javax.swing.JLabel ParamPruningLabel;
    private javax.swing.JTextField ParamPruningText;
    private javax.swing.JComboBox ParamRTModSelection;
    private javax.swing.JLabel ParamRTmodLabel;
    private javax.swing.JLabel ParamTypeLabel;
    private javax.swing.JComboBox ParamTypeSelection;
    private javax.swing.JLabel ParamUnitLabel;
    private javax.swing.JComboBox ParamUnitSelection;
    private javax.swing.JLabel ParamValMomentLabel;
    private javax.swing.JTextField ParamValMomentText;
    private javax.swing.JLabel SelectedLabel;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JRadioButtonMenuItem SettingsMenuDebugSetting;
    private javax.swing.JMenuItem SettingsMenuRMISettings;
    private javax.swing.JMenu SourceMenu;
    private javax.swing.JRadioButtonMenuItem SourceMenuInputFile;
    private javax.swing.JRadioButtonMenuItem SourceMenuInputOTDB;
    private javax.swing.JPanel TreePanel;
    private javax.swing.JButton TreeSelectButton;
    private javax.swing.JTable TreeTable;
    private javax.swing.JScrollPane TreeTableScrollPane;
    private javax.swing.JTree VICTree;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField selectedTreeTextField;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JTabbedPane treeTabbedPane;
    // End of variables declaration//GEN-END:variables

    private boolean openRemoteConnection(String RMIRegHostName) {
        try {
            if (itsDebugFlag) System.out.println("Starting... for "+RMIRegHostName);
        
            // create a remote object
            remoteOTDB = (jOTDBinterface) Naming.lookup (RMIRegHostName);     
//	    Registry remoteRegistry = LocateRegistry.getRegistry(RMIRegHostName.toCharArray()[0]);
//	    remoteOTDB = (jOTDBinterface) remoteRegistry.lookup (jOTDBinterface.SERVICENAME);
            if (itsDebugFlag) System.out.println (remoteOTDB);
					    
	    // do the test	
	    if (itsDebugFlag) System.out.println("Trying to connect to the database");
	    assert remoteOTDB.connect() : "Connection failed";	
	    assert remoteOTDB.isConnected() : "Connnection flag failed";
	     
	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Remote OTDB via RMI and JNI failed: " + e);
	  }
        return false;
    }   
    
    private boolean openRemoteMaintenance(String RMIMaintName) {
        try {
            if (itsDebugFlag) System.out.println("Starting... for "+RMIMaintName);
        
            // create a remote object
            remoteTreeMaintenance = (jTreeMaintenanceInterface) Naming.lookup (RMIMaintName);     
//	    Registry remoteRegistry = LocateRegistry.getRegistry(RMIMaintName.toCharArray()[0]);
//	    remoteTreeMaintenance = (jTreeMaintenanceInterface) remoteRegistry.lookup (jTreeMaintenanceInterface.SERVICENAME);
            if (itsDebugFlag) System.out.println (remoteTreeMaintenance);
					    
     	    if (itsDebugFlag) System.out.println("Connection succesful!");   
            return true;
          }
        catch (Exception e)
	  {
	     System.out.println ("Remote OTDB via RMI and JNI failed: " + e);
	  }
        return false;
    }  
    
    private boolean fillTreeTable() {
        if (itsDebugFlag) System.out.println("Trying to obtain the treeList");

        BrowsePanel.setEnabled(false);
        LogPanel.setEnabled(false);

        Vector treeList=new Vector();
        
       
        try {            
          treeList=remoteOTDB.getTreeList((short)0, (short)0);
          if (treeList.size() <= 0) {
            if (itsDebugFlag) System.out.println("Error:" + remoteOTDB.errorMsg());
            return false;
          } else {
            if (itsDebugFlag) System.out.println("Collected tree list");
          }
        } 
        catch (Exception e)
	{
	  System.out.println ("Remote OTDB via RMI and JNI failed: " + e);
	}        if (itsDebugFlag) System.out.println("Trying to obtain the treeList");

        BrowsePanel.setEnabled(true);
        LogPanel.setEnabled(true);
        // Give our own model to the JFrame Object
        treeModel tm = new treeModel(remoteOTDB,treeList);
        tm.setDebugFlag(itsDebugFlag);
        TreeTable.setModel(tm);
        TreeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TreeSelectButton.setEnabled(true);
        return true;
    }
    private void setParamValues() {
        // aParamName=ParamNameText.getText();
        // aParamIndex=ParamIndexText.getText();
        boolean hasChanged=false;
        if (aParamType != ParamTypeSelection.getSelectedIndex()) {
            aParamType=ParamTypeSelection.getSelectedIndex();
            itsPresentParam.type=(short)aParamType;
            hasChanged=true;
        }
        if (aParamUnit != ParamUnitSelection.getSelectedIndex()) {
            aParamUnit=ParamUnitSelection.getSelectedIndex();
            itsPresentParam.unit=(short)aParamUnit;
            hasChanged=true;
        }
        if (!aParamPruning.equals(ParamPruningText.getText())) {
            aParamPruning=ParamPruningText.getText();
            itsPresentParam.pruning=Integer.valueOf(aParamPruning).shortValue();            
            hasChanged=true;
        }
        if (!aParamValMoment.equals(ParamValMomentText.getText())) {
            aParamValMoment=ParamValMomentText.getText();
            itsPresentParam.valMoment=Integer.valueOf(aParamValMoment).shortValue();            
            hasChanged=true;
        }
        if (aParamRTMod != ParamRTModSelection.getSelectedIndex()) {    
            aParamRTMod=ParamRTModSelection.getSelectedIndex();
            boolean aFlag=false;
            if (aParamRTMod==0) {
                aFlag=false;
            } else {
                aFlag=true;
            }
            itsPresentParam.runtimeMod=aFlag;                        
            hasChanged=true;
        }
        if (!aParamLimits.equals(ParamLimitsText.getText())) {
            aParamLimits=ParamLimitsText.getText();
            itsPresentParam.limits=aParamLimits;
            hasChanged=true;
        }
        if (!aParamDescription.equals(ParamDescriptionText.getText())) {
            aParamDescription=ParamDescriptionText.getText();
            itsPresentParam.description=aParamDescription;
            hasChanged=true;
        }
        setParamButtons(false);
        if (hasChanged) {
            if (saveParam() ) {
                if (itsDebugFlag) System.out.println("Saving Param succeeded.");
            } else {
                if (itsDebugFlag) System.out.println("Saving Param FAILED.");                
            }
        }
    }
    
    private void setNodeValues() {
        
        boolean hasChanged=false;
        // aNodeName=NodeNameText.getText();
        // aNodeIndex=NodeIndexText.getText();
        if (!aNodeInstances.equals(NodeInstancesText.getText())) {
            aNodeInstances=NodeInstancesText.getText();
            itsPresentNode.instances=Integer.valueOf(aNodeInstances).shortValue();            

            hasChanged=true;
        }
        if (!aNodeLimits.equals(NodeLimitsText.getText())) {
            aNodeLimits=NodeLimitsText.getText();
            itsPresentNode.limits=aNodeLimits;
            hasChanged=true;
        }
        if (!aNodeDescription.equals(NodeDescriptionText.getText())) {
            aNodeDescription=NodeDescriptionText.getText();
            itsPresentNode.description=aNodeDescription;
            hasChanged=true;
        }
        setNodeButtons(false);
        if (hasChanged) {
            if (saveNode() ) {
                if (itsDebugFlag) System.out.println("Saving Node succeeded.");
            } else {
                if (itsDebugFlag) System.out.println("Saving Node FAILED.");                
            }
        }
    }
    
    private void setParamButtons(boolean flag) {
        ParamApplyButton.setEnabled(flag);
        ParamCancelButton.setEnabled(flag);
        ParamOkButton.setEnabled(flag);
        paramButtonsEnabled=false;
    }
    
    private void setNodeButtons(boolean flag) {
        NodeApplyButton.setEnabled(flag);
        NodeCancelButton.setEnabled(flag);
        NodeOkButton.setEnabled(flag); 
        nodeButtonsEnabled=flag;
    }
    
    private boolean getTreeList() {
        boolean aFlag=false;
        if (isTreeFilled){
           clearAll();
        }
        
        try {
            String aS="rmi://"+RMIServerName+":"+RMIServerPort+"/"+RMIMaintenanceName;
            if (openRemoteMaintenance(aS)) {  
               if (fillTreeList()) {
                  if (itsDebugFlag) System.out.println("Tree should be filled now");
                  aFlag=true;
               } else {
                   if (itsDebugFlag) System.out.println("Error in filling the treeList");
               }
             }   
          } catch (Exception e){
             System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
             aFlag=false;
          }
        
        isTreeFilled=true;
        return aFlag;
    }
    
    private boolean fillTreeList() {        
        boolean aFlag=false;
        try {
            if (itsDebugFlag) System.out.println("Trying to get the topnode of the tree");
            jOTDBnode topNode = remoteTreeMaintenance.getTopNode (SelectedTreeID.intValue ());
            aFlag=true;
            
            // Check should be possible......
            
            
            if (itsDebugFlag) System.out.println ("TopNode name: "+topNode.name);   
            if (itsDebugFlag) System.out.println(topNode.treeID()+" "+topNode.nodeID()+" "+topNode.parentID());
            
            //set rootlevel for tree and keep parentID
            String [] aS=topNode.name.split("[.]");
            String aName=topNode.nodeID()+":"+aS[aS.length-1];
            root.setUserObject(new DefaultMutableTreeNode(aName));
            
            addChildren(root,topNode);
            VICTree.updateUI();          
	    //	showNodeList(nodeList);           
        } catch (Exception e){
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
            aFlag=false;
        }
        return aFlag;
    }

    private void addChildren(DefaultMutableTreeNode root,jOTDBnode aTopNode){
        if (itsDebugFlag) System.out.println("Trying to get a node list with depth=1");
        try {
            
            Vector aNodeList = remoteTreeMaintenance.getItemList (SelectedTreeID.intValue (), aTopNode.nodeID(), 1);
            if (itsDebugFlag) System.out.println("TreeId NodeID ParentID");
	    for (int k=0; k< aNodeList.size();k++) {
                jOTDBnode aNewNode = (jOTDBnode)aNodeList.elementAt(k);
                if (itsDebugFlag) System.out.println(aNewNode.treeID()+" "+aNewNode.nodeID()+" "+aNewNode.parentID());
                String [] aS=aNewNode.name.split("[.]");
                String aName=aNewNode.nodeID()+":"+aS[aS.length-1];
                aNode= new DefaultMutableTreeNode(aName);
                root.add(aNode);
                addChildren(aNode, aNewNode);
            }
        } catch (Exception e){
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
        }        
    }
    
    private void clearAll() {
        root.removeAllChildren();
        isTreeFilled=false;
        VICTree.updateUI();
    }
    
    private void changeTreeSelection(Object aO) {
        String aS = aO.toString();
        changeSelection(aS);
    }
    
    private void changeSelection(String aNodeName){
        boolean found = false;
        
        // No reason to do this when Tree is not filled yet anyway
        if (! isTreeFilled) return;
        
        
        // strip nodeID from Name
        String [] aS=aNodeName.split("[:]");
        int aNodeID=Integer.parseInt(aS[0]);
        
        //find arrayindex that contains this nodeName
        Enumeration e = ((DefaultMutableTreeNode)VICTree.getModel().getRoot()).breadthFirstEnumeration();
        
        DefaultMutableTreeNode aFoundNode;
        boolean personDone=false;
        while (e.hasMoreElements()) {
            aFoundNode=(DefaultMutableTreeNode)e.nextElement();
            if (aFoundNode.getUserObject().toString().equals(aNodeName)) {
                // Check which tabpane is opened to update the values
                if (itsTreeTabbedPaneFocus=="NodePanel") {
                    updateNodePanel(aNodeID);
                } else if (itsTreeTabbedPaneFocus=="ParamPanel") {
                    updateParamPanel(aNodeID);
                } else if (itsTreeTabbedPaneFocus=="LogPanel") {
                    updateLogPanel(aNodeID);
                }
                 
                found = true;
                TreePath aTreePath = new TreePath(aFoundNode.getPath());
                VICTree.scrollPathToVisible(aTreePath);
                VICTree.expandPath(aTreePath);
                VICTree.setSelectionPath(aTreePath);
            }
        }
    }
    
    private void updateNodePanel(int aNodeID) {
        try {
            itsPresentNode=remoteTreeMaintenance.getNode(SelectedTreeID, aNodeID);
            NodeNameText.setText(itsPresentNode.name);
            NodeIndexText.setText(Short.toString(itsPresentNode.index));
            NodeInstancesText.setText(Short.toString(itsPresentNode.instances));
            NodeLimitsText.setText(itsPresentNode.limits);
            NodeDescriptionText.setText(itsPresentNode.description);
            aNodeName=NodeNameText.getText();
            aNodeIndex=NodeIndexText.getText();
            aNodeInstances=NodeInstancesText.getText();
            aNodeLimits=NodeLimitsText.getText();
            aNodeDescription=NodeDescriptionText.getText();
        } catch (Exception e) {
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
        }
    }

    private void updateParamPanel(int aParamID) {
        try {
//            itsPresentParam=remoteTreeMaintenance.getParam(SelectedTreeID, aParamID);
            ParamNameText.setText(itsPresentParam.name);
            ParamIndexText.setText(Short.toString(itsPresentParam.index));
            ParamTypeSelection.setSelectedIndex(itsPresentParam.type);
            ParamUnitSelection.setSelectedIndex(itsPresentParam.unit);
            ParamPruningText.setText(Short.toString(itsPresentParam.pruning));
            ParamValMomentText.setText(Short.toString(itsPresentParam.valMoment));
            int i;
            if (itsPresentParam.runtimeMod) {
                i=0;
            } else {
                i=1;
            }
            ParamRTModSelection.setSelectedIndex(i);
            ParamLimitsText.setText(itsPresentParam.limits);
            ParamDescriptionText.setText(itsPresentParam.description);  
            aParamName=ParamNameText.getText();
            aParamIndex=ParamIndexText.getText();
            aParamType=ParamTypeSelection.getSelectedIndex();
            aParamUnit=ParamUnitSelection.getSelectedIndex();
            aParamPruning=ParamPruningText.getText();
            aParamValMoment=ParamValMomentText.getText();
            aParamRTMod=ParamRTModSelection.getSelectedIndex();
            aParamLimits=ParamLimitsText.getText();
            aParamDescription=ParamDescriptionText.getText();
        } catch (Exception e) {
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
        }
    }

    private void updateLogPanel(int aNodeID) {
        
    }
    
    private boolean saveParam() {
        boolean aFlag=false;
        try {
//          aFlag=remoteTreeMaintenance.saveParam(itsPresentParam);
            
        } catch (Exception e) {
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
        }
        return aFlag;
    }
    
    private boolean saveNode() {
        boolean aFlag=false;
        try {
          aFlag=remoteTreeMaintenance.saveNode(itsPresentNode);
            
        } catch (Exception e) {
            System.out.println ("Remote OTDB via RMI and JNI failed: " + e); 
        }
        
        return aFlag;
    }
}

 
            
            

