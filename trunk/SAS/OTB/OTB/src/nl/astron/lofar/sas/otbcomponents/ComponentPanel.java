/*
 * ComponentPanel.java
 *
 * Created on 24 januari 2006, 18:54
 */

package nl.astron.lofar.sas.otbcomponents;
import nl.astron.lofar.sas.otb.panels.MainPanel;
import org.apache.log4j.Logger;
/**
 *
 * @author  Coolen
 */
public class ComponentPanel extends javax.swing.JPanel {
    
    static Logger logger = Logger.getLogger(MainPanel.class);
    
    /** Creates new form BeanForm */
    public ComponentPanel() {
        initComponents();
        initialize();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        limitsField = new javax.swing.JTextField();
        defaultValueField = new javax.swing.JTextField();
        unitField = new javax.swing.JTextField();
        parameterTypeField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        buttonPanel1 = new nl.astron.lofar.sas.otbcomponents.ButtonPanel();

        setLayout(new java.awt.BorderLayout());

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Component View");
        add(jLabel6, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Name");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 100, 20));

        jLabel2.setText("Limits");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 100, 20));

        jLabel3.setText("Default Value");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 100, 20));

        jLabel4.setText("Unit");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 100, 20));

        jLabel5.setText("Parameter Type");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 100, 20));

        nameField.setToolTipText("Name of this Component");
        nameField.setEnabled(false);
        jPanel1.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 200, 20));

        limitsField.setToolTipText("Limits for this component");
        limitsField.setEnabled(false);
        jPanel1.add(limitsField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 200, -1));

        defaultValueField.setToolTipText("Default Value for this Component");
        jPanel1.add(defaultValueField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 200, -1));

        unitField.setToolTipText("Units for this Component");
        unitField.setEnabled(false);
        jPanel1.add(unitField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 200, -1));

        parameterTypeField.setToolTipText("Parameter Type for this Component");
        parameterTypeField.setEnabled(false);
        jPanel1.add(parameterTypeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 200, -1));

        jLabel7.setText("Description");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 100, 20));

        jTextArea1.setToolTipText("Description for this Component");
        jPanel1.add(jTextArea1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 330, 100));

        buttonPanel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPanel1ActionPerformed(evt);
            }
        });

        jPanel1.add(buttonPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 770, -1));

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void buttonPanel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPanel1ActionPerformed
        logger.debug("actionPerformed: " + evt);
    }//GEN-LAST:event_buttonPanel1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private nl.astron.lofar.sas.otbcomponents.ButtonPanel buttonPanel1;
    private javax.swing.JTextField defaultValueField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField limitsField;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField parameterTypeField;
    private javax.swing.JTextField unitField;
    // End of variables declaration//GEN-END:variables

    private void initialize() {
        this.buttonPanel1.addButton("Cancel");
        this.buttonPanel1.addButton("Save");
    }
    
    /**
     * Holds value of property itsName.
     */
    private String itsName;

    /**
     * Getter for property itsName.
     * @return Value of property itsName.
     */
    public String getItsName() {

        return this.itsName;
    }

    /**
     * Setter for property itsName.
     * @param itsName New value of property itsName.
     */
    public void setItsName(String itsName) {

        this.itsName = itsName;
    }

    /**
     * Holds value of property itsLimits.
     */
    private String itsLimits;

    /**
     * Getter for property itsLimits.
     * @return Value of property itsLimits.
     */
    public String getItsLimits() {

        return this.itsLimits;
    }

    /**
     * Setter for property itsLimits.
     * @param itsLimits New value of property itsLimits.
     */
    public void setItsLimits(String itsLimits) {

        this.itsLimits = itsLimits;
    }

    /**
     * Holds value of property itsDefaultValue.
     */
    private String itsDefaultValue;

    /**
     * Getter for property itsDefaultValue.
     * @return Value of property itsDefaultValue.
     */
    public String getItsDefaultValue() {

        return this.itsDefaultValue;
    }

    /**
     * Setter for property itsDefaultValue.
     * @param itsDefaultValue New value of property itsDefaultValue.
     */
    public void setItsDefaultValue(String itsDefaultValue) {

        this.itsDefaultValue = itsDefaultValue;
    }

    /**
     * Holds value of property itsUnit.
     */
    private String itsUnit;

    /**
     * Getter for property itsUnit.
     * @return Value of property itsUnit.
     */
    public String getItsUnit() {

        return this.itsUnit;
    }

    /**
     * Setter for property itsUnit.
     * @param itsUnit New value of property itsUnit.
     */
    public void setItsUnit(String itsUnit) {

        this.itsUnit = itsUnit;
    }

    /**
     * Holds value of property itsParameterType.
     */
    private String itsParameterType;

    /**
     * Getter for property itsParameterType.
     * @return Value of property itsParameterType.
     */
    public String getItsParameterType() {

        return this.itsParameterType;
    }

    /**
     * Setter for property itsParameterType.
     * @param itsParameterType New value of property itsParameterType.
     */
    public void setItsParameterType(String itsParameterType) {

        this.itsParameterType = itsParameterType;
    }

    /**
     * Holds value of property itsDescription.
     */
    private String itsDescription;

    /**
     * Getter for property itsDescription.
     * @return Value of property itsDescription.
     */
    public String getItsDescription() {

        return this.itsDescription;
    }

    /**
     * Setter for property itsDescription.
     * @param itsDescription New value of property itsDescription.
     */
    public void setItsDescription(String itsDescription) {

        this.itsDescription = itsDescription;
    }

    /**
     * Utility field used by event firing mechanism.
     */
    private javax.swing.event.EventListenerList listenerList =  null;

    /**
     * Registers ActionListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addActionListener(java.awt.event.ActionListener listener) {

        if (listenerList == null ) {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Removes ActionListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeActionListener(java.awt.event.ActionListener listener) {

        listenerList.remove (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param event The event to be fired
     */
    private void fireActionListenerActionPerformed(java.awt.event.ActionEvent event) {

        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList ();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i]==java.awt.event.ActionListener.class) {
                ((java.awt.event.ActionListener)listeners[i+1]).actionPerformed (event);
            }
        }
    }
    
}
