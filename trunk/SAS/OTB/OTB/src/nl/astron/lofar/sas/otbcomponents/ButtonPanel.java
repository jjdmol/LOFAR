/*
 * ButtonPanel.java
 *
 * Created on January 13, 2006, 2:01 PM
 */

package nl.astron.lofar.sas.otbcomponents;

import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  blaakmeer
 */
public class ButtonPanel extends javax.swing.JPanel {
    
    /** Creates new form BeanForm */
    public ButtonPanel() {
        buttons = new HashMap<String,JButton>();
        
        initComponents();
    }

    /** adds a button to the BeanForm */
    public void addButton(String text) {
        jPanelButtons.remove(buttonsPlaceHolder);
        
        JButton jButton = new JButton();
        jButton.setText(text);
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanelButtons.add(jButton, gridBagConstraints);

        /** add the event firing code */
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireActionListenerActionPerformed(evt);
            }
        });
        
        buttons.put(text,jButton);
    }
    
    /** sets the visibility state of the button */
    public void setButtonVisible(String button, boolean visible) {
        //TODO
    }
    
    
    /** remove one button and the actionListeners associated with it
     *
     * @param   key     the Key identifying this button
     */
     public void removeButton(String aKey) {
         if (buttons.containsKey(aKey)) {
            ActionListener al[]=buttons.get(aKey).getActionListeners();
            for (int i=0;i<al.length;i++) {
                removeActionListener(al[i]);
            }
            jPanelButtons.remove(buttons.get(aKey));
            buttons.remove(aKey);            
         }
         jPanelButtons.repaint();
     }
    
    /** remove all buttons from button panel, restores the buttonplaceholder
     *  and removes all actionListeners associated with these buttons.
     */ 
    public void removeAllButtons() {
        Iterator it=buttons.keySet().iterator();
        while (it.hasNext()) {
            String key=(String)it.next();
            ActionListener al[]=buttons.get(key).getActionListeners();
            for (int i=0;i<al.length;i++) {
                removeActionListener(al[i]);
            }
            jPanelButtons.remove(buttons.get(key));
        }
        buttons.clear();
        jPanelButtons.add(buttonsPlaceHolder);
        jPanelButtons.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanelButtons = new javax.swing.JPanel();
        buttonsPlaceHolder = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jPanelButtons.setBorder(new javax.swing.border.EtchedBorder());
        buttonsPlaceHolder.setText("group of buttons here");
        jPanelButtons.add(buttonsPlaceHolder, new java.awt.GridBagConstraints());

        add(jPanelButtons, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents


    /** 
     * Contains all buttons in the form 
     */
    private HashMap<String,JButton> buttons;

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonsPlaceHolder;
    private javax.swing.JPanel jPanelButtons;
    // End of variables declaration//GEN-END:variables

    /**
     * Utility field used by event firing mechanism.
     */
    private javax.swing.event.EventListenerList listenerList =  null;

    /**
     * Registers ActionListener to receive events.
     *
     * @param listener The listener to register.
     */
    public synchronized void addActionListener(java.awt.event.ActionListener listener) {

        if (listenerList == null ) {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Removes ActionListener from the list of listeners.
     *
     * @param listener The listener to remove.
     */
    public synchronized void removeActionListener(java.awt.event.ActionListener listener) {

        listenerList.remove (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param event The event to be fired
     */
    private void fireActionListenerActionPerformed(java.awt.event.ActionEvent event) {

        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList ();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i]==java.awt.event.ActionListener.class) {
                ((java.awt.event.ActionListener)listeners[i+1]).actionPerformed (event);
            }
        }
    }
    
}
