/*
 * MainPanel.java
 *
 * Created on January 13, 2006, 2:58 PM
 */

package nl.astron.lofar.sas.otb.panels;
import java.io.File;
import java.util.Vector;
import nl.astron.lofar.sas.otb.*;
import nl.astron.lofar.sas.otb.util.*;
import nl.astron.lofar.sas.otbcomponents.LoadFileDialog;
import nl.astron.lofar.sas.otbcomponents.TableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author  blaakmeer
 */
public class MainPanel extends javax.swing.JPanel 
                       implements IPluginPanel {

    static Logger logger = Logger.getLogger(MainPanel.class);
    static String name = "Main";

    /** Creates new form MainPanel */
    public MainPanel() {
        initComponents();
        initializeButtons();
        //fill initial (PIC) table
        //fillMainTable("PIC");
    }
        
    /** 
     * Initializes the buttonpanel. Every tab has different buttons 
     */
    public void initializeButtons() {
        buttonPanel1.removeAllButtons();
        if (itsTabFocus.equals("PIC")) {
            buttonPanel1.addButton("Query Panel");
            buttonPanel1.addButton("New");
            buttonPanel1.addButton("Delete");
            buttonPanel1.addButton("Duplicate");
        } else if (itsTabFocus.equals("VIC")) {
            buttonPanel1.addButton("Query Panel");
            buttonPanel1.addButton("Delete");
            buttonPanel1.addButton("Duplicate");
        } else if (itsTabFocus.equals("Templates")) {
            buttonPanel1.addButton("Query Panel");
            buttonPanel1.addButton("New");
            buttonPanel1.addButton("Duplicate");
            buttonPanel1.addButton("Modify");
        } else if (itsTabFocus.equals("Components")) {
            buttonPanel1.addButton("Query Panel");
            buttonPanel1.addButton("New");
            buttonPanel1.addButton("Modify");            
        } else if (itsTabFocus.equals("Query Results")) {
        
        }
        buttonPanel1.addButton("View");
        buttonPanel1.addButton("Quit");
        buttonsInitialized=true;
    }

    /** 
     * Perform initialization of the plugin. The OTDB is accessed
     * in this method to get user information and to initialize
     * the tables. 
     *
     * @param mainframe MainFrame reference
     */
    public void initializePlugin(MainFrame mainframe) {
        itsMainFrame = mainframe;
        
        // check access
        UserAccount userAccount = itsMainFrame.getUserAccount();
        if(userAccount.isAdministrator()) {
            // enable/disable certain controls
        }
        if(userAccount.isAstronomer()) {
            // enable/disable certain controls
        }
        if(userAccount.isInstrumentScientist()) {
            // enable/disable certain controls
        }
        
        initializeTabs();
        
    }
    
    /** 
     * Initializes the tab-panels. Each tab has a specific table model that
     * contains the data for the table in the tab
     */
    public void initializeTabs() {
        PICtableModel PICmodel = new PICtableModel(itsMainFrame.getOTDBrmi());
        PICPanel.setTableModel(PICmodel);

        VICtableModel VICmodel = new VICtableModel(itsMainFrame.getOTDBrmi());
        VICPanel.setTableModel(VICmodel);
        
        TemplatetableModel Templatemodel = new TemplatetableModel(itsMainFrame.getOTDBrmi());
        TemplatesPanel.setTableModel(Templatemodel);
        
        
        //TODO: do the same for the other tabs
    }
    
    /** 
     * Returns the human-readable name of this panel
     *
     * @return human-readable name of the panel
     */
    public String getFriendlyName() {
        return getFriendlyNameStatic();
    }

    /** 
     * Static method that returns the human-readable name of this panel
     *
     * @return human-readable name of the panel
     */
    public static String getFriendlyNameStatic() {
        return name;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonPanel1 = new nl.astron.lofar.sas.otbcomponents.ButtonPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PICPanel = new nl.astron.lofar.sas.otbcomponents.TablePanel();
        VICPanel = new nl.astron.lofar.sas.otbcomponents.TablePanel();
        TemplatesPanel = new nl.astron.lofar.sas.otbcomponents.TablePanel();
        ComponentsPanel = new nl.astron.lofar.sas.otbcomponents.TablePanel();
        QueryResultsPanel = new nl.astron.lofar.sas.otbcomponents.TablePanel();

        setLayout(new java.awt.BorderLayout());

        buttonPanel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPanel1ActionPerformed(evt);
            }
        });

        add(buttonPanel1, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jTabbedPane1.addTab("PIC", PICPanel);

        jTabbedPane1.addTab("VIC", VICPanel);

        jTabbedPane1.addTab("Templates", TemplatesPanel);

        jTabbedPane1.addTab("Components", ComponentsPanel);

        jTabbedPane1.addTab("Query Results", QueryResultsPanel);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex())  != null && buttonsInitialized) {        
            itsTabFocus=jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex());
            initializeButtons();
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void buttonPanel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPanel1ActionPerformed
        logger.debug("actionPerformed: " + evt.getActionCommand());
        buttonPanelAction(evt.getActionCommand());
    }//GEN-LAST:event_buttonPanel1ActionPerformed
    
    /** Perform actions depending on the Button pressed and the Tab active
     *
     * @param   aButton     Name of the pressed button
     */
    private void buttonPanelAction(String aButton) {
        logger.debug("Button pressed: "+aButton+ "  ActiveTab: " + itsTabFocus);
        if (itsTabFocus.equals("PIC")) {
            if (aButton.equals("Query Panel")) {
            } else if (aButton.equals("New")) {
                File aFile=getFile("PIC-tree");
            } else if (aButton.equals("Delete")) {
            } else if (aButton.equals("Duplicate")) {
            } else if (aButton.equals("View")) {
            } else if (aButton.equals("Quit")) {
            }
        } else if (itsTabFocus.equals("VIC")) {
            if (aButton.equals("Query Panel")) {
            } else if (aButton.equals("Delete")) {
            } else if (aButton.equals("Duplicate")) {
            } else if (aButton.equals("View")) {
            } else if (aButton.equals("Quit")) {
            }
        } else if (itsTabFocus.equals("Templates")) {
            if (aButton.equals("Query Panel")) {
            } else if (aButton.equals("New")) {
                itsMainFrame.registerPlugin("nl.astron.lofar.sas.otb.panels.TemplateConstructionPanel", false, true);
                itsMainFrame.showPanel(TemplateConstructionPanel.getFriendlyNameStatic());
            } else if (aButton.equals("Duplicate")) {
                
                // TODO look if a template was chosen to duplicate first
                // and set it in the panel
                
                itsMainFrame.registerPlugin("nl.astron.lofar.sas.otb.panels.TemplateConstructionPanel", false, true);
                itsMainFrame.showPanel(TemplateConstructionPanel.getFriendlyNameStatic());
            } else if (aButton.equals("Modify")) {

                // TODO look if a template was chosen to modify first
                // and set it in the panel
                
                itsMainFrame.registerPlugin("nl.astron.lofar.sas.otb.panels.TemplateConstructionPanel", false, true);
                itsMainFrame.showPanel(TemplateConstructionPanel.getFriendlyNameStatic());
            } else if (aButton.equals("View")) {
            } else if (aButton.equals("Quit")) {
            }
        } else if (itsTabFocus.equals("Components")) {
            if (aButton.equals("Query Panel")) {
            } else if (aButton.equals("New")) {
                File aFile=getFile("VIC-component");
            } else if (aButton.equals("Modify")) {
                itsMainFrame.registerPlugin("nl.astron.lofar.sas.otb.panels.ComponentMaintenancePanel", false, true);
                itsMainFrame.showPanel(ComponentMaintenancePanel.getFriendlyNameStatic());
            } else if (aButton.equals("View")) {
            } else if (aButton.equals("Quit")) {
            }
        } else if (itsTabFocus.equals("Query Results")) {
        
        } else {
            logger.debug("Other command found: "+aButton);
        }
    }
    
    /** Launch LoadFileDialog to get a file to wrok with.
     *
     * @param   aType   PIC-tree or VIC-component
     *
     */
    private File getFile(String aType) {
        File aFile=null;
        String aStatus="";
        String aDescription="";
        
        // show login dialog
        LoadFileDialog loadFileDialog = new LoadFileDialog(itsMainFrame,true,aType);
        loadFileDialog.setLocationRelativeTo(this);
        loadFileDialog.setVisible(true);
        if(loadFileDialog.isOk()) {
            aDescription = loadFileDialog.getDescription();
            aStatus = loadFileDialog.getStatus();
            aFile = loadFileDialog.getFile();       
        } else {
            logger.info("No File chosen");
        }
        if (aFile != null && aFile.exists()) {
            logger.debug("File to load: " + aFile.getName()); 
            logger.debug("Status: " + aStatus);
            logger.debug("Description: "+ aDescription);
        }
        return aFile;        
    }
    
    private boolean fillMainTable(String aType) {
        logger.debug("fillTreeTable for "+aType);

        Vector treeList=new Vector();

        try {            
            treeList=itsMainFrame.getOTDBrmi().getRemoteOTDB().getTreeList((short)0, (short)0);
            logger.debug("returned treeList has size: "+treeList.size());
            if (treeList.size() <= 0) {
                logger.debug("Error:" + itsMainFrame.getOTDBrmi().getRemoteOTDB().errorMsg());
                return false;
            } else {
                logger.debug("Collected tree list");
                java.util.Collections.sort(treeList);
            }
        } 
        catch (Exception e)
	{
	 logger.debug("getTreeList via RMI and JNI failed: " + e);
	}        
        
       return true;
    }
    
    private MainFrame itsMainFrame;
    private String    itsTabFocus="PIC";
    private boolean   buttonsInitialized=false;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private nl.astron.lofar.sas.otbcomponents.TablePanel ComponentsPanel;
    private nl.astron.lofar.sas.otbcomponents.TablePanel PICPanel;
    private nl.astron.lofar.sas.otbcomponents.TablePanel QueryResultsPanel;
    private nl.astron.lofar.sas.otbcomponents.TablePanel TemplatesPanel;
    private nl.astron.lofar.sas.otbcomponents.TablePanel VICPanel;
    private nl.astron.lofar.sas.otbcomponents.ButtonPanel buttonPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
}
