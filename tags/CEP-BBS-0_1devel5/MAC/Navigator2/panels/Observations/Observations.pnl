V 10
1
LANG:1 0 
PANEL,-1 -1 1000 735 N "_3DFace" 0
"main()
{
  
  // empty the processesList
  if (dpExists(DPNAME_NAVIGATOR + g_navigatorID + \".observationsList\")) {
    dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".observationsList\",makeDynString(\"\"));
  }  
  
  // Initialise the Panel
  navPanel_initPanel(\"fw_viewBox\");

  baseDP = g_currentDatapoint+\"_PermSW_MACScheduler\";
  syst   = dpSubStr(baseDP,DPSUB_SYS);
    
  // set the observation selectable items
  prepareObservationsList();
        
  // connect to trigger to get a signal if some highlighting should be done.
  dpConnect( \"TriggerCallback\",true,DPNAME_NAVIGATOR + g_navigatorID + \".trigger\");
  
  // connect for selfUpdates
  showSelfState(baseDP);

}

void TriggerCallback(string dp1, bool aTrig) {
  
  LOG_DEBUG(\"Observations.pnl:Trigger Callback|entered with on: \"+dp1+\" trigger: \"+aTrig);
  LOG_DEBUG(\"Observations.pnl:Trigger Callback|Found strHighlight : \" + strHighlight);
  
  // empty highlight
  dynClear(highlight);
  
  // highlights for this screen can be triggered by :
  // Observations
  // processes
  // hardware
  dyn_string obsMatch=dynPatternMatch(\"Observation*\",strHighlight);
   
  LOG_DEBUG(\"Observations.pnl:Trigger Callback|from strHighlight ObsMatch found: \"+obsMatch);
//  LOG_DEBUG(\"Observations.pnl:Trigger Callback|from strHighlight stationMatch found: \"+stationMatch);
//  LOG_DEBUG(\"Observations.pnl:Trigger Callback|from strHighlight processMatch found: \"+processMatch);
  
  //get processes participating in Observation
//  for (int i = 1; i<= dynlen(obsMatch); i++) {
    // get the real name from the claimed datapoint
//    string ObsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+obsMatch[i]);
    
//    LOG_DEBUG(\"Observations.pnl:Trigger Callback|Found ObsDP: \" + ObsDP);             
//    if (ObsDP != \"\") {
      // look if that name is available in the Observation List
//      int i = dynContains(g_observations[\"DP\"],ObsDP);
//      if ( i > 0) {
        // get the Stationlist from that observation
//    	string sts=g_observations[\"STATIONLIST\"][i];
//        LOG_DEBUG(\"Observations.pnl:Trigger Callback|Found Stationlist for this Observation: \"+ sts);
        // add stationlist to highlight.
//        dyn_string stations = strsplit(sts,\",\");
//        if (dynlen(stations) > 0) {
//          dynAppend(highlight,stations);
//        }
//      }
//    }
//  } 
  
  //get observations from choice
  if (dynlen(obsMatch) > 0) {
    dynAppend(highlight,obsMatch);
  }

    //get stations from choice
//  if (dynlen(stationMatch) > 0) {
//    dynAppend(highlight,stationMatch);
//  }
  
  //get processes from choice
//  if (dynlen(processMatch) > 0) {
//    dynAppend(highlight,processMatch);
//  }
  //empty strHighlight
     
  LOG_DEBUG(\"Observations.pnl:Trigger Callback|highlight contains: \"+highlight);
    
  // if highlight set, then kick objectTrigger
  if (dynlen(highlight) > 0) {
    LOG_DEBUG(\"Observations.pnl:Trigger Callback|Pushing objectTrigger\");
    dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".objectTrigger\",TRUE);
  }   
}

void prepareObservationsList() {
  // check if the required datapoint for this view are enabled and accessible
  if (dpExists(baseDP+\".plannedObservations\")) {
    dpConnect(\"updateObservationsList\", baseDP +\".plannedObservations:_online.._value\",
                                        baseDP +\".activeObservations:_online.._value\",
                                        baseDP +\".finishedObservations:_online.._value\",
                                        baseDP +\".plannedObservations:_online.._invalid\");
  } else {
    LOG_ERROR(\"Observation_small.pnl:main|Couldn't find DP to connect to: \"+baseDP);
  }	
}

void updateObservationsList(string dp1, dyn_string plannedObs,
                            string dp2, dyn_string activeObs,
                            string dp3, dyn_string finishedObs,
                            string dp4, bool invalid)
{
  string obsDP;
  dyn_string result;
  int idx=1;
  int obsCnt=1;
  
  dynSortAsc(plannedObs);
  dynSortAsc(activeObs);
  dynSortAsc(finishedObs);
  
  result [idx++]=\",Planned Observations,Planned Observations\";
  for (int i=1; i<= dynlen(plannedObs); i++) {
    // get real name from claimmanager
    obsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+plannedObs[i]);    
    result [idx++]=\"Planned Observations,\"+ plannedObs[i]+\",\"+obsDP;
  }
  
  result [idx++]=\",Active Observations,Active Observations\";
  for (int i=1; i<= dynlen(activeObs); i++) {
    // get real name from claimmanager
    obsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+activeObs[i]);    
    result [idx++]=\"Active Observations,\"+ activeObs[i]+\",\"+obsDP;
    g_observationsList[obsCnt++] = activeObs[i];
  }
    
  result [idx++]=\",Finished Observations,Finished Observations\";
  for (int i=1; i<= dynlen(finishedObs); i++) {
    // get real name from claimmanager
    obsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+finishedObs[i]);    
    result [idx++]=\"Finished Observations,\"+ finishedObs[i]+\",\"+obsDP;
  }
  dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".observationsList\",result);
}" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "#uses \"navPanel.ctl\"
#uses \"MainCU_Processes.ctl\"

string baseDP = \"\";
string syst   = \"\";
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 133
"PRIMITIVE_TEXT11"
""
1 310 430 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 310 430 311 444
0 2 2 "0s" 0 0 0 192 0 0  310 430 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 0 
2 206
"PRIMITIVE_TEXT12"
""
1 4420 0 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
35 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 440 0 545 21
0 2 2 "0s" 0 0 0 192 0 0  440 0 1
1
LANG:1 101 -*-MS Shell Dlg-bold-r-normal-*-16-*-100-100-*-*-iso8859-1|-16,0,0,0,758,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 12 Observations
1 215 0 "" 1
0
1 216 1 "" 0
0
1 217 5 "" 0
0
1 218 6 "" 0
0
2 212
"PRIMITIVE_TEXT14"
""
1 0 3 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 2 29 130 43
0 2 2 "0s" 0 0 0 194 0 0  130 29 1
1
LANG:1 101 -*-MS Shell Dlg-bold-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,758,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 21 Planned Observations:
2 213
"PRIMITIVE_TEXT15"
""
1 -10 2 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 2 266 120 280
0 2 2 "0s" 0 0 0 194 0 0  120 266 1
1
LANG:1 101 -*-MS Shell Dlg-bold-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,758,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 20 Active Observations:
2 214
"PRIMITIVE_TEXT16"
""
1 0 478 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
46 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1 504 130 518
0 2 2 "0s" 0 0 0 194 0 0  130 504 1
1
LANG:1 101 -*-MS Shell Dlg-bold-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,758,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 22 Finished Observations:
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
3 0 "selfState"
"objects\\lofar_self_state.pnl" 10 11 T 37 1 0 1 -4 -5
1
"$object""MACScheduler"
3 1 "plannedObservationsTable"
"objects\\Observations\\Observation_small.pnl" 0 30 T 38 1 0 1 2 13
1
"$name""plannedObservations"
3 5 "activeObservationsTable"
"objects\\Observations\\Observation_small.pnl" 0 280 T 40 1 0 1 2 0
1
"$name""activeObservations"
3 6 "finishedObservationsTable"
"objects\\Observations\\Observation_small.pnl" 0 530 T 41 1 0 0.9999999999999998 0 -12.99999999999989
1
"$name""finishedObservations"
0