//# This file was generated by genDBcode v2.9 on Wed Mar  2 10:49:00 CET 2005
//# with the command: genDBcode P C.plmap  
//# from the directory: /home/loose/LOFAR/LCS/databases/PL/test
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_A.h"
#include "PO_C.h"
#include <PL/TPersistentObject.h>

namespace LOFAR {
	namespace PL {

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< C > class.
void DBRep< C >::bindCols(dtl::BoundIOs& cols) {
	cols["ITSBLOB"]	== itsBlob;
	cols["ITSSTRING"]	== itsString;
}


// toDBRep copies the fields of the C class to the
// DBRep< C > structure
void TPersistentObject< C >::toDBRep(DBRep< C >& dest) const
{
	dest.itsBlob	= data().itsBlob;
	dest.itsString	= data().itsString;
}


// fromDBRep copies the fields of the DBRep< C > structure
// to the C class.
void TPersistentObject< C >::fromDBRep(const DBRep< C >& src)
{
	data().itsBlob	= src.itsBlob;
	data().itsString	= src.itsString;
}


// Initialize the internals of TPersistentObject< C >
void TPersistentObject< C >::init()
{
	{
	// create new TPersistentObject for BaseClass A
	Pointer p(new TPersistentObject< A >(data()));
	// associate A's owner object-id with C's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("C");
}


// Initialize the attribute map for TPersistenObject< C >
template<>
void TPersistentObject< C >::initAttribMap()
{
	theirAttribMap["itsBlob"]	= "ITSBLOB";
	theirAttribMap["itsString"]	= "ITSSTRING";
	theirAttribMap["A::"]	=
		"@" + string(typeid(TPersistentObject< A >).name());
}


	} // close namespace PL
}	// close namespace LOFAR

