#!/usr/bin/env python

# mwimager-casa: mwimager-part using casa's lwimager
#
# Copyright (C) 2009
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# @author Ger van Diepen <diepen AT astron nl>
#
# $Id$

import os
import sys
import re
import lofar.parameterset as parset

def main(argv=None):
    if argv is None:
        argv = sys.argv
    pgmpath = os.path.dirname(argv[0])
    if len(argv) != 6:
        print sys.stderr, 'run as:   mwimager-casa parset-file seqnr ms-part vds dry'
        return 1

    # Get arguments.
    psn    = argv[1]
    seqnr  = argv[2]
    msname = argv[3]
    vds    = argv[4]
    dry    = argv[5]
    psnbase = os.path.basename (psn)
    outname = '%s.part%s.py' % (psnbase,seqnr)

    # Open the parset file.
    ps = parset.parameterset (psn)
    # Get the various parameters.
    datacol = ps.getString ('datacolumn', 'DATA')
    schan = ps.getInt ('firstchan', 0)
    echan = ps.getInt ('lastchan', -1)
    if echan < 0:
        # endchan is relative, so determine it from nchan in the VDS file.
        vdsps = parset.parameterset (vds)
        nch = vdsps.getIntVector('NChan')
        echan += nch[0]
    nchan = echan - schan + 1
    imgext   = ps.getString ('Images.name', '')
    imgnchan = ps.getInt ('Images.nchan', 1)
    imsize = ps.getIntVector ('Images.shape')
    cellsz = ps.getStringVector ('Images.cellSize')
    stokes = ps.getStringVector ('Images.stokes', 'I')
    nfacets  = ps.getInt ('Images.nfacets', 1)
    padding = ps.getString ('Gridder.padding', '1')
    minuv = ps.getDouble ('Images.minuv', 0)
    selectstr = ''
    if minuv > 0:
        selectstr = 'SUMSQR(UVW[1:2] >= %.3f' % minuv*minuv
    cachesize = ps.getString ('cachesize', '50000000')
    taper = ps.getStringVector ('Filter', '')
    phasecenter = ''
    if ps.isDefined ('Images.ra'):
        phasecenter = ' "phasecenter=%s,%s,%s"' % (ps.getString("Images.directionType", 'J2000'), ps.getString ('Images.ra'), ps.getString('Images.dec'))
    filter = ''
    if ps.isDefined ('taper'):
        taper = ps.getStringVector ('taper', '')
        if len(taper) != 3:
            print sys.stderr, 'Specify taper as [bmajor,bminor,bpa]'
            return 1
        filter = ' "filter=%s,%s,%s"' % taper
    gridtp   = ps.getString ('Gridder.type', 'WProject')
    nwplanes = 0
    if gridtp != 'SphFunc':
        nwplanes = ps.getInt ('Gridder.nwplanes', 256)

    # Currently only equal values can be used for x and y.
    if len(imsize) > 2  or  len(cellsz) > 2:
        print sys.stderr, "One or two values can be given for shape or cellSize for casaimager"
        return 1
    if len(imsize) == 2:
        if imsize[0] != imsize[1]:
            print sys.stderr, "x and y shape must be equal for casaimager"
            return 1
        imsize = imsize[0]
    if len(cellsz) == 2:
        if cellsz[0] != cellsz[1]:
            print sys.stderr, "x and y cellSize must be equal for casaimager"
            return 1
        cellsz = cellsz[0]
    # Append default unit arcsec if no unit given.
    ls = len(cellsz)
    if ls > 0  and  cellsz[ls-1] >= '0'  and  cellsz[ls-1] <= '9':
        cellsz += 'arcsec'

    # Combine stokes into one string.
    stokestr = ''
    for s in stokes:
        stokestr += s

    # The image name is formed from the given image name and the MS name
    # by replacing the MS file extension with the image name.
    # In this way it works well for e.g. mwimager-dd where a global
    # image name like -000-001.img gets applied to, say, X_SB0.MS resulting
    # in X_SB0-000-001.img
    # Following is also fine if there is no file extension.
    # If the result has no file extension, add .img to it.
    imgname = msname.split('.')[0] + imgext
    if imgname.find('.') < 0:
        imgname += '.img'

    # Add the lwimager columns if needed.
    if dry != 'dry':
        import pyrap.tables as pytab
        print "Adding MS columns needed for CASA's imager ..."
        pytab.addImagingColumns (msname)

    command = 'lwimager "ms=%s" "image=%s" "data=%s" "mode=channel" "npix=%d" "cellsize=%s" "stokes=%s" "nchan=%d" "chanstart=%d" "img_nchan=%d" "wprojplanes=%d" "nfacets=%d" "padding=%s" "cachesize=%s"' % (msname,imgname,datacol,imsize,cellsz,stokestr,nchan,schan,imgnchan,nwplanes,nfacets,padding,cachesize)
    if len(selectstr) > 0:
        command += ("select=%s" % selectstr)
    if len(phasecenter) > 0:
        command += phasecenter
    if len(filter) > 0:
        command += filter
    print command
    if dry != 'dry':
        os.system (command)

if __name__ == "__main__":
    sys.exit(main())
