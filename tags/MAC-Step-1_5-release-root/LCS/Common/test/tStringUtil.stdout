Splitting string ",aa,bb,,dd," using ',' as seperator ...
vs[0] = ""
vs[1] = "aa"
vs[2] = "bb"
vs[3] = ""
vs[4] = "dd"
vs[5] = ""

=== Strings sorted NORMAL ===
Alfons
Bertus
Chris
aap
bakker
chocolade

=== Strings sorted NOCASE ===
aap
Alfons
bakker
Bertus
chocolade
Chris

Trimmed C++ strings:
>a String with leading and trailing whitespace<
>a String without leading and trailing whitespace<
>String with(out) itemnr and arrayindex<
Trimmed C strings:
>a String with leading and trailing whitespace< , len=45
>a String without leading and trailing whitespace< , len=48
>String with(out) itemnr and arrayindex< , len=38
Lowercase and uppercase a string:
orginal: The zip code of Hondelage in Germany is 38108
lowered: the zip code of hondelage in germany is 38108
uppered: THE ZIP CODE OF HONDELAGE IN GERMANY IS 38108

*** Conversion of fundamental arithmetic types to string ***
min(bool) = false	 max(bool) = true
min(char) = 0	 max(char) = 127
min(signed char) = -128	 max(signed char) = 127
min(unsigned char) = 0	 max(unsigned char) = 255
min(short) = -32768	 max(short) = 32767
min(unsigned short) = 0	 max(unsigned short) = 65535
min(int) = -32768	 max(int) = 32767
min(unsigned int) = 0	 max(unsigned int) = 65536
min(long) = -2147483648	 max(long) = 2147483647
min(unsigned long) = 0	 max(unsigned long) = 4294967295
min(long long) = -9223372036854775808	 max(long long) = 9223372036854775807
min(unsigned long long) = 0	 max(unsigned long long) = 18446744073709551615
min(float) = 1.17549e-38	 max(float) = 3.40282e+38
min(double) = 2.22507e-308	 max(double) = 1.79769e+308

toString(int(42),"%06i") = 000042
toString(float(M_E),"%e") = 2.718282e+00
toString(float(M_PI),"%8.4f") =   3.1416
toString(double(M_E),"%+08.12g") = +2.71828182846
toString(double(M_PI*1e12),"%+08.12g") = +3.14159265359e+12

*** Testing compacting of Array-strings ***
[ a,b,c ] ==> [ a,b,c ]
[ aa01,aa06 ] ==> [aa01,aa06]
[ aa01,aa02 ] ==> [aa01,aa02]
[ aa01,aa02,aa03 ] ==> [aa01..aa03]
[ aa01,aa02,aa03,aa04 ] ==> [aa01..aa04]
[ aa01,aa02,aa03,aa05 ] ==> [aa01..aa03,aa05]
[ aa01, aa02 ,aa03,aa05,aa06 ] ==> [aa01..aa03,aa05,aa06]
[ aa01, bb02 ,aa03,aa05,aa06 ] ==> [ aa01, bb02 ,aa03,aa05,aa06 ]
[ aa01, aa02 ,aa0003,aa05,aa06 ] ==> [aa01..aa03,aa05,aa06]
[ aa01,aa02,aa03,aa05,aa06,aa7 ] ==> [aa01..aa03,aa05..aa07]
[ aa01,aa02,aa03,aa05,a06,aa7 ] ==> [ aa01,aa02,aa03,aa05,a06,aa7 ]
[ aa01,aa02,aa03,aa05,aaa06,aa7 ] ==> [ aa01,aa02,aa03,aa05,aaa06,aa7 ]
[22,23,24,25,30,31,33,35] ==> [22..25,30,31,33,35]
[22,23,24,25,30,31,33,35,36] ==> [22..25,30,31,33,35,36]
[22,23,24,25,30,31,33,35,36,37] ==> [22..25,30,31,33,35..37]
[22,23,24,25,30,31,33,35,36,37,37] ==> [22..25,30,31,33,35..37,37]
[22,23,24,25,30,31,33,35,36,37,40] ==> [22..25,30,31,33,35..37,40]
[22,23,23,25,30,31,30] ==> [22,23,23,25,30,31,30]
[22,23,23,25,30,31,30,31] ==> [22,23,23,25,30,31,30,31]
[22,23,23,25,30,31,30,31,31] ==> [22,23,23,25,30,31,30,31,31]
[22,23,23,23,23,23,25,30,31,30,31,31] ==> [22,23,23,23,23,23,25,30,31,30,31,31]
[23..28] ==> [23..28]
[22,23..28] ==> [22..28]
[22,23..28,29] ==> [22..29]
[21,23..28,29] ==> [21,23..29]
[21,23..28,30] ==> [21,23..28,30]
[23..28,30..32] ==> [23..28,30..32]
[23..28,29..32] ==> [23..32]
[23..28,29,30..32] ==> [23..32]
[23..26,29,30..32] ==> [23..26,29..32]
[23..26,27,30..32] ==> [23..27,30..32]

*** Testing expanding of Array-strings ***
[ a,b,c ] ==> [ a,b,c ]
[ aa01,aa06 ] ==> [ aa01,aa06 ]
[ aa01,aa02 ] ==> [ aa01,aa02 ]
[ aa01..aa02 ] ==> [aa01,aa02]
[ aa01..aa03 ] ==> [aa01,aa02,aa03]
[ aa01..aa03,aa04 ] ==> [aa01,aa02,aa03,aa04]
[ aa01..aa03,aa05 ] ==> [aa01,aa02,aa03,aa05]
[ aa02,aa05..aa07] ==> [aa02,aa05,aa06,aa07]
[ aa02,aa05..aa04] ==> [ aa02,aa05..aa04]
[ aa02,aa05..aa05] ==> [aa02,aa05]
[ aa01..ba03,aa05 ] ==> [ aa01..ba03,aa05 ]
[ aa01..aa03,ba05 ] ==> [ aa01..aa03,ba05 ]
[ aa01,ab03,aa05 ] ==> [ aa01,ab03,aa05 ]
[ aa01,ab03..aa05 ] ==> [ aa01,ab03..aa05 ]
[ aa01,aa03..ab05 ] ==> [ aa01,aa03..ab05 ]
[ aa01,bb03..bb05 ] ==> [ aa01,bb03..bb05 ]
[0..191] ==> [00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191]
[0,1,2,6,3,4,10..19,16] ==> [0,1,2,6,3,4,10,11,12,13,14,15,16,17,18,19,16]
