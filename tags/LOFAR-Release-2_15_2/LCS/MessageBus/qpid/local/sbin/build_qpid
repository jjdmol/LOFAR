#!/bin/bash
QPIDINSTALLDIR=/opt/qpid
 
# checkout sources for apache qpid and apache proton
if [[ -x ~/sources/proton ]]
then
  echo Skipping svn download because source directory exists
else
  cd ~
  mkdir -p sources
  cd ~/sources
  svn co http://svn.apache.org/repos/asf/qpid/proton/tags/0.8/ proton
  svn co http://svn.apache.org/repos/asf/qpid/tags/0.30/qpid/ qpid-0.30
fi
# build and install proton libraries
cd ~/sources/proton/
rm -Rf ./BUILD
mkdir BUILD
cd BUILD
cmake -DCMAKE_INSTALL_PREFIX=$QPIDINSTALLDIR -DBUILD_PERL=OFF ../
make
make install
 
if [ ! -x $QPIDINSTALLDIR/lib/cmake/Proton ]
then
   if [ -x $QPIDINSTALLDIR/lib64/cmake/Proton ]
   then
      # fix for lib64
      ln -s $QPIDINSTALLDIR/lib64 $QPIDINSTALLDIR/lib
   fi
fi
 
PROTONDIR=$QPIDINSTALLDIR/lib/cmake/Proton
 
# build and install QPID C++ broker and libraries
cd ~/sources/qpid-0.30/cpp
rm -Rf ./BUILD
mkdir BUILD
cd BUILD
 
# extra options when building if there are libraries missing and have ben built in the QPIDINSTALL directory:
#   -DBUILD_TESTING=OFF -DCMAKE_INCLUDE_PATH=$QPIDINSTALLDIR/include -DCMAKE_LIBRARY_PATH=$QPIDINSTALLDIR/lib -DCMAKE_INCLUDE_DIRECTORIES_BEFORE=ON
cmake  -DCMAKE_INSTALL_PREFIX=$QPIDINSTALLDIR -DProton_DIR=$PROTONDIR -DBUILD_XML=OFF -DBUILD_SSL=OFF -DBUILD_BINDING_RUBY=OFF ../
 
make -j4
make install
 
# setup config with 256MB storage per queue max.
cat >> $QPIDINSTALLDIR/etc/qpid/qpidd.conf << \EOF
 
# max 256MB per queue persistent buffering
num-jfiles=32
jfile-size-pgs=128
 
EOF
 
# build and install QPID python generic libs
cd ~/sources/qpid-0.30/python
./setup.py build 
./setup.py install --home=$QPIDINSTALLDIR
cd ..
 
# build and install QPID QMF python libraries 
cd ~/sources/qpid-0.30/extras/qmf
./setup.py build 
./setup.py install --home=$QPIDINSTALLDIR
cd ../..
 
# build and install QPID tools
cd ~/sources/qpid-0.30/tools
./setup.py build 
./setup.py install --home=$QPIDINSTALLDIR
cd ..
 
# retrieve current python version
MYPYTHONVERSION=$(python -V 2>&1 | sed "s/\./ /g" |  awk ' { print $2"." $3 }')
 
# create .profile for setting proper environment variables
cat > $QPIDINSTALLDIR/.profile << EOF
export PATH=\$PATH:$QPIDINSTALLDIR/sbin/:$QPIDINSTALLDIR/bin/:$QPIDINSTALLDIR/local/bin/
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$QPIDINSTALLDIR/lib:$QPIDINSTALLDIR/local/lib/
export PYTHONPATH=\$PYTHONPATH:$QPIDINSTALLDIR/lib/python/:$QPIDINSTALLDIR/lib/python$MYPYTHONVERSION/site-packages/
EOF
 
 
# assure patching a silly python 2.6 only implementation.
if [ "$MYPYTHONVERSION" = "2.4" ]
then
echo "Applying patch on $QPIDINSTALLDIR/lib/python/qpid/messaging/driver.py for Python 2.4.x"
echo "--- $QPIDINSTALLDIR/lib/python/qpid/messaging/driver.py       2015-02-06 14:40:42.000000000 +0000" > /tmp/patch_qpid_driver_python2.4
echo "+++ $QPIDINSTALLDIR/lib/python/qpid/messaging/driver.py       2015-02-06 15:37:54.000000000 +0000" >> /tmp/patch_qpid_driver_python2.4
cat >> /tmp/patch_qpid_driver_python2.4 << \EOF
@@ -1050,10 +1050,16 @@
     declare = props.get("x-declare", {})
 
     if type == "topic":
-      cmd = ExchangeDeclare(exchange=name, durable=durable) if create_node else None
+      if create_node :
+          cmd = ExchangeDeclare(exchange=name, durable=durable)
+      else:
+          cmd = None
       bindings = get_bindings(props, exchange=name)
     elif type == "queue":
-      cmd = QueueDeclare(queue=name, durable=durable) if create_node else None
+      if create_node :
+          cmd = QueueDeclare(queue=name, durable=durable)
+      else:
+          cmd=None
       bindings = get_bindings(props, queue=name)
     else:
       raise ValueError(type)
EOF
cd /
patch -p1 < /tmp/patch_qpid_driver_python2.4
fi

