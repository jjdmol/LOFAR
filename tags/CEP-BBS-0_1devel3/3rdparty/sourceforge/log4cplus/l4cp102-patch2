diff -Naur log4cplus-1.0.2/HOWTOBUILD log4cplus-1.0.2-patch2/HOWTOBUILD
--- log4cplus-1.0.2/HOWTOBUILD	1970-01-01 00:00:00.000000000 +0000
+++ log4cplus-1.0.2-patch2/HOWTOBUILD	2007-05-31 21:55:53.739018744 +0000
@@ -0,0 +1,11 @@
+Make for gcc322
+make distclean
+export  CXX=/usr/bin/g++32
+./configure --prefix=/usr/local/log4cplus102P2/gcc322
+make install
+
+Make for gcc343
+make distclean
+export  CXX=/usr/bin/g++
+./configure --prefix=/usr/local/log4cplus102P2/gcc343
+make install
diff -Naur log4cplus-1.0.2/include/log4cplus/configurator.h log4cplus-1.0.2-patch2/include/log4cplus/configurator.h
--- log4cplus-1.0.2/include/log4cplus/configurator.h	2003-09-28 04:27:20.000000000 +0000
+++ log4cplus-1.0.2-patch2/include/log4cplus/configurator.h	2007-06-01 07:19:23.178092872 +0000
@@ -28,6 +28,10 @@
 
 
 namespace log4cplus {
+// ASTRON PATCH 2
+#define	VARIABLE_FILENAME_MARKER	"%filename"
+static log4cplus::tstring	globalLogfileName = VARIABLE_FILENAME_MARKER;
+
 
     /**
      * Provides configuration from an external file.  See configure() for
@@ -68,6 +72,10 @@
          */
         static void doConfigure(const log4cplus::tstring& configFilename,
                                 Hierarchy& h = Logger::getDefaultHierarchy());
+		// ASTRON PATCH 2
+        static void doConfigureP2(const log4cplus::tstring& configFilename,
+							    const tstring&	filenameVar = VARIABLE_FILENAME_MARKER,
+                                Hierarchy& h = Logger::getDefaultHierarchy());
 
         /**
          * Read configuration from a file. <b>The existing configuration is
diff -Naur log4cplus-1.0.2/include/log4cplus/global-init.h log4cplus-1.0.2-patch2/include/log4cplus/global-init.h
--- log4cplus-1.0.2/include/log4cplus/global-init.h	1970-01-01 00:00:00.000000000 +0000
+++ log4cplus-1.0.2-patch2/include/log4cplus/global-init.h	2006-04-03 13:03:58.000000000 +0000
@@ -0,0 +1,10 @@
+// Module:  Log4CPLUS
+// File:    global-init.h
+//
+class _static_log4cplus_initializer {
+public:
+	_static_log4cplus_initializer();
+	~_static_log4cplus_initializer();
+};
+static _static_log4cplus_initializer	l4cpInit;
+
diff -Naur log4cplus-1.0.2/include/log4cplus/helpers/pointer.h log4cplus-1.0.2-patch2/include/log4cplus/helpers/pointer.h
--- log4cplus-1.0.2/include/log4cplus/helpers/pointer.h	2004-01-29 02:27:06.000000000 +0000
+++ log4cplus-1.0.2-patch2/include/log4cplus/helpers/pointer.h	2007-06-01 08:56:52.923868080 +0000
@@ -93,9 +93,9 @@
         protected:
           // Ctor
             SharedObject() 
-             : access_mutex(LOG4CPLUS_MUTEX_CREATE), count(0), destroyed(false) {}
+             : access_mutex(LOG4CPLUS_MUTEX_CREATE), count(0) {}
             SharedObject(const SharedObject&) 
-             : access_mutex(LOG4CPLUS_MUTEX_CREATE), count(0), destroyed(false) {}
+             : access_mutex(LOG4CPLUS_MUTEX_CREATE), count(0) {}
 
           // Dtor
             virtual ~SharedObject();
@@ -108,7 +108,6 @@
 
         private:
             int count;
-            bool destroyed;
         };
 
 
diff -Naur log4cplus-1.0.2/src/configurator.cxx log4cplus-1.0.2-patch2/src/configurator.cxx
--- log4cplus-1.0.2/src/configurator.cxx	2004-01-29 02:49:29.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/configurator.cxx	2007-06-01 07:20:04.019178280 +0000
@@ -253,6 +253,24 @@
 }
 
 
+//
+// ASTRON PATCH2
+//
+// There are nicer ways to implement the logfilename but this way the old programs
+// keep running when we switch library although they were compiled against the
+// PATCH1 version.
+//
+void
+log4cplus::PropertyConfigurator::doConfigureP2(const log4cplus::tstring& file,
+											   const log4cplus::tstring& logfileName,
+                                               Hierarchy& h)
+{
+	globalLogfileName = logfileName;
+    PropertyConfigurator tmp(file, h);
+    tmp.configure();
+}
+
+
 
 //////////////////////////////////////////////////////////////////////////////
 // log4cplus::PropertyConfigurator public methods
@@ -304,6 +321,15 @@
         if(subVal != val) {
             properties.setProperty(subKey, subVal);
         }
+
+
+		// ASTRON PATCH 2 - BEGIN
+		tstring::size_type	pos(subVal.find(VARIABLE_FILENAME_MARKER)) ;
+		if (pos != tstring::npos) {	// position found?
+			subVal = subVal.substr(0,pos)+globalLogfileName+subVal.substr(pos+strlen(VARIABLE_FILENAME_MARKER));
+            properties.setProperty(subKey, subVal);
+		}
+		// ASTRON PATCH 2 - END
     }
 
 }
diff -Naur log4cplus-1.0.2/src/global-init.cxx log4cplus-1.0.2-patch2/src/global-init.cxx
--- log4cplus-1.0.2/src/global-init.cxx	2003-08-22 06:54:18.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/global-init.cxx	2006-04-03 13:03:58.000000000 +0000
@@ -33,6 +33,7 @@
 //
 
 #include <log4cplus/config.h>
+#include <log4cplus/global-init.h>
 #include <log4cplus/logger.h>
 #include <log4cplus/ndc.h>
 #include <log4cplus/helpers/loglog.h>
@@ -48,8 +49,9 @@
     void initializeLog4cplus() {
         static bool initialized = false;
         if(!initialized) {
-            log4cplus::helpers::LogLog::getLogLog();
             getNDC();
+			getLogLevelManager();
+            log4cplus::helpers::LogLog::getLogLog();
             Logger::getRoot();
             initializeFactoryRegistry();
             initialized = true;
@@ -58,19 +60,21 @@
 }
 
 
-#if !defined(_WIN32) || !defined(LOG4CPLUS_BUILD_DLL)
 namespace {
-
-    class _static_log4cplus_initializer {
-    public:
-        _static_log4cplus_initializer() {
-            log4cplus::initializeLog4cplus();
-        }
-    } initializer;
+	_static_log4cplus_initializer::_static_log4cplus_initializer() {
+		log4cplus::initializeLog4cplus();
+	}
+	_static_log4cplus_initializer::~_static_log4cplus_initializer() {
+
+		while (log4cplus::getNDC().pop() != "") {
+			;
+		}
+		log4cplus::getNDC().clear();
+	}
 }
 
 
-#else /* Built as part of a WIN32 DLL */ 
+#if defined(_WIN32) || defined(LOG4CPLUS_BUILD_DLL)
 
 BOOL WINAPI DllMain(HINSTANCE hinstDLL,  // handle to DLL module
                     DWORD fdwReason,     // reason for calling function
diff -Naur log4cplus-1.0.2/src/loggingserver.log_prop log4cplus-1.0.2-patch2/src/loggingserver.log_prop
--- log4cplus-1.0.2/src/loggingserver.log_prop	1970-01-01 00:00:00.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/loggingserver.log_prop	2006-04-03 13:03:58.000000000 +0000
@@ -0,0 +1,11 @@
+# Configure the rootLogger
+log4cplus.rootLogger=DEBUG, STDOUT
+
+# Define the STDOUT appender
+log4cplus.appender.STDOUT=log4cplus::ConsoleAppender
+log4cplus.appender.STDOUT.layout=log4cplus::PatternLayout
+log4cplus.appender.STDOUT.layout.ConversionPattern=%-5p [%x]%c{3} - %m%n
+
+# Define foo at level TRACE4
+#log4cplus.logger.TRC.foo=TRACE4
+
diff -Naur log4cplus-1.0.2/src/Makefile.am log4cplus-1.0.2-patch2/src/Makefile.am
--- log4cplus-1.0.2/src/Makefile.am	2003-08-28 05:58:44.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/Makefile.am	2006-04-03 13:03:58.000000000 +0000
@@ -17,6 +17,7 @@
 			 ../include/log4cplus/consoleappender.h \
 			 ../include/log4cplus/fileappender.h \
 			 ../include/log4cplus/fstreams.h \
+			 ../include/log4cplus/global-init.h \
 			 ../include/log4cplus/hierarchy.h \
 			 ../include/log4cplus/hierarchylocker.h \
 			 ../include/log4cplus/layout.h \
diff -Naur log4cplus-1.0.2/src/patternlayout.cxx log4cplus-1.0.2-patch2/src/patternlayout.cxx
--- log4cplus-1.0.2/src/patternlayout.cxx	2003-09-28 04:30:59.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/patternlayout.cxx	2007-06-01 09:27:57.337708256 +0000
@@ -72,6 +72,8 @@
 
 #include <stdlib.h>
 #include <exception>
+#include <string.h>		// ASTRON: basename
+#include <unistd.h>		// ASTRON: getpid
 
 using namespace std;
 using namespace log4cplus;
@@ -154,7 +156,8 @@
                         NEWLINE_CONVERTER,
                         FILE_CONVERTER,
                         LINE_CONVERTER,
-                        FULL_LOCATION_CONVERTER };
+                        FULL_LOCATION_CONVERTER,
+						PID_CONVERTER };		// PATCH 2
             BasicPatternConverter(const FormattingInfo& info, Type type);
             virtual log4cplus::tstring convert(const InternalLoggingEvent& event);
 
@@ -165,6 +168,7 @@
             
             LogLevelManager& llmCache;
             Type type;
+			log4cplus::tstring	itsPid;
         };
 
 
@@ -325,7 +329,7 @@
 ////////////////////////////////////////////////
 
 log4cplus::pattern::BasicPatternConverter::BasicPatternConverter
-                                        (const FormattingInfo& info, Type type)
+                                 (const FormattingInfo& info, Type type)
 : PatternConverter(info),
   llmCache(getLogLevelManager()),
   type(type)
@@ -343,7 +347,8 @@
     case NDC_CONVERTER:      return event.getNDC();
     case MESSAGE_CONVERTER:  return event.getMessage();
     case NEWLINE_CONVERTER:  return LOG4CPLUS_TEXT("\n");
-    case FILE_CONVERTER:     return event.getFile();
+	// ASTRON: use basename of sourcefile.
+    case FILE_CONVERTER:     return basename(event.getFile().c_str());
     case THREAD_CONVERTER:   return event.getThread(); 
 
     case LINE_CONVERTER:
@@ -359,14 +364,22 @@
     case FULL_LOCATION_CONVERTER:
         {
             if(event.getFile().length() > 0) {
-                return   event.getFile() 
-                       + LOG4CPLUS_TEXT(":") 
-                       + convertIntegerToString(event.getLine());
+				// ASTRON: use basename of sourcefile
+				return 	log4cplus::tstring(basename(event.getFile().c_str()))
+                        + LOG4CPLUS_TEXT(":") 
+                        + convertIntegerToString(event.getLine());
             }
             else {
                 return LOG4CPLUS_TEXT(":");
             }
         }
+
+    case PID_CONVERTER:      
+		// convertIntegerToString is expensive, do it once, pid never changes.
+		if (itsPid.empty()) {
+			itsPid = convertIntegerToString(getpid());
+		}
+		return (itsPid);
     }
 
     return LOG4CPLUS_TEXT("INTERNAL LOG4CPLUS ERROR");
@@ -676,6 +689,12 @@
             //formattingInfo.dump(getLogLog());
             break;
 
+        case LOG4CPLUS_TEXT('P'):
+            pc = new BasicPatternConverter
+                          (formattingInfo, 
+                           BasicPatternConverter::PID_CONVERTER);
+            break;
+
         case LOG4CPLUS_TEXT('t'):
             pc = new BasicPatternConverter
                           (formattingInfo, 
diff -Naur log4cplus-1.0.2/src/pointer.cxx log4cplus-1.0.2-patch2/src/pointer.cxx
--- log4cplus-1.0.2/src/pointer.cxx	2003-06-29 16:44:01.000000000 +0000
+++ log4cplus-1.0.2-patch2/src/pointer.cxx	2007-06-01 08:57:48.495232224 +0000
@@ -62,12 +62,7 @@
 
 SharedObject::~SharedObject()
 {
-    LOG4CPLUS_BEGIN_SYNCHRONIZE_ON_MUTEX( access_mutex )
-        if(!destroyed) {
-            assert(destroyed);
-        }
-    LOG4CPLUS_END_SYNCHRONIZE_ON_MUTEX
-    LOG4CPLUS_MUTEX_FREE( access_mutex );
+  LOG4CPLUS_MUTEX_FREE( access_mutex );
 }
 
 
@@ -79,31 +74,20 @@
 void
 SharedObject::addReference()
 {
-    if(destroyed) {
-        assert(!destroyed);
-    }
-    LOG4CPLUS_BEGIN_SYNCHRONIZE_ON_MUTEX( access_mutex )
-        if(destroyed) {
-            assert(!destroyed);
-        }
-        ++count;
-    LOG4CPLUS_END_SYNCHRONIZE_ON_MUTEX
+  LOG4CPLUS_BEGIN_SYNCHRONIZE_ON_MUTEX( access_mutex )
+  ++count;
+  LOG4CPLUS_END_SYNCHRONIZE_ON_MUTEX
 }
 
 
 void
 SharedObject::removeReference()
 {
-    if(destroyed) {
-        assert(!destroyed);
-    }
-    LOG4CPLUS_BEGIN_SYNCHRONIZE_ON_MUTEX( access_mutex )
-        if(destroyed) {
-            assert(!destroyed);
-        }
-        if(--count == 0) destroyed = true;
-    LOG4CPLUS_END_SYNCHRONIZE_ON_MUTEX
-    if (destroyed) delete this;
+  bool needsRemoval(false);
+  LOG4CPLUS_BEGIN_SYNCHRONIZE_ON_MUTEX( access_mutex )
+  needsRemoval = (--count == 0);
+  LOG4CPLUS_END_SYNCHRONIZE_ON_MUTEX
+  if (needsRemoval) delete this;
 }
 
 
diff -Naur log4cplus-1.0.2/tests/socket_test/main.cxx log4cplus-1.0.2-patch2/tests/socket_test/main.cxx
--- log4cplus-1.0.2/tests/socket_test/main.cxx	2003-05-22 21:26:14.000000000 +0000
+++ log4cplus-1.0.2-patch2/tests/socket_test/main.cxx	2006-04-03 13:03:58.000000000 +0000
@@ -1,4 +1,6 @@
 
+#include <log4cplus/config.h>
+#include <log4cplus/configurator.h>
 #include <log4cplus/logger.h>
 #include <log4cplus/socketappender.h>
 #include <log4cplus/loglevel.h>
@@ -12,13 +14,23 @@
 int
 main(int argc, char **argv)
 {
+#if 0
     log4cplus::helpers::sleep(1);
     tstring serverName = (argc > 1 ? LOG4CPLUS_C_STR_TO_TSTRING(argv[1]) : tstring());
 //    tstring host = LOG4CPLUS_TEXT("192.168.2.10");
-    tstring host = LOG4CPLUS_TEXT("192.168.2.169");
-    SharedAppenderPtr append_1(new SocketAppender(host, 9998, serverName));
+    tstring host = LOG4CPLUS_TEXT("192.168.1.117");
+    SharedAppenderPtr append_1(new SocketAppender(host, 8989, serverName));
     append_1->setName( LOG4CPLUS_TEXT("First") );
     Logger::getRoot().addAppender(append_1);
+#endif
+
+    if(argc < 2) {
+        cout << "Usage: config_file" << endl;
+        return 1;
+    }
+    tstring configFile = LOG4CPLUS_C_STR_TO_TSTRING(argv[1]);
+    PropertyConfigurator config(configFile);
+    config.configure();
 
     Logger root = Logger::getRoot();
     Logger test = Logger::getInstance( LOG4CPLUS_TEXT("socket.test") );
diff -Naur log4cplus-1.0.2/tests/socket_test/socket_test.log_prop log4cplus-1.0.2-patch2/tests/socket_test/socket_test.log_prop
--- log4cplus-1.0.2/tests/socket_test/socket_test.log_prop	1970-01-01 00:00:00.000000000 +0000
+++ log4cplus-1.0.2-patch2/tests/socket_test/socket_test.log_prop	2006-04-03 13:03:58.000000000 +0000
@@ -0,0 +1,20 @@
+log4cplus.rootLogger=DEBUG, mysocket
+
+log4cplus.appender.mysocket=log4cplus::SocketAppender
+log4cplus.appender.mysocket.host=lofar17
+log4cplus.appender.mysocket.port=8989
+log4cplus.appender.mysocket.ServerName=lofar17
+
+
+
+# Configure the rootLogger
+log4cplus.rootLogger=DEBUG, STDOUT
+
+# Define the STDOUT appender
+log4cplus.appender.STDOUT=log4cplus::ConsoleAppender
+log4cplus.appender.STDOUT.layout=log4cplus::PatternLayout
+log4cplus.appender.STDOUT.layout.ConversionPattern=%-5p [%x]%c{3} - %m%n
+
+# Define foo at level TRACE4
+#log4cplus.logger.TRC.foo=TRACE4
+
