V 11
1
LANG:1 0 
PANEL,-1 -1 114 135 N "_3DFace" 1
"$station"
"main()
{
  station = $station+\":\";
  setValue(\"stationName\",\"text\",$station);
                
  baseDP = station+\"LOFAR\";

  reload();
}
  
private void reload() {
  
  fillSymbol(\"LBA\");
  fillSymbol(\"HBA\");
}

private void fillSymbol(string antennaType) {
  
  string query = \"SELECT  '_online.._value', '_online.._invalid' FROM 'LOFAR_PIC_\"+antennaType+\"*.status.state' REMOTE '\"+station+\"'\";

  // since 
  // check if the required datapoint for this view are enabled and accessible
  if (navFunct_dpReachable(baseDP)) {
    if (dpQueryConnectAll(\"update\"+antennaType+\"Info\", TRUE, antennaType+\"Info\",query) == -1) {
      setValue(antennaType+\"Object\", \"backCol\", \"Lofar_dpdoesnotexist\");
    }
  } else {
    setValue(antennaType+\"Object\", \"backCol\", \"Lofar_dpOffline\");

  }	
}

void updateLBAInfo(string ident, dyn_dyn_anytype tab)
{

  if (dynlen(tab) <= 1) return;
  
  if (tab[2][3] == TRUE) {
    setValue(\"LBAObject\", \"backCol\", \"Lofar_invalid\");
    setValue(\"hbaText\",\"text\",\"\");
    return;
  }
  
  string color = \"Lofar_operational\";
  
  // get nr of Antennas for this station/layout
  int nrAntennas = 0;
  string dp = station+\"LOFAR_PIC_StationInfo.N_LBAS\";
  dpGet(dp,nrAntennas);

  if (nrAntennas <= 0 ) {
    color = \"Lofar_invalid\";
    setValue(\"LBAObject\",\"toolTipText\",\"nrAntennas not found\");
    setValue(\"LBAObject\", \"backCol\", color);
  }  
  float step = (float)nrAntennas / 100.;

  int nrBroken = 0;
  int z; 
  for(z=2;z<=dynlen(tab);z++) {
    if (tab[z][2] >= 20) nrBroken++;
  }
  
  int percent= 0;
  if (nrBroken > 0) {
    percent = nrBroken/step;
  }
  if (nrBroken == 0) {
    color = \"Lofar_operational\";
  } else if (percent > 0 && percent < 5) {
    color = \"Lofar_maintenance\";
  } else if ( percent >=5 && percent < 20) {
    color = \"Lofar_suspicious\";
  } else if ( percent >= 20 && percent < 100) {
    color = \"Lofar_broken\";
  } else if (nrBroken == nrAntennas) {
    color = \"black\";
  }      
  
  setValue(\"LBAObject\",\"toolTipText\",station +\"faulty LBA<br> # antenna's \"+nrBroken + \" = \"+percent+\"%\" );
  setValue(\"LBAObject\", \"backCol\", color);
  setValue(\"lbaText\",\"text\",100.0-percent+\"%\");
 }

void updateHBAInfo(string ident, dyn_dyn_anytype tab)
{
  
  // for corestations (these are starting with \"CS\" in the name) do hava a HBA0 and HBA1 
  // and in this case we want to know the nrBroken for these parts and not for the total HBA

  if (dynlen(tab) <= 1) return;
  
  if (tab[2][3] == TRUE) {
    setValue(\"HBAObject\", \"backCol\", \"Lofar_invalid\");
    setValue(\"lbaText\",\"text\",\"\");
    return;
  }
  
  string color = \"Lofar_operational\";
  
  // get nr of Antennas for this station/layout
  int nrAntennas = 0;
  string dp = station+\"LOFAR_PIC_StationInfo.N_HBAS\";
  dpGet(dp,nrAntennas);

  if (nrAntennas <= 0 ) {
    color = \"Lofar_invalid\";
    setValue(\"HBAObject\",\"toolTipText\",\"nrAntennas not found\");
    setValue(\"HBAObject\", \"backCol\", color);
  }  
  float step = (float)nrAntennas / 100.;

  int nrBroken = 0;
  int z; 
  for(z=2;z<=dynlen(tab);z++) {
    if (tab[z][2] >= 20) nrBroken++;
  }
  
  int percent= 0;
  if (nrBroken > 0) {
    percent = nrBroken/step;
  }
  if (nrBroken == 0) {
    color = \"Lofar_operational\";
  } else if (percent > 0 && percent < 5) {
    color = \"Lofar_maintenance\";
  } else if ( percent >=5 && percent < 20) {
    color = \"Lofar_suspicious\";
  } else if ( percent >= 20 && percent < 100) {
    color = \"Lofar_broken\";
  } else if (nrBroken == nrAntennas) {
    color = \"black\";
  }      
  
  setValue(\"HBAObject\",\"toolTipText\",station +\"faulty HBA<br> # antenna's \"+nrBroken + \" = \"+percent+\"%\" );
  setValue(\"HBAObject\", \"backCol\", color);
  setValue(\"hbaText\",\"text\",100.0-percent+\"%\");
 }" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"
string station = \"\";
string baseDP=\"\";


bool    bDoubleClicked  = false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {  
    navPanel_setEvent($station,\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
  
  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"LBA_HBAStatusView.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    navPanel_setEvent($station,\"ChangePanel\");
  }
  
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

// routine for right mouse click
void rClick() {
  navPanel_setEvent($station,\"EventRightClick\");
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 6
"station_highLight"
""
1 75 70 E E E 1 E 0 E N "_Transparent" E N "Lofar_highLight" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  dpConnect( \"stationCallback\",true,DPNAME_NAVIGATOR + g_navigatorID +\".objectTrigger\" );
}

void stationCallback(string dp1, bool aTrig) {
  
  LOG_DEBUG(\"LBA_HBAStatusOverview.pnl:stationCallback|ObjectTrigger Callback on: \"+dp1+\" trigger: \"+aTrig);
  LOG_DEBUG(\"LBA_HBAStatusOverview.pnl:stationCallback|Found highlight : \" + highlight + \" Looking for \"+$station);
  bool bHighlight=false;
  if (dynContains(highlight,$station)) {
    bHighlight=true;
  }
  LOG_DEBUG(\"LBA_HBAStatusOverview.pnl:stationCallback|Highlight request: \"+bHighlight);
  station_highLight.visible = bHighlight;
  
}

" 0
 "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E U  1 E 5 60 55 86
9 1
"HBAObject"
""
1 100 70 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 1 1 E 1.5 0 1.5 -120 -75 1 E 100 70 20 20
 0 100 90 100 10 1
9 2
"LBAObject"
""
1 100 70 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 1 1 E -1.5 0 1.5 180 -75 1 E 100 70 20 20
 0 100 90 100 10 1
2 3
"stationName"
""
1 10 25.00000000000002 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

3 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E 0.9999999999999999 0 0.9999999999999999 1.776356839400251e-015 -4.999999999999986 0 E 10 70 50 86
0 2 2 "0s" 0 0 0 192 0 0  10 70 1
1
LANG:1 35 MS Shell Dlg 2,10,-1,5,75,0,0,0,0,0
0 1
LANG:1 5 CS001
2 4
"hbaText"
""
1 35 25 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

4 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E U  0 E 35 25 36 38
0 2 2 "0s" 0 0 0 192 0 0  35 25 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 0 
2 5
"lbaText"
""
1 5 25 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E U  0 E 5 25 6 38
0 2 2 "0s" 0 0 0 192 0 0  5 25 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
