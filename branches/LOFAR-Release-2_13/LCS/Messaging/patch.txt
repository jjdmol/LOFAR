Index: include/Messaging/Exceptions.h
===================================================================
--- include/Messaging/Exceptions.h	(revision 1400)
+++ include/Messaging/Exceptions.h	(working copy)
@@ -8,25 +8,20 @@
   namespace Messaging
   {
     // Top-level exception class for the Messaging package.
-    EXCEPTION_CLASS(Exception, LOFAR::Exception);
+    EXCEPTION_CLASS(MessagingException, LOFAR::Exception);
 
-    // // Exception class used when the message factory cannot create an instance
-    // // of the desired class.
-    // EXCEPTION_CLASS(MessageFactoryException, Exception);
+    // Exception class used when a message is invalid. 
+    EXCEPTION_CLASS(InvalidMessage, MessagingException);
 
-    // Exception class used when an LOFAR message cannot be constructed,
-    // because a required property cannot be found.
-    EXCEPTION_CLASS(MessagePropertyNotFound, Exception);
-
     // Exception class used when a message for the wrong system is received.
-    EXCEPTION_CLASS(WrongSystemName, Exception);
+    EXCEPTION_CLASS(WrongSystemName, InvalidMessage);
 
     // Exception class used when a message of unknown type is received.
-    EXCEPTION_CLASS(UnknownMessageType, Exception);
+    EXCEPTION_CLASS(UnknownMessageType, InvalidMessage);
 
-    // Exception class used when errors occur while sending or receiving
-    // messages.
-    EXCEPTION_CLASS(MessagingException, Exception);
+    // Exception class used when a message property cannot be found.
+    EXCEPTION_CLASS(MessagePropertyNotFound, InvalidMessage);
+
   }
 }
 
Index: include/Messaging/Message.h
===================================================================
--- include/Messaging/Message.h	(revision 1400)
+++ include/Messaging/Message.h	(working copy)
@@ -63,9 +63,11 @@
       Message(const Properties& properties);
 
       // Construct a Message object from a Qpid message.
+      // @throw InvalidMessage
       Message(const qpid::messaging::Message& msg);
 
       // Retrieve a message property.
+      // @throw MessagePropertyNotFound
       qpid::types::Variant getProperty(const std::string& property) const;
 
       // Set a message property.
Index: src/MessageImpl.cc
===================================================================
--- src/MessageImpl.cc	(revision 1400)
+++ src/MessageImpl.cc	(working copy)
@@ -54,12 +54,15 @@
 
     void MessageImpl::init()
     {
-      itsQpidMsg.setMessageId(qpid::types::Uuid(true).str());
+      // itsQpidMsg.setMessageId(qpid::types::Uuid(true).str());
     }
 
 
     void MessageImpl::validate(const qpid::messaging::Message& msg)
     {
+      // if (msg.getMessageId().asUuid().isNull()) {
+      //   THROW (InvalidMessage, "Message does not contain valid ID");
+      // }
     }
 
 
Index: test/tLofarMessages.cc
===================================================================
--- test/tLofarMessages.cc	(revision 1400)
+++ test/tLofarMessages.cc	(working copy)
@@ -20,11 +20,17 @@
 {
   QpidMsgFixture() {
     qpidMsg.setProperty("System", "LOFAR");
-    qpidMsg.setMessageId(qpid::types::Uuid(true).str());
+    // qpidMsg.setMessageId(qpid::types::Uuid(true).str());
+    qpidMsg.setMessageId(qpid::types::Uuid().str());
   }
   qpid::messaging::Message qpidMsg;
 };
 
+TEST_FIXTURE(QpidMsgFixture, InvalidMessage)
+{
+  qpidMsg.setMessageId(qpid::types::Uuid().str());
+}
+
 TEST_FIXTURE(QpidMsgFixture, WrongSystemName)
 {
   qpidMsg.setProperty("System", "LOFAR");
Index: test/tMessaging.cc
===================================================================
--- test/tMessaging.cc	(revision 1400)
+++ test/tMessaging.cc	(working copy)
@@ -7,6 +7,11 @@
 
 #include <UnitTest++.h>
 
+#include <qpid/messaging/Message.h>
+#include <qpid/messaging/Address.h>
+
+#include "../src/MessageImpl.h"
+
 #include <iostream>
 #include <memory>
 
@@ -25,6 +30,26 @@
   double  timeOut;
 };
 
+void show(const qpid::messaging::Message& msg)
+{
+  cout << "ReplyTo       = " << msg.getReplyTo().str() << endl;
+  cout << "Subject       = " << msg.getSubject() << endl;
+  cout << "ContentType   = " << msg.getContentType() << endl;
+  cout << "MessageId     = " << msg.getMessageId() << endl;
+  cout << "UserId        = " << msg.getUserId() << endl;
+  cout << "CorrelationId = " << msg.getCorrelationId() << endl;
+  cout << "Priority      = " << msg.getPriority() << endl;
+  cout << "Ttl           = " << msg.getTtl().getMilliseconds() << endl;
+  cout << "Durable       = " << msg.getDurable() << endl;
+  cout << "Redelivered   = " << msg.getRedelivered() << endl;
+  cout << "Properties    = " << msg.getProperties() << endl;
+  cout << "Content       = " << msg.getContent() << endl;
+  cout << "ContentBytes  = " << msg.getContentBytes() << endl;
+  cout << "ContentObject = " << msg.getContentObject() << endl;
+  cout << "ContentPtr    = " << msg.getContentPtr() << endl;
+  cout << "ContentSize   = " << msg.getContentSize() << endl;
+}
+
 TEST_FIXTURE(BusFixture, EventMessage)
 {
   cout << "******** EventMessage ********" << endl;
@@ -34,6 +59,7 @@
   fromBus.ack(*recvMsg);
   CHECK(sendMsg.type() == recvMsg->type());
   CHECK(sendMsg == *recvMsg);
+  show(recvMsg->getImpl()->getQpidMsg());
 }
 
 TEST_FIXTURE(BusFixture, MonitoringMessage)
