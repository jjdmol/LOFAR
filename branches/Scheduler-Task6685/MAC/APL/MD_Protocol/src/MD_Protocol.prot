// -*- mode: c++ -*-//
// Protocol definition for the MD driver interface
//
autogen definitions protocol;

description = "Protocol for exchanging metadata";
prefix = "MD"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+1)";

// specify extra include files
// e.g.
include = '<Common/LofarTypes.h>';
include = '<MD_Protocol/BlAllocArr.h>';

prelude = << PRELUDE_END

static const int MD_SUCCESS       	= 1;
static const int MD_FAILURE       	= 0;

// The protocol implements the following messages.
// SETBLALLOC			(allocationArray)
// SETBLALLOCACK		(status)
// GETBLALLOC			()
// GETBLALLOCACK		(status, allocationArray)
// SUBBLALLOC			()
// SUBBLALLOCACK		(status, arrayID)
// UPDBLALLOC			(status, arrayID, allocationArray)
// UNSUBBLALLOC			(arrayID)
// UNSUBBLALLOCACK		(status, arrayID)


// 8 commands

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// BeamletAllocation
//
event = {
  signal = SETBLALLOC;
  dir = IN;
  param = {
    name = "allocationArray";
    type = "BlAllocArr";
    userdefined;
  };
};

event = {
  signal = SETBLALLOCACK;
  dir = OUT;
  param = {
    name = "status";
    type = "int16";
  };
};

event = {
  signal = GETBLALLOC;
  dir = IN;
};

event = {
  signal = GETBLALLOCACK;
  dir = OUT;
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "allocationArray";
    type = "BlAllocArr";
    userdefined;
  };
};

event = {
  signal = SUBBLALLOC;
  dir = IN;
};

event = {
  signal = SUBBLALLOCACK;
  dir = OUT;
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "arrayID";
    type = "string";
  };
};

event = {
  signal = UPDBLALLOC;
  dir = OUT;
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "arrayID";
    type = "string";
  };
  param = {
    name = "allocationArray";
    type = "BlAllocArr";
    userdefined;
  };
};

event = {
  signal = UNSUBBLALLOC;
  dir = IN;
  param = {
    name = "arrayID";
    type = "string";
  };
};

event = {
  signal = UNSUBBLALLOCACK;
  dir = OUT;
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "arrayID";
    type = "string";
  };
};

