/*
 * CoreStationLayout.java
 *
 * Created on 12 maart 2009, 12:21
 */

package nl.astron.lofar.sas.otbcomponents;

import java.awt.Color;
import java.awt.event.ActionEvent;
import org.apache.log4j.Logger;

/**
 *
 * @author  Coolen
 */
public class CoreStationLayout extends javax.swing.JPanel {
    static Logger logger = Logger.getLogger(CoreStationLayout.class);
    static String name="CoreStationLayout";
    
    private boolean HBALeftSquareSelected=false;
    private boolean HBARightSquareSelected=false;
    private boolean LBAInnerCircleSelected=false;
    private boolean LBAOuterCircleSelected=false;

    /** Creates new form CoreStationLayout */
    public CoreStationLayout() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        LBAOuterCircleText = new javax.swing.JLabel();
        LBAInnerCircle = new nl.astron.lofar.sas.otbcomponents.RoundButton();
        LBAInnerCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionEvent event = new ActionEvent(this,-1,"LBAInnerCircle");
                fireActionListenerActionPerformed(event);
            }
        });
        LBAOuterCircle = new nl.astron.lofar.sas.otbcomponents.RoundButton();
        LBAOuterCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionEvent event = new ActionEvent(this,-1,"LBAOuterCircle");
                fireActionListenerActionPerformed(event);  }
        });
        HBALeftSquare = new nl.astron.lofar.sas.otbcomponents.SquareButton();
        HBALeftSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionEvent event = new ActionEvent(this,-1,"HBALeftSquare");
                fireActionListenerActionPerformed(event);
            }
        });
        HBARightSquare = new nl.astron.lofar.sas.otbcomponents.SquareButton();
        HBARightSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionEvent event = new ActionEvent(this,-1,"HBARightSquare");
                fireActionListenerActionPerformed(event);
            }
        });

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Core", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel1.setText("+");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 20, -1));

        LBAOuterCircleText.setFont(new java.awt.Font("Dialog", 1, 12));
        LBAOuterCircleText.setText("48");
        add(LBAOuterCircleText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        LBAInnerCircle.setText("48");
        LBAInnerCircle.setFont(new java.awt.Font("Dialog", 1, 12));
        LBAInnerCircle.setSelected(true);
        add(LBAInnerCircle, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 50, 50));
        add(LBAOuterCircle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 110, 110));

        HBALeftSquare.setText("24");
        HBALeftSquare.setEnabled(false);
        HBALeftSquare.setFont(new java.awt.Font("Dialog", 1, 12));
        add(HBALeftSquare, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, 60));

        HBARightSquare.setText("24");
        HBARightSquare.setEnabled(false);
        HBARightSquare.setFont(new java.awt.Font("Dialog", 1, 12));
        add(HBARightSquare, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 60, 60));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Notifies all registered listeners about the event.
     *
     * @param event The event to be fired
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private nl.astron.lofar.sas.otbcomponents.SquareButton HBALeftSquare;
    private nl.astron.lofar.sas.otbcomponents.SquareButton HBARightSquare;
    private nl.astron.lofar.sas.otbcomponents.RoundButton LBAInnerCircle;
    private nl.astron.lofar.sas.otbcomponents.RoundButton LBAOuterCircle;
    private javax.swing.JLabel LBAOuterCircleText;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    /**
     * Utility field used by event firing mechanism.
     */
    private javax.swing.event.EventListenerList myListenerList =  null;

    /**
     * Registers ActionListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addActionListener(java.awt.event.ActionListener listener) {
        if (myListenerList == null ) {
            myListenerList = new javax.swing.event.EventListenerList();
        }
        myListenerList.add (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Removes ActionListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeActionListener(java.awt.event.ActionListener listener) {
        myListenerList.remove (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param event The event to be fired
     */
    private void fireActionListenerActionPerformed(java.awt.event.ActionEvent event) {

        if (myListenerList == null) return;
        Object[] listeners = myListenerList.getListenerList ();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i]==java.awt.event.ActionListener.class) {
                ((java.awt.event.ActionListener)listeners[i+1]).actionPerformed (event);
            }
        }
    }

    public boolean isHBALeftSquareEnabled() {
        return HBALeftSquare.isEnabled();
    }

    public void setHBALeftSquareEnabled(boolean b) {
        if (!b && HBALeftSquare.isSelected()) {
            setHBALeftSquareSelected(false);
        }
        HBALeftSquare.setEnabled(b);
        HBALeftSquare.invalidate();
        HBALeftSquare.repaint();
    }

    public boolean isHBARightSquareEnabled() {
        return HBARightSquare.isEnabled();
    }

    public void setHBARightSquareEnabled(boolean b) {
        if (!b && HBARightSquare.isSelected()) {
            setHBARightSquareSelected(false);
        }
        HBARightSquare.setEnabled(b);
        HBARightSquare.invalidate();
        HBARightSquare.repaint();
    }

    public boolean isLBAInnerCircleEnabled() {
        return LBAInnerCircle.isEnabled();
    }

    public void setLBAInnerCircleEnabled(boolean b) {
        if (!b && LBAInnerCircle.isSelected()) {
            setLBAInnerCircleSelected(false);
        }
        LBAInnerCircle.setEnabled(b);
        LBAInnerCircle.invalidate();
        LBAInnerCircle.repaint();
    }
    
    public boolean isLBAOuterCircleEnabled() {
        return LBAOuterCircle.isEnabled();
    }

    public void setLBAOuterCircleEnabled(boolean b) {
        if (!b && LBAOuterCircle.isSelected()) {
            setLBAOuterCircleSelected(false);
        }
        LBAOuterCircle.setEnabled(b);
        LBAOuterCircleText.setEnabled(b);
        LBAOuterCircle.invalidate();
        LBAOuterCircle.repaint();
    }

    public boolean isHBALeftSquareSelected() {
        return HBALeftSquareSelected;
    }

    public void setHBALeftSquareSelected(boolean b) {
        HBALeftSquareSelected=b;
        if (b) {
            HBALeftSquare.setBackground(Color.green);
        } else {
            HBALeftSquare.setBackground(getBackground());
        }
        HBALeftSquare.invalidate();
        HBALeftSquare.repaint();
    }

    public boolean isHBARightSquareSelected() {
        return HBARightSquareSelected;
    }

    public void setHBARightSquareSelected(boolean b) {
        HBARightSquareSelected=b;
        if (b) {
            HBARightSquare.setBackground(Color.green);
        } else {
            HBARightSquare.setBackground(getBackground());
        }
        HBARightSquare.invalidate();
        HBARightSquare.repaint();
    }


    public boolean isLBAInnerCircleSelected() {
        return LBAInnerCircleSelected;
    }

    public void setLBAInnerCircleSelected(boolean b) {
        LBAInnerCircleSelected=b;
        if (b) {
            LBAInnerCircle.setBackground(Color.green);
        } else {
            LBAInnerCircle.setBackground(getBackground());
        }
        LBAInnerCircle.invalidate();
        LBAInnerCircle.repaint();
    }

    public boolean isLBAOuterCircleSelected() {
        return LBAOuterCircleSelected;
    }

    public void setLBAOuterCircleSelected(boolean b) {
        LBAOuterCircleSelected=b;
        if (b) {
            LBAOuterCircle.setBackground(Color.green);
        } else {
            LBAOuterCircle.setBackground(getBackground());
        }
        LBAOuterCircle.invalidate();
        LBAOuterCircle.repaint();
    }

}
