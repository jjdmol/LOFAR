/*
 * WaveformSettingsPanel.java
 *
 * Created on May 1, 2006, 11:28 AM
 */

package nl.astron.lofar.mac.apl.gui.jrsp.panels.subbandstats;

import javax.swing.JOptionPane;
import nl.astron.lofar.mac.apl.gui.jrsp.RCUMask;

/**
 *
 * @author  balken
 */
public class WaveformSettingsPanel extends javax.swing.JPanel {
    
    private SubbandStatsPanel ssPanel;
        
    /** Creates new form WaveformSettingsPanel */
    public WaveformSettingsPanel() {
        initComponents();
        
        /*
         * Initialize subpanels.
         */
        listPanel.init(this);
    }
    
    public void init(SubbandStatsPanel ssPanel)
    {
        this.ssPanel = ssPanel;        
    }
    
    public void update()
    {
        listPanel.update();
    }
    
    SubbandStatsPanel getSubbandStatsPanel()
    {
        return ssPanel;
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        inputPanel = new nl.astron.lofar.mac.apl.gui.jrsp.panels.subbandstats.WaveformSettingsInputPanel();
	inputPanel.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
	        inputPanelActionPerformed(evt);
	    }
	});
        listPanel = new nl.astron.lofar.mac.apl.gui.jrsp.panels.subbandstats.WaveformSettingsList();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Waveform Settings"))));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(inputPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(listPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 481, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(org.jdesktop.layout.GroupLayout.LEADING, listPanel, 0, 0, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, inputPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void inputPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputPanelActionPerformed
        /*
         * Make a RCUMask that combines teh RCUMasks of the both plotters.
         */
        RCUMask mask = new RCUMask(ssPanel.getPlotLeft().getRCUMask(), ssPanel.getPlotRight().getRCUMask());
        
        /*
         * Call setWaveformSettings. But first parse the mode, freq. and ampl
         * to int's and a double.
         */
        try
        {
            int mode = 1; // default value for mode.
            short phase = Short.parseShort(inputPanel.getPhase());
            double frequency = Double.parseDouble(inputPanel.getFrequency());
            int amplitude = Integer.parseInt(inputPanel.getAmplitude());

            if (!ssPanel.getMainPanel().getBoard().setWaveformSettings(mask.getMask(), mode, frequency, phase, amplitude))
            {
                JOptionPane.showMessageDialog(null, "Failed to change the waveform settings.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(NumberFormatException nfe)
        {
            JOptionPane.showMessageDialog(null, "Incorrect value entered. All fields should contain a positive value.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        /*
         * Update whole panel.
         */
        ssPanel.update();
    }//GEN-LAST:event_inputPanelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private nl.astron.lofar.mac.apl.gui.jrsp.panels.subbandstats.WaveformSettingsInputPanel inputPanel;
    private nl.astron.lofar.mac.apl.gui.jrsp.panels.subbandstats.WaveformSettingsList listPanel;
    // End of variables declaration//GEN-END:variables
    
}
