/**
 * PlotPanel.java
 *
 *  Copyright (C) 2002-2007
 *  ASTRON (Netherlands Foundation for Research in Astronomy)
 *  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package nl.astron.lofar.java.gui.plotter;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.util.HashMap;
import javax.swing.JComponent;
import nl.astron.lofar.java.gui.plotter.exceptions.PlotterException;
import nl.astron.lofar.java.gui.plotter.exceptions.PlotterPrintException;

/**
 * This class serves as a JFC/Swing container of a plot generated by the plotter framework.
 * It can be added to other JFC compatible applications, and it serves as the user's access point
 * of the entire plotter class structure.
 *
 * @created 11-04-2006, 15:00
 * @author pompert
 * @version $Id$
 * @updated 13-apr-2006 11:19:47
 */
public class PlotPanel extends javax.swing.JPanel implements Printable{
    
    static String name = "PlotPanel";
    private PlotController m_PlotController;
    private JComponent plot;
    private JComponent legend;
    private Object currentDataConstraint;
    
    /**
     * - Constructs a new PlotPanel
     * - Gets a new PlotController to work with
     */
    public PlotPanel(){
        m_PlotController = new PlotController();
        initComponents();
        
    }
    /**
     * cleans up the instance variables
     */
    @Override
    public void finalize() throws Throwable {
        plot = null;
        legend = null;
        m_PlotController = null;
        currentDataConstraint = null;
    }
     /**
     * This method will attempt to generate a plot using several key arguments:
     * -int type (this is defined by PlotConstants.PLOT_*)
     * -boolean separateLegend (this will tell the plotter that you would like a separate JComponent legend,
     *                          otherwise you will see a legend where the plotter puts it by default.
     * -Object constraints (These are the arguments you need for the data access layer to get the data
     *                        you want, which can be anything, as long as your configured data access layer
     *                        supports it!)
     * The plot will be added to this class' contents so you can view it directly. It can also be retrieved separately
     * by calling the getPlot() method.
     *
     * @param type The type of plot to be generated (these types are defined in PlotConstants.PLOT_* )
     * @param separateLegend Tells the plotter if you like a separate legend JComponent, or leave it embedded in the plot itself. Dont forget to call getLegendForPlot() to get the separate legend!
     * @param constraints The arguments to be passed to the configured data access layer
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public void createPlot(int type, boolean separateLegend, Object constraints) throws PlotterException{
        this.removeAll();
        plot = null;
        legend = null;
        currentDataConstraint = constraints;
        plot = m_PlotController.createPlot(type, separateLegend, constraints);
        this.add(plot,BorderLayout.CENTER);
    }
    /**
     * This method will attempt to generate a plot image using several key arguments:
     * -int type (this is defined by PlotConstants.PLOT_*)
     * -Object constraints (These are the arguments you need for the data access layer to get the data
     *                        you want, which can be anything, as long as your configured data access layer
     *                        supports it!)
     *
     * @param type The type of plot to be generated (these types are defined in PlotConstants.PLOT_* )
     * @param constraints The arguments to be passed to the configured data access layer
     * @return The image file which can be saved to a file or used in different software.
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public Image exportImage(int type, Object constraints) throws PlotterException{
        return m_PlotController.createPlotImage(constraints);
    }
    /**
     * This method will attempt to export the data currently in the plot to your configured data export layer using a single argument:
     * -Object arguments (These are the arguments you need for the data export layer to export the data
     *                        you currently have in the plot, and this can be anything, as long as your configured data export layer
     *                        supports them!)
     * @param arguments The arguments to be passed to the configured data export layer
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public void exportData(Object arguments) throws PlotterException{
        m_PlotController.exportData(arguments);
    }
    /**
     * This method will attempt to modify the current plot using one key argument:
     * -Object newConstraints (These are the arguments you need for the data access layer to get the data
     *                        you want, which can be anything, as long as your configured data access layer
     *                        supports it!)
     * The plot will be updated to this class' contents so you can view it directly. It can also be retrieved separately
     * by calling the getPlot() method.
     *
     * @param newConstraints The arguments to be passed to the configured data access layer
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public void modifyPlot(Object newConstraints) throws PlotterException{
        try {
            currentDataConstraint = newConstraints;
            plot = m_PlotController.modifyPlot(plot, newConstraints);
            this.removeAll();
            this.add(plot,BorderLayout.CENTER);
            
        } catch (PlotterException ex) {
            throw ex;
        }
        try {
            legend = m_PlotController.getLegendForPlot(plot);
        } catch (PlotterException ex) {}
        
    }
    /**
     * This method will attempt to print the current plot
     */
    public void printPlot(boolean printWithLegend) throws PlotterPrintException{
        PrinterJob printJob = PrinterJob.getPrinterJob();
        if(printWithLegend){
            try {
                add(getLegendForPlot(),BorderLayout.SOUTH);
            } catch (PlotterException ex) {
                PlotterPrintException ppe = new PlotterPrintException("An error was detected while attempting to add the legend for printing the plot. ");
                ppe.initCause(ex);
                throw ppe;  
            }
        }
       
        PageFormat pf = new PageFormat();
        pf = printJob.pageDialog(pf);
        printJob.setPrintable(this,pf);
        printJob.setJobName("OTB ParmDB Plotter - "+printJob.getUserName());
        if (printJob.printDialog()){
            try {
                printJob.print();
                
            } catch (PrinterException pe) {
                PlotterPrintException ppe = new PlotterPrintException("An error was detected while attempting to print the plot. ");
                ppe.initCause(pe);
                throw ppe;                
            }
        }
        if(printWithLegend){
            removeAll();    
            add(getPlot(),BorderLayout.CENTER);
            validate();
        }
    }
    /**
     * This method will return the plot currently in memory
     * @return The plot currently in memory
     */
    public JComponent getPlot(){
        return plot;
    }
    /**
     * This method will return the legend for the plot currently in memory.
     * It will throw a NotSupportedException should the plot not have a separate legend available.
     * @return The plot legend currently in memory
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public JComponent getLegendForPlot() throws PlotterException{
        if(legend == null && plot != null){
            legend = m_PlotController.getLegendForPlot(plot);
        }
        return legend;
        
    }
    /**
     * This method will return the dataset for the plot currently in memory.
     * It will throw a NotSupportedException should the plot not have a dataset available.
     * @return The plot dataset currently in memory
     * @throws PlotterException will be thrown if an Exception is detected in the plotter that the user needs to be aware of.
     * Please handle this exception in a way that your application does not suffer from it, and make sure the user will be shown a message
     * that something has gone wrong.
     */
    public HashMap<String,Object> getDataForPlot() throws PlotterException{
        return m_PlotController.getPlotData();
    }
    public int print(Graphics g, PageFormat pf, int pageIndex) {
        int response = NO_SUCH_PAGE;
        double pageHeight = pf.getImageableHeight(); //height of printer page
        double pageWidth = pf.getImageableWidth(); //width of printer page
        //this.setSize(new Dimension((int)Math.floor(pageWidth),(int)Math.floor(pageHeight)));
        this.setDoubleBuffered(false);
        
        Graphics2D g2 = (Graphics2D) g;
        // for faster printing, turn off double buffering
       
        Dimension d = this.getSize(); //get size of document
        double panelWidth = d.width; //width in pixels
        double panelHeight = d.height; //height in pixels
         
        double scale = pageWidth / panelWidth;
        // make sure not print empty pages
        if (pageIndex > 0) {
            response = NO_SUCH_PAGE;
        } else {
            // shift Graphic to line up with beginning of print-imageable region
            g2.translate(pf.getImageableX(), pf.getImageableY());
            // scale the page so the width fits...
            g2.scale(scale, scale);
            this.paintAll(g2); //repaint the page for printing
            this.setDoubleBuffered(true);
            response = Printable.PAGE_EXISTS;
        }
        return response;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lPlaceholderLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(640, 480));
        lPlaceholderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lPlaceholderLabel.setText("This is the LOFAR Plotter Framework");
        lPlaceholderLabel.setMaximumSize(null);
        lPlaceholderLabel.setMinimumSize(new java.awt.Dimension(320, 240));
        lPlaceholderLabel.setPreferredSize(new java.awt.Dimension(640, 480));
        add(lPlaceholderLabel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lPlaceholderLabel;
    // End of variables declaration//GEN-END:variables
    
}
