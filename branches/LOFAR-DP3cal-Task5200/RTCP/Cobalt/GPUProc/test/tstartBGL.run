#!/bin/bash

# Arguments for startBGL.sh:
#
# 1. unused
# 2. unused
# 3. unused
# 4. parset
# 5. obs id
#
# Arguments for stopBGL.sh:
#
# 1. unused
# 2. obs id

. $srcdir/testFuncs.sh

# Create a LOFARROOT environment
mklofarroot tstartBGL_tmp.lofarroot

echo "***************************"
echo "Test 0: check environment"
echo "***************************"
which startBGL.sh       || error "Cannot execute startBGL.sh"
which stopBGL.sh        || error "Cannot execute stopBGL.sh"
which mpirun.sh         || error "Cannot execute mpirun.sh"
which runObservation.sh || error "Cannot execute runObservation.sh"
which rtcp              || error "Cannot execute rtcp"

echo "***************************"
echo "Test 1: no parameters"
echo "        (expects failure)"
echo "***************************"
startBGL.sh && error "startBGL.sh did not fail as expected"
stopBGL.sh && error "stopBGL.sh did not fail as expected"

# Log files must be present
[ -r $LOFARROOT/var/log/startBGL.log ] || error "Cannot read $LOFARROOT/var/log/startBGL.log"
[ -r $LOFARROOT/var/log/stopBGL.log ]  || error "Cannot read $LOFARROOT/var/log/stopBGL.log"

echo "***************************"
echo "Test 2: non-existing parset"
echo "        (expects failure)"
echo "***************************"
startBGL.sh 1 2 3 /non-existing 1000 && error "startBGL.sh did not fail as expected"

echo "***************************"
echo "Test 3: kill non-existing obs"
echo "        (expects failure)"
echo "***************************"
stopBGL.sh 1 0 && error "stopBGL.sh did not fail as expected"

echo "***************************"
echo "Test 4: kill finished obs"
echo "        (expects failure)"
echo "***************************"
echo 99999999 > $LOFARROOT/var/run/rtcp-0.pid || error "Could not create $LOFARROOT/var/run/rtcp-0.pid"
stopBGL.sh 1 0 && error "stopBGL.sh did not fail as expected"

echo "***************************"
echo "Test 5: normal run"
echo "        (expects success)"
echo "***************************"

# Extend start time to a few seconds into the future to ensure that rtcp will run long
# enough for our checks to pass.
NOW=`date +%s`
START=`date --date="@$(($NOW + 10))" +"%F %T"`
STOP=`date --date="@$(($NOW + 20))" +"%F %T"`
echo "
Observation.startTime = $START
Observation.stopTime = $STOP
" >> $testdir/tstartBGL.in_parset

startBGL.sh 1 2 3 $testdir/tstartBGL.in_parset 1000 || error "startBGL.sh failed"

# Give rtcp time to start
sleep 3

# PID file must be present
[ -r $LOFARROOT/var/run/rtcp-1000.pid ] || error "Cannot read $LOFARROOT/var/run/rtcp-1000.pid"

# Log file must be present
[ -r $LOFARROOT/var/log/rtcp-1000.log ] || error "Cannot read $LOFARROOT/var/log/rtcp-1000.log"

# We expect rtcp to still run, because it takes several
# seconds to initialise. If rtcp is already done, stopBGL.sh
# will give an error!
stopBGL.sh 1 1000 || error "stopBGL.sh failed"

# Give rtcp time to clean up
sleep 2

# PID file must be gone
[ ! -e $LOFARROOT/var/run/rtcp-1000.pid ] || error "Found lingering $LOFARROOT/var/run/rtcp-1000.pid"
