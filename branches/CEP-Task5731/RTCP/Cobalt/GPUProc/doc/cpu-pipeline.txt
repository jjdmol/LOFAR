DATA-FLOW DIAGRAM OF COBALT
=======================================================

This document describes the flow of data through Cobalt,
from receiving the RSP packets to writing either HDF5 or
MS to disk.

-------------------------------------------------------
Station/StationInput.cc: sendInputToPipeline()

This pipeline is executed per antenna field:

1. generates blocks [0, nrBlocks)
2. adds the meta data (from casacore)
3. adds the data (using a queue of RSP packets)
4. transposes both over MPI
-------------------------------------------------------

   Function
A ----------> B    a function transporting data from A to B (includes processing)

+-------+
| Queue |          a queue holding elements between functions
+-------+

/----------\
| Function |       a function processing on an element
\----------/


     SMD::computeMetaData     +------------------------+
NEW ------------------------> | SMD::metaDataPool.free | <----------+
                              +------------------------+            |
                                        |                           |
                                        | SMD::computeMetaData      |
                                        V                           | MPISender::sendBlocks
                              +--------------------------+          |
                              | SMD::metaDataPool.filled |          |
                              +--------------------------+          |
                                        |                           |
                                        | SI::processInput          |
                                        V                           |
                              /---------------------------\         |
                              | SI::writeRSP[Non]RealTime |         |
                              \---------------------------/         |
                                        |                           |
                                        | SI::processInput          |
                                        V                           |
                              +-------------------------------+     |
                              | sendInputToPipeline::mpiQueue |-----+
                              +-------------------------------+


     SI::processInput         +----------------------+
NEW ------------------------> | SI::rspDataPool.free | <------------+              
                              +----------------------+              |
                                        |                           |
                                        | SI::readRSP[Non]RealTime  | SI::writeRSP[Non]RealTime
                                        V                           |
                              +------------------------+            |
                              | SI::rspDataPool.filled |------------+
                              +------------------------+


NEW -> StationMetaData::metaDataPool.free
  * actor:  StationMetaData::computeMetaData()

StationMetaData::metaDataPool.free -> StationMetaData::metaDataPool.filled
  * actor:          StationMetaData::computeMetaData()
  * role:           - block generation [0, nrBlocks)
                    - add meta data (delays, offsets) for all subbands 
  * stop condition: processed nrBlocks blocks
  * stop action:    appends NULL

StationMetaData::metaDataPool.filled -> sendInputToPipeline::mpiQueue
  * actor:          StationInput::processInput()
  * role:           - fill block with RSP data using [read|write]RSP[Non]RealTime()
  * stop condition: read NULL
  * stop action:    append NULL, kill readRSPRealTime()

    NEW -> StationInput::rspDataPool.free
    * actor:  StationInput::processInput()

    StationInput::rspDataPool[board].free -> StationInput::rspDataPool[board].filled
      * actor:          StationInput::readRSP[Non]RealTime()
      * role:           - read RSP from socket
      * stop condition: read NULL, or killed
      * stop action:    none

    StationInput::rspDataPool[board].filled -> StationInput::rspDataPool[board].free
      * actor:          StationInput::writeRSP[Non]RealTime()
      * role:           - fill block with RSP data
      * stop condition: read NULL, or deadline passes
      * stop action:    none

sendInputToPipeline::mpiQueue -> StationMetaData::metaDataPool.free
  * actor:          MPISender::sendBlocks()
  * role:           - transpose data over MPI
  * stop condition: read NULL
  * stop action:    none
  
-------------------------------------------------------
GPUProc/Pipeline/Pipeline.cc: processObservation()

This pipeline is executed per set of subbands local to the rtcp process:

1. receives blocks of all antenna fields over MPI
2. transposes & preprocesses the input
3. process the blocks on the GPU
4. applies postprocessing (weights, etc)
5. sends blocks to outputProc
-------------------------------------------------------

NEW -> Pipeline::mpiPool.free
  * actor:          Pipeline::receiveInput()

Pipeline::mpiPool.free -> Pipeline::mpiPool.filled
  * actor:          Pipeline::receiveInput()
  * role:           - read transposed data over MPI, as data[station][subband]
  * stop condition: read nrBlocks
  * stop action:    append NULL

Pipeline::mpiPool.filled -> Pipeline::mpiPool.free
SubbandProc::inputPool.free -> SubbandProc::inputPool.filled
  * actor:          Pipeline::transposeInput()
  * role:           - transpose input from data[station][subband] to data[subband][station]
                    - divide subbands over SubbandProcs
  * stop condition: read NULL
  * stop action:    append NULL

SubbandProc::inputPool.filled -> SubbandProc.processPool.filled
  * actor:          Pipeline::preprocessSubbands()
  * role:           - run SubbandProc::applyMetaData() on station data,
                      typically zeroes flagged data
  * stop condition: read NULL
  * stop action:    append NULL (by processObservation())

SubbandProc::processPool.filled -> SubbandProc.inputPool.free
SubbandProc::outputPool.free -> SubbandProc.outputPool.filled
  * actor:          Pipeline::processSubbands()
  * role:           - run SubbandProc::processSubband() to do GPU work
  * stop condition: read NULL
  * stop action:    append NULL (by processObservation())

SubbandProc::outputPool.filled -> SubbandProc.outputPool.free (if !handOffOutput or data loss)
SubbandProc::outputPool.filled -> Pipeline::writePool[subband] (if sending downstream)
  * actor:          Pipeline::postprocessSubbands()
  * role:           - run SubbandProc::postprocessSubband(),
                      typically for CPU-side integration between blocks,
                      to apply weights, etc.
  * stop condition: read NULL
  * stop action:    call writePool.noMore(),
                    kill any registered outputThreads after outputFlushTimeout
                    (by processObservation())

// ----- Begin Correlator -----
CorrelatorPipeline::writePool[subband] -> SubbandProc::outputPool.free
  * actor:          SubbandProc::writeOutput()
  * role:           - Write output to Stream to outputProc
                    - Is a registered outputThread
  * stop condition: read NULL, or killed (by processObservation())
  * stop action:    call doneWritingOutput() (by processObservation())
// ----- End Correlator -----

// ----- Begin Beamformer -----
BeamFormerPipeline::writePool[subband] -> SubbandProc::outputPool.free
                          NEW -> MultiSender::queues
  * actor:          SubbandProc::writeOutput()
  * role:           - Transpose output and write subband data of each TAB
                      to multiSender.append()
  * stop condition: read NULL
  * stop action:    call doneWritingOutput() (by processObservation())

MultiSender:queues -> DELETE
  * actor:          MultiSender::process()
  * role:           - Write all subband data, multiplexed over one Stream
                      per outputProc
                    - Is a registered outputThread
  * stop condition: read NULL, or killed (by processObservation())
  * stop action:    none
// ----- End Beamformer -----

-------------------------------------------------------
OutputProc/GPUProcIO.cc: process()

This pipeline ships the blocks from network to disk.

1. receives blocks of all antenna fields over MPI
2. transposes & preprocesses the input
3. process the blocks on the GPU
4. applies postprocessing (weights, etc)
5. sends blocks to outputProc
-------------------------------------------------------

// ----- Begin Correlator -----
NEW -> outputPool.free
  * actor:          SubbandWriter::SubbandWriter

outputPool.free -> outputPool.filled
  * actor:          InputThread::process
  * role:           - Reads blocks from a Stream from rtcp
  * stop condition: read NULL, or end-of-stream
  * stop action:    append NULL

outputPool.filled -> outputPool.free
  * actor:          SubbandOutputThread::doWork()
  * role:           - Write blocks to disk
  * stop condition: read NULL
  * stop action:    none
// ----- End Correlator -----

// ----- Begin Beamformer -----
NEW -> outputPools[file]
  * actor:          GPUProc.cc::process()

outputPools[file].free -> outputPools[file].filled
BlockCollector::outputQueue -> DELETE
  * actor:          BlockCollector::outputLoop
  * role:           - Transposes input (interleaves subbands)
  * stop condition: read NULL
  * stop action:    append NULL

    NEW -> BlockCollector::inputQueue
      * actor:          MultiReceiver::receiveLoop
      * role:           - Reads blocks (of one subband) over a Stream from rtcp
      * stop condition: end-of-stream
      * stop action:    none

    BlockCollector::inputQueue -> BlockCollector::outputQueue
      * actor:          BlockCollector::inputLoop
      * role:           - Collects all subbands of a single block
      * stop condition: read NULL
      * stop action:    none

outputPools[file].filled -> outputPools[file].free
  * actor:          TABOutputThread::doWork()
  * role:           - Write blocks to disk
  * stop condition: read NULL
  * stop action:    none
// ----- End Beamformer -----

