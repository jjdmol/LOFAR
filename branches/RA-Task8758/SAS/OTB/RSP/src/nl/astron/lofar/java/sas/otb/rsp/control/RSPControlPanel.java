/*
 * RSPControlPanel.java
 *
 * Copyright (C) 2006
 * ASTRON (Netherlands Foundation for Research in Astronomy)
 * P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */

package nl.astron.lofar.java.sas.otb.rsp.control;

import javax.swing.JOptionPane;

import nl.astron.lofar.java.sas.otb.rsp.ITabPanel;
import nl.astron.lofar.java.sas.otb.rsp.MainPanel;
import nl.astron.lofar.sas.otb.jrsp.RCUMask;
import nl.astron.lofar.sas.otb.jrsp.RSPMask;

/**
 *
 * @author  balken
 */
public class RSPControlPanel extends javax.swing.JPanel implements ITabPanel {
    
    /** The MainPanel */
    private MainPanel itsMainPanel;
    
    /**
     * Creates new form RSPControlPanel
     */
    public RSPControlPanel() {
        initComponents();
        /*
         * Disables all the user input because there is no need to push a button
         * or select a filter when there is no mask.
         */
        enablePanel(false);
    }
    
    /**
     * Used to initialize the ITabPanel and give it a refrence to the main panel. 
     * @param   mainPanel   The MainPanel.
     */
    public void init(MainPanel mainPanel) {
        itsMainPanel = mainPanel;        
    }
    
    /**
     * Method that can be called by the main panel to update this panel.
     * @param   updateType  The type of update.
     */
    public void update(int updateType) {
        /*
         * Only respond to a Required Update.
         */
        if (updateType == ITabPanel.REQUIRED_UPDATE) {
            /*
             * Disables all the user input fields when there is no connection with
             * a board. The input fields are enabled when there is a connection.
             */        
            enablePanel(itsMainPanel.getBoard().isConnected());
            
            /*
             * The board of the selectionpanel can only be set when there is a
             * connection with the board.
             */
            if (itsMainPanel.getBoard().isConnected()) {
                itsMaskSelectionPanel.setBoard( itsMainPanel.getSelectedBoardIndex() );
            }
        }
    }
    
    /**
     * Enables or disables the buttons on this panel.
     * @param   b       Boolean value used to determine to enable (true) or
     *                  disable (false).
     */
    public void enablePanel(boolean b) {
        /*
         * If the panel is being disabled, reset the checkboxes and default the
         * combobox to "OFF" (index = 0).
         */
        if(!b) {
            itsMaskSelectionPanel.resetCheckBoxes();
            cmbRCUMode.setSelectedIndex(0); 
        }
        
        btnClear.setEnabled(b);
        btnReset.setEnabled(b);
        btnSync.setEnabled(b);
        itsMaskSelectionPanel.enablePanel(b);
        cmbRCUMode.setEnabled(b);
        btnSetFilter.setEnabled(b);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        RSPButtonsPanel = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnSync = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        RCUModePanel = new javax.swing.JPanel();
        itsMaskSelectionPanel = new nl.astron.lofar.java.sas.otb.rsp.MaskSelectionPanel();
        cmbRCUMode = new javax.swing.JComboBox();
        lblRCUMode = new javax.swing.JLabel();
        btnSetFilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        RSPButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Board Settings"));
        btnClear.setText("Clear board");
        btnClear.setToolTipText("Sends the \"Clear\" signal to the board.");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnReset.setText("Reset board");
        btnReset.setToolTipText("Sends the \"Reset\" signal to the board.");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSync.setText("Sync board");
        btnSync.setToolTipText("Sends the \"Sync\" signal to the board.");
        btnSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel2.setText("Press a button to send a corresponding signal to the selected board.");

        org.jdesktop.layout.GroupLayout RSPButtonsPanelLayout = new org.jdesktop.layout.GroupLayout(RSPButtonsPanel);
        RSPButtonsPanel.setLayout(RSPButtonsPanelLayout);
        RSPButtonsPanelLayout.setHorizontalGroup(
            RSPButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RSPButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addContainerGap(48, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, RSPButtonsPanelLayout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .add(btnClear)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnReset)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSync)
                .addContainerGap())
        );
        RSPButtonsPanelLayout.setVerticalGroup(
            RSPButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RSPButtonsPanelLayout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(RSPButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSync)
                    .add(btnReset)
                    .add(btnClear))
                .addContainerGap())
        );

        RCUModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RCU Mode"));

        cmbRCUMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OFF", "LBL 10MHz HPF 0x00017900", "LBL 30MHz HPF 0x00057900", "LBH 10MHz HPF 0x00037A00", "LBH 30MHz HPF 0x00077A00", "HB 110-190MHz 0x0007A400", "HB 170-230MHz 0x00079400", "HB 210-270MHz 0x00078400" }));

        lblRCUMode.setText("Filter");

        btnSetFilter.setText("Set filter");
        btnSetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFilterActionPerformed(evt);
            }
        });

        jLabel1.setText("RCU's");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setText("Different filters can be applied to the RCU's.");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setText("Select the RCU's of the selected board and the filter to apply.");

        org.jdesktop.layout.GroupLayout RCUModePanelLayout = new org.jdesktop.layout.GroupLayout(RCUModePanel);
        RCUModePanel.setLayout(RCUModePanelLayout);
        RCUModePanelLayout.setHorizontalGroup(
            RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RCUModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jLabel4)
                    .add(RCUModePanelLayout.createSequentialGroup()
                        .add(RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(lblRCUMode))
                        .add(24, 24, 24)
                        .add(RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(cmbRCUMode, 0, 0, Short.MAX_VALUE)
                            .add(itsMaskSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(92, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, RCUModePanelLayout.createSequentialGroup()
                .addContainerGap(358, Short.MAX_VALUE)
                .add(btnSetFilter)
                .addContainerGap())
        );
        RCUModePanelLayout.setVerticalGroup(
            RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, RCUModePanelLayout.createSequentialGroup()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .add(RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(RCUModePanelLayout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(jLabel1))
                    .add(RCUModePanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(itsMaskSelectionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(RCUModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lblRCUMode)
                    .add(cmbRCUMode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSetFilter)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RCUModePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(RSPButtonsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(RSPButtonsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RCUModePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the RCUMode filter to the selected filter in the combobox
     */
    private void btnSetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFilterActionPerformed
        // Check if we're connected to a board. If not this function is worthless.
        if (!itsMainPanel.getBoard().isConnected()) {
            JOptionPane.showMessageDialog(this, "You have to be connected to a board to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        // A board should be selected.
        if (itsMainPanel.getSelectedBoardIndex() == -1) {
            JOptionPane.showMessageDialog(this, "You have to select a board first to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RCUMask mask = itsMaskSelectionPanel.getRCUMask();
        
        /*
         * When altering the RCUMode filter fails a error is displayed.
         */
        if (!itsMainPanel.getBoard().setFilter(mask, cmbRCUMode.getSelectedIndex())) {
            JOptionPane.showMessageDialog(this, "An error occured during altering the RCUMode filter.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSetFilterActionPerformed
        
    /**
     * Sends the sync signal to the board when it's connected and one is selected.
     */
    private void btnSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyncActionPerformed
        // Check if we're connected to a board. If not this function is worthless.
        if (!itsMainPanel.getBoard().isConnected()) {
            JOptionPane.showMessageDialog(this, "You have to be connected to a board to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        // A board should be selected.
        if (itsMainPanel.getSelectedBoardIndex() == -1) {
            JOptionPane.showMessageDialog(this, "You have to select a board first to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RSPMask mask = new RSPMask();
        mask.setBit(itsMainPanel.getSelectedBoardIndex());
        
        /*
         * When sending the sync fails a error is displayed.
         */
        if (!itsMainPanel.getBoard().sendSync(mask)) {
            JOptionPane.showMessageDialog(this, "An error occured during sending the sync signal.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSyncActionPerformed

    /**
     * Sends the reset signal to the board when it's connected and one is selected.
     */
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // Check if we're connected to a board. If not this function is worthless.
        if (!itsMainPanel.getBoard().isConnected()) {
            JOptionPane.showMessageDialog(this, "You have to be connected to a board to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // A board should be selected.
        if (itsMainPanel.getSelectedBoardIndex() == -1) {
            JOptionPane.showMessageDialog(this, "You have to select a board first to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RSPMask mask = new RSPMask();
        mask.setBit(itsMainPanel.getSelectedBoardIndex());
        
        /*
         * When sending the reset fails a error is displayed.
         */
        if (!itsMainPanel.getBoard().sendReset(mask)) {
            JOptionPane.showMessageDialog(this, "An error occured during sending the reset signal.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * Sends the clear signal to the board when it's connected and one is selected.
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Check if we're connected to a board. If not this function is worthless.
        if (!itsMainPanel.getBoard().isConnected()) {
            JOptionPane.showMessageDialog(this, "You have to be connected to a board to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // A board should be selected.
        if (itsMainPanel.getSelectedBoardIndex() == -1) {
            JOptionPane.showMessageDialog(this, "You have to select a board first to use this function.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RSPMask mask = new RSPMask();
        mask.setBit(itsMainPanel.getSelectedBoardIndex());
        
        /*
         * When sending the clear fails a error is displayed.
         */
        if (!itsMainPanel.getBoard().sendClear(mask)) {
            JOptionPane.showMessageDialog(this, "An error occured during sending the clear signal.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnClearActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RCUModePanel;
    private javax.swing.JPanel RSPButtonsPanel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSetFilter;
    private javax.swing.JButton btnSync;
    private javax.swing.JComboBox cmbRCUMode;
    private nl.astron.lofar.java.sas.otb.rsp.MaskSelectionPanel itsMaskSelectionPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblRCUMode;
    // End of variables declaration//GEN-END:variables

}
