This file is a minimal instruction how to use the comp files.

Goal of the comp files
----------------------
In comp-files a developer can specify the parameters his/her application wants to exchange with the
`outside world`. A distinction can be made between startup-parameters and runtime metadata parameters.
Parameters can be bundled in `nodes` like datamembers of classes.

To define a set of parameters first define a `node`, followed by the `pararameters`. To include/use the
parameters of another node add a `uses` line to the definition of your node. The included node must be
defined in another comp-file OR in the same comp-file ABOVE the node you are defining.

The keywords 'node', 'par' and 'uses' are required at the beginning of a line to define resp. a node,
a parameter or a dependency.

As example the next section defines a node `myNode` that has 1 parameter `myParameter` and that includes
another node `myChildNode`.

-----

# NODE DEFINITION
#
# name          name of the node, SHOULD BE UNIQUE! *) see remark below this section
# version       version of this node specification
# quality       stable | test | development
# constraint    python script to check multiparameter constrains (NOT YET USED)
#               may return OK, NotOK, Unknown
# description   What this module does.
#
#########################################################################################################
# -- myNode --
#     name           vers   qual          constraint        description
#--------------------------------------------------------------------------------------------------------
node  myNode         1.0.0  development  'node constraint'  "This is what myNode does"

# PARAMETER DEFINITION
#
# name				name of the parameter
# direction			I: input only; O: changes will be logged during runtime; IO: both
# type				parametertype: should exist in param_type table of OTDB (= ParamTypeConv)
# unit				name of unit of parameter (should exist in unit table (= UnitConv)
# pruninglevel		when parameter values are thrown away from the database. (NOT YET USED)
# validationMoment	moment the parameter values is validated (NOT YET USED)
# value				value(range) of the parameter.
# constraint		script to run to check its value (NOT YET USED)
# description		what the parameter manages.
#
#--------------------------------------------------------------------------------------------------------
#    name               dir.    type   unit   prun. vm  value        constraints       description
#--------------------------------------------------------------------------------------------------------
par  myParameter        IO      text   -       10   0   "content"    "par constraint"   "What this parameter manages"

# DEPENDENCY DEFINITION
#
# name          name of the node
# version       version of this node specification
# quality       stable | test | development
# instances     Number of instances to create when creating a VIC tree.
# description   What this module does.
#
#--------------------------------------------------------------------------------------------------------
#      name          vers   qual          instances   description
#--------------------------------------------------------------------------------------------------------
uses  myChildNode    1.0.0  development   1           "This is what myNode does"

-----

Allowed values for type of parameter:
'bool'	boolean
'int'	integer
'uint'	unsigned integer
'long'	long integer
'ulng'	unsigned long integer
'flt'	float
'dbl'	double
'icpx'	integer complex
'lcpx'	long integer complex
'fcpx'	float complex
'dcpx'	double complex
'text'	text / string
'bin'	binary
'time'	timestring
'date'	date (+time) string

REMARK 1: All the types can be preceeded by a 'v' when the contents is a vector of that type.

REMARK 2: All the types can be preceeded by a 'p' when the contents is limited to a popup menu. 
In that case the value field has the syntax:
<value1>[[|<value>]...][;default_value]
e.g.:  "Red|Orange|Yellow|Green|Blue|Indigo|Violet;Blue"

NOTE ABOUT USING NON_UNIQUE NODE NAMES
======================================
In principal a node name must be uniq. Since this turned out to be a problem in some rare cases a workaround
is possible: the name of a node may be preceded with '<namespace>:'. The component is than loaded in SAS as 
<namespace>:<nodename> but when a template is created the '<namespace>:' part is not copied in the name of 
the node. E.g.
node BBS:Beam ...
par pb1
par pb2

node BBS ...
par p1
uses BBS:Beam ...

will result in a parameterset from SAS like:
BBS.p1
BBS.Beam.pb1
BBS.Beam.pb2

BE VERY CAREFUL IN USING NON_UNIQUE NAMES!
==========================================
The SQL code of SAS is capable of handling those non-unique names, but when the end-user software uses functions
of the ParameterSet class like locateModule('Beam') the result of this function is not guaranteed anymore!
Search functions in the TreeMaintenance class of SAS also can return more matching records than the user expects!

