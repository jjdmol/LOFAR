#!/usr/bin/env python

import pyrap.tables as pt
import lofar.parmdb as pdb

""" Add a subtable of an MS to the image """
def addSubTable (image, msName, subName, removeColumns=[]):
    # Make a selection of all rows/columns of the MS subtable
    sel = pt.taql ("select * from '" + msName + "/" + subName + "'")
    # Remove the required columns.
    if len(removeColumns) > 0:
        sel.removecols (removeColumns)
    # Strip LOFAR_ from column names
    for col in sel.colnames():
        if len(col) > 6  and  col[:6] == "LOFAR_":
            sel.renamecol (col, col[6:])
    # Copy the subtable to the image and add it as a subtable.
    # Always prefix subtable name with LOFAR_.
    subNameOut = subName;
    if len(subNameOut) < 6  or  subNameOut[:6] != "LOFAR_":
        subNameOut = "LOFAR_" + subNameOut
    subtab = sel.copy (image.name() + "/" + subNameOut, deep=True)
    image.putkeyword (subNameOut, subtab)
    print "Added subtable", subNameOut, "containing", subtab.nrows(), "rows"
    subtab.close()
    sel.close()

""" Create the empty LOFAR_QUALITY subtable """
def addQualityTable (image):
    # Create the table using TaQL.
    tab = pt.taql ("create table '" + image.name() + "/LOFAR_QUALITY' " + 
                   "QUALITY_MEASURE string, VALUE string, FLAG_ROW bool")
    image.putkeyword ("LOFAR_QUALITY", tab)
    tab.close()
    print "Added subtable LOFAR_QUALITY containing 0 rows"

""" Create the LOFAR_ORIGIN subtable and fill from all MSs """
def addOriginTable (image, msNames):
    # Concatenate the OBSERVATION subtables of all MSs.
    obsNames = [name + "/OBSERVATION" for name in msNames]
    obstab = pt.table(obsNames, ack=False)
    # Select and rename the required columns.
    # Some columns are not in the LOFAR_OBSERVATION table.
    # Create them by selecting a similarly typed column and fill them later.
    selstr  =  "LOFAR_OBSERVATION_ID as OBSERVATION_ID"
    selstr += ",LOFAR_SUB_ARRAY_POINTING as SUB_ARRAY_POINTING"
    selstr += ",LOFAR_SUB_ARRAY_POINTING as SUBBAND"
    selstr += ",LOFAR_SUB_ARRAY_POINTING as NUM_CHAN"
    selstr += ",LOFAR_OBSERVATION_FREQUENCY_MIN as CHANNEL_WIDTH"
    selstr += ",LOFAR_OBSERVATION_FREQUENCY_MIN as EXPOSURE"
    selstr += ",LOFAR_OBSERVATION_FREQUENCY_MIN as FREQUENCY_MIN"
    selstr += ",LOFAR_OBSERVATION_FREQUENCY_MAX as FREQUENCY_MAX"
    selstr += ",LOFAR_OBSERVATION_FREQUENCY_CENTER as FREQUENCY_CENTER"
    selstr += ",LOFAR_OBSERVATION_START as START"
    selstr += ",LOFAR_OBSERVATION_END as END"
    selstr += ",FLAG_ROW"
    sel = obstab.select(selstr)
    # Copy the subtable to the image and add it as a subtable.
    subtab = sel.copy (image.name() + "/" + "LOFAR_ORIGIN", deep=True)
    subtab = pt.table (image.name() + "/" + "LOFAR_ORIGIN", readonly=False,
                       ack=False)
    obstab.close()
    image.putkeyword ("LOFAR_ORIGIN", subtab)
    # Set the correct units of columns to update.
    subtab.putcolkeyword ("CHANNEL_WIDTH", "QuantumUnits", ["Hz"])
    subtab.putcolkeyword ("EXPOSURE", "QuantumUnits", ["s"])
    # Update the columns not in OBSERVATION table.
    # Get EXPOSURE from first row in main tables.
    # Get NUM_CHAN from SPECTRAL_WINDOW subtables.
    # Calculate CHANNEL_WIDTH (convert from MHz to Hz).
    # Get SUBBAND from MS name.
    for i in range(len(msNames)):
        t = pt.table(msNames[i], ack=False)
        subtab.putcell ("EXPOSURE", i, t.getcell("EXPOSURE", 0))
        t1 = pt.table(t.getkeyword("SPECTRAL_WINDOW"), ack=False)
        numchan = t1.getcell("NUM_CHAN", 0)
        subtab.putcell ("NUM_CHAN", i, numchan)
        w = subtab.getcell("FREQUENCY_MAX",i) - subtab.getcell("FREQUENCY_MIN",i)
        subtab.putcell ("CHANNEL_WIDTH", i, w * 1e6 / numchan)
        t1.close()
        t.close()
        subband = 0
        inx = msNames[i].find ("SB")
        if inx>= 0:
            try:
                subband = int(msNames[i][inx+2:inx+5])
            except:
                pass
        subtab.putcell ("SUBBAND", i, subband)
    # Ready
    subtab.close()
    sel.close()
    print "Added subtable LOFAR_ORIGIN containing", len(msNames), "rows"

""" Create the LOFAR_SOURCE subtable and fill from the SourceDB """
def addSourceTable (image, sourcedbName, times):
    # Create the table using TaQL.
    tab = pt.taql ("create table '" + image.name() + "/LOFAR_SOURCE' " + 
                   "SOURCE_ID int, \TIME double, INTERVAL double, " +
                   "NUM_LINES int, NAME string, " +
                   "DIRECTION double shape=[2], " +
                   "PROPER_MOTION double shape=[2], " +
                   "FLUX double shape=[4], " +
                   "SPINX double, " +
                   "SHAPE double shape=[3]")
    tab.putcolkeyword ("TIME", "QuantumUnits", ["s"])
    tab.putcolkeyword ("INTERVAL", "QuantumUnits", ["s"])
    tab.putcolkeyword ("DIRECTION", "QuantumUnits", ["rad"])
    tab.putcolkeyword ("PROPER_MOTION", "QuantumUnits", ["rad/s"])
    tab.putcolkeyword ("FLUX", "QuantumUnits", ["Jy"])
    tab.putcolkeyword ("SHAPE", "QuantumUnits", ["rad", "rad", "rad"])
    tab.putcolkeyword ("TIME", "MEASINFO", {"Ref":"UTC", "type":"epoch"})
    tab.putcolkeyword ("DIRECTION", "MEASINFO", {"Ref":"J2000", "type":"direction"})
    image.putkeyword ("LOFAR_SOURCE", tab)
    # Get all parameters from the source parmdb.
    midtime = (times[0] + times[1]) / 2
    inttime = times[1] - times[0]
    sourcedb = pdb.parmdb(sourcedbName)
    # Get all source names by getting the Ra parms from DEFAULTVALUES
    names = [name[3:] for name in sourcedb.getDefNames ("Ra:*")]
    values = sourcedb.getDefValues()
    sourcedb = 0   # close
    row = 0
    tab.addrows (len(names))
    # Add the info of all sources.
    # The field names below are as used in SourceDB.
    fldnames = ["Ra", "Dec", "I", "Q", "U", "V", "SpectralIndex:0",
                "Orientation", "MajorAxis", "MinorAxis"]
    vals = [0. for fld in fldnames]
    for name in names:
        for i in range(len(fldnames)):
            key = fldnames[i] + ":" + name
            if values.has_key (key):
                vals[i] = values[key][0][0]
            else:
                vals[i] = 0.
        tab.putcell ("SOURCE_ID", row, row)
        tab.putcell ("TIME", row, midtime);
        tab.putcell ("INTERVAL", row, inttime);
        tab.putcell ("NUM_LINES", row, 0);
        tab.putcell ("NAME", row, name);
        tab.putcell ("DIRECTION", row, vals[:2]);
        tab.putcell ("PROPER_MOTION", row, (0.,0.));
        tab.putcell ("FLUX", row, vals[2:6]);
        tab.putcell ("SPINX", row, vals[6]);
        tab.putcell ("SHAPE", row, vals[7:10]);
        print name, vals
        row += 1
    # Ready.
    tab.close()
    print "Added subtable LOFAR_SOURCE containing", row, "rows"

""" Update times and frequencies in the LOFAR_OBSERVATION subtable """
def updateObsTable (image):
    obstab = pt.table (image.name() + "/LOFAR_OBSERVATION", readonly=False,
                       ack=False)
    oritab = pt.table (image.name() + "/LOFAR_ORIGIN", ack=False)
    minfreq = pt.taql ("calc min([select FREQUENCY_MIN from '" +
                       oritab.name() + "'])")
    maxfreq = pt.taql ("calc max([select FREQUENCY_MAX from '" +
                       oritab.name() + "'])")
    mintime = pt.taql ("calc min([select START from '" +
                       oritab.name() + "'])")
    maxtime = pt.taql ("calc max([select END from '" +
                       oritab.name() + "'])")
    obstab.putcell ("OBSERVATION_FREQUENCY_MIN", 0, minfreq[0]);
    obstab.putcell ("OBSERVATION_FREQUENCY_MAX", 0, maxfreq[0]);
    obstab.putcell ("OBSERVATION_FREQUENCY_CENTER", 0, (maxfreq[0]-minfreq[0])/2);
    obstab.putcell ("OBSERVATION_START", 0, mintime[0]);
    obstab.putcell ("OBSERVATION_END", 0, maxtime[0]);
    obstab.putcell ("TIME_RANGE", 0, (mintime[0], maxtime[0]));
    obstab.putcell ("FILETYPE", 0, "img")
    pt.taql ("update '" + obstab.name() + "' set FILEDATE = mjd(date()), " +
             "RELEASE_DATE = mjd(date()+365)")
    obstab.close()
    oritab.close()
    print "Updated subtable LOFAR_OBSERVATION"
    return (mintime[0], maxtime[0])

""" Add all imaging info """
def addImagingInfo (imageName, msNames, sourcedbName):
    image = pt.table (imageName, readonly=False, ack=False)
    # Add all subtables while removing obsolete columns
    addSubTable (image, msNames[0], "POINTING")
    addSubTable (image, msNames[0], "FIELD")
    addSubTable (image, msNames[0], "ANTENNA")
    addSubTable (image, msNames[0], "LOFAR_STATION")
    addSubTable (image, msNames[0], "HISTORY")
    addSubTable (image, msNames[0], "OBSERVATION",
                 ["LOG", "SCHEDULE_TYPE", "SCHEDULE"])
    # Create the (empty) LOFAR_QUALITY subtable.
    addQualityTable (image)
    # Create the LOFAR_ORIGIN subtable from all MSs.
    addOriginTable (image, msNames)
    # Update times/frequencies in the LOFAR_OBSERVATION table.
    times = updateObsTable (image)
    # Add the LOFAR_SOURCE table.
    addSourceTable (image, sourcedbName, times)
    # Flush and close the image.
    image.close()


if __name__ == "__main__":
    import sys
    if len(sys.argv) < 4:
        print "Insufficient arguments; run as:"
        print "   addImagingInfo image sourcedb ms1 ms2 ..."
        print "      image        name of the image"
        print "      sourcedb     name of SourceDB containing the sources found"
        print "      ms1 ms2 ...  names of MSs image is made of"
        print "                   the names can be individual arguments or a"
        print "                   comma-separated list of names (or a mix)"
        print "   E.g.,"
        print "      addImagingInfo myimg mysdb ms1,ms2 ms3 ms4,ms5"
        sys.exit(1)
    msNames = []
    for arg in sys.argv[3:]:
        msNames.extend (arg.split(","))
    addImagingInfo (sys.argv[1], msNames, sys.argv[2]);
