// -*- mode: c++ -*-//
// Protocol definition for MAC Information Exchange

autogen definitions protocol;

description = "Protocol for MAC Information Exchange";
prefix = "SHM"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+5)"; 
include = '<Common/LofarTypes.h>';

include = '<XCStatistics.h>';
include = '<RspStatus.h>';

// The "SHM" (MAC Information Server) protocol describes all possible
// interactions between the MAC (Monitoring-And-Control) and SHM
// (System Health Management) subsystems of LOFAR.
//
// The position of SHM is slightly special, in the sense that it is not
// implemented as a GCF application. Changes to the protocol definition
// given below will only influence the MAC side of things; on the SHM
// side, corresponding changes will need to be made.
//
// In MAC/SHM communication, MAC will always act as the server and SHM
// will always act as the client. Persistent TCP connections between
// different MAC nodes (LCUs and CCUs, see below) and the single SHM
// "master" node shall be used. SHM protocol servers on the MAC side
// shall be capable of accepting and handling multiple connections.
//
// The "MIC" protocol really consists of 7 protocols rolled into one.
//
// The first ("GENERIC") sub-protocol is used for exchanging version
// and identification information, and for "keep-alive" messages.
//
// These six other "sub-protocols" correspond to six streams of
// information that are needed between MAC and SHM:
//
// (0) GENERIC             - SHM <-> MAC/CCU or MAC/LCU
// (1) DIAGNOSIS           - SHM <-> MAC/CCU or MAC/LCU
// (2) RECONFIGURATION     - SHM <-> MAC/CCU or MAC/LCU
// (3) LOFAR STRUCTURE     - SHM <-> MAC/CCU or MAC/LCU ; includes asynchronous events (MAC->SHM)
// (4) PVSS SUBSCRIPTIONS  - SHM <-> MAC/CCU or MAC/LCU ; includes asynchronous events (MAC->SHM)
// (5) SUBBAND STATISTICS  - SHM <->            MAC/LCU
// (6) ANTENNA CORRELATION - SHM <->            MAC/LCU
//
// Most information exchanges follow a strictly synchronous Request/Response model;
// SHM will always act as the "Requester" and MAC (CCU or LCU) will always
// be the "Responder".
//
// There are three exceptions to the Request/Response mechanism:
//
//   - Both MAC and SHM can initiate Requests for the messages defined in the
//     GENERIC sub-protocol.
//   - MAC-CCU (LOFAR STRUCTURE sub-protocol) can send an asynchronous notification
//     of a change in the structure of LOFAR. This shall force the subscribed SHM
//     client to re-initialize its idea of the "structure" of LOFAR.
//   - MAC-CCU (PVSS SUBSCRIPTIONS sub-protocol) will send asynchronous notifications
//     of value-changes in subscribed datapoints.

// FIELD DEFINITIONS
// -----------------
//
// The layout and meaning of the fields in the various events defined here is standardized
// as much as possible. The following fields are defined:
//
// "seqnr": a positive, monotonously increasing, 64-bit number that is inserted by the sender.
//          Each *SESSION* should have its own counter. The first packet sent by either side
//          should have seqnr '1', the second packet has '2', and so on.
//
//          Since the server and client do not necessarily send an equal number of packets,
//          the "seqnr" of server and client will diverge.
//
//  NOTE: no provisions are made in the protocol to end a session. Conceptually, the session
//        is expected to remain "always open". Both sender and receiver should properly handle
//        closure of the TCP/IP session; they may also close the session at any given time.
//
// "replynr": a 64-bit number that is copied from the "seqnr" field of an incoming packet to
//            which we are replying. In case we are the initiators (i.e., the packet being
//            sent is NOT a response to an incoming packet), this value must be set to zero.
//
// "timestamp_sec": a 64-bit signed integer denoting the number of seconds elapsed since
//                  1-1-1970, 0:00AM, UTC.
// "timestamp_nsec": a 32-bit unsigned integer denoting the number of NANOSECONDS elapsed
//                   since the beginning of the second specified by "timestamp_sec".
//
//        These two "timestamp" fields are filled in as late as possible by the sending
//        party (either the server or the client).
//
// "payload_timestamp_sec"   These two fields are similar to the pair defined above.
// "payload_timestamp_nsec"  The difference is that these fields (if available in a given packet type)
//                           denote a time-stamp that applies to the data contained in the packet,
//                           instead of the time of packet-generation.
//
// "response"   This field is used to give information as to the kind of response that is being given.
//              The format generally looks like "ACK", "BUSY", "NAK [(reason)]"
//              i.e., the parenthesized 'reason' is optional.
//
//              "BUSY" is used in case the server is too busy (e.g., handling a different request)
//                     to respond to the request in question.
//
//              "NAK" is used to denote a polite denial of a request, e.g. because of
//                    the server-side policy that has been set.
//
// NOTE: in the following, direction IN, OUT are relative to the server (i.e., MAC).
//
//////////////////////////////////////// (0) GENERIC sub-protocol

// The GENERIC protocol offers some very basic services:
//  PING, KEEP-ALIVE, and PEER IDENTIFICATION.

event = {
    signal = "GENERIC_PINGPONG";
    dir = INOUT; // SHM <-> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Zero if we are initiating a ping/pong session; otherwise,
                          //   copy from the seqnr of the packet we're ponging back to.
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "ttl"; // Number of ping-pongs to go.
                      // If zero, don't respond. Decrease by 1 for each pong.
                      // We can do a "KEEP_ALIVE" by sending a PING packet that
                      //   has its TTL set to zero.
        type = "uint32";
    };
};

event = {
    signal = "GENERIC_IDENTIFY_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };    
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
};

event = {
    signal = "GENERIC_IDENTIFY_RESPONSE";
    dir = OUT; // SHM <- MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };    
    param = {
        name = "replynr";
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY"
    };
    // The node_id shall be a DNS-resolvable name in the "lofar" domain, e.g.
    //   lcu.rs23.lofar
    //   shm.lofar
    param = {
        name = "node_id";
        type = "string";
    };
    // The sw_version shall be given in the following format:
    // sprintf(swversion, "%d.%d.%d (%s, %s)\n", version_major, version_medior, version_minor,  __DATE__, __TIME__);
    param = {
        name = "sw_version";
        type = "string";
    };    
};

//////////////////////////////////////// (1) DIAGNOSIS sub-protocol

// The DIAGNOSIS sub-protocol is used to push conclusions as drawn by SHM
// back to MAC. MAC is then free to do whatever it wishes to do with the
// diagnosis. MAC must give a RESPONSE that shows how the diagnosis is handled.

event = {
    signal = "DIAGNOSIS_NOTIFICATION";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };    
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };

    // timestamp of diagnosis -- perhaps diagnoses will be cached in database or some such
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "new_state";
        type = "int64";
    };

    // Confidence of SHM in its own diagnosis.
    // range: 0 (absolutely unsure) to 10000 (absolutely sure).
    //
    // These valued shall be calibrated on the SHM side as follows:
    // 0            : SHM is completely uncertain! Only allowed MAC action is logging.
    // 1 .. 5000    : SHM is very uncertain! SHM suggests this will be logged and ignored.
    // 5000 .. 7500 : SHM has reasonable information to suspect its diagnosis is meaningful.
    // 7501 .. 9000 : SHM is quite sure about the diagnosis. Suggested action:
    //                mark component as SUSPECT (in case it is FAULTY); notify operator.
    // 9001 .. 9900 : SHM is very sure about the diagnosis. Suggested action:
    //                mark component as DEFECTIVE (in case it is FAULTY); at the very least, notify the operator.
    // 9901 .. 9999 : SHM can determine with next-to-absolute certainty that the
    //                component is, indeed, broken (if FAULTY) or healthy (if HEALTHY).
    // 10000        : Absolute certainty. This will not happen; we will not
    //                have a perfect SHM model.
    param = {
        name = "confidence";
        type = "uint16";
    };

    // PVSS property set name of the component being diagnosed.
    param = {
        name = "component";  // e.g. "PIC_Rack0_SubRack0_Board0_AP0_RCU0_HFA"
        type = "string";
    };

    // The diagnosis_id can be used to get an explanation URI,
    // e.g. "diag1003" --> "http://shm.lofar/diagnosis-info?diagnosis_id=diag1003".
    // The way in which the diagnosis_id can be translated to a URI
    // will be documented by SHM.
    param = {
         name = "diagnosis_id";
         type = "string";
    };
};

event = {
    signal = "DIAGNOSIS_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the associated DIAGNOSIS_NOTIFICATION
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
};

//////////////////////////////////////// (2) RECONFIGURATION sub-protocol

// The RECONFIGURATION sub-protocol is used to request reconfigurations that
// SHM would like to see in order to arrive at a more precise diagnosis /
// Root-Cause-Of-Failure determination.

event = {
    signal = "RECONFIGURATION_REQUEST";  
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    // A reconfiguration request consists of a list of "name=value" entries,
    //   separated by a pipe character ('|'), e.g. "dp.x=value|dp2.y=value"
    param = {
        name = "reconfiguration_request";
        type = "string";
    };
};

event = {
    signal = "RECONFIGURATION_RESPONSE";  
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the associated RECONFIGURATION_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
};

//////////////////////////////////////// (3) LOFAR STRUCTURE sub-protocol

// The SHM client can ask for the structure of the physical LOFAR component tree
// that lies below some physical node.
//
// The MAC server should answer with a complete dump of all relevant information
// to be able to reconstruct, at the client side, a complete picture of all structural
// elements below the given root component.

// Whenever structural changes are made in MAC, it may broadcast that fact to the
// connected SHM clients, to get them to re-read the structual information they need for diagnostic
// purposes.

event = {
    signal = "LOFAR_STRUCTURE_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "mac_node_id"; // root component ID for which the structure is requested.
        type = "string";
    };
};

event = {
    signal = "LOFAR_STRUCTURE_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the associated LOFAR_STRUCTURE_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
    // Time at which the structure returned is valid.
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    // The "component-structure" response yields a list of component specifications, each
    // seperated by a pipe character ('|').
    // Each component specification consists of three parts, separated by a comma character (','):
    //    - dp-name
    //    - dp-type
    //    - version (if not available, substitute a '-' here).
    // Example of a single component:
    //    "IC_Rack0_SubRack0_AP0_RCU0,RCU,-"
    // 
    param = {
        name = "component_structure";
        type = "string"; // If (response != "ACK"), this field shall contain the empty string.
    };
};

event = {
    signal = "LOFAR_STRUCTURE_CHANGED_ASYNC";
    dir = OUT; // MAC -> SHM (asynchronous)
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "mac_node_id"; // root component ID for which the structure has changed.
        type = "string"; // standard PVSS component ID
    };
};

//////////////////////////////////////// (4) PVSS SUBSCRIPTIONS sub-protocol (SHM <-> MAC)

// Clients can subscribe to PVSS datapoints, in order to be kept abreast of their
// value.
//
// In case a subscription request is honored, the MAC-side server is expected to emit
// a PVSS_DP_SUBSCRIPTION_VALUE_CHANGED_ASYNC packet directly after the RESPONSE packet.
//
// If the request was of type "SINGLE_SHOT", this concludes the exchange.
//
// Otherwise, the server will send PVSS_DP_SUBSCRIPTION_VALUE_CHANGED_ASYNC packets on each
// change of the datapoint until the end of time.

event = {
    signal = "PVSS_DP_SUBSCRIPTION_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "dpname";
        type = "string"; // PVSS identifier pointing to a simple-type PVSS field.
    };
    param = {
        name = "request";
        type = "string"; // "SUBSCRIBE", "SINGLE-SHOT", or "UNSUBSCRIBE"
    };
};

event = {
    signal = "PVSS_DP_SUBSCRIPTION_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the associated PVSS_DP_SUBSCRIPTION_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
    param = {
        name = "dptype";
        type = "string"; // String representation(?) of DP-type, e.g. "bool", "int2", "unit4", "float8", "enum"
                         // If (response != "ACK"), this field shall contain the empty string.
    };
};

event = {
    signal = "PVSS_DP_SUBSCRIPTION_VALUE_CHANGED_ASYNC";
    dir = OUT; // MAC -> SHM (asynchronous)
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the associated PVSS_DP_SUBSCRIPTION_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "value"; // string representation of DP value
        type = "string";
    };
};

//////////////////////////////////////// (5) SUBBAND STATISTICS sub-protocol (SHM <-> MAC)


// Request/Response packets for inquiring remote station subband statistics.
//
// Note that we only support requests for /all/ subband statistics of an entire station!

/// TBD: control bit format as in RSP driver
event = {
    signal = "SUBBAND_STATISTICS_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
};

event = {
    signal = "SUBBAND_STATISTICS_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // Equal to the seqnr of the SUBBAND_STATISTICS_REQUEST.
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
    // Exact timestamp of the subband statistics data that follows.
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
		
    // The subband data follows. It is assumed that a Station shall contain no
    // more than 128 RCUs * 2 polarisations (hard-coded limit).

    // 0=valid; 1, 2, 3.... = invalid.
    // e.g. if an RSP board cannot be reached, this may be != 0.
    param = {
        name = "invalid";
        type = "uint32[]";
    };
    // see LOFAR/MAC/APL/PIC/RSP_Protocol/include/APL/RSP_Protocol/RCUSettings.h
    param = {
      name = "rcu_settings";
        type = "uint32[]";
    };
    // a big matrix of all subband data for a certain station...
    param = {
        name = "data"; // subband statistics data
        type = "double[]";
    };
};

//////////////////////////////////////// (6) ANTENNA CORRELATION sub-protocol (SHM <-> MAC)

// Request/Response packets for inquiring remote station antenna correlation data.
// Precise formats are TBD.

event = {
    signal = "ANTENNA_CORRELATION_MATRIX_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    //MAXMOD
    param = {
      name = "subband_selector";
      type = "uint16"; // *** FORMAT TO BE DEFINED ***
    };
};

event = {
    signal = "ANTENNA_CORRELATION_MATRIX_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr";  // Equal to the seqnr of the ANTENNA_CORRELATION_MATRIX_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    //MAXMOD
    //    param = {
    //    name = "metadata"; // AS MUCH INFO AS POSSIBLE (e.g., BAND, AMPLIFIER STATE, etc.)
    //    type = "string"; // *** FORMAT To BE DEFINED ***
    //};
    // 0=valid; 1, 2, 3.... = invalid.
    // e.g. if an RSP board cannot be reached, this may be != 0.
    param = {
        name = "invalid";
        type = "uint32[]";
    };
    // see LOFAR/MAC/APL/PIC/RSP_Protocol/include/APL/RSP_Protocol/RCUSettings.h
    param = {
      name = "rcu_settings";
        type = "uint32[]";
    };
    param = {
      name = "subband_selection";
        type = "uint16";
    };
    param = {
        name = "geopos"; // station geographic location
	type = "double[]"; 
    };
    param = {
        name = "antcoords"; // antenna coordinates (Xpol xyz, Ypol xyz)
	type = "double[]"; 
    };
    param = {
        // I cannot figure out how arrays automatically get arrayNOE class members
        // I cannot get the acmdata blitz array to behave similarly.
        // So I will hard-code it here.
        name = "acmdataNOE"; // antenna correlation matrix
	type = "uint32"; //on SHM recv I expect to peel 4 bytes off as size
    };
    param = {
        name = "acmdata"; // antenna correlation matrix
        //type = "double[]"; // *** FORMAT TO BE DEFINED ***
	type = "XCStatistics"; 
	userdefined;
    };
};


event = {
    signal = "RSP_STATUS_REQUEST";
    dir = IN; // SHM -> MAC
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr"; // always zero
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
};

event = {
    signal = "RSP_STATUS_RESPONSE";
    dir = OUT; // MAC -> SHM
    param = {
        name = "seqnr";
        type = "uint64";
    };
    param = {
        name = "replynr";  // Equal to the seqnr of the ANTENNA_CORRELATION_MATRIX_REQUEST
        type = "uint64";
    };
    param = {
        name = "timestamp_sec";
        type = "int64";
    };
    param = {
        name = "timestamp_nsec";
        type = "uint32";
    };
    param = {
        name = "response";
        type = "string"; // "ACK", "BUSY", "NAK [(reason)]"
    };
    param = {
        name = "payload_timestamp_sec";
        type = "int64";
    };
    param = {
        name = "payload_timestamp_nsec";
        type = "uint32";
    };
    /*
    param = {
        // I cannot figure out how arrays automatically get arrayNOE class members
        // I cannot get the acmdata blitz array to behave similarly.
        // So I will hard-code it here.
        name = "acmdataNOE"; // antenna correlation matrix
	type = "uint32"; //on SHM recv I expect to peel 4 bytes off as size
    };
    */
    param = {
        name = "statusdata"; // struct of RSP board status values
	type = "RspStatus"; // See EPA_Protocol.h: struct BoardStatus
	userdefined;
    };
};
