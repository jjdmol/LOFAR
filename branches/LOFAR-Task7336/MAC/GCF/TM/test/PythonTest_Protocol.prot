//#  testprotocol.prot: Protocol definition to test the base functions
//#
//#  Copyright (C) 2006
//#  ASTRON (Netherlands Foundation for Research in Astronomy)
//#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
//#
//#  This program is free software; you can redistribute it and/or modify
//#  it under the terms of the GNU General Public License as published by
//#  the Free Software Foundation; either version 2 of the License, or
//#  (at your option) any later version.
//#
//#  This program is distributed in the hope that it will be useful,
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//#  GNU General Public License for more details.
//#
//#  You should have received a copy of the GNU General Public License
//#  along with this program; if not, write to the Free Software
//#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#
//#  $Id: testprotocol.prot 11023 2008-03-18 08:07:14Z overeem $

autogen definitions protocol;

description = "Protocol for testing the prtocol-programs";
prefix = "TEST_PTC"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+5)";

// specify extra include files

prelude = << PRELUDE_END

// The following messages are defined in the servicebroker protocol
//
// TEST_IN   (uint16 seqnr, string question);
// TEST_OUT  (uint16 seqnr, string answer);
//

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
	signal = INTEGERS;
	dir = IN;
	param = {
		name = "var_int16";
		type = "int16";
	};
	param = {
		name = "var_uint16";
		type = "uint16";
	};
	param = {
		name = "var_int32";
		type = "int32";
	};
	param = {
		name = "var_uint32";
		type = "uint32";
	};
	param = {
		name = "var_int64";
		type = "int64";
	};
	param = {
		name = "var_uint64";
		type = "uint64";
	};
	param = {
		name = "var_int16Arr";
		type = "int16[10]";
	};
	param = {
		name = "var_int32Arr";
		type = "int32[3]";
	};
};

event = {
	signal = FLOATS;
	dir = IN;
	param = {
		name = "var_float";
		type = "float";
	};
	param = {
		name = "var_floatArr";
		type = "float[2]";
	};
	param = {
		name = "var_double";
		type = "double";
	};
	param = {
		name = "var_doubleArr";
		type = "double[3]";
	};
};

event = {
	signal = STRINGS;
	dir = IN;
	param = {
		name = "var_string";
		type = "string";
	};
	param = {
		name = "var_charArr";
		type = "char[50]";
	};
	param = {
		name = "var_char";
		type = "char";
	};
};

event = {
	signal = BOOLS;
	dir = IN;
	param = {
		name = "var_bool";
		type = "bool";
	};
};

error = {
	id = NO;
	msg = "No errors";
};
error = {
	id = RANGE;
	msg = "Illegal range specified";
};
error = {
	id = WINDOWS;
	msg = "You are using Windows";
};

