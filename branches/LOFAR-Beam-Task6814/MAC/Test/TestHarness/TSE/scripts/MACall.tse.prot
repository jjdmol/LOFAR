//
//  MACall.tseprot: All mac Protocols for TSE
//
//  Copyright (C) 2005
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//  
//  You should have received a copy of the GNU Lesser General Public
//  License along with This program; if not, write to:
//             The Free Software Foundation, Inc.,
//             59 Temple Place - Suite 330,
//             Boston,  MA  02111-1307, USA.
//
//  $Id$
//

//    This file contains three sections:
//    [type]      : type definitions
//    [functions] : Messages sent to the Device under Test (DUT)
//    [events]    : Messages received from the DuT.
//
//    The format of each section is explained in brief in the
//    beginning of each section.
//========================================================================

[type]

//    A type has a number of parameters: the first parameter
//    defines the size in bytes. If there is a second and third
//    parameter, these define the lower and upper limit.
//
//    If there is a fourth parameter, it can be a string
//    with the following meanings:
//    TIME          : Parameters of this type reflect a certain
//                    time(span)
//    ENUM          : Parameters of this type have a value with
//                    an enumerated meaning.
//    BITFIELD      : Parameters of this type are bitmap para-
//                    meters.
//    ASCII         : Field contains non-terminated ASCII data.
//    ASCII_0       : Field contains zero-terminated ASCII data.
//                    Field is fixed-sized, but bytes following
//                    the 0-byte are undefined and not checked.
//    ASCII_n       : Field contains <LF> /n-terminated ASCII data.
//                    Field is fixed-sized, but bytes following
//                    the /n-byte are not checked.
//    UNICODE       : Field contains none-terminated UNICODE
//                    data.
//    UNICODE_0     : Field contains zero-terminated UNICODE
//                    data.
//    UNICODE_n     : Field contains <LF> /n-terminated UNICODE
//                    data.
//
//    The meaning of the remaining parameters depends of this
//    string:
//    TIME          : Has one additional parameter, which is
//                    a float. This float indicates the time in
//                    seconds intended of one unit.
//    ENUM          : A list of additional parameters exists.
//                    This list is intended to be self-explaining.
//    BITFIELD      : A list of additional parameters exists.
//                    If the bitfield is denoted as
//                    (0xXXXX,0xXXXX), the first bitfield is
//                    a mask, the second bitfield defines the
//                    bits.


//    First a small list of general purpose types is defined.
//    Default type is interpreted as "Big endian"

t_B1                  = {   1 }
t_B2                  = {   2 }
t_B3                  = {   3 }
t_B4                  = {   4 }
t_B6                  = {   6 }
t_B8                  = {   8 }
t_B16                 = {  16 }

//    The Lofar types:

t_Double              =  {   8 }
t_Int                 =  {   4 }
t_uInt                =  {   4 }
t_Long                =  {   4 }
t_uLong               =  {   4 }
t_String              = -{ 65535-, ASCII } // (-) indicates little endian, 100- indicates 100 characters or less 
t_StringLen						=	 {   2 }

int8 									=  {   1 }
uint8									=  {   1 }
int16									=  {   2 }
uint16								=  {   2 }
int32									=  {   4 }
uint32								=  {   4 }
int                   =  {   4 }
time_t                =  {   4 }

t_dontknow            =  { 65535-, ASCII }

// Example type remove this when you converted the actual Lofar Enums!
t_WrRegBitField       = { 1, 0x00, 0xFF, BITFIELD,
                             0x01 : "Use CTRL",
                             0x02 : "Unspecified",
                             0x04 : "Unspecified",
                             0x08 : "Unspecified",
                             0x10 : "Unspecified",
                             0x20 : "Unspecified",
                             0x40 : "Unspecified",
                             0x80 : "Unspecified"
                       }
                       
//
//  LogicalDevice_Protocol.tseprot: Protocol for LogicalDevice servers
//

TLDResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "LD_RESULT_NO_ERROR",
  0x00000001 : "LD_RESULT_UNSPECIFIED",
  0x00000002 : "LD_RESULT_FILENOTFOUND",
  0x00000003 : "LD_RESULT_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000004 : "LD_RESULT_UNKNOWN_COMMAND",
  0x00000005 : "LD_RESULT_DISABLED",
  0x00000006 : "LD_RESULT_LOW_QUALITY",
  0x00000007 : "LD_RESULT_TIMING_FAILURE",
  0x00000008 : "LD_RESULT_RANGE_ERROR",     // range error in message parameters
  0x00000009 : "LD_RESULT_BEAMALLOC_ERROR", // could not allocate beam
  0x0000000A : "LD_RESULT_BEAMFREE_ERROR"  // could not free beam
}

//
//  StartDaemon_Protocol.tseprot: Protocol for Logical Device StartDaemon servers
//

TLogicalDeviceTypes =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "LDTYPE_NO_TYPE", 
  0x00000001 : "LDTYPE_VIRTUALINSTRUMENT", 
  0x00000002 : "LDTYPE_VIRTUALTELESCOPE", 
  0x00000003 : "LDTYPE_VIRTUALARRAY", 
  0x00000004 : "LDTYPE_STATIONRECEPTORGROUP", 
  0x00000005 : "LDTYPE_ARRAYOPERATIONS", 
  0x00000006 : "LDTYPE_STATIONOPERATIONS", 
  0x00000007 : "LDTYPE_VIRTUALBACKEND"
}
  
TSDResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "SD_RESULT_NO_ERROR", 
  0x00000001 : "SD_RESULT_UNSPECIFIED_ERROR", 
  0x00000002 : "SD_RESULT_UNSUPPORTED_LD", 
  0x00000003 : "SD_RESULT_FILENOTFOUND",
  0x00000004 : "SD_RESULT_PARAMETERNOTFOUND",
  0x00000005 : "SD_RESULT_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000006 : "SD_RESULT_UNKNOWN_COMMAND",
  0x00000007 : "SD_RESULT_ALREADY_EXISTS",
  0x00000008 : "SD_RESULT_LD_NOT_FOUND",
  0x00000009 : "SD_RESULT_WRONG_STATE",
  0x0000000A : "SD_RESULT_SHUTDOWN",
  0x0000000B : "SD_RESULT_WRONG_VERSION"
}


//
//  ABS_Protocol.tseprot: Protocol for the Beam Server
//
t_SubbandsArray            =  {  512 }
t_AngleArray               =  {   16 }
//
//  RSP_Protocol.tseprot: Protocol for the RSP driver interface
//

t_Timestamp                =  {  12 }
t_bitsetBLP                =  {   4 }
t_bitsetRCU                =  {   4 }

//
//  SAS_Protocol.tseprot: Protocol for the communication between SAS and MAC
//

TSASResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "SAS_RESULT_NO_ERROR", 
  0x00000001 : "SAS_RESULT_ERROR_UNSPECIFIED", 
  0x00000002 : "SAS_RESULT_ERROR_VI_NOT_FOUND", 
  0x00000003 : "SAS_RESULT_ERROR_PARAMETERNOTFOUND",
  0x00000004 : "SAS_RESULT_ERROR_INCORRECT_NUMBER_OF_PARAMETERS",
  0x00000005 : "SAS_RESULT_ERROR_UNKNOWN_COMMAND",
  0x00000006 : "SAS_RESULT_ERROR_DISABLED",
  0x00000007 : "SAS_RESULT_ERROR_LOW_QUALITY",
  0x00000008 : "SAS_RESULT_ERROR_TIMING_FAILURE",
  0x00000009 : "SAS_RESULT_ERROR_WRONG_VERSION",
  0x0000000A : "SAS_RESULT_ERROR_UNSUPPORTED_LD",
  0x0000000B : "SAS_RESULT_ERROR_LD_NOT_FOUND",
  0x0000000C : "SAS_RESULT_ERROR_WRONG_STATE",
  0x0000000D : "SAS_RESULT_ERROR_SHUTDOWN",
  0x0000000E : "SAS_RESULT_ERROR_ALREADY_EXISTS",
  0x0000000F : "SAS_RESULT_ERROR_BEAMLET_ALLOCATION_FAILED"
}
  
//
//  SB_Protocol.tseprot: Protocol for the Service Broker deamon
//
TSBResult  =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "SB_NO_ERROR", 
  0x00000001 : "SB_UNKNOWN_ERROR",
  0x00000002 : "SB_SERVICE_ALREADY_EXIST",
  0x00000003 : "SB_NO_FREE_PORTNR",
  0x00000004 : "SB_UNKNOWN_SERVICE"
}
  
//
//  PA_Protocol.tseprot: Protocol for the PA server
//

TPAResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "PA_NO_ERROR", 
  0x00000001 : "PA_UNKNOWN_ERROR",
  0x00000002 : "PA_WRONG_STATE",
  0x00000003 : "PA_PS_GONE",
  0x00000004 : "PA_MISSING_PROPS",
  0x00000005 : "PA_PROP_SET_NOT_EXISTS",
  0x00000006 : "PA_PROP_SET_ALREADY_EXISTS",
  0x00000007 : "PA_DPTYPE_UNKNOWN",
  0x00000008 : "PA_INTERNAL_ERROR",
  0x00000009 : "PA_PI_INTERNAL_ERROR",
  0x0000000A : "PA_APC_NOT_EXISTS",
  0x0000000B : "PA_LINK_TIME_OUT",
  0x0000000C : "PA_SERVER_GONE"
}

TPSCategory = 
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "PS_CAT_TEMPORARY", 
  0x00000001 : "PS_CAT_PERMANENT", 
  0x00000002 : "PS_CAT_PERM_AUTOLOAD"
}

//
//  PI_Protocol.tseprot: Protocol definition for the RTC-PMLlight/Property Interface(MAC/GCF)
//

TPIResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "PI_NO_ERROR",
  0x00000001 : "PI_UNKNOWN_ERROR",
  0x00000002 : "PI_WRONG_STATE",
  0x00000003 : "PI_PS_GONE",
  0x00000004 : "PI_MISSING_PROPS",
  0x00000005 : "PI_PROP_SET_NOT_EXISTS",
  0x00000006 : "PI_PROP_SET_ALREADY_EXISTS",
  0x00000007 : "PI_DPTYPE_UNKNOWN",
  0x00000008 : "PI_INTERNAL_ERROR",
  0x00000009 : "PI_PA_INTERNAL_ERROR",
  0x0000000A : "PI_PA_NOTCONNECTED",
  0x0000000B : "PI_PROP_NOT_VALID",
  0x0000000C : "PI_EMPTY_SCOPE",
  0x0000000D : "PI_MACTYPE_UNKNOWN"
}

//
//  THEcho_Protocol.tseprot: Protocol for the TestHarness Echo server
//

TEchoEnum = 
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000001 : "ECHO_ENUM_FIRST", 
  0x00000002 : "ECHO_ENUM_SECOND", 
  0x00000003 : "ECHO_ENUM_THIRD"
}


//
//  THEchoRouting_Protocol.tseprot: Protocol for the TestHarness Echo Routing server
//

TEchoRoutingEnum = 
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000001 : "ECHOROUTING_ENUM_FIRST", 
  0x00000002 : "ECHOROUTING_ENUM_SECOND", 
  0x00000003 : "ECHOROUTING_ENUM_THIRD"
}

//
//  THPVSSBridge_Protocol.tseprot: Protocol for the THPVSSBridge server
//

TGCFResult =
{
  4,0x00000000,0xFFFFFFFF,ENUM,
  0x00000000 : "GCF_NO_ERROR", 
  0x00000001 : "GCF_UNKNOWN_ERROR",
  0x00000002 : "GCF_PML_ERROR", 
  0x00000003 : "GCF_EXTPS_LOAD_ERROR",
  0x00000004 : "GCF_PS_CONFIGURE_ERROR",
  0x00000005 : "GCF_EXTPS_UNLOAD_ERROR",
  0x00000006 : "GCF_MYPS_ENABLE_ERROR",
  0x00000007 : "GCF_MYPS_DISABLE_ERROR",
  0x00000008 : "GCF_VALUESTRING_NOT_VALID",
  0x00000009 : "GCF_DIFFERENT_TYPES",
  0x0000000A : "GCF_BUSY",
  0x0000000B : "GCF_ALREADY_LOADED",
  0x0000000C : "GCF_NOT_LOADED",
  0x0000000D : "GCF_PROP_NOT_VALID",
  0x0000000E : "GCF_PROP_WRONG_TYPE",
  0x0000000F : "GCF_PROP_NOT_IN_SET",
  0x00000010 : "GCF_NO_PROPER_DATA",
  0x00000011 : "GCF_SCOPE_ALREADY_REG",
  0x00000012 : "GCF_ALREADY_SUBSCRIBED",
  0x00000013 : "GCF_NOT_SUBSCRIBED",
  0x00000014 : "GCF_WRONG_STATE",
  0x00000015 : "GCF_PVSS_ERROR"
}




[functions]

//
//  LogicalDevice_Protocol.tseprot: Protocol for LogicalDevice servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_LOGICALDEVICE_CONNECT =
{
  0x014B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen
  , nodeId : t_String [ nrOfChars ]
  
}

F_LOGICALDEVICE_CONNECTED =
{
  0x028B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_SCHEDULE =
{
  0x038B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  fileName : t_String [ nrOfChars ]
  
}

F_LOGICALDEVICE_SCHEDULED =
{
  0x044B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_CANCELSCHEDULE =
{
  0x058B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_SCHEDULECANCELLED =
{
  0x064B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_CLAIM =
{
  0x078B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_CLAIMED =
{
  0x084B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_PREPARE =
{
  0x098B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_PREPARED =
{
  0x0A4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_RESUME =
{
  0x0B8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_RESUMED =
{
  0x0C4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_SUSPEND =
{
  0x0D8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_SUSPENDED =
{
  0x0E4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

F_LOGICALDEVICE_RELEASE =
{
  0x0F8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_LOGICALDEVICE_RELEASED =
{
  0x104B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}


//
//  StartDaemon_Protocol.tseprot: Protocol for Logical Device StartDaemon servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_STARTDAEMON_SCHEDULE =
{
  0x014C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  logicalDeviceType : TLogicalDeviceTypes,
  nrOfChars1 : t_StringLen,
  taskName : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  fileName : t_String [ nrOfChars2 ]
  
}

F_STARTDAEMON_SCHEDULED =
{
  0x028C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TSDResult,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

F_STARTDAEMON_DESTROY_LOGICALDEVICE =
{
  0x034C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  name : t_String [ nrOfChars ]
  
}

F_STARTDAEMON_STOP =
{
  0x044C, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}



//
//  ABS_Protocol.tseprot: Protocol for the Beam Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_ABS_BEAMALLOC =
{
  0x0154, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  spectral_window : t_Int,
  n_subbands : t_Int,
  subbands : t_SubbandsArray
  
}

F_ABS_BEAMALLOC_ACK =
{
  0x0294, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

F_ABS_BEAMFREE =
{
  0x0354, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int
  
}

F_ABS_BEAMFREE_ACK =
{
  0x0494, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

F_ABS_BEAMPOINTTO =
{
  0x0554, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  time : time_t,
  type : t_Int,
  angle : t_AngleArray
  
}

F_ABS_WGSETTINGS =
{
  0x0654, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  frequency : t_Double,
  amplitude : uint16
  
}

F_ABS_WGSETTINGS_ACK =
{
  0x0794, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int
  
}

F_ABS_WGENABLE =
{
  0x0854, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

F_ABS_WGDISABLE =
{
  0x0954, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}



//
//  EPA_Protocol.tseprot: Protocol for the EPA Demonstrator Board
//
// Note: For each function remove the last ',' before the '}'  !!!!
// no support for this protocol yet....

//
//  RSP_Protocol.tseprot: Protocol for the RSP driver interface
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_RSP_SETWEIGHTS =
{
  0x0156, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  weights : t_dontknow //BeamletWeights
  
}

F_RSP_SETWEIGHTSACK =
{
  0x0296, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

F_RSP_GETWEIGHTS =
{
  0x0356, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

F_RSP_GETWEIGHTSACK =
{
  0x0496, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  weights : t_dontknow //BeamletWeights
  
}

F_RSP_SETSUBBANDS =
{
  0x0556, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  subbands : t_dontknow //SubbandSelection
  
}

F_RSP_SETSUBBANDSACK =
{
  0x0696, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

F_RSP_GETSUBBANDS =
{
  0x0756, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

F_RSP_GETSUBBANDSACK =
{
  0x0896, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  subbands : t_dontknow //SubbandSelection
  
}

F_RSP_SETRCU =
{
  0x0956, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //RCUSettings
  
}

F_RSP_SETRCUACK =
{
  0x0A96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

F_RSP_GETRCU =
{
  0x0B56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

F_RSP_GETRCUACK =
{
  0x0C96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //RCUSettings
  
}

F_RSP_SETWG =
{
  0x0D56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //WGSettings
  
}

F_RSP_SETWGACK =
{
  0x0E96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

F_RSP_GETWG =
{
  0x0F56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

F_RSP_GETWGACK =
{
  0x1096, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //WGSettings
  
}

F_RSP_SUBSTATUS =
{
  0x1156, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16
  
}

F_RSP_SUBSTATUSACK =
{
  0x1296, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

F_RSP_UNSUBSTATUS =
{
  0x1356, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : uint32
  
}

F_RSP_UNSUBSTATUSACK =
{
  0x1496, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

F_RSP_UPDSTATUS =
{
  0x1596, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  sysstatus : t_dontknow //SystemStatus
  
}

F_RSP_GETSTATUS =
{
  0x1656, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

F_RSP_GETSTATUSACK =
{
  0x1796, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  sysstatus : t_dontknow //SystemStatus
  
}

F_RSP_SUBSTATS =
{
  0x1856, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16,
  type : uint8,
  reduction : t_dontknow //StatsReduction
  
}

F_RSP_SUBSTATSACK =
{
  0x1996, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

F_RSP_UNSUBSTATS =
{
  0x1A56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : uint32
  
}

F_RSP_UNSUBSTATSACK =
{
  0x1B96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

F_RSP_UPDSTATS =
{
  0x1C96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  stats : t_dontknow //Statistics
  
}

F_RSP_GETSTATS =
{
  0x1D56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8,
  type : uint8
  
}

F_RSP_GETSTATSACK =
{
  0x1E96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  stats : t_dontknow //Statistics
  
}

F_RSP_GETVERSION =
{
  0x1F56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  cache : uint8
  
}

F_RSP_GETVERSIONACK =
{
  0x2096, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  versions : t_dontknow //Versions
  
}


//
//  CAL_Protocol.tseprot: Protocol for the Calibration Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_CAL_CREATESUBARRAY =
{
  0x0157, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ],
  pos : t_Int,
  sampling_frequency : t_Double
  
}

F_CAL_CREATESUBARRAY_ACK =
{
  0x0297, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_STARTCAL =
{
  0x0357, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_STARTCAL_ACK =
{
  0x0497, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_DESTROYSUBARRAY =
{
  0x0557, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_DESTROYSUBARRAY_ACK =
{
  0x0657, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_SUBCAL =
{
  0x0757, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_SUBCAL_ACK =
{
  0x0897, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_UPDCAL =
{
  0x0997, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_UNSUBCAL =
{
  0x0A57, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

F_CAL_UNSUBCAL_ACK =
{
  0x0B97, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}


//
//  NM_Protocol.tseprot: Protocol for the NodeManager
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_NM_CLAIM =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodesToClaim : t_String [ nrOfChars ]
  
}

F_NM_CLAIMED =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  newClaimedNodes : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  releasedNodes : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  faultyNodes : t_String [ nrOfChars3 ]
  
}

F_NM_RELEASE =
{
  0x034A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodesToRelease : t_String [ nrOfChars ]
  
}

F_NM_RELEASED =
{
  0x048A, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}


//
//  SAS_Protocol.tseprot: Protocol for the communication between SAS and MAC
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_SAS_SCHEDULE =
{
  0x014D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

F_SAS_UPDATESCHEDULE =
{
  0x024D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

F_SAS_CANCELSCHEDULE =
{
  0x034D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

F_SAS_RESPONSE =
{
  0x048D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TSASResult,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

F_SAS_REPLACEMENTREQUEST =
{
  0x058D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodeID : t_String [ nrOfChars ]
  
}


//
//  KVL_Protocol.tseprot: Protocol for the KVL system
//
// Note: For each function remove the last ',' before the '}'  !!!!
//  not supported yet

//
//  SB_Protocol.tseprot: Protocol for the Service Broker deamon
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_SB_REGISTER_SERVICE =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  servicename : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  host : t_String [ nrOfChars2 ]
  
}

F_SB_UNREGISTER_SERVICE =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}

F_SB_GET_SERVICEINFO =
{
  0x0343, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}

F_SB_SERVICE_REGISTERED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  portnumber : t_uInt,
  result : TSBResult
  
}

F_SB_SERVICE_INFO =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  portnumber : t_uInt,
  nrOfChars : t_StringLen,
  host : t_String [ nrOfChars ],
  result : TSBResult
  
}

F_SB_SERVICE_GONE =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}


//
//  Echo_Protocol.tseprot: Protocol for the Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_ECHO_PING =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : time_t
  
}

F_ECHO_ECHO =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : time_t,
  echo_time : time_t
  
}

F_ECHO_CLOCK =
{
  0x038A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  clockpulse : t_B1
  
}


//
//  PA_Protocol.tseprot: Protocol for the PA server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_PA_LOAD_PROP_SET =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PA_UNLOAD_PROP_SET =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PA_CONF_PROP_SET =
{
  0x0343, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  apcName : t_String [ nrOfChars2 ]
  
}

F_PA_PROP_SET_LOADED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

F_PA_PROP_SET_UNLOADED =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

F_PA_PROP_SET_CONF =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  apcName : t_String [ nrOfChars ],
  result : TPAResult
  
}

F_PA_REGISTER_SCOPE =
{
  0x0743, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

F_PA_UNREGISTER_SCOPE =
{
  0x0843, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PA_SCOPE_REGISTERED =
{
  0x0983, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

F_PA_SCOPE_UNREGISTERED =
{
  0x0A83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPAResult,
  seqnr : uint16
  
}

F_PA_LINK_PROP_SET =
{
  0x0B83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PA_UNLINK_PROP_SET =
{
  0x0C83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PA_PROP_SET_LINKED =
{
  0x0D43, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

F_PA_PROP_SET_UNLINKED =
{
  0x0E43, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

F_PA_PROP_SET_GONE =
{
  0x0F83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}


//
//  PI_Protocol.tseprot: Protocol definition for the RTC-PMLlight/Property Interface(MAC/GCF)
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_PI_REGISTER_SCOPE =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

F_PI_UNREGISTER_SCOPE =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PI_SCOPE_REGISTERED =
{
  0x0383, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPIResult
  
}

F_PI_SCOPE_UNREGISTERED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  seqnr : uint16
  
}

F_PI_LINK_PROP_SET =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PI_UNLINK_PROP_SET =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_PI_PROP_SET_LINKED =
{
  0x0743, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  propList : t_String [ nrOfChars2 ]
  
}

F_PI_PROP_SET_UNLINKED =
{
  0x0843, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

//
//  THEcho_Protocol.tseprot: Protocol for the TestHarness Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_THECHO_PING_UINT =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

F_THECHO_ECHO_UINT =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

F_THECHO_PING_INT =
{
  0x034A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

F_THECHO_ECHO_INT =
{
  0x048A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

F_THECHO_PING_LONG =
{
  0x054A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

F_THECHO_ECHO_LONG =
{
  0x068A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

F_THECHO_PING_ENUM =
{
  0x074A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

F_THECHO_ECHO_ENUM =
{
  0x088A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

F_THECHO_PING_DOUBLE =
{
  0x094A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

F_THECHO_ECHO_DOUBLE =
{
  0x0A8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

F_THECHO_PING_STRING =
{
  0x0B4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

F_THECHO_ECHO_STRING =
{
  0x0C8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

F_THECHO_PING_STOP =
{
  0x0D4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt
  
}

F_THECHO_PING_INT_ARRAY =
{
  0x0E4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}

F_THECHO_ECHO_INT_ARRAY =
{
  0x0F8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}

//
//  THEchoRouting_Protocol.tseprot: Protocol for the TestHarness Echo Routing server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_THECHOROUTING_PING_UINT =
{
  0x014B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

F_THECHOROUTING_ECHO_UINT =
{
  0x024B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

F_THECHOROUTING_PING_INT =
{
  0x034B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

F_THECHOROUTING_ECHO_INT =
{
  0x044B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

F_THECHOROUTING_PING_LONG =
{
  0x054B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

F_THECHOROUTING_ECHO_LONG =
{
  0x064B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

F_THECHOROUTING_PING_ENUM =
{
  0x074B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

F_THECHOROUTING_ECHO_ENUM =
{
  0x084B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

F_THECHOROUTING_PING_DOUBLE =
{
  0x094B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

F_THECHOROUTING_ECHO_DOUBLE =
{
  0x0A4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

F_THECHOROUTING_PING_STRING =
{
  0x0B4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

F_THECHOROUTING_ECHO_STRING =
{
  0x0C4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

F_THECHOROUTING_PING_STOP =
{
  0x0D4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt
  
}

F_THECHOROUTING_PING_INT_ARRAY =
{
  0x0E4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}

F_THECHOROUTING_ECHO_INT_ARRAY =
{
  0x0F4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}


//
//  THPVSSBridge_Protocol.tseprot: Protocol for the THPVSSBridge server
//
// Note: For each function remove the last ',' before the '}'  !!!!

F_THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET =
{
  0x014E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

F_THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x028E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET =
{
  0x034E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x048E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

F_THPVSSBRIDGE_MY_GET_VALUE =
{
  0x054E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_MY_GET_VALUE_RESPONSE =
{
  0x068E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

F_THPVSSBRIDGE_MY_SET_VALUE =
{
  0x074E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

F_THPVSSBRIDGE_MY_SET_VALUE_RESPONSE =
{
  0x088E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET =
{
  0x094E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x0A8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

F_THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET =
{
  0x0B4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

F_THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x0C8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

F_THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY =
{
  0x0D4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x0E8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY =
{
  0x0F4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x108E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_EXT_GET_VALUE =
{
  0x114E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_EXT_GET_VALUE_RESPONSE =
{
  0x128E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]  
}

F_THPVSSBRIDGE_EXT_SET_VALUE =
{
  0x134E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
}

F_THPVSSBRIDGE_EXT_SET_VALUE_RESPONSE =
{
  0x148E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

F_THPVSSBRIDGE_VALUE_CHANGE_RESPONSE =
{
  0x158E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
}

F_THPVSSBRIDGE_SUBSCRIBE_PROPERTY =
{
  0x164E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_SUBSCRIBE_PROPERTY_RESPONSE =
{
  0x178E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_UNSUBSCRIBE_PROPERTY =
{
  0x184E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_UNSUBSCRIBE_PROPERTY_RESPONSE =
{
  0x198E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_GET_VALUE =
{
  0x1A4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_GET_VALUE_RESPONSE =
{
  0x1B8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

F_THPVSSBRIDGE_SET_VALUE =
{
  0x1C4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

F_THPVSSBRIDGE_SET_VALUE_RESPONSE =
{
  0x1D8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

F_THPVSSBRIDGE_FLUSH_SUBSCRIPTIONS =
{
  0x1E4E, // LSB first: signal, protocol, in/out
  0x00000000
}

[events]

//
//  LogicalDevice_Protocol.tseprot: Protocol for LogicalDevice servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_LOGICALDEVICE_CONNECT =
{
  0x014B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodeId : t_String [ nrOfChars ]
  
}

E_LOGICALDEVICE_CONNECTED =
{
  0x028B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_SCHEDULE =
{
  0x038B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  fileName : t_String [ nrOfChars ]
  
}

E_LOGICALDEVICE_SCHEDULED =
{
  0x044B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_CANCELSCHEDULE =
{
  0x058B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_SCHEDULECANCELLED =
{
  0x064B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_CLAIM =
{
  0x078B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_CLAIMED =
{
  0x084B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_PREPARE =
{
  0x098B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_PREPARED =
{
  0x0A4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_RESUME =
{
  0x0B8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_RESUMED =
{
  0x0C4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_SUSPEND =
{
  0x0D8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_SUSPENDED =
{
  0x0E4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}

E_LOGICALDEVICE_RELEASE =
{
  0x0F8B, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_LOGICALDEVICE_RELEASED =
{
  0x104B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TLDResult
  
}


//
//  StartDaemon_Protocol.tseprot: Protocol for Logical Device StartDaemon servers
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_STARTDAEMON_SCHEDULE =
{
  0x014C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  logicalDeviceType : TLogicalDeviceTypes,
  nrOfChars1 : t_StringLen,
  taskName : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  fileName : t_String [ nrOfChars2 ]
  
}

E_STARTDAEMON_SCHEDULED =
{
  0x028C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TSDResult,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

E_STARTDAEMON_DESTROY_LOGICALDEVICE =
{
  0x034C, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  name : t_String [ nrOfChars ]
  
}

E_STARTDAEMON_STOP =
{
  0x044C, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}



//
//  ABS_Protocol.tseprot: Protocol for the Beam Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_ABS_BEAMALLOC =
{
  0x0154, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  spectral_window : t_Int,
  n_subbands : t_Int,
  subbands : t_SubbandsArray
  
}

E_ABS_BEAMALLOC_ACK =
{
  0x0294, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

E_ABS_BEAMFREE =
{
  0x0354, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int
  
}

E_ABS_BEAMFREE_ACK =
{
  0x0494, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  status : t_Int
  
}

E_ABS_BEAMPOINTTO =
{
  0x0554, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : t_Int,
  time : time_t,
  type : t_Int,
  angle : t_AngleArray
  
}

E_ABS_WGSETTINGS =
{
  0x0654, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  frequency : t_Double,
  amplitude : uint16
  
}

E_ABS_WGSETTINGS_ACK =
{
  0x0794, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int
  
}

E_ABS_WGENABLE =
{
  0x0854, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}

E_ABS_WGDISABLE =
{
  0x0954, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}



//
//  EPA_Protocol.tseprot: Protocol for the EPA Demonstrator Board
//
// Note: For each function remove the last ',' before the '}'  !!!!
// no support for this protocol yet....
//
//  RSP_Protocol.tseprot: Protocol for the RSP driver interface
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_RSP_SETWEIGHTS =
{
  0x0156, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  weights : t_dontknow //BeamletWeights
  
}

E_RSP_SETWEIGHTSACK =
{
  0x0296, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

E_RSP_GETWEIGHTS =
{
  0x0356, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

E_RSP_GETWEIGHTSACK =
{
  0x0496, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  weights : t_dontknow //BeamletWeights
  
}

E_RSP_SETSUBBANDS =
{
  0x0556, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  subbands : t_dontknow //SubbandSelection
  
}

E_RSP_SETSUBBANDSACK =
{
  0x0696, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

E_RSP_GETSUBBANDS =
{
  0x0756, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  blpmask : t_bitsetBLP,
  cache : uint8
  
}

E_RSP_GETSUBBANDSACK =
{
  0x0896, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  subbands : t_dontknow //SubbandSelection
  
}

E_RSP_SETRCU =
{
  0x0956, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //RCUSettings
  
}

E_RSP_SETRCUACK =
{
  0x0A96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

E_RSP_GETRCU =
{
  0x0B56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

E_RSP_GETRCUACK =
{
  0x0C96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //RCUSettings
  
}

E_RSP_SETWG =
{
  0x0D56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  settings : t_dontknow //WGSettings
  
}

E_RSP_SETWGACK =
{
  0x0E96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16
  
}

E_RSP_GETWG =
{
  0x0F56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

E_RSP_GETWGACK =
{
  0x1096, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  settings : t_dontknow //WGSettings
  
}

E_RSP_SUBSTATUS =
{
  0x1156, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16
  
}

E_RSP_SUBSTATUSACK =
{
  0x1296, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

E_RSP_UNSUBSTATUS =
{
  0x1356, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : uint32
  
}

E_RSP_UNSUBSTATUSACK =
{
  0x1496, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

E_RSP_UPDSTATUS =
{
  0x1596, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  sysstatus : t_dontknow //SystemStatus
  
}

E_RSP_GETSTATUS =
{
  0x1656, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8
  
}

E_RSP_GETSTATUSACK =
{
  0x1796, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  sysstatus : t_dontknow //SystemStatus
  
}

E_RSP_SUBSTATS =
{
  0x1856, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  period : uint16,
  type : uint8,
  reduction : t_dontknow //StatsReduction
  
}

E_RSP_SUBSTATSACK =
{
  0x1996, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

E_RSP_UNSUBSTATS =
{
  0x1A56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  handle : uint32
  
}

E_RSP_UNSUBSTATSACK =
{
  0x1B96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32
  
}

E_RSP_UPDSTATS =
{
  0x1C96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  handle : uint32,
  stats : t_dontknow //Statistics
  
}

E_RSP_GETSTATS =
{
  0x1D56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  rcumask : t_bitsetRCU,
  cache : uint8,
  type : uint8
  
}

E_RSP_GETSTATSACK =
{
  0x1E96, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  stats : t_dontknow //Statistics
  
}

E_RSP_GETVERSION =
{
  0x1F56, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  cache : uint8
  
}

E_RSP_GETVERSIONACK =
{
  0x2096, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  timestamp : t_Timestamp,
  status : int16,
  versions : t_dontknow //Versions
  
}


//
//  CAL_Protocol.tseprot: Protocol for the Calibration Server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_CAL_CREATESUBARRAY =
{
  0x0157, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ],
  pos : t_Int,
  sampling_frequency : t_Double
  
}

E_CAL_CREATESUBARRAY_ACK =
{
  0x0297, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_STARTCAL =
{
  0x0357, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_STARTCAL_ACK =
{
  0x0497, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_DESTROYSUBARRAY =
{
  0x0557, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_DESTROYSUBARRAY_ACK =
{
  0x0657, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_SUBCAL =
{
  0x0757, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_SUBCAL_ACK =
{
  0x0897, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_UPDCAL =
{
  0x0997, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_UNSUBCAL =
{
  0x0A57, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}

E_CAL_UNSUBCAL_ACK =
{
  0x0B97, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  status : t_Int,
  nrOfChars : t_StringLen,
  srgname : t_String [ nrOfChars ]
  
}


//
//  NM_Protocol.tseprot: Protocol for the NodeManager
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_NM_CLAIM =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodesToClaim : t_String [ nrOfChars ]
  
}

E_NM_CLAIMED =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  newClaimedNodes : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  releasedNodes : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  faultyNodes : t_String [ nrOfChars3 ]
  
}

E_NM_RELEASE =
{
  0x034A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodesToRelease : t_String [ nrOfChars ]
  
}

E_NM_RELEASED =
{
  0x048A, // LSB first: signal, protocol, in/out
  msgLength : t_B4
  
}


//
//  SAS_Protocol.tseprot: Protocol for the communication between SAS and MAC
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_SAS_SCHEDULE =
{
  0x014D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

E_SAS_UPDATESCHEDULE =
{
  0x024D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

E_SAS_CANCELSCHEDULE =
{
  0x034D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

E_SAS_RESPONSE =
{
  0x048D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TSASResult,
  nrOfChars : t_StringLen,
  VIrootID : t_String [ nrOfChars ]
  
}

E_SAS_REPLACEMENTREQUEST =
{
  0x058D, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  nodeID : t_String [ nrOfChars ]
  
}


//
//  KVL_Protocol.tseprot: Protocol for the KVL system
//
// Note: For each function remove the last ',' before the '}'  !!!!
//  not supported yet

//
//  SB_Protocol.tseprot: Protocol for the Service Broker deamon
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_SB_REGISTER_SERVICE =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  servicename : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  host : t_String [ nrOfChars2 ]
  
}

E_SB_UNREGISTER_SERVICE =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}

E_SB_GET_SERVICEINFO =
{
  0x0343, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}

E_SB_SERVICE_REGISTERED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  portnumber : t_uInt,
  result : TSBResult
  
}

E_SB_SERVICE_INFO =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  portnumber : t_uInt,
  nrOfChars : t_StringLen,
  host : t_String [ nrOfChars ],
  result : TSBResult
  
}

E_SB_SERVICE_GONE =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  servicename : t_String [ nrOfChars ]
  
}


//
//  Echo_Protocol.tseprot: Protocol for the Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_ECHO_PING =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : time_t
  
}

E_ECHO_ECHO =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  ping_time : time_t,
  echo_time : time_t
  
}

E_ECHO_CLOCK =
{
  0x038A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  clockpulse : t_B1
  
}


//
//  PA_Protocol.tseprot: Protocol for the PA server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_PA_LOAD_PROP_SET =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PA_UNLOAD_PROP_SET =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PA_CONF_PROP_SET =
{
  0x0343, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  apcName : t_String [ nrOfChars2 ]
  
}

E_PA_PROP_SET_LOADED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

E_PA_PROP_SET_UNLOADED =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

E_PA_PROP_SET_CONF =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  apcName : t_String [ nrOfChars ],
  result : TPAResult
  
}

E_PA_REGISTER_SCOPE =
{
  0x0743, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

E_PA_UNREGISTER_SCOPE =
{
  0x0843, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PA_SCOPE_REGISTERED =
{
  0x0983, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPAResult
  
}

E_PA_SCOPE_UNREGISTERED =
{
  0x0A83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPAResult,
  seqnr : uint16
  
}

E_PA_LINK_PROP_SET =
{
  0x0B83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PA_UNLINK_PROP_SET =
{
  0x0C83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PA_PROP_SET_LINKED =
{
  0x0D43, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

E_PA_PROP_SET_UNLINKED =
{
  0x0E43, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ],
  result : TPAResult
  
}

E_PA_PROP_SET_GONE =
{
  0x0F83, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}


//
//  PI_Protocol.tseprot: Protocol definition for the RTC-PMLlight/Property Interface(MAC/GCF)
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_PI_REGISTER_SCOPE =
{
  0x0143, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

E_PI_UNREGISTER_SCOPE =
{
  0x0243, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PI_SCOPE_REGISTERED =
{
  0x0383, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : uint16,
  result : TPIResult
  
}

E_PI_SCOPE_UNREGISTERED =
{
  0x0483, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  seqnr : uint16
  
}

E_PI_LINK_PROP_SET =
{
  0x0583, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PI_UNLINK_PROP_SET =
{
  0x0683, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_PI_PROP_SET_LINKED =
{
  0x0743, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  propList : t_String [ nrOfChars2 ]
  
}

E_PI_PROP_SET_UNLINKED =
{
  0x0843, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  result : TPIResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

//
//  THEcho_Protocol.tseprot: Protocol for the TestHarness Echo server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_THECHO_PING_UINT =
{
  0x014A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

E_THECHO_ECHO_UINT =
{
  0x028A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

E_THECHO_PING_INT =
{
  0x034A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

E_THECHO_ECHO_INT =
{
  0x048A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

E_THECHO_PING_LONG =
{
  0x054A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

E_THECHO_ECHO_LONG =
{
  0x068A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

E_THECHO_PING_ENUM =
{
  0x074A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

E_THECHO_ECHO_ENUM =
{
  0x088A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoEnum
  
}

E_THECHO_PING_DOUBLE =
{
  0x094A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

E_THECHO_ECHO_DOUBLE =
{
  0x0A8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

E_THECHO_PING_STRING =
{
  0x0B4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

E_THECHO_ECHO_STRING =
{
  0x0C8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

E_THECHO_PING_STOP =
{
  0x0D4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt
  
}

E_THECHO_PING_INT_ARRAY =
{
  0x0E4A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}

E_THECHO_ECHO_INT_ARRAY =
{
  0x0F8A, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}


//
//  THEchoRouting_Protocol.tseprot: Protocol for the TestHarness Echo Routing server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_THECHOROUTING_PING_UINT =
{
  0x014B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

E_THECHOROUTING_ECHO_UINT =
{
  0x024B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  uintParam : t_uInt
  
}

E_THECHOROUTING_PING_INT =
{
  0x034B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

E_THECHOROUTING_ECHO_INT =
{
  0x044B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  intParam : t_Int
  
}

E_THECHOROUTING_PING_LONG =
{
  0x054B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

E_THECHOROUTING_ECHO_LONG =
{
  0x064B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  longParam : t_Long
  
}

E_THECHOROUTING_PING_ENUM =
{
  0x074B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

E_THECHOROUTING_ECHO_ENUM =
{
  0x084B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  enumParam : TEchoRoutingEnum
  
}

E_THECHOROUTING_PING_DOUBLE =
{
  0x094B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

E_THECHOROUTING_ECHO_DOUBLE =
{
  0x0A4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  doubleParam : t_Double
  
}

E_THECHOROUTING_PING_STRING =
{
  0x0B4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

E_THECHOROUTING_ECHO_STRING =
{
  0x0C4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  nrOfChars : t_StringLen,
  stringParam : t_String [ nrOfChars ]
  
}

E_THECHOROUTING_PING_STOP =
{
  0x0D4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt
  
}

E_THECHOROUTING_PING_INT_ARRAY =
{
  0x0E4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}

E_THECHOROUTING_ECHO_INT_ARRAY =
{
  0x0F4B, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  seqnr : t_uInt,
  NoOfInts : t_B1,
  {
  	intArrayParam : int
 	}[NoOfInts]
}


//
//  THPVSSBridge_Protocol.tseprot: Protocol for the THPVSSBridge server
//
// Note: For each function remove the last ',' before the '}'  !!!!

E_THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET =
{
  0x014E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ],
  category : TPSCategory
  
}

E_THPVSSBRIDGE_ENABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x028E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET =
{
  0x034E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_THPVSSBRIDGE_DISABLE_MY_PROPERTY_SET_RESPONSE =
{
  0x048E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
  
}

E_THPVSSBRIDGE_MY_GET_VALUE =
{
  0x054E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_MY_GET_VALUE_RESPONSE =
{
  0x068E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

E_THPVSSBRIDGE_MY_SET_VALUE =
{
  0x074E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

E_THPVSSBRIDGE_MY_SET_VALUE_RESPONSE =
{
  0x088E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET =
{
  0x094E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  type : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_LOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x0A8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

E_THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET =
{
  0x0B4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

E_THPVSSBRIDGE_UNLOAD_EXT_PROPERTY_SET_RESPONSE =
{
  0x0C8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars : t_StringLen,
  scope : t_String [ nrOfChars ]
}

E_THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY =
{
  0x0D4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_SUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x0E8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY =
{
  0x0F4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_UNSUBSCRIBE_EXT_PROPERTY_RESPONSE =
{
  0x108E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_EXT_GET_VALUE =
{
  0x114E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_EXT_GET_VALUE_RESPONSE =
{
  0x128E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]  
}

E_THPVSSBRIDGE_EXT_SET_VALUE =
{
  0x134E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
}

E_THPVSSBRIDGE_EXT_SET_VALUE_RESPONSE =
{
  0x148E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
}

E_THPVSSBRIDGE_VALUE_CHANGE_RESPONSE =
{
  0x158E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
}

E_THPVSSBRIDGE_SUBSCRIBE_PROPERTY =
{
  0x164E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_SUBSCRIBE_PROPERTY_RESPONSE =
{
  0x178E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_UNSUBSCRIBE_PROPERTY =
{
  0x184E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_UNSUBSCRIBE_PROPERTY_RESPONSE =
{
  0x198E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_GET_VALUE =
{
  0x1A4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_GET_VALUE_RESPONSE =
{
  0x1B8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

E_THPVSSBRIDGE_SET_VALUE =
{
  0x1C4E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ],
  nrOfChars3 : t_StringLen,
  value : t_String [ nrOfChars3 ]
  
}

E_THPVSSBRIDGE_SET_VALUE_RESPONSE =
{
  0x1D8E, // LSB first: signal, protocol, in/out
  msgLength : t_B4,
  response : TGCFResult,
  nrOfChars1 : t_StringLen,
  scope : t_String [ nrOfChars1 ],
  nrOfChars2 : t_StringLen,
  property : t_String [ nrOfChars2 ]
  
}

E_THPVSSBRIDGE_FLUSH_SUBSCRIPTIONS =
{
  0x1E4E, // LSB first: signal, protocol, in/out
  0x00000000
}
