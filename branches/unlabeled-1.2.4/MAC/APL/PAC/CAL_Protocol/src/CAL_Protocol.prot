// -*- mode: c++ -*-//
// Protocol definition for the Calibration Server Protocol
//
autogen definitions protocol;

description = "Protocol for the Calibration Server";
prefix = "CAL"; // for the signal names
id = "(LOFAR::GCF::TM::F_APL_PROTOCOL+13)";

// specify extra include files
// e.g.
// include = '<sys/time.h>';

include = '"AntennaGains.h"';
include = '"Timestamp.h"';

include = '<bitset>';
include = '<set>';
include = '<Common/LofarTypes.h>';

prelude = << PRELUDE_END

enum {
  SUCCESS = 0,
  ERR_RANGE,       // range error in message parameters
  ERR_NO_PARENT,   // no parent antenna array by that name found
  ERR_NO_SUBARRAY, // no subarray by that name found
};

static const int N_SUBBANDS=512;

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
      signal = START; // start calibration of a subarray
      dir = IN;
      param = { // name of the subarray
	    name = "name";
	    type = "string";
      };
      param = { // name of the array of which it is a subarray
	    name = "parent";
	    type = "string";
      };
      param = { // subset of the receivers (2 receivers per antenna)
	    name = "subset";
	    type = "std::bitset<256>";
      };
      param = { // sampling_frequency
	    name = "sampling_frequency";
	    type = "double";
      };
      param = { // nyquist_zone
	    name = "nyquist_zone";
	    type = "int";
      };
      // sampling_frequency and nyquist_zone determine the spectral window
};

event = {
      signal = STARTACK;
      dir = OUT;
      param = {
	    name = "name";
	    type = "string";
      };
      param = {
	    name = "status";
	    type = "int16";
      };
};

event = {
      signal = STOP; // stop calibration of a subarray
      dir = IN;
      param = {
	    name = "name";
	    type = "string";
      };
};

event = {
      signal = STOPACK;
      dir = OUT;
      param = {
	    name = "name";
	    type = "string";
      };
      param = {
	    name = "status";
	    type = "int16";
      };
};

event = {
      signal = SUBSCRIBE; // subscribe to antenna gain updates
      dir = IN;
      param = { // name of the subarray
	    name = "name";
	    type = "string";
      };
      param = { // set of subbands
	    name = "subbandset";
	    type = "std::bitset<N_SUBBANDS>";
      };
};

event = {
      signal = SUBSCRIBEACK;
      dir = OUT;
      param = {
	    name = "status";
	    type = "int";
      };
      param = {
	    name = "handle";
	    type = "uint32";
      };
};

event = {
      signal = UPDATE; // antenna gains update
      dir = OUT;
      param = { // time of the gains
	    name = "timestamp";
	    type = "RTC::Timestamp";
	    userdefined;
      };
      param = { // status
	    name = "status";
	    type = "int16";
      };
      param = { // handle
	    name = "handle";
	    type = "uint32";
      };
      param = { // gains
	    name = "gains";
	    type = "CAL::AntennaGains";
	    userdefined;
      };
};

event = {
      signal = UNSUBSCRIBE; // unsubscribe from updates
      dir = IN;
      param = {
	    name = "handle";
	    type = "uint32";
      };
};

event = {
      signal = UNSUBSCRIBEACK;
      dir = OUT;
      param = {
	    name = "status";
	    type = "int16";
      };
      param = {
	    name = "handle";
	    type = "uint32";
      };
};

