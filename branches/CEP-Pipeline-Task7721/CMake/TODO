
==============================================================================
=                       TODO - List of things to do                          =
==============================================================================

* Add option PROPERTIES to LOFAR_ADD_TEST(). As it currently stands, you need
  to use SET_TESTS_PROPERTIES() to set properties on tests. The problem is
  that you need to put a SET_TESTS_PROPERTIES() statements inside a
  'if(BUILD_TESTING) ... endif()' block. CMake's ADD_TEST() and, as a 
  consequence LOFAR_ADD_TEST(), are no-ops if BUILD_TESTING is OFF, but
  this is not the case for SET_TESTS_PROPERTIES(). LOFAR_ADD_TEST() could
  hide this detail, yielding cleaner CMakeLists.txt files.

* Detection of whether we should use lib or lib64 is currently not done
  correctly. Maybe just copy/paste what's in GNUInstallDirs.cmake?

* Some Find modules use variables that they set in their own macros, e.g.
  FindCUDA.cmake. Since lofar_find_package() is a function, these variables
  are lost at the moment that you leave this function. A possible improvement
  to lofar_find_package() could be to export all non-cached variables that
  start with <PKG>_ to the parent scope. The following code snippet could 
  accomplish this:

    get_directory_property(_vars VARIABLES)
    get_directory_property(_cvars CACHE_VARIABLES)
    foreach(_var ${_vars})
      if(_var MATCHES "^${_PKG}" OR _var MATCHES "^${_package}")
        if(NOT _cvars MATCHES "${_var}")
          set(${_var} ${${_var}} PARENT_SCOPE)
        endif()
      endif()
    endforeach()

  For the time being, however, I think it will suffice to export only
  <PKG>_INCLUDE_DIRS and <PKG>_LIBRARIES.

* Make sure that Python code is already compiled during the build phase. 
  Currently, python sources are compiled during install. What's worse, 
  compilation failures are not reported, and no non-zero exit status is set.

* Add option DEPENDS to lofar_add_library() and lofar_add_executable(), which
  can be used to add additional dependencies. This is mainly useful for
  custom targets, because "normal" target dependencies are already handled by
  target_link_libraries().

* Add an option to build position-independent-code even when building static
  libraries. This should solve the problem that, currently, you cannot build
  shared libraries or (Python) modules when building static libraries.

  Note: I have to check first if something like --whole-archive is required
  when linking. A quick way to check whether this is needed or not is to add
  a line "add_definitions("-fPIC") in the top-level CMakeLists.txt file.

* Add a macro lofar_add_python_module() to add a loadable module compiled
  from one or more C/C++ sources. Currently, lofar_add_library is (ab)used
  for this. Problem with this solution is twofold:
  1) Each library is installed in lib instead of python/site-packages.
  2) For every target, the library prefix must be cleared and an (additional)
     install directory -- python/site-packages -- must be added.

* Switch from FindPthread to FindThreads, which is the "standard" CMake
  module to use (and it also used by FindBLAS and FindLAPACK). Unfortunately,
  the variables that FindThreads sets are completely non-standard, so we may
  need to wrap it in our own FindThreads. (Does that still make sense?)

* Should we use Python EXEC_PREFIX when installing compiled modules, or just
  use PREFIX, as we used to do with the Autotools. The latter options causes
  64-bit modules to end up in <prefix>/lib/python/site-packages, instead of
  the correct one <prefix>/lib64/python/site-packages.
  On the other hand, if we choose the former option, then we have to make a 
  distinction between pure Python modules (which are platform-independent)
  and compiled modules (which are platform-dependent). Otherwise, pure 
  Python modules will end up in <prefix>/lib64/python/site-packages, which
  is also incorrect.

* When you've initially built only a small number of packages (e.g. only 
  Common), and later expand that collection (to e.g. Blob), a rebuild of
  Common is triggered. This is caused by the fact that lofar_config.h is
  regenerated, which is caused by the fact that some #cmakedefine's depend
  on variables that are only set in packages that were added later (e.g. 
  HAVE_BLITZ and HAVE_AIPSPP in Blob). I don't know yet how to solve this, 
  and I don't know if this is really a big issue.

* Solve the problem of running some (distributed) tests, e.g. ParmDB tests,
  which rely on executables and/or scripts that were built as part of another
  LOFAR package. For (C)Make targets, this can be solved by using the target
  property ${CMAKE_BUILD_TYPE}_LOCATION; this would return, e.g., the location
  of getparsetvalue (in LCS/Common). However, scripts, like startdistproc,
  don't have an associated target (because they don't have to be built). We 
  could solve this by creating a custom target for that (and other) scripts:

    add_custom_target(hello.sh ALL)
    add_custom_command(TARGET hello.sh POST_BUILD COMMAND ${CMAKE_COMMAND} -E
    copy ${CMAKE_SOURCE_DIR}/hello.sh ${CMAKE_BINARY_DIR}/hello.sh)

  But this feels rather hacky.
  Another solution would be to set the output path of all generated
  executables to ${CMAKE_BINARY_DIR}/bin, instead of the automatically
  selected ${CMAKE_CURRENT_BINARY_DIR}. This could cause name conflicts,
  though.

  The current solution is to create symbolic links to the required scripts in
  the binary test directory. Since only a few test programs need scripts from
  other packages, this is a workable solution.

* Find a way to suppress the repetitive messages from the FindCasacore module
  about the components it has found. Must be possible to do this somehow, with
  the standard FindPackageMessage CMake module.

* Define ${PACKAGE_NAME}_INCLUDE_PATH_SUFFIX in LofarPackage.cmake.
  The user can then override the default value. There will be no need for
  caching these variables anymore (as far as I can see).
  Solving this issue, will preempt the current solution of setting this
  variable in CMakeLists.txt files of packages that have non-default include
  paths (mostly MAC packages).

* Create a symlink to each header file, instead of each directory containing 
  header files. 
  Advantages: 
  - you must explicitly mention each header file that is part of the
    package's interface.
  - Generated files (like the MAC protocol files) can be put in the 
    $bindir/include directory instead of $bindir/include/MAC directory.
  Disadvantages: 
  - a lot of symlinks.
  This could all be done using a macro like lofar_add_headers(). This macro
  would then create the directory 
  ${CMAKE_BINARY_DIR}/include/${${PACKAGE_NAME}_INCLUDE_PATH_SUFFIX}, when the 
  first symlink is created. Another options is to let LofarPackage handle
  this, but then a non-default include path suffix should be set before
  lofar_package() is called.

* SSE flags are not yet passed properly to either GNU or ICC compiler.
  Maybe this should just be done in the variants file when defining the
  different compiler suites and options.
  Is this still needed? SSE is enabled by default on x86_64 platforms.

