#! /usr/bin/env python

import scipy
import datetime


#check xcm is self-adjoint
#check diagonal is real
#check abs(diagonal_i) > abs(off_diagonal_ij)
#regrid onto baseline length
#fit a trumpet to uv plot

#utility: mask for some pol
def polmask(pol='XX', Nant = 48):
    '''return a mask to pull out a single pol from XST matrix'''

    Nrcu = Nant*2
    Mask = scipy.zeros((Nrcu,Nrcu),dtype=int)
    
    if (pol.strip().lower() == 'xx'):
        Mask[0:Nant,0:Nant] = scipy.ones((Nant,Nant),dtype='int')

    elif (pol.strip().lower() == 'yy'):
        Mask[Nant:2*Nant, Nant:2*Nant] = scipy.ones((Nant,Nant),dtype='int')

    elif (pol.strip().lower() == 'xy'):
        Mask[0:Nant, Nant:2*Nant] = scipy.ones((Nant,Nant),dtype='int')

    elif (pol.strip().lower() == 'yx'):
        Mask[Nant:2*Nant, 0:Nant] = scipy.ones((Nant,Nant),dtype='int')

    else:
        return None

    return Mask


#visibilities should be self-adjoint
def self_adjoint_test(xcdata):
    '''Cross correl matrix is self-adjoint'''

    if ((xcdata.shape[0] != xcdata.shape[1]) or (xcdata.shape[0] < 2)):
        return False

    t = xcdata - xcdata.conj().transpose()

    if (t.sum() != 0):
        return False
    else:
        return True

#autocorrelations should be real and nonzero
def real_autos_test(xcdata):
    '''Main diagonal of cross-correl matrix is real'''

    T = xcdata.trace()
    if ((T.imag != 0) or (T.real == 0)):
        return False
    else:
        return True

#find non-working RCUs by median filtering the main diagnonal
def out_rcus(xcdata,disregard=[]):
    '''find outlier autocorr amps'''

    d = scipy.diag(xcdata)
    # dd contains those values I DONT want to disregard
    dd = d[scipy.setdiff1d(range(len(d)),disregard)]
    
    # a bit of hardwiring: expect autos ~= 1.5e7
    # expected = 1.5e7
    expected = scipy.median(dd)
    outliers = scipy.where(abs(d - expected) > 0.4 * expected)[0]

    if (len(outliers) == 0):
        return None
    else:
        return scipy.setdiff1d(outliers,disregard)

def rcu_freq(rcu_setting = None, subband = None):
    '''guess (calculate) obs freq from rcu settings dict and subband number(=[0,511])'''

    freq = -1
    if (rcu_setting == None) or (subband == None):
        return None
    else:
        if rcu_setting["LBL_EN"] and not rcu_setting["LBH_EN"] and not rcu_setting["HB_EN"]:
            # freq NA because no antenna enabled
            return 'NA'
        else:
            if rcu_setting["LBL_EN"] or rcu_setting["LBH_EN"]:
                # NYQ zone 1, clk = 200MHz,
                # spectral inversion?
                chanwidth = 200./1024.
                basefreq = 0.
                freq = basefreq + chanwidth * subband
    
            if rcu_setting["HB_EN"]:
                if not rcu_setting["HB_SEL_0"] and rcu_setting["HB_SEL_1"]:
                    # 110-190MHz
                    # NYQ 2, clk=200
                    chanwidth = 200./1024.
                    basefreq = 100.
                    freq = 2 * basefreq - (chanwidth * subband)
                if rcu_setting["HB_SEL_0"] and not rcu_setting["HB_SEL_1"]:
                    # 170-230 MHz
                    # NYQ 3, clk=160
                    chanwidth = 160./1024.
                    basefreq = 160.
                    freq = basefreq + (chanwidth * subband)
                if not rcu_setting["HB_SEL_0"] and  not rcu_setting["HB_SEL_1"]:
                    # 210-270 MHz
                    # NYQ 3, clk=200
                    chanwidth = 200./1024.
                    basefreq = 200.
                    freq = basefreq + (chanwidth * subband)
    if (freq == -1):
        # confused
        return None
    else:
        return freq
    
def classify(xst, rcu_settings = [{}]):
    '''classify cross corr matrix as NOMINAL or otherwise'''

    if ((len(xst) < 2) or (len(rcu_settings) < 2)):
        return [None];

    n_rcus = xst.shape[0]

    # matrix unphysical
    if (not (self_adjoint_test(xst)) or not (real_autos_test(xst))):
        classification = ['INVALID'] * n_rcus
        return classification

    # default
    classification = ['NOMINAL'] * n_rcus
    
    disregard_rcus = []
    # antennas or RCUs turned off
    for i in range(n_rcus):
        # on-antenna amps might be off
        if not rcu_settings[i]['HB_EN'] and not rcu_settings[i]['LBH_EN'] and not rcu_settings[i]['LBL_EN']:
            classification[i] = 'ANTENNA OFF'
            
        # rcu might also be off
        if not rcu_settings[i]['VH_EN'] and not rcu_settings[i]['VL_EN']:
            if classification[i] == 'ANTENNA OFF':
                classification[i] = 'DISABLED'
            else:
                classification[i] = 'RCU OFF'
        if classification[i] != 'NOMINAL':
            disregard_rcus.append(i)

    # what if most RCUs are OFF? HEREIAM
    if (len(disregard_rcus) - n_rcus > 4):
        # from now on only examine 'on' rcus
        outliers = out_rcus(xst,disregard_rcus)
        if (outliers != None):
            # this code needs to be improved
            for bad_rcu in outliers:
                # The trustworthiness or usability of the RSP status flags in this way
                # is just an assumption on my part. It should be tested by looking through the SHM database
                rspstatus = rcu_settings[bad_rcu]
                if (rspstatus['INPUT_ENABLE']):
                    if (rspstatus['BANDSEL']):
                        # Low Band
                        # print "Low Band"
                        if ( (rspstatus['LBL_EN'] or rspstatus['LBH_EN']) and rspstatus['VL_EN']):
                            classification[bad_rcu] = 'OFF_NOMINAL'
                        else:
                            # High Band
                            # print "High Band"
                            if ( rspstatus['VH_EN'] and rspstatus['HB_EN'] ):
                                classification[bad_rcu] = 'OFF_NOMINAL'

    return classification
    

def unflatten(xcdata,N):

    xcm = scipy.array([N*2,N*2],dtype='c16')
    xcm.resize(N*2,N*2)
    vtmp = xcdata[2:]

    for row in range(0,N):
        for col in range(0,N):
            a = vtmp[( row*N + col)*2]
            b = vtmp[( row*N + col)*2 + 1]
            xcm[row,col] = complex(float(a),float(b))
            
            a = vtmp[( N*N + row*N + col)*2]
            b = vtmp[( N*N + row*N + col)*2 + 1]
            xcm[row,col+N] = complex(float(a),float(b))
            
            a = vtmp[( 2*N*N + row*N + col)*2]
            b = vtmp[( 2*N*N + row*N + col)*2 + 1]
            xcm[row+N,col] = complex(float(a),float(b))
                
            a = vtmp[( 3*N*N + row*N + col)*2]
            b = vtmp[( 3*N*N + row*N + col)*2 + 1]
            xcm[row+N,col+N] = complex(float(a),float(b))

    return xcm

def array_geom(station_id = 1010, rcu_settings = [{}], epoch = datetime.datetime.now()):
    """return geographic coordinates (meters, rel to station center) of antennas"""
    #come from etc/AntennaArrays.conf on stations.
    #really want to get this from MIS so it gets updated automatically

    #pick correct array based on station id, LB vs. HB, and date
    #if id is 501 (old DB entries), go by number of rcu_settings
    
    #cs001
    cs001_LBA_center = scipy.asarray([ 6.8673859, 52.91092509, 50.621 ])
    cs001_LBA_16 = scipy.asarray([
        #[-28.500,   0.000, 0, -28.500,   0.000, 0],
        #[-25.000,   3.500, 0, -25.000,   3.500, 0],
        #[-21.500,   0.000, 0, -21.500,   0.000, 0],
        #[-25.000,  -3.500, 0, -25.000,  -3.500, 0],
        #[ -3.500,  25.000, 0,  -3.500,  25.000, 0],
        #[  0.000,  28.500, 0,   0.000,  28.500, 0],
        #[  3.500,  25.000, 0,   3.500,  25.000, 0],
        #[  0.000,  21.500, 0,   0.000,  21.500, 0],
        #[ 21.500,   0.000, 0,  21.500,   0.000, 0],
        #[ 25.000,   3.500, 0,  25.000,   3.500, 0],
        #[ 28.500,   0.000, 0,  28.500,   0.000, 0],
        #[ 25.000,  -3.500, 0,  25.000,  -3.500, 0],
        #[ -3.500, -25.000, 0,  -3.500, -25.000, 0],
        #[  0.000, -21.500, 0,   0.000, -21.500, 0],
        #[  3.500, -25.000, 0,   3.500, -25.000, 0],
        #[  0.000, -28.500, 0,   0.000, -28.500, 0] ])
        [-28.4940,     0.5844,     0.0000,   -28.4940,     0.5844,     0.0000],
        [-24.9230,     4.0119,     0.0000,   -24.9230,     4.0119,     0.0000],
        [-21.4955,     0.4408,     0.0000,   -21.4955,     0.4408,     0.0000],
        [-25.0665,    -2.9867,     0.0000,   -25.0665,    -2.9867,     0.0000],
        [-2.9867,    25.0665,     0.0000,    -2.9867,    25.0665,     0.0000],
        [0.5844,    28.4940,     0.0000,     0.5844,    28.4940,     0.0000],
        [4.0119,    24.9230,     0.0000,     4.0119,    24.9230,     0.0000],
        [0.4408,    21.4955,     0.0000,     0.4408,    21.4955,     0.0000],
        [21.4955,    -0.4408,     0.0000,    21.4955,    -0.4408,     0.0000],
        [25.0665,     2.9867,     0.0000,    25.0665,     2.9867,     0.0000],
        [28.4940,    -0.5844,     0.0000,    28.4940,    -0.5844,     0.0000],
        [24.9230,    -4.0119,     0.0000,    24.9230,    -4.0119,     0.0000],
        [-4.0119,   -24.9230,     0.0000,    -4.0119,   -24.9230,     0.0000],
        [-0.4408,   -21.4955,     0.0000,    -0.4408,   -21.4955,     0.0000],
        [2.9867,   -25.0665,     0.0000,     2.9867,   -25.0665,     0.0000],
        [-0.5844,   -28.4940,     0.0000,    -0.5844,   -28.4940,     0.0000] ])
    
    cs001_HBA_center = scipy.asarray([6.8673859, 52.91092509,  50.621 ])
    cs001_HBA_16 = scipy.asarray([
        #[ -21.500,  -7.000, 0, -21.500,  -7.000, 0],  
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[  -7.000,  21.500, 0,  -7.000,  21.500, 0],       
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[  21.500,   7.000, 0,  21.500,   7.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   7.000, -21.500, 0,   7.000, -21.500, 0],   
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0],
        #[   0.000,   0.000, 0,   0.000,   0.000, 0]])
        [-21.6390,    -6.5577,     0.0000,   -21.6390,    -6.5577,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [-6.5577,    21.6390,     0.0000,    -6.5577,    21.6390,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [21.6390,     6.5577,     0.0000,    21.6390,     6.5577,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [6.5577,   -21.6390,     0.0000,     6.5577,   -21.6390,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000] ])
    
    cs008_LBA_center = scipy.asarray([6.868848183, 52.91392684,  50.612 ] )
    cs008_LBA_16 = scipy.asarray([
        #[-61.000, 12.000, 0, -61.000, 12.000, 0],
        #[-57.500, 15.500, 0, -57.500, 15.500, 0],
        #[-54.000, 12.000, 0, -54.000, 12.000, 0],
        #[-57.500, 8.500, 0, -57.500, 8.500, 0],
        #[-36.000, 37.000, 0, -36.000, 37.000, 0],
        #[-32.500, 40.500, 0, -32.500, 40.500, 0],
        #[-29.000, 37.000, 0, -29.000, 37.000, 0],
        #[-32.500, 33.500, 0, -32.500, 33.500, 0],
        #[54.000, -12.000, 0, 54.000, -12.000, 0],
        #[57.500, -8.500, 0, 57.500, -8.500, 0],
        #[61.000, -12.000, 0, 61.000, -12.000, 0],
        #[57.500, -15.500, 0, 57.500, -15.500, 0],
        #[29.000, -37.000, 0, 29.000, -37.000, 0],
        #[32.500, -33.500, 0, 32.500, -33.500, 0],
        #[36.000, -37.000, 0, 36.000, -37.000, 0],
        #[32.500, -40.500, 0, 32.500, -40.500, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0] ])
        [-60.7408,    13.2495,     0.0000,   -60.7408,    13.2495,     0.0000],
        [-57.1697,    16.6769,     0.0000,   -57.1697,    16.6769,     0.0000],
        [-53.7423,    13.1058,     0.0000,   -53.7423,    13.1058,     0.0000],
        [-57.3134,     9.6784,     0.0000,   -57.3134,     9.6784,     0.0000],
        [-35.2330,    37.7311,     0.0000,   -35.2330,    37.7311,     0.0000],
        [-31.6619,    41.1585,     0.0000,   -31.6619,    41.1585,     0.0000],
        [-28.2345,    37.5874,     0.0000,   -28.2345,    37.5874,     0.0000],
        [-31.8056,    34.1600,     0.0000,   -31.8056,    34.1600,     0.0000],
        [53.7423,   -13.1058,     0.0000,    53.7423,   -13.1058,     0.0000],
        [57.3134,    -9.6784,     0.0000,    57.3134,    -9.6784,     0.0000],
        [60.7408,   -13.2495,     0.0000,    60.7408,   -13.2495,     0.0000],
        [57.1697,   -16.6769,     0.0000,    57.1697,   -16.6769,     0.0000],
        [28.2345,   -37.5874,     0.0000,    28.2345,   -37.5874,     0.0000],
        [31.8056,   -34.1600,     0.0000,    31.8056,   -34.1600,     0.0000],
        [35.2330,   -37.7311,     0.0000,    35.2330,   -37.7311,     0.0000],
        [31.6619,   -41.1585,     0.0000,    31.6619,   -41.1585,     0.0000] ])
    
    cs008_HBA_center = scipy.asarray([6.868848183, 52.91392684, 50.612 ])
    cs008_HBA_16 = scipy.asarray([
        #[-54.000, 5.000, 0, -54.000, 5.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[-39.500, 33.500, 0, -39.500, 33.500, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[54.000, 5.000, 0, 54.000, 5.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[39.500, -33.500, 0, 39.500, -33.500, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0],
        #[0.000, 0.000, 0, 0.000, 0.000, 0] ])
        [-53.8860,     6.1073,     0.0000,   -53.8860,     6.1073,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [-38.8041,    34.3037,     0.0000,   -38.8041,    34.3037,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [54.0913,     3.8906,     0.0000,    54.0913,     3.8906,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [38.8041,   -34.3037,     0.0000,    38.8041,   -34.3037,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000] ])
    
    cs016_LBA_center = scipy.asarray([6.8735352, 52.91250243,  50.316 ])
    cs016_LBA_16 = scipy.asarray([
        #[-28.500, 0.000, 0, -28.500, 0.000, 0], 
        #[-25.000, 3.500, 0, -25.000, 3.500, 0], 
        #[-21.500, 0.000, 0, -21.500, 0.000, 0], 
        #[-25.000, -3.500, 0, -25.000, -3.500, 0], 
        #[-3.500, 25.000, 0, -3.500, 25.000, 0], 
        #[0.000, 28.500, 0, 0.000, 28.500, 0], 
        #[3.500, 25.000, 0, 3.500, 25.000, 0], 
        #[0.000, 21.500, 0, 0.000, 21.500, 0], 
        #[21.500, 0.000, 0, 21.500, 0.000, 0], 
        #[25.000, 3.500, 0, 25.000, 3.500, 0], 
        #[28.500, 0.000, 0, 28.500, 0.000, 0], 
        #[25.000, -3.500, 0, 25.000, -3.500, 0], 
        #[-3.500, -25.000, 0, -3.500, -25.000, 0], 
        #[0.000, -21.500, 0, 0.000, -21.500, 0], 
        #[3.500, -25.000, 0, 3.500, -25.000, 0], 
        #[0.000, -28.500, 0, 0.000, -28.500, 0] ])
        [-28.4940,     0.5868,     0.0000,   -28.4940,     0.5868,     0.0000],
        [-24.9226,     4.0140,     0.0000,   -24.9226,     4.0140,     0.0000],
        [-21.4954,     0.4427,     0.0000,   -21.4954,     0.4427,     0.0000],
        [-25.0668,    -2.9845,     0.0000,   -25.0668,    -2.9845,     0.0000],
        [-2.9845,    25.0668,     0.0000,    -2.9845,    25.0668,     0.0000],
        [0.5868,    28.4940,     0.0000,     0.5868,    28.4940,     0.0000],
        [4.0140,    24.9226,     0.0000,     4.0140,    24.9226,     0.0000],
        [0.4427,    21.4954,     0.0000,     0.4427,    21.4954,     0.0000],
        [21.4954,    -0.4427,     0.0000,    21.4954,    -0.4427,     0.0000],
        [25.0668,     2.9845,     0.0000,    25.0668,     2.9845,     0.0000],
        [28.4940,    -0.5868,     0.0000,    28.4940,    -0.5868,     0.0000],
        [24.9226,    -4.0140,     0.0000,    24.9226,    -4.0140,     0.0000],
        [-4.0140,   -24.9226,     0.0000,    -4.0140,   -24.9226,     0.0000],
        [-0.4427,   -21.4954,     0.0000,    -0.4427,   -21.4954,     0.0000],
        [2.9845,   -25.0668,     0.0000,     2.9845,   -25.0668,     0.0000],
        [-0.5868,   -28.4940,     0.0000,    -0.5868,   -28.4940,     0.0000] ])
    
    cs016_HBA_center = scipy.asarray([ 6.8735352, 52.91250243, 50.316 ])
    cs016_HBA_16 = scipy.asarray([
        #[-21.500, -7.000, 0, -21.500, -7.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[-7.000, 21.500, 0, -7.000, 21.500, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[21.500, 7.000, 0, 21.500, 7.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[7.000, -21.500, 0, 7.000, -21.500, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0], 
        #[0.000, 0.000, 0, 0.000, 0.000, 0] ])
        [-21.6396,    -6.5558,     0.0000,   -21.6396,    -6.5558,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [-6.5558,    21.6396,     0.0000,    -6.5558,    21.6396,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [21.6396,     6.5558,     0.0000,    21.6396,     6.5558,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [6.5558,   -21.6396,     0.0000,     6.5558,   -21.6396,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000] ])
    
    cs010_LBA_center = scipy.asarray([ 6.8690294, 52.9129392, 54.10 ])
    cs010_LBA_48 = scipy.asarray([
        #[-12.563, -6.4541, 0, -12.563, -6.4541, 0], 
        #[-13.2726, 1.7248, 0, -13.2726, 1.7248, 0], 
        #[-15.7716, -4.2843, 0, -15.7716, -4.2843, 0], 
        #[-16.5441, 2.6833, 0, -16.5441, 2.6833, 0], 
        #[16.1327, 13.3407, 0, 16.1327, 13.3407, 0], 
        #[14.8658, 19.5829, 0, 14.8658, 19.5829, 0], 
        #[24.2154, 11.1422, 0, 24.2154, 11.1422, 0], 
        #[24.3151, 16.2172, 0, 24.3151, 16.2172, 0], 
        #[-18.1951, -9.0296, 0, -18.1951, -9.0296, 0], 
        #[-19.488, -15.9105, 0, -19.488, -15.9105, 0], 
        #[-22.2205, -20.5718, 0, -22.2205, -20.5718, 0], 
        #[-25.7877, -12.6999, 0, -25.7877, -12.6999, 0], 
        #[3.9041, 3.3027, 0, 3.9041, 3.3027, 0], 
        #[-1.742, 4.2874, 0, -1.742, 4.2874, 0], 
        #[-1.8492, 7.7026, 0, -1.8492, 7.7026, 0], 
        #[2.5874, 9.5549, 0, 2.5874, 9.5549, 0], 
        #[-4.6887, 9.8306, 0, -4.6887, 9.8306, 0], 
        #[-9.4169, 8.1234, 0, -9.4169, 8.1234, 0], 
        #[-7.4369, 16.5615, 0, -7.4369, 16.5615, 0], 
        #[-12.0413, 15.6859, 0, -12.0413, 15.6859, 0], 
        #[11.9652, -17.4725, 0, 11.9652, -17.4725, 0], 
        #[5.3126, -23.553, 0, 5.3126, -23.553, 0], 
        #[17.0299, -25.2735, 0, 17.0299, -25.2735, 0], 
        #[5.6213, -29.3131, 0, 5.6213, -29.3131, 0], 
        #[-6.5766, -11.3486, 0, -6.5766, -11.3486, 0], 
        #[-10.6499, -12.1119, 0, -10.6499, -12.1119, 0], 
        #[-5.3212, -15.4347, 0, -5.3212, -15.4347, 0], 
        #[-6.1064, -19.432, 0, -6.1064, -19.432, 0], 
        #[20.2159, -4.1196, 0, 20.2159, -4.1196, 0], 
        #[24.0473, -3.3066, 0, 24.0473, -3.3066, 0], 
        #[21.9001, -13.0119, 0, 21.9001, -13.0119, 0], 
        #[27.7509, -11.6494, 0, 27.7509, -11.6494, 0], 
        #[-6.1353, 20.2508, 0, -6.1353, 20.2508, 0], 
        #[-0.5381, 23.6962, 0, -0.5381, 23.6962, 0], 
        #[-2.0644, 33.4913, 0, -2.0644, 33.4913, 0], 
        #[-7.9707, 30.6729, 0, -7.9707, 30.6729, 0], 
        #[7.2295, -0.3092, 0, 7.2295, -0.3092, 0], 
        #[8.5838, 5.2761, 0, 8.5838, 5.2761, 0], 
        #[11.1514, -1.1307, 0, 11.1514, -1.1307, 0], 
        #[12.7741, 2.2046, 0, 12.7741, 2.2046, 0], 
        #[-25.4153, 1.1582, 0, -25.4153, 1.1582, 0], 
        #[-21.919, 10.6075, 0, -21.919, 10.6075, 0], 
        #[-30.4327, 7.3724, 0, -30.4327, 7.3724, 0], 
        #[-25.4774, 16.6694, 0, -25.4774, 16.6694, 0], 
        #[4.1875, -6.0873, 0, 4.1875, -6.0873, 0], 
        #[8.0048, -7.3558, 0, 8.0048, -7.3558, 0], 
        #[1.8647, -10.292, 0, 1.8647, -10.292, 0], 
        #[7.0078, -11.4109, 0, 7.0078, -11.4109, 0] ])
        [-12.6928,    -6.1949,     0.0000,   -12.6928,    -6.1949,     0.0000],
        [-13.2344,     1.9969,     0.0000,   -13.2344,     1.9969,     0.0000],
        [-15.8562,    -3.9597,     0.0000,   -15.8562,    -3.9597,     0.0000],
        [-16.4855,     3.0223,     0.0000,   -16.4855,     3.0223,     0.0000],
        [16.4031,    13.0067,     0.0000,    16.4031,    13.0067,     0.0000],
        [15.2646,    19.2736,     0.0000,    15.2646,    19.2736,     0.0000],
        [24.4390,    10.6428,     0.0000,    24.4390,    10.6428,     0.0000],
        [24.6429,    15.7147,     0.0000,    24.6429,    15.7147,     0.0000],
        [-18.3766,    -8.6542,     0.0000,   -18.3766,    -8.6542,     0.0000],
        [-19.8105,   -15.5071,     0.0000,   -19.8105,   -15.5071,     0.0000],
        [-22.6381,   -20.1113,     0.0000,   -22.6381,   -20.1113,     0.0000],
        [-26.0430,   -12.1679,     0.0000,   -26.0430,   -12.1679,     0.0000],
        [3.9711,     3.2219,     0.0000,     3.9711,     3.2219,     0.0000],
        [-1.6536,     4.3223,     0.0000,    -1.6536,     4.3223,     0.0000],
        [-1.6907,     7.7389,     0.0000,    -1.6907,     7.7389,     0.0000],
        [2.7830,     9.4998,     0.0000,     2.7830,     9.4998,     0.0000],
        [-4.4859,     9.9248,     0.0000,    -4.4859,     9.9248,     0.0000],
        [-9.2482,     8.3150,     0.0000,    -9.2482,     8.3150,     0.0000],
        [-7.0954,    16.7107,     0.0000,    -7.0954,    16.7107,     0.0000],
        [-11.7168,    15.9298,     0.0000,   -11.7168,    15.9298,     0.0000],
        [11.6040,   -17.7144,     0.0000,    11.6040,   -17.7144,     0.0000],
        [4.8280,   -23.6571,     0.0000,     4.8280,   -23.6571,     0.0000],
        [16.5075,   -25.6177,     0.0000,    16.5075,   -25.6177,     0.0000],
        [5.0184,   -29.4223,     0.0000,     5.0184,   -29.4223,     0.0000],
        [-6.8082,   -11.2112,     0.0000,    -6.8082,   -11.2112,     0.0000],
        [-10.8963,   -11.8907,     0.0000,   -10.8963,   -11.8907,     0.0000],
        [-5.6369,   -15.3222,     0.0000,    -5.6369,   -15.3222,     0.0000],
        [-6.5040,   -19.3026,     0.0000,    -6.5040,   -19.3026,     0.0000],
        [20.1271,    -4.5337,     0.0000,    20.1271,    -4.5337,     0.0000],
        [23.9744,    -3.7995,     0.0000,    23.9744,    -3.7995,     0.0000],
        [21.6284,   -13.4587,     0.0000,    21.6284,   -13.4587,     0.0000],
        [27.5059,   -12.2166,     0.0000,    27.5059,   -12.2166,     0.0000],
        [-5.7183,    20.3725,     0.0000,    -5.7183,    20.3725,     0.0000],
        [-0.0516,    23.7023,     0.0000,    -0.0516,    23.7023,     0.0000],
        [-1.3765,    33.5266,     0.0000,    -1.3765,    33.5266,     0.0000],
        [-7.3394,    30.8301,     0.0000,    -7.3394,    30.8301,     0.0000],
        [7.2216,    -0.4575,     0.0000,     7.2216,    -0.4575,     0.0000],
        [8.6903,     5.0988,     0.0000,     8.6903,     5.0988,     0.0000],
        [11.1258,    -1.3594,     0.0000,    11.1258,    -1.3594,     0.0000],
        [12.8167,     1.9419,     0.0000,    12.8167,     1.9419,     0.0000],
        [-25.3862,     1.6797,     0.0000,   -25.3862,     1.6797,     0.0000],
        [-21.6966,    11.0552,     0.0000,   -21.6966,    11.0552,     0.0000],
        [-30.2750,     7.9955,     0.0000,   -30.2750,     7.9955,     0.0000],
        [-25.1299,    17.1889,     0.0000,   -25.1299,    17.1889,     0.0000],
        [4.0617,    -6.1720,     0.0000,     4.0617,    -6.1720,     0.0000],
        [7.8521,    -7.5186,     0.0000,     7.8521,    -7.5186,     0.0000],
        [1.6530,   -10.3281,     0.0000,     1.6530,   -10.3281,     0.0000],
        [6.7721,   -11.5523,     0.0000,     6.7721,   -11.5523,     0.0000] ])
    
    cs010_CS1_TEST_center = scipy.asarray([ 6.8690294, 52.9129392, 54.10 ])
    cs010_CS1_TEST_48 = scipy.asarray([
        #[-10.5, -7.5, 0, -10.5, -7.5, 0],
        #[-10.5, -4.5, 0, -10.5, -4.5, 0],
        #[-10.5, -1.5, 0, -10.5, -1.5, 0],
        #[-10.5, 1.5, 0, -10.5, 1.5, 0],
        #[-10.5, 4.5, 0, -10.5, 4.5, 0],
        #[-10.5, 7.5, 0, -10.5, 7.5, 0],
        #[-7.5, -7.5, 0, -7.5, -7.5, 0],
        #[-7.5, -4.5, 0, -7.5, -4.5, 0],
        #[-7.5, -1.5, 0, -7.5, -1.5, 0],
        #[-7.5, 1.5, 0, -7.5, 1.5, 0],
        #[-7.5, 4.5, 0, -7.5, 4.5, 0],
        #[-7.5, 7.5, 0, -7.5, 7.5, 0],
        #[-4.5, -7.5, 0, -4.5, -7.5, 0],
        #[-4.5, -4.5, 0, -4.5, -4.5, 0],
        #[-4.5, -1.5, 0, -4.5, -1.5, 0],
        #[-4.5, 1.5, 0, -4.5, 1.5, 0],
        #[-4.5, 4.5, 0, -4.5, 4.5, 0],
        #[-4.5, 7.5, 0, -4.5, 7.5, 0],
        #[-1.5, -7.5, 0, -1.5, -7.5, 0],
        #[-1.5, -4.5, 0, -1.5, -4.5, 0],
        #[-1.5, -1.5, 0, -1.5, -1.5, 0],
        #[-1.5, 1.5, 0, -1.5, 1.5, 0],
        #[-1.5, 4.5, 0, -1.5, 4.5, 0],
        #[-1.5, 7.5, 0, -1.5, 7.5, 0],
        #[1.5, -7.5, 0, 1.5, -7.5, 0],
        #[1.5, -4.5, 0, 1.5, -4.5, 0],
        #[1.5, -1.5, 0, 1.5, -1.5, 0],
        #[1.5, 1.5, 0, 1.5, 1.5, 0],
        #[1.5, 4.5, 0, 1.5, 4.5, 0],
        #[1.5, 7.5, 0, 1.5, 7.5, 0],
        #[4.5, -7.5, 0, 4.5, -7.5, 0],
        #[4.5, -4.5, 0, 4.5, -4.5, 0],
        #[4.5, -1.5, 0, 4.5, -1.5, 0],
        #[4.5, 1.5, 0, 4.5, 1.5, 0],
        #[4.5, 4.5, 0, 4.5, 4.5, 0],
        #[4.5, 7.5, 0, 4.5, 7.5, 0],
        #[7.5, -7.5, 0, 7.5, -7.5, 0],
        #[7.5, -4.5, 0, 7.5, -4.5, 0],
        #[7.5, -1.5, 0, 7.5, -1.5, 0],
        #[7.5, 1.5, 0, 7.5, 1.5, 0],
        #[7.5, 4.5, 0, 7.5, 4.5, 0],
        #[7.5, 7.5, 0, 7.5, 7.5, 0],
        #[10.5, -7.5, 0, 10.5, -7.5, 0],
        #[10.5, -4.5, 0, 10.5, -4.5, 0],
        #[10.5, -1.5, 0, 10.5, -1.5, 0],
        #[10.5, 1.5, 0, 10.5, 1.5, 0],
        #[10.5, 4.5, 0, 10.5, 4.5, 0],
        #[10.5, 7.5, 0, 10.5, 7.5, 0] ])
        [-10.6517,    -7.2829,     0.0000,   -10.6517,    -7.2829,     0.0000],
        [-10.5902,    -4.2835,     0.0000,   -10.5902,    -4.2835,     0.0000],
        [-10.5286,    -1.2841,     0.0000,   -10.5286,    -1.2841,     0.0000],
        [-10.4670,     1.7152,     0.0000,   -10.4670,     1.7152,     0.0000],
        [-10.4054,     4.7146,     0.0000,   -10.4054,     4.7146,     0.0000],
        [-10.3438,     7.7140,     0.0000,   -10.3438,     7.7140,     0.0000],
        [-7.6524,    -7.3445,     0.0000,    -7.6524,    -7.3445,     0.0000],
        [-7.5908,    -4.3451,     0.0000,    -7.5908,    -4.3451,     0.0000],
        [-7.5292,    -1.3457,     0.0000,    -7.5292,    -1.3457,     0.0000],
        [-7.4676,     1.6536,     0.0000,    -7.4676,     1.6536,     0.0000],
        [-7.4060,     4.6530,     0.0000,    -7.4060,     4.6530,     0.0000],
        [-7.3445,     7.6524,     0.0000,    -7.3445,     7.6524,     0.0000],
        [-4.6530,    -7.4060,     0.0000,    -4.6530,    -7.4060,     0.0000],
        [-4.5914,    -4.4067,     0.0000,    -4.5914,    -4.4067,     0.0000],
        [-4.5298,    -1.4073,     0.0000,    -4.5298,    -1.4073,     0.0000],
        [-4.4683,     1.5921,     0.0000,    -4.4683,     1.5921,     0.0000],
        [-4.4067,     4.5914,     0.0000,    -4.4067,     4.5914,     0.0000],
        [-4.3451,     7.5908,     0.0000,    -4.3451,     7.5908,     0.0000],
        [-1.6536,    -7.4676,     0.0000,    -1.6536,    -7.4676,     0.0000],
        [-1.5921,    -4.4683,     0.0000,    -1.5921,    -4.4683,     0.0000],
        [-1.5305,    -1.4689,     0.0000,    -1.5305,    -1.4689,     0.0000],
        [-1.4689,     1.5305,     0.0000,    -1.4689,     1.5305,     0.0000],
        [-1.4073,     4.5298,     0.0000,    -1.4073,     4.5298,     0.0000],
        [-1.3457,     7.5292,     0.0000,    -1.3457,     7.5292,     0.0000],
        [1.3457,    -7.5292,     0.0000,     1.3457,    -7.5292,     0.0000],
        [1.4073,    -4.5298,     0.0000,     1.4073,    -4.5298,     0.0000],
        [1.4689,    -1.5305,     0.0000,     1.4689,    -1.5305,     0.0000],
        [1.5305,     1.4689,     0.0000,     1.5305,     1.4689,     0.0000],
        [1.5921,     4.4683,     0.0000,     1.5921,     4.4683,     0.0000],
        [1.6536,     7.4676,     0.0000,     1.6536,     7.4676,     0.0000],
        [4.3451,    -7.5908,     0.0000,     4.3451,    -7.5908,     0.0000],
        [4.4067,    -4.5914,     0.0000,     4.4067,    -4.5914,     0.0000],
        [4.4683,    -1.5921,     0.0000,     4.4683,    -1.5921,     0.0000],
        [4.5298,     1.4073,     0.0000,     4.5298,     1.4073,     0.0000],
        [4.5914,     4.4067,     0.0000,     4.5914,     4.4067,     0.0000],
        [4.6530,     7.4060,     0.0000,     4.6530,     7.4060,     0.0000],
        [7.3445,    -7.6524,     0.0000,     7.3445,    -7.6524,     0.0000],
        [7.4060,    -4.6530,     0.0000,     7.4060,    -4.6530,     0.0000],
        [7.4676,    -1.6536,     0.0000,     7.4676,    -1.6536,     0.0000],
        [7.5292,     1.3457,     0.0000,     7.5292,     1.3457,     0.0000],
        [7.5908,     4.3451,     0.0000,     7.5908,     4.3451,     0.0000],
        [7.6524,     7.3445,     0.0000,     7.6524,     7.3445,     0.0000],
        [10.3438,    -7.7140,     0.0000,    10.3438,    -7.7140,     0.0000],
        [10.4054,    -4.7146,     0.0000,    10.4054,    -4.7146,     0.0000],
        [10.4670,    -1.7152,     0.0000,    10.4670,    -1.7152,     0.0000],
        [10.5286,     1.2841,     0.0000,    10.5286,     1.2841,     0.0000],
        [10.5902,     4.2835,     0.0000,    10.5902,     4.2835,     0.0000],
        [10.6517,     7.2829,     0.0000,    10.6517,     7.2829,     0.0000] ])
    
    cs010_HBA_center = scipy.asarray( [ 6.869758056, 52.91291778, 54.10 ])
    cs010_HBA_48 = scipy.asarray([
        #[5.02, -4.49, 0, 5.02, -4.49, 0],
        #[8.16, -4.73, 0, 8.16, -4.73, 0],
        #[12.60, -4.08, 0, 12.60, -4.08, 0],
        #[18.41, -1.91, 0, 18.41, -1.91, 0],
        #[25.76, 2.73, 0, 25.76, 2.73, 0],
        #[34.50, 11.22, 0, 34.50, 11.22, 0],
        #[-2.36, -6.43, 0, -2.36, -6.43, 0],
        #[-2.38, -8.98, 0, -2.38, -8.98, 0],
        #[-0.01, -13.21, 0, -0.01, -13.21, 0],
        #[3.85, -18.11, 0, 3.85, -18.11, 0],
        #[10.53, -23.69, 0, 10.53, -23.69, 0],
        #[21.35, -29.37, 0, 21.35, -29.37, 0],
        #[-6.74, 0.72, 0, -6.74, 0.72, 0],
        #[-9.41, -0.99, 0, -9.41, -0.99, 0],
        #[-12.61, -4.06, 0, -12.61, -4.06, 0],
        #[-16.06, -9.26, 0, -16.06, -9.26, 0],
        #[-19.28, -17.36, 0, -19.28, -17.36, 0],
        #[-21.37, -29.34, 0, -21.37, -29.34, 0],
        #[-1.38, 6.60, 0, -1.38, 6.60, 0],
        #[-3.86, 8.64, 0, -3.86, 8.64, 0],
        #[-7.79, 10.68, 0, -7.79, 10.68, 0],
        #[-13.76, 12.41, 0, -13.76, 12.41, 0],
        #[-22.45, 12.98, 0, -22.45, 12.98, 0],
        #[-34.52, 11.20, 0, -34.52, 11.20, 0],
        #[5.83, 3.39, 0, 5.83, 3.39, 0],
        #[7.02, 6.32, 0, 7.02, 6.32, 0],
        #[7.77, 10.71, 0, 7.77, 10.71, 0],
        #[7.52, 16.94, 0, 7.52, 16.94, 0],
        #[5.39, 25.34, 0, 5.39, 25.34, 0],
        #[0.00, 36.30, 0, 0.00, 36.30, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[28.00, 45.00, 0, 28.00, 45.00, 0],
        #[28.00, 50.00, 0, 28.00, 50.00, 0],
        #[28.00, 55.00, 0, 28.00, 55.00, 0],
        #[23.00, 55.00, 0, 23.00, 55.00, 0],
        #[23.00, 50.00, 0, 23.00, 50.00, 0],
        #[23.00, 45.00, 0, 23.00, 45.00, 0], 
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0] ])
        [4.9268,    -4.5921,     0.0000,     4.9268,    -4.5921,     0.0000],
        [8.0612,    -4.8965,     0.0000,     8.0612,    -4.8965,     0.0000],
        [12.5136,    -4.3378,     0.0000,    12.5136,    -4.3378,     0.0000],
        [18.3669,    -2.2875,     0.0000,    18.3669,    -2.2875,     0.0000],
        [25.8106,     2.2006,     0.0000,    25.8106,     2.2006,     0.0000],
        [34.7230,    10.5095,     0.0000,    34.7230,    10.5095,     0.0000],
        [-2.4915,    -6.3802,     0.0000,    -2.4915,    -6.3802,     0.0000],
        [-2.5638,    -8.9293,     0.0000,    -2.5638,    -8.9293,     0.0000],
        [-0.2812,   -13.2070,     0.0000,    -0.2812,   -13.2070,     0.0000],
        [3.4774,   -18.1852,     0.0000,     3.4774,   -18.1852,     0.0000],
        [10.0415,   -23.9012,     0.0000,    10.0415,   -23.9012,     0.0000],
        [20.7426,   -29.8021,     0.0000,    20.7426,   -29.8021,     0.0000],
        [-6.7238,     0.8582,     0.0000,    -6.7238,     0.8582,     0.0000],
        [-9.4283,    -0.7966,     0.0000,    -9.4283,    -0.7966,     0.0000],
        [-12.6907,    -3.8003,     0.0000,   -12.6907,    -3.8003,     0.0000],
        [-16.2467,    -8.9284,     0.0000,   -16.2467,    -8.9284,     0.0000],
        [-19.6323,   -16.9606,     0.0000,   -19.6323,   -16.9606,     0.0000],
        [-21.9678,   -28.8952,     0.0000,   -21.9678,   -28.8952,     0.0000],
        [-1.2442,     6.6269,     0.0000,    -1.2442,     6.6269,     0.0000],
        [-3.6818,     8.7174,     0.0000,    -3.6818,     8.7174,     0.0000],
        [-7.5691,    10.8377,     0.0000,    -7.5691,    10.8377,     0.0000],
        [-13.5024,    12.6898,     0.0000,   -13.5024,    12.6898,     0.0000],
        [-22.1788,    13.4381,     0.0000,   -22.1788,    13.4381,     0.0000],
        [-34.2828,    11.9062,     0.0000,   -34.2828,    11.9062,     0.0000],
        [5.8984,     3.2696,     0.0000,     5.8984,     3.2696,     0.0000],
        [7.1483,     6.1746,     0.0000,     7.1483,     6.1746,     0.0000],
        [7.9882,    10.5482,     0.0000,     7.9882,    10.5482,     0.0000],
        [7.8661,    16.7821,     0.0000,     7.8661,    16.7821,     0.0000],
        [5.9090,    25.2240,     0.0000,     5.9090,    25.2240,     0.0000],
        [0.7451,    36.2924,     0.0000,     0.7451,    36.2924,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [28.8922,    43.1660,     0.0000,    28.8922,    43.1660,     0.0000],
        [22.7718,    49.5430,     0.0000,    22.7718,    49.5430,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [29.0205,    49.4147,     0.0000,    29.0205,    49.4147,     0.0000],
        [22.6435,    43.2943,     0.0000,    22.6435,    43.2943,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [29.1488,    55.6634,     0.0000,    29.1488,    55.6634,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [22.9001,    55.7917,     0.0000,    22.9001,    55.7917,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000] ])
    
    cs010_HBA24_center = scipy.asarray([ 6.869758056, 52.91291778, 54.10 ])
    cs010_HBA24_24 = scipy.asarray([
        #[5.02, -4.49, 0, 5.02, -4.49, 0],
        #[8.16, -4.73, 0, 8.16, -4.73, 0],
        #[12.60, -4.08, 0, 12.60, -4.08, 0],
        #[18.41, -1.91, 0, 18.41, -1.91, 0],
        #[25.76, 2.73, 0, 25.76, 2.73, 0],
        #[34.50, 11.22, 0, 34.50, 11.22, 0],
        #[-2.36, -6.43, 0, -2.36, -6.43, 0],
        #[-2.38, -8.98, 0, -2.38, -8.98, 0],
        #[-0.01, -13.21, 0, -0.01, -13.21, 0],
        #[3.85, -18.11, 0, 3.85, -18.11, 0],
        #[10.53, -23.69, 0, 10.53, -23.69, 0],
        #[21.35, -29.37, 0, 21.35, -29.37, 0],
        #[-6.74, 0.72, 0, -6.74, 0.72, 0],
        #[-9.41, -0.99, 0, -9.41, -0.99, 0],
        #[-12.61, -4.06, 0, -12.61, -4.06, 0],
        #[-16.06, -9.26, 0, -16.06, -9.26, 0],
        #[-19.28, -17.36, 0, -19.28, -17.36, 0],
        #[-21.37, -29.34, 0, -21.37, -29.34, 0],
        #[-1.38, 6.60, 0, -1.38, 6.60, 0],
        #[-3.86, 8.64, 0, -3.86, 8.64, 0],
        #[-7.79, 10.68, 0, -7.79, 10.68, 0],
        #[-13.76, 12.41, 0, -13.76, 12.41, 0],
        #[-22.45, 12.98, 0, -22.45, 12.98, 0],
        #[-34.52, 11.20, 0, -34.52, 11.20, 0] ])
        [4.9268,    -4.5921,     0.0000,     4.9268,    -4.5921,     0.0000],
        [8.0612,    -4.8965,     0.0000,     8.0612,    -4.8965,     0.0000],
        [12.5136,    -4.3378,     0.0000,    12.5136,    -4.3378,     0.0000],
        [18.3669,    -2.2875,     0.0000,    18.3669,    -2.2875,     0.0000],
        [25.8106,     2.2006,     0.0000,    25.8106,     2.2006,     0.0000],
        [34.7230,    10.5095,     0.0000,    34.7230,    10.5095,     0.0000],
        [-2.4915,    -6.3802,     0.0000,    -2.4915,    -6.3802,     0.0000],
        [-2.5638,    -8.9293,     0.0000,    -2.5638,    -8.9293,     0.0000],
        [-0.2812,   -13.2070,     0.0000,    -0.2812,   -13.2070,     0.0000],
        [3.4774,   -18.1852,     0.0000,     3.4774,   -18.1852,     0.0000],
        [10.0415,   -23.9012,     0.0000,    10.0415,   -23.9012,     0.0000],
        [20.7426,   -29.8021,     0.0000,    20.7426,   -29.8021,     0.0000],
        [-6.7238,     0.8582,     0.0000,    -6.7238,     0.8582,     0.0000],
        [-9.4283,    -0.7966,     0.0000,    -9.4283,    -0.7966,     0.0000],
        [-12.6907,    -3.8003,     0.0000,   -12.6907,    -3.8003,     0.0000],
        [-16.2467,    -8.9284,     0.0000,   -16.2467,    -8.9284,     0.0000],
        [-19.6323,   -16.9606,     0.0000,   -19.6323,   -16.9606,     0.0000],
        [-21.9678,   -28.8952,     0.0000,   -21.9678,   -28.8952,     0.0000],
        [-1.2442,     6.6269,     0.0000,    -1.2442,     6.6269,     0.0000],
        [-3.6818,     8.7174,     0.0000,    -3.6818,     8.7174,     0.0000],
        [-7.5691,    10.8377,     0.0000,    -7.5691,    10.8377,     0.0000],
        [-13.5024,    12.6898,     0.0000,   -13.5024,    12.6898,     0.0000],
        [-22.1788,    13.4381,     0.0000,   -22.1788,    13.4381,     0.0000],
        [-34.2828,    11.9062,     0.0000,   -34.2828,    11.9062,     0.0000] ])
    
    cs010_HBA4_center = scipy.asarray([ 6.869761972, 52.912921060, 54.10 ])
    cs010_HBA4_48 = scipy.asarray([
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[29.148, -10.341, 0, 29.148, -10.341, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[-26.641, -10.308, 0, -26.641, -10.308, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[-16.037, 22.476, 0, -16.037, 22.476, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[18.512, 22.549, 0, 18.512, 22.549, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0],
        #[0, 0, 0, 0, 0, 0] ])
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [28.9296,   -10.9371,     0.0000,    28.9296,   -10.9371,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [-26.8470,    -9.7590,     0.0000,   -26.8470,    -9.7590,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [-15.5723,    22.8005,     0.0000,   -15.5723,    22.8005,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [18.9710,    22.1643,     0.0000,    18.9710,    22.1643,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [28.8922,    43.1660,     0.0000,    28.8922,    43.1660,     0.0000],
        [22.7718,    49.5430,     0.0000,    22.7718,    49.5430,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [29.0205,    49.4147,     0.0000,    29.0205,    49.4147,     0.0000],
        [22.6435,    43.2943,     0.0000,    22.6435,    43.2943,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [29.1488,    55.6634,     0.0000,    29.1488,    55.6634,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [22.9001,    55.7917,     0.0000,    22.9001,    55.7917,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000],
        [0.0000,    -0.0000,     0.0000,     0.0000,    -0.0000,     0.0000] ])

    #fix old station_id numbers
    if ((station_id) > 1000):
        station_id = station_id - 1000

    #get Low or High Band
    if (rcu_settings[0].has_key('BANDSEL')):
        BANDSEL = rcu_settings[0]['BANDSEL']
    else:
        BANDSEL = 1 

    if (station_id == 501):
        if (BANDSEL):
            return [cs010_LBA_center, cs010_LBA_48]
        else:
            return [cs010_HBA_center, cs010_HBA_48]

    elif (station_id == 1):
        if (BANDSEL):
            return [cs001_LBA_center, cs001_LBA_16]
        else:
            return [cs001_HBA_center, cs001_HBA_16]

    elif (station_id == 8):
        if (BANDSEL):
            return [cs008_LBA_center, cs008_LBA_16]
        else:
            return [cs008_HBA_center, cs008_HBA_16]

    elif (station_id == 16):
        if (BANDSEL):
            return [cs016_LBA_center, cs016_LBA_16]
        else:
            return [cs016_HBA_center, cs016_HBA_16]
        
    elif (station_id == 10):
        if (BANDSEL):
            return [cs010_LBA_center, cs010_LBA_48]
        else:
            return [cs010_HBA_center, cs010_HBA_48]

    return None

