#!/usr/bin/env python
#
# Syntax: createFiles localhost [<BG/P partition>] or
#         createFiles <resultdir> <datadir> [<BG/P partition>] <stationname>
#         createFiles test <testnode1> [<testnode2>]
#         createFiles cobalt
# - localhost will create the files for the current host
# - resultdir is the root directory for the outputfiles:
#     <stationname>/etc/<files>
# - datadir is the root dir for the metadata files (e.g., /opt/lofar/etc)
# - stationname is the name of the station for which to produce the files.
#   Using 'all' as stationname will create files for all stations in file
#   StationInfo.dat
#
# The test option is to direct data streams  to the test BG/P partition
# that is setup in file StaticMetaData/RSPConnections_test.dat

import re, sys, os
from subprocess import *

warnings = []

#
# setWarning(message)
#
def setWarning(message):
    """
    Adds the given warning to the list of warnings.
    """
    warnings.append(message)


#
# Find host IP number from DNS
#
def findIPNumber(stationName):
    """
    Returns the IPnumber for a station LCU.
    In case the station is not known, it will return -1.
    """
    
    localStationName = Popen("hostname -s",shell=True, stdout=PIPE).stdout.readlines()[0].strip()[0:5].lower()
    if (localStationName == stationName):
        command = "hostname -i"
        output = Popen(command,shell=True, stdout=PIPE).stdout
        stdout = output.readlines()
        outline = stdout[0].strip()
        outwords = outline.split()
        if (len(outwords) != 1):
            return "-1"
        else:
            return outwords[0]
    else:
        # Use UNix 'host' command and catch output
        command = "getent hosts "+stationName+"C"
        output = Popen(command,shell=True, stdout=PIPE).stdout
        stdout = output.readlines()
        outline = stdout[0].strip()
        outwords = outline.split()
        if (len(outwords) < 2):
            print "Could not find IP for station, assuming 10.150.1.1"
            return "10.150.1.1"
        else:
            print "Found IP for station: ",outwords[0]
            return outwords[0]
        

#
# Copies a set of fixed test files to the config dir
# To be used when setting up a LCU for test/validation
#
def copyTestFiles(dataDir):

    for file in ["RSPDriver.conf.test","TBBDriver.conf.test",
                     "RemoteStation.conf.test","HardwareMonitor.conf.test"]:
        
        testFile = dataDir+"/"+file
        # the existence of /opt/lofar/etc has been checked in main() already
        destFile = "/opt/lofar/etc/"+file.split(".")[0]+"."+file.split(".")[1]
        command = "cp -f "+testFile+ " " + destFile
        os.system(command);
        
#
# findRSPDestNodes(stationName)
#
def findRSPDestNodes(stationName, dataDir):
    """
    Collects the destination nodes from each rspboard of the given station.
    Expected format of the RSPConnection file is:
    station  board  destinationnode  destIP       destMAC
    CS001    RSP_0  cbt007-10GB01    10.168.102.1 A0:36:9F:1F:79:04
    """
    pattern=re.compile("[^#]"+stationName+"[ \t]*RSP_([01]+)[ \t]*([^ \t\n]*)", re.IGNORECASE)
    rspDestNode = {}
    for match in pattern.finditer(open(dataDir+"/RSPConnections_Cobalt.dat").read()):
        rspDestNode[match.group(1)] = match.group(2)
    if len(rspDestNode) == 0:
        setWarning(stationName+" not found in file 'RSPConnections'")
    return rspDestNode


#
# findTBBDestNodes(stationName)
#
def findTBBDestNodes(stationName, dataDir):
    """
    Collects the destination nodes from each tbbboard of the given station.
    Expected format of the TBBConnection file is:
    station  Boeard  node
    CS001    TBB-0   locus004
    """
    # NOTE: for now we always take the first nodename
    pattern=re.compile("[^#]"+stationName+"[ \t]*TBB_([0-9]+)[ \t]*([a-zA-Z0-9]*)[, ]?.*", re.IGNORECASE)
    tbbDestNode = {}
    for match in pattern.finditer(open(dataDir+"/TBBConnections.dat").read()):
        tbbDestNode[match.group(1)] = match.group(2)
    if len(tbbDestNode) == 0:
        setWarning(stationName+" not found in file 'TBBConnections.dat'")
    return tbbDestNode

#
# findStationAttenuationValues(stationName)
#
def findStationAttenuationValues(stationName, dataDir):
    """
    Collects the Attenuation values for a given station from the file
    StationAttenuation.dat
    Expected format of the StationAttenuation file is:
    # Station AttStepSize ATT_1 ATT_2 ATT_3 ATT_4 ATT_5 ATT_6 ATT_7
    CS001     0.25        0.0   0.0   0.0   0.0   0.0   0.0   0.0

    Function returns a list with all numerical values of the stations as strings.
    """
    # NOTE: for now we always take the first nodename
    pattern=re.compile("[^#]"+stationName+"[ \t]*([0-9\. \t\n]*)", re.IGNORECASE)
    attenuationValues = pattern.findall(open(dataDir+"/StationAttenuation.dat").read())[0].split()
    if len(attenuationValues) == 0:
        setWarning(stationName+" not found in file 'StationAttenuation.dat'")
    return attenuationValues

def findIPandMAC_station(stationName, dataDir):
    """
    Based on stationname, find destination node, IP and MAC address for all RSP boards of
    that station. Use file RSPConnections_Cobalt.dat for that.
    Expected format of the RSPConnections_Coobalt file is:
    station		board	destinationnode
    CS001		RSP_0	cbt001
    """
    pattern=re.compile("[^#]"+stationName+"[ \t]*RSP_([0-1]+)[ \t]*([^ \t\n]*)[ \t]*([^ \t\n]*)[ \t]*([^ \t\n]*)", re.IGNORECASE)
    IPandMAC = []
    for match in pattern.finditer(open(dataDir+"/RSPConnections_Cobalt.dat").read()):
        IPandMAC.append([match.group(2),match.group(3),match.group(4)])

    if len(IPandMAC) == 0:
       raise "\nFatal error: "+stationName+" is not defined in file 'RSPConnections_Cobalt.dat'" 
    return IPandMAC 

#
# findIPandMAC_local(node)
#
def findIPandMAC_local(nodeName, dataDir):
    """
    Translates the given nodename to a MAC and IP address + alias name.
    """
    pattern=re.compile("^"+nodeName+"_([0-9]*)[ \t]*([0-9\.]*)[ \t]*([0-9a-fA-F:]*)[ \t]*([\S]*)", re.IGNORECASE | re.MULTILINE)
    ipAndMacAndAlias = pattern.findall(open(dataDir+"/RSPConnections_local.dat").read())
    if not ipAndMacAndAlias:
        raise "\nFatal error: "+nodeName+" is not defined in file 'RSPConnections_local.dat'"
    return ipAndMacAndAlias

#
# findIPandMAC_test(node)
#
def findIPandMAC_test(testName, dataDir):
    """
    Translates the given testName to a MAC and IP address + alias name.
    """
    pattern=re.compile("^"+testName+"[ \t]*([0-9\.]*)[ \t]*([0-9a-fA-F:]*)[ \t]*([\S]*)", re.IGNORECASE | re.MULTILINE)
    ipAndMacAndAlias = pattern.findall(open(dataDir+"/RSPConnections_test.dat").read())
    if not ipAndMacAndAlias:
        raise "\nFatal error: "+testName+" is not defined in file 'RSPConnections_test.dat'"
    return ipAndMacAndAlias

def findStorageIPandMAC(nodeName, dataDir):
    """
    Translates the given storage nodename to an MAC address and and IP address.
    """
    pattern=re.compile("^"+nodeName+"[ \t]*([0-9a-fA-F:]*)[ \t]*([0-9\.]*)", re.IGNORECASE | re.MULTILINE)
    ipAndMac = ()
    ipAndMac = pattern.search(open(dataDir+"/Storage+MAC.dat").read())
    if not ipAndMac:
        raise "\nFatal error: "+nodeName+" is not defined in file 'Storage+MAC.dat'"
    return ipAndMac.group(2), ipAndMac.group(1)

#
# findBlets(stationName)
#
def find_Blets(stationName, dataDir):
    """
    Collects the RSP Blet outputs of the given station.
    Expected format of the RSP_Blet file is:
    #station     LANE_0     LANE_1
    CS001        0 1 2 3    6 7 8 9

    Note that RS and International have only LANE_0 filled as these stations
    have no splitter.
    """
    pattern=re.compile("[^#]"+stationName+"[ \t].*", re.IGNORECASE)
    rspBlets = pattern.search(open(dataDir+"/RSPBlet.dat").read())

    if not rspBlets:
        raise "\nFatal error: "+stationName+" is not defined in file 'RSPBlet.dat'"
    return rspBlets.group().split()


#
# findAllStations()
#
def findAllStations(dataDir):
    """
    Return a list of all stationnames that are found in file StationInfo
    """
    pattern = re.compile("^[A-Z][A-Z][0-9][0-9][0-9]",re.IGNORECASE | re.MULTILINE)
    match = pattern.findall(open(dataDir+"/StationInfo.dat").read())
    if not match:
        raise "\nFatal error: could not find any stationnames in file 'StationInfo.dat'"
    return match

#
# findStationInfo(stationName)
#
def findStationInfo(stationName, dataDir):
    """
    Return all basic station info (eg. nr RSPboards) from a station.
    """
    pattern=re.compile("^"+stationName+"[ \t].*", re.IGNORECASE | re.MULTILINE)
    match = pattern.search(open(dataDir+"/StationInfo.dat").read())
    if not match:
        raise "\nFatal error: "+stationName+" is not defined in file StationInfo.dat"
    info = match.group().split()
    if (len(info) != 13):
        raise "\nFatal error: Data of "+stationName+" is not complete in file StationInfo.dat"
    return info

def createCCURSPConnectionsFile(resultDir, dataDir):
   """
   Copy the static file RSPConnections_Cobalt.dat from StaticMetaData to
   the /opt/lofar/etc. Can be adapted later for more flexible behaviour
   """
   CCU_RSPFile = dataDir + "/RSPConnections_Cobalt.dat"
   destFile = resultDir + "/RSPConnections_Cobalt.dat"
   command = "cp -f "+ CCU_RSPFile + " " + destFile
   os.system(command);

def createRSPConnectionsFile_cobalt(resultDir, dataDir):
    """
    Copies file RSPConnections_Cobalt.dat to RSPConnections.dat
    """
    srcFile = dataDir + "/RSPConnections_Cobalt.dat"
    if (os.access(srcFile,os.F_OK) == False):
        print "Cannot find or open file ",srcFile," for creating RSPConnections.dat"
        return -1
    else:
        destFile = resultDir + "/RSPConnections.dat"

    command = "cp -f "+srcFile+ " " + destFile
    os.system(command)
    return 


def createRSPDriverFile(resultDir, stationName, dataDir,int_local,is_Cobalt):
    """
    Fills in the markers in the RSPDriver.dat.tmpl file to match the values for the given station.
    """
    # First create RSPConnections.dat with Cobalt filled in.
    createRSPConnectionsFile_cobalt(resultDir, dataDir)
    
    # Find connections of the RSPBoards of the station
    rspDestNode = findRSPDestNodes(stationName, dataDir)
    print stationName,"matches:",rspDestNode

    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal, Aartfaac ) = findStationInfo(stationName, dataDir)

    # Substitute MAC and IP address of destination nodes
    RSPfile = open(dataDir+"/RSPDriver.conf.tmpl")
    RSPconfig = RSPfile.read()
    RSPfile.close()
    # Find Ip number station
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')

    # Extract station number from its name
    stationNr = int(name[2:])

    # International stations can be identified by the second part of their IP address
    is_core_station = name[:2] == "CS"
    is_int_station = (ip_parts[1] != "151")

    # Need globally unique IP port numbers.
    basePort = 10000 + stationNr * 10

    if (is_int_station and int_local == 1):

        print "International station in local mode"
        # International station in local mode takes dest. MAC/IP info from
        # separate file 
        dstip_mac_alias = findIPandMAC_local(stationName,dataDir)
        # International stations still need old (BG) portnumbers
        basePort = 0x10FA
        for rspNr in range(len(dstip_mac_alias)):  
            blet_out = find_Blets(stationName, dataDir)[1+rspNr];

            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_BLET@", blet_out) 
            # Need to fill this in until RSPDriver is fixed...
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_BLET@", blet_out)
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_MAC@", dstip_mac_alias[rspNr][2] +"   # "+dstip_mac_alias[rspNr][3])
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_IP@",  dstip_mac_alias[rspNr][1])
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_PORT@", str(basePort + rspNr))
    else:
        # NL and Int. stations in ILT mode
        IPandMAC = findIPandMAC_station(stationName, dataDir)
        nrNodes = len(IPandMAC) # Number of occurences in file

        # Core stations have two streams (these have a splitter), and so
        # for these we need to fill in LANE0x and LANE1x values.
        # All other stations have one stream, so only LANE_0x is relevant.

        # International stations can have 1, 2, or 4 entries
        if is_core_station:
            node = IPandMAC[1][0]
            dstip = IPandMAC[1][1]
            mac = IPandMAC[1][2]
            for rspNr in range(4):
                blet_out = find_Blets(stationName, dataDir)[5+rspNr];
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_MAC@", mac +"   # "+ node)
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_IP@",  dstip)
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_PORT@", str(basePort + 6 + rspNr))
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_BLET@", blet_out)
        
        for rspNr in range(4):
            if is_int_station and is_Cobalt:
                # Cobalt nodes are part of the international station VLANs,
                # allowing routing to x.x.x.100 to x.x.x.110 (with x.x.x.x being the RSP board IPs).
                #
                # intl nodes can have 1, 2, or 4 entries
                if nrNodes == 1:
                  dstip = IPandMAC[0][1]
                elif nrNodes == 2:
                  dstip = IPandMAC[rspNr/2][1]
                else: # nrNodes == 4
                  dstip = IPandMAC[rspNr][1]

                node = IPandMAC[0][0]
                mac = IPandMAC[0][2]
            else:
                node = IPandMAC[0][0]
                dstip = IPandMAC[0][1]
                mac = IPandMAC[0][2]

            #print node, ip, mac
            blet_out = find_Blets(stationName, dataDir)[1+rspNr];
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_MAC@", mac +"   # "+node)
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_IP@",  dstip)
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_PORT@", str(basePort + rspNr))
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_BLET@", blet_out) 

            # Need to fill this in until RSPDriver is fixed...
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_BLET@", blet_out)

            # The following is only necessary for not crashing the
            # RSPDriver during startup.... It makes no sense as RS/Int
            # stations have no splitter so there is no LANE_1X
            if (nrNodes == 1):
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_MAC@", mac +"   # "+node)
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_IP@",  dstip)
                RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_PORT@", str(basePort + 6 + rspNr))

    # Find IP address for RSP board ethernet. All NL stations have RSP address
    # like 10.175.x.x, Non-NL station must be looked up 
    if not is_int_station:
        ip_prefix = "175" # NL stations; FIXED!

        # SOURCE IP contains information on which Cobalt iface to send to, to help
        # Cobalt route the packet.
        for rspNr in range(4):
            dstip = IPandMAC[0][1]
            dstiface = dstip.split('.')[3] # 1 = 10GB01 ... 4 = 10GB04
            RSPconfig = RSPconfig.replace("@IP_SUBNET_0"+str(rspNr)+"@", dstiface) 

        # Core stations should have Splitter set to 1; others to 0.
        if is_core_station:
            RSPconfig = RSPconfig.replace("@LAST_XLET_OUT@",  "11")

            # SOURCE IP contains information on which Cobalt iface to send to, to help
            # Cobalt route the packet.
            for rspNr in range(4):
                dstip = IPandMAC[1][1]
                dstiface = dstip.split('.')[3] # 1 = 10GB01 ... 4 = 10GB04
                RSPconfig = RSPconfig.replace("@IP_SUBNET_1"+str(rspNr)+"@", dstiface) 
                RSPconfig = RSPconfig.replace("@IP_EXTEN_1"+str(rspNr)+"@",  ip_parts[2])
      
        hexStationID = str("%02x" % int(stationName[3:6]))
        ringID = '0'+stationName[2]
        RSPconfig = RSPconfig.replace("@STATION_NAME@", stationName.upper())
        RSPconfig = RSPconfig.replace("@RING_ID@",   ringID)
        RSPconfig = RSPconfig.replace("@STATION_HID@",  hexStationID)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_00@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_01@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_02@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_03@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_EXTEN_00@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_01@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_02@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_03@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@FIRST_XLET_OUT@",  "5")
    else: # Non-NL station
        int_station_nr = int(stationName[3:6]) % 100 # DE605 -> 5
        hexStationID = str("%02x" % int_station_nr)
        ringID = '0'+stationName[2]
        RSPconfig = RSPconfig.replace("@STATION_NAME@", stationName.upper())
        RSPconfig = RSPconfig.replace("@RING_ID@",   ringID)
        RSPconfig = RSPconfig.replace("@STATION_HID@",  hexStationID)
        RSPconfig = RSPconfig.replace("@FIRST_XLET_OUT@",  "5")
        RSPconfig = RSPconfig.replace("@LAST_XLET_OUT@",  "23")
        # International station in local mode takes dest. MAC/IP info from
        # separate file 
        if int_local == 1:
          IPandMAC = findIPandMAC_local(stationName,dataDir)
        else:
          IPandMAC = findIPandMAC_station(stationName, dataDir)

        int_station_nr = int(stationName[3:6]) % 100 # DE605 -> 5
        
        nrNodes = len(IPandMAC) # Number of occurences in file
        for rspNr in range(4):        
            # intl nodes can have 1, 2, or 4 entries, for which we need an even
            # distribution
            if nrNodes == 1:
              srcip = IPandMAC[0][1]
              srcip_suffix = rspNr + 1
            elif nrNodes == 2:
              srcip = IPandMAC[rspNr/2][1]
              srcip_suffix = rspNr % 2 + 1
            else: # nrNodes == 4
              srcip = IPandMAC[rspNr][1]
              srcip_suffix = 1

            rspip_parts = srcip.split('.')
            repl_str = "@IP_PREFIX_0"+str(rspNr)+"@"
            RSPconfig = RSPconfig.replace(repl_str, rspip_parts[1])
            repl_str = "@IP_SUBNET_0"+str(rspNr)+"@"
            if int(rspip_parts[2]) > 1:
              RSPconfig = RSPconfig.replace(repl_str, rspip_parts[2])
            else:
              # Some stations share VLANs, and get srcip 10.vlan.1.board, which would be equal for all stations. In those cases we will use srcip 10.vlan.stationnr.board
              RSPconfig = RSPconfig.replace(repl_str, str(int_station_nr))
            repl_str = "@IP_EXTEN_0"+str(rspNr)+"@"
            RSPconfig = RSPconfig.replace(repl_str, str(srcip_suffix))
            
    RSPconfig = setAttenuationSettings(RSPconfig, stationName, dataDir)                       
    outFile = os.open(dataDir+"/RSPDriver.conf.tmp", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, RSPconfig)
    os.close(outFile)


    # An ugly way to get rid of all lines in the template file that are not
    # filled yet.
    cmd = "grep -v '@' "+dataDir+"/RSPDriver.conf.tmp > "+resultDir+"/RSPDriver.conf";
    os.system(cmd);

def createRSPDriverFile_Test(resultDir, stationName, dataDir, alias):
    """
    Fills in the markers in the RSPDriver.conf file to match the values for the given station in test mode.
    """
    # Find connections of the RSPBoards of the station
    rspDestNode = findRSPDestNodes(stationName, dataDir)
    #print stationName,"matches:",rspDestNode

    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal, Aartfaac ) = findStationInfo(stationName, dataDir)

    # Substitute MAC and IP address of destination nodes
    RSPfile = open(dataDir+"/RSPDriver.conf.tmpl")
    RSPconfig = RSPfile.read()
    RSPfile.close()
    # Find Ip number station
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')

    # Extract station number from its name
    stationNr = int(name[2:])

    # International stations can be identified by the second part of their IP address
    is_core_station = name[:2] == "CS"
    is_int_station = (ip_parts[1] != "151")

    # Need globally unique IP port numbers.
    basePort = 10000 + stationNr * 10

    ip_mac_alias = findIPandMAC_test(alias[0],dataDir)
    for rspNr in range(4):  
            blet_out = find_Blets(stationName, dataDir)[1+rspNr];

            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_BLET@", blet_out) 
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_MAC@", ip_mac_alias[0][1] +"   # "+ip_mac_alias[0][2])
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_IP@",  ip_mac_alias[0][0])
            RSPconfig = RSPconfig.replace("@LANE_0"+str(rspNr)+"_PORT@", str(basePort + rspNr))
    if (len(alias) == 2):
        # Assume core station; fill in LANE_1, as well
        ip_mac_alias_1 = findIPandMAC_test(alias[1],dataDir)
        for rspNr in range(4):  
            blet_out = find_Blets(stationName, dataDir)[5+rspNr];
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_MAC@", ip_mac_alias_1[0][1] +"   # "+ip_mac_alias_1[0][2])
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_IP@",  ip_mac_alias_1[0][0])
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_PORT@", str(basePort + 6 + rspNr))
            RSPconfig = RSPconfig.replace("@LANE_1"+str(rspNr)+"_BLET@", blet_out) 

    # Find IP address for RSP board ethernet. All NL stations have RSP address
    # like 10.175.x.x, Non-NL station must be looked up 
    if not is_int_station:
        ip_prefix = "175" # NL stations; FIXED!

        # SOURCE IP contains information on which Cobalt iface to send to, to help
        # Cobalt route the packet.
        for rspNr in range(4):
            dstip = ip_mac_alias[0][0]
            dstiface = dstip.split('.')[3] # 1 = 10GB01 ... 4 = 10GB04
            RSPconfig = RSPconfig.replace("@IP_SUBNET_0"+str(rspNr)+"@", dstiface) 

        # Core stations should have Splitter set to 1; others to 0.
        if is_core_station:
            RSPconfig = RSPconfig.replace("@LAST_XLET_OUT@",  "11")

            # SOURCE IP contains information on which Cobalt iface to send to, to help
            # Cobalt route the packet.
            for rspNr in range(4):
                dstip = ip_mac_alias_1[0][0]
                dstiface = dstip.split('.')[3] # 1 = 10GB01 ... 4 = 10GB04
                RSPconfig = RSPconfig.replace("@IP_SUBNET_1"+str(rspNr)+"@", dstiface) 
                RSPconfig = RSPconfig.replace("@IP_EXTEN_1"+str(rspNr)+"@",  ip_parts[2])

      
        hexStationID = str("%02x" % int(stationName[3:6]))
        ringID = '0'+stationName[2]
        RSPconfig = RSPconfig.replace("@STATION_NAME@", stationName.upper())
        RSPconfig = RSPconfig.replace("@RING_ID@",   ringID)
        RSPconfig = RSPconfig.replace("@STATION_HID@",  hexStationID)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_00@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_01@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_02@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_PREFIX_03@",   ip_prefix)
        RSPconfig = RSPconfig.replace("@IP_EXTEN_00@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_01@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_02@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@IP_EXTEN_03@",   ip_parts[2])
        RSPconfig = RSPconfig.replace("@FIRST_XLET_OUT@",  "5")

    else: # Non-NL station
        int_station_nr = int(stationName[3:6]) % 100 # DE605 -> 5
        hexStationID = str("%02x" % int_station_nr)
        ringID = '0'+stationName[2]
        RSPconfig = RSPconfig.replace("@STATION_NAME@", stationName.upper())
        RSPconfig = RSPconfig.replace("@RING_ID@",   ringID)
        RSPconfig = RSPconfig.replace("@STATION_HID@",  hexStationID)
        RSPconfig = RSPconfig.replace("@FIRST_XLET_OUT@",  "5")
        RSPconfig = RSPconfig.replace("@LAST_XLET_OUT@",  "23")
        IPandMAC = findIPandMAC_station(stationName, dataDir)
        nrNodes = len(IPandMAC) # Number of occurences in file -- we divide boards equally
        for rspNr in range(4):        
            # intl nodes can have 1, 2, or 4 entries, for which we need an even
            # distribution
            if nrNodes == 1:
              srcip = IPandMAC[0][1]
              srcip_suffix = rspNr + 1
            elif nrNodes == 2:
              srcip = IPandMAC[rspNr/2][1]
              srcip_suffix = rspNr % 2 + 1
            else: # nrNodes == 4
              srcip = IPandMAC[rspNr][1]
              srcip_suffix = 1

            rspip_parts = srcip.split('.')                
            repl_str = "@IP_PREFIX_0"+str(rspNr)+"@"
            RSPconfig = RSPconfig.replace(repl_str, rspip_parts[1])
            repl_str = "@IP_SUBNET_0"+str(rspNr)+"@"
            if int(rspip_parts[2]) > 1:
              RSPconfig = RSPconfig.replace(repl_str, rspip_parts[2])
            else:
              # Some stations share VLANs, and get srcip 10.vlan.1.board, which would be equal for all stations. In those cases we will use srcip 10.vlan.stationnr.board
              RSPconfig = RSPconfig.replace(repl_str, str(int_station_nr))
            repl_str = "@IP_EXTEN_0"+str(rspNr)+"@"
            RSPconfig = RSPconfig.replace(repl_str, str(srcip_suffix))
    RSPconfig = setAttenuationSettings(RSPconfig, stationName, dataDir)                    
    outFile = os.open(dataDir+"/RSPDriver.conf.tmp", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, RSPconfig)
    os.close(outFile)

    # An ugly way to get rid of all lines in the template file that are not
    # filled yet.
    cmd = "grep -v '@' "+dataDir+"/RSPDriver.conf.tmp > "+resultDir+"/RSPDriver.conf";
    os.system(cmd);

    if 0:
        # Adapt RSPConnections.dat on bgfen1 (for routing of data to test IO nodes)
        # First remove existing entries
        print "Adapting /opt/lofar/etc/RSPConnections.dat on bgfen1"
        cmd = "ssh 10.170.200.11 sed -i /^"+stationName.upper()+".*/d /opt/lofar/etc/RSPConnections.dat"
        os.system(cmd);
        ip_mac_alias = findIPandMAC_test(alias[0],dataDir)
        cmd = "ssh 10.170.200.11 'echo "+stationName.upper()+" RSP_0 "+ip_mac_alias[0][2]+" >> /opt/lofar/etc/RSPConnections.dat'"
        os.system(cmd);

        if (stationName[0:2].upper() == "CS"):
            ip_mac_alias = findIPandMAC_test(alias[1],dataDir)
            cmd = "ssh 10.170.200.11 'echo "+stationName.upper()+" RSP_1 "+ip_mac_alias[0][2]+" >> /opt/lofar/etc/RSPConnections.dat'"
            os.system(cmd);
        

def createTBBDriverFile(resultDir, stationName, dataDir):
    """
    Fills in the markers in the TBBDriver.conf file to match the values for the given station.
    """
    # Find connections of the TBBBoards of the station
    tbbDestNode = findTBBDestNodes(stationName, dataDir)
    #print stationName,"matches:",tbbDestNode

    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal, Aartfaac ) = findStationInfo(stationName, dataDir)
    #print stationName," has ",nrTBB," TBBoards"
    
    # Substitute MAC and IP address of destination nodes
    # For locus (CEP2) nodes, the MAC must be the MAC of a Gateway, not the
    # locus node.
    TBBfile = open(dataDir+"/TBBDriver.conf.tmpl")
    TBBconfig = TBBfile.read()
    TBBfile.close()
    for tbbNr in range(0,int(nrTBB)):
        if (len(tbbDestNode) == 1):
            DestNode=tbbDestNode["0"]
            #print DestNode
            (ip, mac) = findStorageIPandMAC(DestNode, dataDir)
            
            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC@", mac)
            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC_NAME@","Gateway")
            #print tbbNr, ip, mac

            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_IP@",  ip)
            TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_NAME@",tbbDestNode["0"]  )

        else:
            if str(tbbNr) in tbbDestNode.keys():
                (ip, mac) = findStorageIPandMAC(tbbDestNode[str(tbbNr)], dataDir)
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC_NAME@","Gateway")
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_MAC@", mac)
                     
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_IP@",  ip)
                TBBconfig = TBBconfig.replace("@TBB_"+str(tbbNr)+"_DST_NAME@",tbbDestNode[str(tbbNr)]  )

    # substitute StationInfo
    # Find IP number of data sending side of TBB board; use LCU's IP as basis
    # for the ip prefix and subnet 
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')
    if (ip_parts[1] == "151"):
        ip_prefix = "175"
    else:
        ip_prefix = "174"
    
    hexStationID = str("%02x" % int(stationName[3:6]))
    ringID = '0'+stationName[2]
    
    TBBconfig = TBBconfig.replace("@STATION_NAME@", stationName.upper())
    TBBconfig = TBBconfig.replace("@STATION_HID@",  hexStationID)
    TBBconfig = TBBconfig.replace("@STATION_ID@",   stationID)
    TBBconfig = TBBconfig.replace("@RING_ID@",   ringID)
    TBBconfig = TBBconfig.replace("@IP_PREFIX@",   ip_prefix)
    TBBconfig = TBBconfig.replace("@IP_SUBNET@",   ip_parts[2])
    outFile = os.open(dataDir+"/TBBDriver.conf.tmp", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, TBBconfig)
    os.close(outFile)
    # An ugly way to get rid of all lines in the template file that are not
    # filled yet.
    cmd = "grep -v '@' "+dataDir+"/TBBDriver.conf.tmp > "+resultDir+"/TBBDriver.conf";
    os.system(cmd);
    
def createRemoteStationFile(resultDir, stationName, dataDir):
    """
    Fills in the markers in the RemoteStation.conf file to match the values for the given station.
    """
    (name, stationID, stnType, long, lat, height, nrRSP, nrTBB, nrLBA, nrHBA, HBAsplit, LBAcal, Aartfaac ) = findStationInfo(stationName, dataDir)
    RSconfig = open(dataDir+"/RemoteStation.conf.tmpl").read()
    RSconfig = RSconfig.replace("@STATION_NAME@", stationName.upper())
    RSconfig = RSconfig.replace("@STATION_ID@",   stationID)
    RSconfig = RSconfig.replace("@NR_RSP@",       nrRSP)
    RSconfig = RSconfig.replace("@NR_TBB@",       nrTBB)
    RSconfig = RSconfig.replace("@NR_LBA@",       nrLBA)
    RSconfig = RSconfig.replace("@NR_HBA@",       nrHBA)
    RSconfig = RSconfig.replace("@HBA_SPLIT@",    HBAsplit)
    RSconfig = RSconfig.replace("@LBA_WIDE@",     LBAcal)
    RSconfig = RSconfig.replace("@AARTFAAC@",     Aartfaac)

    outFile = os.open(resultDir+"/RemoteStation.conf", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, RSconfig)
    os.close(outFile)


def setAttenuationSettings(RSPconfig, stationName, dataDir):
    """
    setAttenuationSettings fills in the Attenuation setting in RSPDriver.conf
    """
    attenuationValues = findStationAttenuationValues(stationName, dataDir)
    if len(attenuationValues) > 0:
      RSPconfig = RSPconfig.replace("@ATT_STEP_SIZE@", attenuationValues[0])
      for rcumode in range(1,8):
        RSPconfig = RSPconfig.replace("@ATT_MODE_"+str(rcumode)+"@", attenuationValues[rcumode])
    return RSPconfig
    
def createAntennaArraysFile(resultDir, stationName, dataDir):
    """
    Copies the right AntennaArrays.conf file for this station
    """
    stationName = stationName.upper()
    if stationName[0:2] == "CS":
        srcFile = dataDir + "/AntennaArrays_CS.conf"
    elif stationName[0:2] == "RS":
        srcFile = dataDir + "/AntennaArrays_RS.conf"
    else:
        srcFile = dataDir + "/AntennaArrays_Int.conf"
    
    if (os.access(srcFile,os.F_OK) == False):
        print "Cannot find or open file ",srcFile," for creating AntennaArrays.conf"
        print "Will create AntennaArrays_default.conf instead"
        srcFile = dataDir + "/AntennaArrays_default.conf"
        destFile= resultDir + "/AntennaArrays.conf"
    else:
        destFile = resultDir + "/AntennaArrays.conf"

    command = "cp -f "+srcFile+ " " + destFile
    os.system(command)

def createAntennaFieldFile(resultDir, stationName, dataDir):
    """
    Copies the right AntennaField.conf file for this station
    """
    # Copy file <stationname>-antennafield.conf> to
    # /opt/lofar/etc/AntennaField.conf
    srcFile = dataDir + "/" + stationName.upper() + "-AntennaField.conf"
    if (os.access(srcFile,os.F_OK) == False):
        print "Cannot find or open file ",srcFile," for creating AntennaField.conf"
        print "Will create AntennaField_default.conf instead"
        srcFile = dataDir + "/AntennaField_default.conf"
        destFile= resultDir + "/AntennaField.conf"
    else:
        destFile = resultDir + "/AntennaField.conf"

    command = "cp -f "+srcFile+ " " + destFile
    #print command
    os.system(command)


def createCableDelaysFile(resultDir, stationName, dataDir):
    """
    Copies the right CableDelays.conf file for this station
    """
    # Copy file <stationname>-cabledelays.conf> to
    # /opt/lofar/etc/CableDelays.conf
    
    # stationName is in lowercase!
    srcFile = dataDir + "/" + stationName.upper() + "-CableDelays.conf"
    if (os.access(srcFile,os.F_OK) == False):
        print "Cannot find or open file ",srcFile," for creating CableDelays.conf"
        print "Will create CableDelays_default.conf instead"
        srcFile = dataDir + "/CableDelays_default.conf"
        destFile= resultDir + "/CableDelays.conf"
    else:
        destFile = resultDir + "/CableDelays.conf"
    
    command = "cp -f "+srcFile+ " " + destFile
    #print command
    os.system(command)

def createiHBADeltasFile(resultDir, stationName, dataDir):
    """
    Copies the right iHBADeltas.conf file for this station
    """
    # Copy file <stationname>-iHBADeltas.conf> to
    # /opt/lofar/etc/iHBADeltas.conf
    
    # stationName is in lowercase!
    srcFile = dataDir + "/" + stationName.upper() + "-iHBADeltas.conf"
    if (os.access(srcFile,os.F_OK) == False):
        print "Cannot find or open file ",srcFile," for creating iHBADeltas.conf"
        print "Will create iHBADeltas_default.conf instead"
        srcFile = dataDir + "/iHBADeltas_default.conf"
        destFile= resultDir + "/iHBADeltas.conf"
    else:
        destFile = resultDir + "/iHBADeltas.conf"

    command = "cp -f "+srcFile+ " " + destFile
    #print command
    os.system(command)
    
def createHardwareMonitorFile(resultDir, stationName, dataDir, last_ip="3"):
    """
    Creates the right HardwareMonitor.conf file for this station

    """
    # Find Ip number station
    ipnumber = findIPNumber(stationName)
    ip_parts = ipnumber.split('.')
    ip_parts[3] = last_ip
    HWMip = ip_parts[0]+"."+ip_parts[1]+"."+ip_parts[2]+"."+ip_parts[3]
    HWMfile = open(dataDir+"/HardwareMonitor.conf.tmpl")
    HWMconfig = HWMfile.read()
    HWMfile.close()
    HWMconfig = HWMconfig.replace("@STATION@",   stationName.upper())
    HWMconfig = HWMconfig.replace("@IP_ENV_CONTR@", HWMip)
    outFile = os.open(resultDir+"/HardwareMonitor.conf", os.O_RDWR|os.O_CREAT|os.O_TRUNC)
    os.write(outFile, HWMconfig)
    os.close(outFile)
    

def stationExceptions(resultDir, stationName, dataDir):
    """
    Handle exceptional files for some stations
    """
    if (stationName.lower() == "fi609"):
        # Reinstall HardwareMonitor.conf with FI609 specific IP for EC
        createHardwareMonitorFile(resultDir, stationName, dataDir, "103")
        
if __name__ == "__main__":

    if (len(sys.argv) == 1):
        print "Provide arguments:"
        print sys.argv[0]+" localhost [local] or"
        print sys.argv[0]+" <resultdir> <datadir> <stationname> [local] or"
        print " - For setting up station-based LCU use option 'localhost'"
        print " - <stationame(s)> can be the name of one or more stations, or 'all'"
        print " - local is for setup of local usage of International Stations"
        sys.exit(1)
    

    # If argument is localhost, we can safely assume we are running on a station
    # LCU and we need to create the config files for this station. They must be
    # put in /opt/lofar/etc; the required datafiles will be in directory
    # /opt/lofar/etc/StaticMetaData

    if (sys.argv[1] == "localhost" or sys.argv[1] == "test"):
        # Find out stationname from command 'hostname -s'
        stationName = Popen("hostname -s",shell=True, stdout=PIPE).stdout.readlines()[0].strip()[0:5].lower()
        if (len(stationName) > 0) :
            if (os.path.exists("/opt/lofar/etc")):
                resultDir = "/opt/lofar/etc"
                dataDir = resultDir + "/StaticMetaData"
            else:
                print "Cannot find output directory /opt/lofar/etc"
                sys.exit(1)

            # If the hostname is like 'lcu001', this lcu is set up to be tested
            # in the lab before a station is assigned. We can then use a set of
            # fixed test configuration files.
            alias = []
            if (stationName[0:3] == "lcu"):
                copyTestFiles(dataDir)
            else:
                int_local=0
                is_Cobalt=1
                if (sys.argv[1] == "test"):
                    # station in test mode; get desired RSPconnections from command
                    # line (using aliasnames in file RSPConnections_test.dat)
                    if (len(sys.argv) == 4):
                        alias=[sys.argv[2],sys.argv[3]]
                    else:
                        alias=[sys.argv[2]]
                elif(sys.argv[1] == "cobalt"):
                    is_Cobalt=1
                elif (len(sys.argv) == 3):
                    if (sys.argv[2] == "local"):
                        int_local=1
                        is_Cobalt=0

                if (stationName[0:3].upper() == "CCU"):
                    # CCU needs RSPConnections.dat for CEP in PVSS
                    createCCURSPConnectionsFile(resultDir, dataDir)
                    if (stationName.upper() == "CCU09"):
                        print "Please manually adapt /opt/lofar/etc/RSPConnections_CCU.dat for test stations"
                else:
                    if (sys.argv[1] == "test"):
                        print "Setting up station "+stationName+" for TEST use"
                    elif (int_local == 0):
                        print "Setting up station "+stationName+" for ILT use"

                    else:
                        print "Setting up station "+stationName+" for LOCAL use"

                    if (sys.argv[1] == "test"):
                        createRSPDriverFile_Test(resultDir, stationName, dataDir, alias)
                    else:
                        createRSPDriverFile(resultDir, stationName, dataDir,int_local,is_Cobalt)
                    
                    createTBBDriverFile    (resultDir, stationName, dataDir)
                    createRemoteStationFile(resultDir, stationName, dataDir)
                    createAntennaArraysFile(resultDir, stationName, dataDir)
                    createAntennaFieldFile (resultDir, stationName, dataDir)
                    createCableDelaysFile  (resultDir, stationName, dataDir)
                    createiHBADeltasFile   (resultDir, stationName, dataDir)
                    createHardwareMonitorFile(resultDir, stationName, dataDir)
                    stationExceptions        (resultDir, stationName, dataDir)
        else:
            print "Cannot determine stationname"
            sys.exit(1)
    else:
        # We are not running on a station LCU. The user needs to provide
        # where we can find and put files, and for which station.
    
        if (len(sys.argv) < 4):
            print "Provide rootdir for output files, dir for datafiles, stationname(s) (or 'all')."
            sys.exit(1)
    
        resultRoot = sys.argv[1]
        dataDir = sys.argv[2]
        stationList = []
        is_Cobalt=1
        
        if sys.argv[3] == "all":
            stationList = findAllStations(dataDir)
        else:
            stationList = [sys.argv[3]]
        
        int_local=0
        if (len(sys.argv) > 4):
            if sys.argv[4] == "local":
                int_local=1
                is_Cobalt=0

        for stationName in stationList:
            resultDir = resultRoot+"/"+stationName+"/"
            if os.path.exists(resultDir):
                for oldfile in os.listdir(resultDir):
                    os.remove(resultDir+"/"+oldfile)
            else:
                os.makedirs(resultDir)

            createRSPDriverFile    (resultDir, stationName, dataDir,int_local,is_Cobalt) 
            createTBBDriverFile    (resultDir, stationName, dataDir)
            createRemoteStationFile(resultDir, stationName, dataDir)
            createAntennaArraysFile(resultDir, stationName, dataDir)
            createAntennaFieldFile (resultDir, stationName, dataDir)
            createCableDelaysFile  (resultDir, stationName, dataDir)
            createiHBADeltasFile   (resultDir, stationName, dataDir)
            createHardwareMonitorFile(resultDir, stationName, dataDir)
            stationExceptions        (resultDir, stationName, dataDir)
        
    if len(warnings) > 0:
        print "The following warnings occured:"
        print warnings



 
