V 11
1
LANG:1 16 childStateBorder
PANEL,-1 -1 582 91 N "_3DFace" 0
"main()
{
  baseDP = \"LOFAR_ObsSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";
  // check if MACScheduler pointenabled and accessible
  if (dpExists(activeObsDP)) {
    if (dpConnect(\"updateActiveObservations\", activeObsDP+\":_online.._value\",
                                              activeObsDP+\":_online.._invalid\") == -1) {
      LOG_ERROR(\"ObservationFlow.pnl:main|Couldn't connect to: \"+activeObsDP);
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"ObservationFlow.pnl:main|Couldn't find DP to connect to: \"+activeObsDP);
  }	
}
" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  70 70
""0  1
E "#uses \"navPanel.ctl\"

string baseDP          = \"\";
bool   bDoubleClicked  = false;
dyn_string observationsList;
dyn_string oldObservationsList;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
string activeObsDP = \"\";
string database;
bool selectedObservations=false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(\"Observations\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
  
  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"observationFlow.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Observations\",\"ChangeTab\");
  }

  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

// routine for right mouse click
void rClick() {
  navPanel_setEvent(\"Observations\",\"EventRightClick\");
}

void updateActiveObservations(string dp1, dyn_string obs,
                              string dp2, bool invalid)
{

  // remove pipelines from the list
  for (int i=dynlen(obs);i > 0;  i--) if (!navFunct_isObservation(obs[i])) dynRemove(obs,i);
  
  activeObservations = obs;
  // if there are selected observation check the observationsList if those selected observations still are active
  // remove the unactive observations from the list  
  
  // replace old observations if there are no observations selected
  if (selectedObservations) {
    for (int i=dynlen(observationsList); i < 1; i--) {
      int idx = dynContains(activeObservations,observationsList[i]);
      if (i <= 0) dynRemove(observationsList,i);
    }
    if (dynlen(observationsList) ==0) {
      selectedObservations=false;
    }
  }
  
  if (!selectedObservations) {
    observationsList = activeObservations;
  }
  
  LOG_DEBUG(\"ObservationFlow.pnl:updateActiveObservations|observationList: \"+observationsList);
  connectObservations();
}

// connect to all observations in the observationsList
void connectObservations() {
  string obsDP=\"\";
  dyn_string dpList;

  dynClear(dpList);
  if (dynlen(observationsList) > 0) {
    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      // get real name from claimmanager
      obsDP=claimManager_nameToRealName(\"LOFAR_ObsSW_\"+observationsList[i]);
      if (dpExists(obsDP)) {
        dynAppend(dpList, obsDP+\".status.state\");
        dynAppend(dpList, obsDP+\".status.childState\");
      }
    }
    LOG_DEBUG(\"ObservationFlow.pnl:connectObservations|connecting : \"+dpList);
  }
  oldObservationsList=observationsList;
  
  if (dynlen(dpList) < 1) {
    setStates(0,0);
    return;
  }
  if (dpConnect(\"updateObservations\",dpList) == -1) {
    LOG_ERROR(\"ObservationFlow.pnl:connectObservations|ERROR: couldn't connect to : \"+dpList+ \" \" + getLastError());
  }
}
 
void updateObservations(dyn_string dps,dyn_string values) {
 LOG_DEBUG(\"ObservationFlow.pnl:updateObservations| dps:    \" + \"updateObservations values: \"+values);
  // determine the highest state and the highest childState, and add those to the observationsObject
  int highestState=0;
  int highestChildState=0;
  
  for (int i= 1; i<= dynlen(dps); i++) {
    if (strpos(dps[i],\"status.state\") >= 0 && values[i] > highestState) {
      highestState=values[i];
    } else if (strpos(dps[i],\"status.childState\") >= 0 && values[i] > highestChildState) {
      highestChildState=values[i];
    }
  }
  string ttip = \"Observations: <\\n>\";
  for (int i=1; i<= dynlen(observationsList);i++) ttip += observationsList[i]+\"</n>\";
  setValue(\"childStateBorder\",\"toolTipText\",ttip);
  setStates(highestState,highestChildState);
}



void setStates(int state, int childState) {
   string SymbolCol;

   SymbolCol = getStateColor(childState);
   setValue(\"childStateBorder\", \"foreCol\", SymbolCol);

   SymbolCol = getStateColor(state);
   setValue(\"childStateBorder\", \"backCol\", SymbolCol);
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 1
"childStateBorder"
""
1 130 160 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 43 All currently(selected) active observations

1
"dashclr"N "_Transparent"
"main()
{
  dpConnect( \"observationsCallback\",true,DPNAME_NAVIGATOR + g_navigatorID +\".objectTrigger\" );
}


// The highlight dyn_string will contain all entries that have been clicked or are connected to another click
// so we can used this list to see if it contains any observations
// if there are observations in this list connected to a click, we need to check if they are in the active list also
void observationsCallback(string dp1, bool aTrig) {
  dyn_string obsList;
  for (int i=1; i<= dynlen(highlight); i++) {
    if (strpos(highlight[i],\"Observation\") >= 0 && dynContains(activeObservations,highlight[i]) && navFunct_isObservation(highlight[i])) {
      dynAppend(obsList,highlight[i]);
      selectedObservations=true;
    }
  }
  if (selectedObservations) {
    observationsList= obsList;
  }
  connectObservations();
}" 0
 "main()
{
  click();
}" 0
 0 2 1 2 1 E 0.7222222222222223 0 0.8333333333333334 -83.88888888888893 -123.3333333333333 1 E 130 160 310 220
2 2
"PRIMITIVE_TEXT1"
""
1 40 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E U  0 E 40 30 104 43
0 2 2 "0s" 0 0 0 192 0 0  40 30 1
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 1
LANG:1 12 Observations
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
