V 11
1
LANG:1 0 
PANEL,-1 -1 1268 905 N "_3DFace" 0
"main()
{
  // Initialise the Panel
  navPanel_initPanel(\"fw_viewBox\");
  baseDP = g_currentDatapoint;
  database=dpSubStr(baseDP,DPSUB_SYS);

  strModuleName   = myModuleName();
  // This panel needs to act on active observations, in running status so we connect to the MACScheduler te be updated  
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";  
  // check if MACScheduler pointenabled and accessible
  if (dpExists(activeObsDP)) {
    if (dpConnect(\"updateActiveObservations\", activeObsDP+\":_online.._value\",
                                             activeObsDP+\":_online.._invalid\") == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:main|Couldn't connect to: \"+activeObsDP);
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"ObservationFlow_cobaltInputStreams.pnl:main|Couldn't find DP to connect to: \"+activeObsDP);
  }
}

void updateActiveObservations(string dp1, dyn_string obs,
                              string dp2, bool invalid)
{

  // remove pipelines from the list
  for (int i=dynlen(obs);i > 0;  i--) if (!navFunct_isObservation(obs[i])) dynRemove(obs,i);
  
  activeObservations = obs;
  // if there are selected observation check the observationsList if those selected observations still are active
  // remove the unactive observations from the list  
  
  // replace old observations if there are no observations selected
  if (selectedObservations) {
    for (int i=dynlen(observationsList); i < 1; i--) {
      int idx = dynContains(activeObservations,observationsList[i]);
      if (i <= 0) dynRemove(observationsList,i);
    }
    if (dynlen(observationsList) ==0) {
      selectedObservations=false;
    }
  }
  
  if (!selectedObservations) {
    observationsList = activeObservations;
  }
  // because CobaltProcesses claim their datapoints when the observation is actually running we need to connect to all these observations
  // and give a signal when the runstate of one of them changes to running to trigger the Cobalt point collection
  
  LOG_DEBUG(\"ObservationFlow_cobaltInputStreams.pnl:updateActiveObservations|observationList: \"+observationsList);

  obsConnections = makeDynString();  
  for (int i = 1; i <= dynlen(observationsList) ; i++) {
    // compose the WinCC OA DP name 
    string obsName = \"LOFAR_ObsSW_\"+observationsList[i]; 

    // Ask the claimmanager for the temp obs representation
    string obsDP=MainDBName+claimManager_nameToRealName(obsName);

    // add DP to list with all connects
    if (! dynContains(obsConnections,obsDP+\".runState\")) dynAppend(obsConnections,obsDP+\".runState\");
  }
  
  if (dynlen(oldObsConnections) > 0) {
    // disconnect old observations
    dpDisconnect(\"monitorRunStates\",oldObsConnections);
    dynClear(oldObsConnections);
  }
  
  // connect to runState for all active observations  
  if (dynlen(obsConnections) > 0 && dpConnect(\"monitorRunStates\",obsConnections) == -1) {
    LOG_ERROR(\"ObservationFlow_cobaltInputStreams.pnl:updateActiveObservations|ERROR: couldn't connect to : \"+obsConnections+ \" \" + getLastError());
  } else if (dynlen(obsConnections) > 0) {
    oldObsConnections = obsConnections;
  }     
}

void monitorRunStates(dyn_string dpList,dyn_string runStates) {
  for (int i=1; i<= dynlen(runStates); i++) {
    if (runStates[i] == \"Running\" || runStates[i] == \"Quiting\") {
      reload();
      break;
    }
  }
}




void prepareProcesses() {
  dyn_string result;
  g_processesList = outputProcs;
  // write result to the db so various panels can reset themselves  
  dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".processesList\",result);
  
  LOG_DEBUG(\"ObservationOutputProcs.pnl:prepareProcesses|processList found: \"+ result);      
}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {
  LOG_DEBUG(\"ObservationOutputProcs.pnl:doAction| Action required. found: \" + anAction);
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"ObservationOutputProcs.pnl:doAction|found actionString: \" + actionString);
  
  // Reload
  if (actionString[1] == \"Reload\") {
    reload();
  }
}

void reload() {
  
  navFunct_clearGlobalLists();
 
  addOutputProcs();
 
  // set the observation selectable items
  prepareProcesses();

  redraw();
      
  // set panel to ready
  g_objectReady=true;
  
  // trigger that the panel values are calculated and ready
  navPanel_setEvent(\"ObservationOutputProcs.pnl\",\"Update\");
}

void addOutputProcs() {

  // get all the outputProcs used for all active observations
  dynClear(outputProcs);
  for (int i =1; i <= dynlen(obsConnections); i++) {
    string obs = dpSubStr(obsConnections[i],DPSUB_DP);
    if (!dynContains(outputProcs,obs+\"_CobaltOutputProc\")) {
      dynAppend(outputProcs,obs+\"_CobaltOutputProc\");
    }
  }
  dynSort(outputProcs);
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"

string baseDP=\"\";
dyn_string observationsList;
dyn_string obsConnections;   
dyn_string oldObsConnections;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
dyn_string outputProcs;
dyn_string outputProcRefNames;

string strModuleName = \"\";
string activeObsDP = \"\";
string database;
bool selectedObservations=false;

void clearOutputProcRefNames() {
    LOG_TRACE(\"ObservationOutputProcs.pnl:clearOutputProcRefNames| entered with nr refnames: \"+dynlen(outputProcRefNames));

  // remove all symbols because new ones will be added
  for (int i=1; i <= dynlen(outputProcRefNames); i++) {
    removeSymbol(strModuleName,\"\",outputProcRefNames[i]);
  }
  dynClear(outputProcRefNames);
}

void redraw() {
  LOG_TRACE(\"ObservationOutputProcs.pnl:redraw| entered with outputProcs: \"+outputProcs);
  string barColor = \"_3DFace\";
  if (dynlen(outputProcRefNames) > 0) {
    clearOutputProcRefNames();
  }    
  int xPos_AddSymbol = 90; 
  int yPos_AddSymbol = 90; 
  int ref = 1;
  string addPanelName    = \"objects/Processes/cobaltOutputProc.pnl\";
  //loop over list and prepare panel with all gpuProc objects   
  for (int i=1; i <= 100; i++) {
    outputProcRefNames[ref]=\"outputProc\" + ref;
      
    if (  addSymbol(  strModuleName,                   // Stay in this modul
                      \"\",                              // Name of this panel
                      addPanelName,                    // Panel to add
                      outputProcRefNames[ref],         // Ref of the addedPanel
                      makeDynString( \"$locusNode:\" + ref,
                                     \"$outputProcs:\" + outputProcs) ,     // Define all $values
                      xPos_AddSymbol,                  // Xpos of the AddedSymbol
                      yPos_AddSymbol,                  // Ypos of the AddedSymbol
                      0,                               // angle
                      1    ,1                          // zoomX , zoomY
        ) < 0 ) {
	   LOG_ERROR(\"ObservationOutputProcs.pnl:redraw|Error Appending outputProc for: \" + ref + \" in this panel.\");
          }
    if ((float)ref/10. == floor((float)ref/10.)) {
      yPos_AddSymbol += 80;
      xPos_AddSymbol = 90;
    } else{
      xPos_AddSymbol += 80;
    }
    ref++;
  }

}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 301
"RECTANGLE2"
""
1 660 10 E E E 1 E 1 E N {0,0,0} E N "Lofar_operational" E E
 E E
100 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 272 72 1 E 660 10 674 24
6 302
"RECTANGLE4"
""
1 660 10 E E E 1 E 1 E N {0,0,0} E N "Lofar_maintenance" E E
 E E
101 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 272 102 1 E 660 10 674 24
6 303
"RECTANGLE5"
""
1 660 10 E E E 1 E 1 E N {0,0,0} E N "Lofar_suspicious" E E
 E E
102 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 272 132 1 E 660 10 674 24
6 304
"RECTANGLE6"
""
1 660 10 E E E 1 E 1 E N {0,0,0} E N "Lofar_broken" E E
 E E
103 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 272 162 1 E 660 10 674 24
2 305
"PRIMITIVE_TEXT10"
""
1 962 82 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
104 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 962 82 1013 95
0 2 2 "0s" 0 0 0 192 0 0  962 82 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 7 <= 0.1%
2 306
"PRIMITIVE_TEXT14"
""
1 912 32 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
105 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 912 32 968 48
0 2 2 "0s" 0 0 0 192 0 0  912 32 1
1
LANG:1 35 MS Shell Dlg 2,10,-1,5,75,0,0,0,0,0
0 1
LANG:1 8 legenda:
2 307
"PRIMITIVE_TEXT16"
""
1 862 114 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
106 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 862 114 904 127
0 2 2 "0s" 0 0 0 192 0 0  862 114 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 6 > 0.1%
2 308
"PRIMITIVE_TEXT17"
""
1 862 144 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
107 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 862 144 904 157
0 2 2 "0s" 0 0 0 192 0 0  862 144 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 6 > 0.5%
2 309
"PRIMITIVE_TEXT18"
""
1 862 174 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
108 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 862 174 904 187
0 2 2 "0s" 0 0 0 192 0 0  862 174 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 6 > 5.0%
2 310
"PRIMITIVE_TEXT19"
""
1 964 114 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
109 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 964 114 1015 127
0 2 2 "0s" 0 0 0 192 0 0  964 114 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 7 <= 0.5%
2 311
"PRIMITIVE_TEXT20"
""
1 964 144 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
110 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 964 144 1015 157
0 2 2 "0s" 0 0 0 192 0 0  964 144 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 7 <= 5.0%
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
