#!/bin/bash

PREC=1e-6

run_subtest()
{
echo "--------------- START $1 ---------------"

# check for input files
if [[ ! ( -r tBandpass.in_parmdb_$1 && -r tBandpass.in_parset_$1 && -r tBandpass.in_stdout_$1 ) ]]; then
    echo "$1: not all input files found"
    return 3
fi

# construct sky_model ParmDB
rm -rf tBandpass.sky_model
parmdb << EOF
create tablename='tBandpass.sky_model'
adddef RA:CP1 values=-1.92653767803
adddef DEC:CP1 values=1.09220917376
adddef StokesI:CP1 values=2
adddef StokesQ:CP1 values=0
adddef StokesU:CP1 values=0
adddef StokesV:CP1 values=0
adddef RA:CP2 values=-1.87653767803
adddef DEC:CP2 values=1.04220917376
adddef StokesI:CP2 values=2
adddef StokesQ:CP2 values=0
adddef StokesU:CP2 values=0
adddef StokesV:CP2 values=0
close
quit
EOF

# check status
if [ $? != 0 ]; then
    echo "$1: FAIL (creation of sky model ParmDB failed)"
    return 1
fi

# construct instrument_model ParmDB
rm -rf tBandpass.instrument_model
parmdb < tBandpass.in_parmdb_$1


# check status
if [ $? != 0 ]; then
    echo "$1: FAIL (creation of instrument model ParmDB failed)"
    return 1
fi

# construct parset
cat > tBandpass.parset.tmp << EOF
user="$USER"
`cat tBandpass.in_parset_$1`
EOF

# check status
if [ $? != 0 ]; then
    echo "$1: FAIL (creation of parset failed)"
    return 1
fi

# solve
../src/BBSrun tBandpass.parset.tmp

# check status
if [ $? != 0 ]; then
    echo "$1: FAIL (BBSrun failed)"
    return 1
fi

# construct stdout.tmp
parmdb > tBandpass.stdout.tmp << EOF
open tablename='tBandpass.instrument_model'
show
close
quit
EOF

# check status
if [ $? != 0 ]; then
    echo "$1: FAIL (dumping output from instrument model ParmDB failed)"
    return 1
fi

echo -e "\n\nchecking output..."

# verify output
RETURN_VALUE=0

# compare with expected output.
if diff tBandpass.stdout.tmp tBandpass.in_stdout_$1
then
    echo "$1: OK"
else
    # compare with expected output excluding fractional numbers
    sed -e 's/[0-9]\+\.[0-9]\+/ /g' tBandpass.in_stdout_$1 | sed -e 's/e[+-][0-9]\+/ /g' > tBandpass.in_stdout_$1.strip
    sed -e 's/[0-9]\+\.[0-9]\+/ /g' tBandpass.stdout.tmp | sed -e 's/e[+-][0-9]\+/ /g' > tBandpass.stdout.tmp.strip
    if diff tBandpass.stdout.tmp.strip tBandpass.in_stdout_$1.strip ; then
        # check if all (fractional) numbers are approximately equal.
        $lofar_sharedir/checkfloat tBandpass.stdout.tmp tBandpass.in_stdout_$1 $PREC

        if [ $? != 0 ]
        then
            echo "$1: FAIL (floating point differences > $PREC)"
            RETURN_VALUE=2
        else
            echo "$1: OK (floating point differences <= $PREC)"
        fi
    else
        echo "$1: FAIL (output excluding fractional numbers differs)"
        RETURN_VALUE=2
    fi
    rm -f tBandpass.in_stdout_$1.strip tBandpass.stdout.tmp.strip
fi

rm -f tBandpass.parset.tmp tBandpass.stdout.tmp
rm -rf tBandpass.instrument_model
rm -rf tBandpass.sky_model

echo "---------------- END $1 ----------------"

return $RETURN_VALUE
}

run_subtest clean_constant > tBandpass_tmp.log 2>&1 &&
run_subtest clean_polc > tBandpass_tmp.log 2>&1 &&
run_subtest clean_band_constant > tBandpass_tmp.log 2>&1 &&
run_subtest noise_constant > tBandpass_tmp.log 2>&1 &&
run_subtest noise_polc > tBandpass_tmp.log 2>&1 &&
run_subtest noise_band_constant > tBandpass_tmp.log 2>&1

exit $?
