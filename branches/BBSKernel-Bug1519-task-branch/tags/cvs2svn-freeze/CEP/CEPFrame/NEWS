CEP/CEPFrame: Version 2.2, date: 2006/02/06
===========================================

This is the second minor release of version 2 of the CEP/CEPFrame library.
Only minor changes have been made to the code. Most of the changes were
related to making CEP/CEPFrame distributable, either through `make dist' or
`make rpm'.


The following BugIDs have been resolved
---------------------------------------
# 396 : Support of rpm builds
        Support for making an rpm package was added

# 412 : size of cyclicbuffer cannot be set
        Added method to set the size of the cyclicbuffer The methods
        set*BufferingProperties should not be used for buffering anymore.

# 598 : compiler warnings about overriden base methods
        Fixed

# 623 : sharing dataholders doesn't work properly
        When sharing is activated on an in and output channel of a step, the
        dataholder was initted twice.



CEP/CEPFrame: Version 2.1, date: 2005/09/23
===========================================

This is the first minor release of version 2 of the CEP/CEPFrame library.
Only minor changes have been made.


The following BugIDs have been resolved
---------------------------------------

# 268 : Update CEPFrame manual and example applications.
        Make sure the example applications mentioned in the updated CEPFrame
        manual are up-to-date.

# 269 : Initialize TransportHolders in preprocess phase.
        Call the init() method of the TransportHolders in the preprocess
        phase. This means that in blocking Socket connections, there is a
        valid connection after the preprocess phase. This is needed in the
        TFlopCorrelator Demo.



CEP/CEPFrame: Version 2.0, date: 2005/06/17
============================================

This is the second major release of the CEP/CEPFrame library. It deals with the
interface changes of the Transport library version 2.0.

A common abstract base class for the application building blocks Step and 
Composite has been created, currently named Block (for lack of a better name).

The Composite class no longer contains a WorkHolder object and has been changed
to a pure holder of building blocks. So, it no longer owns its own DataHolder
objects for input and output, but has references to the DataHolders of its
internal blocks. These need to be set by setInput() and setOutput() methods.

The interface methods for connecting building blocks (Steps or Composites) have
also changed somewhat. 

Furthermore, your DataHolder::preprocess() method must be renamed to init().
And the DataHolder::postprocess() method is no longer called by the framework. 

The build process has changed as well. The CEPFrame library should now be
built against an installed version of the tinyCEP library. (Ref. ER-270 and
ER-273).


The following Enhancement Requests have been implemented
--------------------------------------------------------

ER 231 : Transport             : Change DH/Transport/TH relationship 

         Change the transport library in such a way DataHolders and
         TransportHolders can be used independently. Plus remove all unused
         functionality from the interfaces of all classes.

ER 139 : CEPFrame : Change relationship Composite/Step

	 Change the relationship between Composite and Step. Composite does 
	 not need to contain a WorkHolder and input/output DataHolders. This 
	 will save an extra data copy to/from the Composite DataHolder(s).

ER 270 : Build environment     : Modify build process to use installed
                                 packages

         The current build process uses (locally) built packages and does some
         trickery to derive package dependencies. Although this approach works
         in practice, it causes unwanted build dependencies between
         packages. Furthermore, the current design does not allow running a
         'make distcheck', which is a prerequisite for building a package
         distribution (e.g. tarball or rpm).

ER 273 : Build environment     : Change from lofar_PACKAGE to lofar_INTERNAL

         Instead of lofar_PACKAGE, lofar_INTERNAL should be used in the
         configure.in files. This is in preparation of making distributable
         packages.


The following Problem Reports have been fixed
---------------------------------------------

PR 100 : LOFAR SW development  : Neither config.h nor lofar_config.h should
                                 be included in header files

         Inclusion of either config.h or lofar_config.h in a distributed
         header file is problematic, because the config files themselves
         cannot be distributed; they contain system specific definitions. It
         is therefore unwise to include either of these files in a header

PR 163 : Transport             : Corba stuff is antiquated: remove 

         The Corba stuff is very out-of-date. It will most certainly not build
         anymore. Hence the code should be moved to the CVS attic.
