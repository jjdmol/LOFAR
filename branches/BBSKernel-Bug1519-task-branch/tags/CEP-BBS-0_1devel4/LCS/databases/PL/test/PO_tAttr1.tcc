//# This file was generated by genDBcode v2.9 on Mon Mar 15 15:31:32 CET 2004
//# with the command: genDBcode P tAttr1.plmap  
//# from the directory: /home/gvd/sim/LOFAR/LCS/databases/PL/test
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_tAttr1.h"
#include <PL/TPersistentObject.h>

namespace LOFAR {
	namespace PL {

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< A > class.
void DBRep< A >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the A class to the
// DBRep< A > structure
void TPersistentObject< A >::toDBRep(DBRep< A >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< A > structure
// to the A class.
void TPersistentObject< A >::fromDBRep(const DBRep< A >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< A >
void TPersistentObject< A >::init()
{
	// set the correct database table name
	tableName("tAttr1_A");
}


// Initialize the attribute map for TPersistenObject< A >
template<>
void TPersistentObject< A >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< B > class.
void DBRep< B >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the B class to the
// DBRep< B > structure
void TPersistentObject< B >::toDBRep(DBRep< B >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< B > structure
// to the B class.
void TPersistentObject< B >::fromDBRep(const DBRep< B >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< B >
void TPersistentObject< B >::init()
{
	{
	// create new TPersistentObject for BaseClass A
	Pointer p(new TPersistentObject< A >(data()));
	// associate A's owner object-id with B's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("tAttr1_B");
}


// Initialize the attribute map for TPersistenObject< B >
template<>
void TPersistentObject< B >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["A::"]	=
		"@" + string(typeid(TPersistentObject< A >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< C > class.
void DBRep< C >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the C class to the
// DBRep< C > structure
void TPersistentObject< C >::toDBRep(DBRep< C >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< C > structure
// to the C class.
void TPersistentObject< C >::fromDBRep(const DBRep< C >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< C >
void TPersistentObject< C >::init()
{
	{
	// create new TPersistentObject for Class B
	Pointer p(new TPersistentObject< B >(data().itsB));
	// associate B's owner object-id with C's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass A
	Pointer p(new TPersistentObject< A >(data()));
	// associate A's owner object-id with C's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("tAttr1_C");
}


// Initialize the attribute map for TPersistenObject< C >
template<>
void TPersistentObject< C >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["b"]	=
		"@" + string(typeid(TPersistentObject< B >).name());
	theirAttribMap["A::"]	=
		"@" + string(typeid(TPersistentObject< A >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< D > class.
void DBRep< D >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the D class to the
// DBRep< D > structure
void TPersistentObject< D >::toDBRep(DBRep< D >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< D > structure
// to the D class.
void TPersistentObject< D >::fromDBRep(const DBRep< D >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< D >
void TPersistentObject< D >::init()
{
	// set the correct database table name
	tableName("tAttr1_D");
}


// Initialize the attribute map for TPersistenObject< D >
template<>
void TPersistentObject< D >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< E > class.
void DBRep< E >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the E class to the
// DBRep< E > structure
void TPersistentObject< E >::toDBRep(DBRep< E >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< E > structure
// to the E class.
void TPersistentObject< E >::fromDBRep(const DBRep< E >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< E >
void TPersistentObject< E >::init()
{
	{
	// create new TPersistentObject for Class D
	Pointer p(new TPersistentObject< D >(data().itsD));
	// associate D's owner object-id with E's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("tAttr1_E");
}


// Initialize the attribute map for TPersistenObject< E >
template<>
void TPersistentObject< E >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["d"]	=
		"@" + string(typeid(TPersistentObject< D >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< F > class.
void DBRep< F >::bindCols(dtl::BoundIOs& cols) {
	cols["S"]	== s;
}


// toDBRep copies the fields of the F class to the
// DBRep< F > structure
void TPersistentObject< F >::toDBRep(DBRep< F >& dest) const
{
	dest.s	= data().itsS;
}


// fromDBRep copies the fields of the DBRep< F > structure
// to the F class.
void TPersistentObject< F >::fromDBRep(const DBRep< F >& src)
{
	data().itsS	= src.s;
}


// Initialize the internals of TPersistentObject< F >
void TPersistentObject< F >::init()
{
	{
	// create new TPersistentObject for Class E
	Pointer p(new TPersistentObject< E >(data().itsE));
	// associate E's owner object-id with F's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass C
	Pointer p(new TPersistentObject< C >(data()));
	// associate C's owner object-id with F's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("tAttr1_F");
}


// Initialize the attribute map for TPersistenObject< F >
template<>
void TPersistentObject< F >::initAttribMap()
{
	theirAttribMap["s"]	= "S";
	theirAttribMap["e"]	=
		"@" + string(typeid(TPersistentObject< E >).name());
	theirAttribMap["C::"]	=
		"@" + string(typeid(TPersistentObject< C >).name());
}


	} // close namespace PL
}	// close namespace LOFAR

