//
//  CEPLCU_increment1.btsw: Testscript for increment 1 of the CEPLCU software.
//
//  Copyright (C) 2005
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
// ------------------------------------------------------------------------------
// Description:
//
//
//
// ------------------------------------------------------------------------------

[statemachines]

Statemachine_VBStartDaemonClient (thbr_ready) =
{
// ------------------------------------------------------------------------------
  s000  : 	F_STARTDAEMON_SCHEDULE 	(0x00000007, "VB1", "VB1.param" )    ; s010.			// send schedule VB1
  s010  :		E_STARTDAEMON_SCHEDULED (, , , )														 ; s011.
  s011  :   R_SIG(thbr_ready)              															 ; finish.		// wait for response

  finish : 	TERMINATE																										 ; finish.
}

Statemachine_VirtualInstrument ( vbld_scheduled, vbld_ready) =
{
	s000   : 	E_LOGICALDEVICE_CONNECT   (, , )		                  ; s001.
  s001	 : 	F_LOGICALDEVICE_CONNECTED ( 0x00000000 )							; s002.
  s002	 : 	E_LOGICALDEVICE_SCHEDULED ( )													; s004.
  
  s004	 :  S_SIG(vbld_scheduled)																	; s004.  
  s004	 :  E_LOGICALDEVICE_CLAIMED (0x00000000)									; s005.
	s004	 :	E_LOGICALDEVICE_RELEASED (0x00000006) 								; newtry.
  s004	 :  E_LOGICALDEVICE_CLAIMED ()														; error.
  
	s005   :	E_LOGICALDEVICE_PREPARED (0x00000000)									; s006.
	s005   :	E_LOGICALDEVICE_PREPARED (0x00000006)									; s008.
	s005   :	E_LOGICALDEVICE_PREPARED ()														; error.
	
	s006	 :	E_LOGICALDEVICE_SUSPENDED (0x00000000)								; s007.
	s006   :	E_LOGICALDEVICE_SUSPENDED (0x00000006)								; s008.
	s006	 :	E_LOGICALDEVICE_SUSPENDED ()												  ; error.
	
	s007   :	E_LOGICALDEVICE_RESUMED ()													  ; s008.

	s008	 :	E_LOGICALDEVICE_RELEASED (0x00000000) 								; ready.
	s008	 :	E_LOGICALDEVICE_RELEASED (0x00000006) 								; newtry.
	s008	 :	E_LOGICALDEVICE_RELEASED () 													; error.

	newtry :  F_LOGICALDEVICE_SCHEDULE ("VB1.param" )    						; s002.
	
  ready  : 	S_SIG(vbld_ready)			 																; finish.
  finish : 	TERMINATE 																						; finish.
  error  : 	TERMINATE 																						; error.
}

Statemachine_THPVSSBridge  (vbld_scheduled, vbld_ready, thbr_ready) =
{
  start  : TIMER(2)		; s000.
	s000	 : F_PVSS_ENABLE_MY_PROPERTY_SET("PIC_CEP_sun", "TResource", 0x00000002)			; s001.
	s001   : E_PVSS_ENABLE_MY_PROPERTY_SET_RESPONSE(, 0x00000000, , )										; s002. 
  s002   : F_PVSS_MY_SET_VALUE ("PIC_CEP_sun", "funcState", "d" )											; s003.
  s003   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s004. 
  s004   : R_SIG(vbld_scheduled)																											; s010.
  
  s010	 : F_PVSS_LOAD_EXT_PROPERTY_SET("PAC_VB1_details", "TAplPacVB" )							; s011.
  s011   : E_PVSS_LOAD_EXT_PROPERTY_SET_RESPONSE(, 0x00000000, , )										; s020.
  s011   : E_PVSS_LOAD_EXT_PROPERTY_SET_RESPONSE(, , , )           										; error.

	s020   : TIMER(50)																																	; s040.
  s020   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s020. 

  s040   : F_PVSS_SUBSCRIBE_EXT_PROPERTY("PAC_VB1_details", "quality" )							  ; s041.
  s041   : E_PVSS_SUBSCRIBE_EXT_PROPERTY_RESPONSE(, 0x00000000, , "CEPLCU1:PAC_VB1_details", , "quality" ) ; s050.

	// force low quality
  s050   : F_PVSS_MY_SET_VALUE ("PIC_CEP_sun", "funcState", "O" )											; s051.
  s051   : E_PVSS_MY_SET_VALUE_RESPONSE(, 0x00000000, , , , ) 												; s051.
  s051   : E_PVSS_VALUE_CHANGE_RESPONSE (, , "CEPLCU1:PAC_VB1_details", , "quality", , "Y")	; s052. // 'Y' == 89%
  s051   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s051. 
  s052   : TIMER(15)																																		; s060.
  
  s060   : F_PVSS_MY_SET_VALUE ("PIC_CEP_sun", "funcState", "d" )										; s061.
  s061   : E_PVSS_MY_SET_VALUE_RESPONSE(, 0x00000000, , , , ) 												; s061.
  s061   : E_PVSS_VALUE_CHANGE_RESPONSE (, , "CEPLCU1:PAC_VB1_details", , "quality", , "d")	; s080. 
  s061   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s061. 

  s080	 : F_PVSS_UNLOAD_EXT_PROPERTY_SET("PAC_VB1_details")												  ; s081.
  s081   : E_PVSS_UNLOAD_EXT_PROPERTY_SET_RESPONSE(, 0x00000000, , )									; s082.
  s081   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s081. // just for sure 
	s082	 : F_PVSS_DISABLE_MY_PROPERTY_SET("PIC_CEP_sun")															; s083.
	s083   : E_PVSS_DISABLE_MY_PROPERTY_SET_RESPONSE(, 0x00000000, , )									; s098. 
  s083   : E_PVSS_VALUE_CHANGE_RESPONSE (, , , , , , )																; s083. // just for sure

  s098 	 : R_SIG(vbld_ready)																													; s099.
  s099	 : S_SIG(thbr_ready)																													; finish.
  finish : TERMINATE ; finish.
  error  : TERMINATE ; error.
}

[testscript]
VAR     vbld_scheduled, thbr_ready, vbld_ready.

COM1 :  Statemachine_VBStartDaemonClient (thbr_ready).

COM2 :  Statemachine_VirtualInstrument (vbld_scheduled, vbld_ready).

COM5 :  Statemachine_THPVSSBridge (vbld_scheduled, vbld_ready, thbr_ready).
