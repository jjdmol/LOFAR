//
// Protocol definition for the PA server
//
autogen definitions protocol;

description = "Protocol for the PA server";
prefix = "PA"; // for the signal names
id = "(F_GCF_PROTOCOL + 1)";

// specify extra include files
include = '<GPA_Defines.h>';

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
	signal = LOAD_APC;
	dir = IN;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "loadDefaults";
		type = "bool";
	};
	param = {
		name = "scope";
		type = "string";
	};
	param = {
		name = "name";
		type = "string";
	};
};

event = {
	signal = UNLOAD_APC;
	dir = IN;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "scope";
		type = "string";
	};
	param = {
		name = "name";
		type = "string";
	};
};

event = {
	signal = RELOAD_APC;
	dir = IN;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "scope";
		type = "string";
	};
	param = {
		name = "name";
		type = "string";
	};
};

event = {
	signal = APC_LOADED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "result";
		type = "TPAResult";
	};
};

event = {
	signal = APC_UNLOADED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "result";
		type = "TPAResult";
	};
};

event = {
	signal = APC_RELOADED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "unsigned int";
	};
	param = {
		name = "result";
		type = "TPAResult";
	};
};

event = {
	signal = REGISTER_SCOPE;
	dir = IN;
	param = {
		name = "scope";
		type = "string";
	};
};

event = {
	signal = UNREGISTER_SCOPE;
	dir = IN;
	param = {
		name = "scope";
		type = "string";
	};
};

event = {
	signal = SCOPE_REGISTERED;
	dir = OUT;
	param = {
		name = "result";
		type = "TPAResult";
	};
	param = {
		name = "scope";
		type = "string";
	};
};

event = {
	signal = SCOPE_UNREGISTERED;
	dir = OUT;
	param = {
		name = "result";
		type = "TPAResult";
	};
	param = {
		name = "scope";
		type = "string";
	};
};

event = {
	signal = LINK_PROPERTIES;
	dir = OUT;
	param = {
		name = "scope";
		type = "string";
	};
	param = {
		name = "propList";
		type = "string";
	};
};

event = {
	signal = UNLINK_PROPERTIES;
	dir = OUT;
	param = {
		name = "scope";
		type = "string";
	};
	param = {
		name = "propList";
		type = "string";
	};
};

event = {
	signal = PROPERTIES_LINKED;
	dir = IN;
	param = {
		name = "result";
		type = "TPAResult";
	};
	param = {
		name = "scope";
		type = "string";
	};
};

event = {
	signal = PROPERTIES_UNLINKED;
	dir = IN;
	param = {
		name = "result";
		type = "TPAResult";
	};
	param = {
		name = "scope";
		type = "string";
	};
};
