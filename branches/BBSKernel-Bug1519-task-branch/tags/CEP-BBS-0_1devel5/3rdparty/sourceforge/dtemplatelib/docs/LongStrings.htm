<html>  
<head>
<style>
CODE {COLOR: #990000;}
.code{COLOR: #990000}
.codeComment{COLOR: #008000}
.codeHighlight{BACKGROUND-COLOR: #FFFF00}
.codeFileName{FONT-WEIGHT: bold;}
</style>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Mike Gradman">
<meta name="KeyWords"
content="DTL, Oracle, ODBC, database API, C++, Template Library">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<!--
  -- Copyright 2001
  -- Michael Gradman & Corwin Joy
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Corwin Joy & Michael Gradman make no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  --
  -- Copyright (c) 1996-1999
  -- Silicon Graphics Computer Systems, Inc.
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Silicon Graphics makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -- Copyright (c) 1994
  -- Hewlett-Packard Company
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Hewlett-Packard Company makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -->
<!-- Generated by htmldoc -->
<title>Binding Very Long Strings in DTL</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000EE"
vlink="#551A8B" alink="#FF0000">

<p><font size="6" face="Bookman Old Style"><em><strong><u>dtl</u></strong></em></font></p>

<p><img src="stat.gif" width="6" height="6"> <!--end header--> <br>
</p> 
<h1>Binding Very Long Strings in DTL</h1>

<p><font size="4" face="Times Roman">It is very convenient to be able to bind 
  string fields in DTL using std::string rather than having to rely on character 
  arrays. By default, DTL binds std::string to a database by using SQL_VARCHAR 
  for the source ODBC datatype. Unfortunately, doing this means that we are binding 
  to the default character type in the target database which may have length limitations. 
  For example, the maximum length of a VARCHAR field in Access (text field) and 
  MySQL is 255, in Oracle the maximum legth for a VARCHAR is 2000, and SQL Server 
  has a maximum of 4096. Fortunately, most databases have a type for longer length 
  strings (VARCHAR2 in Oracle, memo field in Access, etc.) which corresponds to 
  the SQL_LONGVARCHAR type in ODBC. The reason we don't bind using SQL_LONGVARCHAR 
  by default is if we did that we would get errors when the underlying data field 
  is just a regular VARCHAR or short string.</font></p>
<p><font face="Times Roman" size="4">DTL provides a default string type of SQL_VARCHAR 
  with a maximum column size of 255 for Access and 2000 for Oracle and SQL Server. 
  If these defaults don't satisfy your needs, either or both of these values may 
  be changed in the relevant BCA as follows:</font></p>
<p>For each std::string field that the defaults won't suffice for:</p>
<p>1. First bind the column as usual, <font face="Courier New, Courier, mono" size="2">boundIOs[colName] 
  == rowbuf.stringField</font> </p>
<p>2. To change the SQL type DTL uses for binding a particular field call <font face="Courier New, Courier, mono" size="2">boundIOs[colName].SetSQLType(sqlType)</font> 
  where <font size="2" face="Courier New, Courier, mono">sqlType </font><font size="3">is 
  </font><font size="2" face="Courier New, Courier, mono">SQL_LONGVARCHAR <font face="Times New Roman, Times, serif" size="3">(or 
  whatever type you wish to use instead of </font>SQL_VARCHAR).</font></p>
<p>3. To override the maximum size of the SQL column being used, call <font size="2" face="Courier New, Courier, mono">boundIOs[colName].SetColumnSize(newColumnSize) 
  <font face="Times New Roman, Times, serif" size="3">where <font face="Courier New, Courier, mono">newColumnSize</font> 
  is the maximum string size that you wish to use.</font> </font></p>
<p><font face="Times New Roman, Times, serif" size="4">For std::wstrings, SQL_WVARCHAR 
  may similarly need to be changed to SQL_LONGWVARCHAR.</font></p>
<p><font face="Times New Roman, Times, serif" size="4">The example below shows 
  the use of a very long string:</font></p>
<pre><code>
<span class="codeComment">// object which we'll write long strings with ... will bind Test::str to LONG_EXAMPLE.STRING_VALUE</span>
struct Test {
	string str;
};

<span class="codeComment">// this BCA for Access overrides the sql type for STRING_VALUE to long varchar and the column size to 500</span>

class BCAAccess : public binary_function&lt;BoundIOs &amp;, Test &amp;, void&gt;
{
public:
	void operator()(BoundIOs &amp;boundIOs, Test &amp;rowbuf)
	{
		boundIOs[&quot;STRING_VALUE&quot;] == rowbuf.str;
		boundIOs[&quot;STRING_VALUE&quot;].SetSQLType(SQL_LONGVARCHAR);
		boundIOs[&quot;STRING_VALUE&quot;].SetColumnSize(500);
	}
};

void InsLong() {
	 PrintHeader(cout, &quot;InsLong()&quot;);
	 Test rowbuf, rowbuf_read;
	 DBStmt stmt(&quot;DELETE FROM LONG_EXAMPLE&quot;);
	 stmt.Execute();
	 DBConnection::GetDefaultConnection().CommitAll();
	
	 DBView&lt;Test&gt; view;

<span class="codeComment">    
	 // on Access the defaults won't suffice, co we must use BCAAccess() there to set the SQL type to long varchar and
     // the column size to 500, our maximum string length
</span>
	 if (DBConnection::GetDefaultConnection().GetDBMSEnum() !=
		 DBConnection::DB_ACCESS)
	 {
		view = DBView<test>(&quot;LONG_EXAMPLE&quot;, BCA(rowbuf, COLS[&quot;STRING_VALUE&quot;] == rowbuf.str));
	 }
	 else
	 {
		view = DBView<test>(&quot;LONG_EXAMPLE&quot;, BCAAccess());
	 }

	 DBView&lt;Test&gt;::insert_iterator it = view;

     <span class="codeComment">// generate a very long string</span>
	 for (int i=0 ; i &lt; 500; ++i)
		rowbuf.str += char('0' + i%10 - 1);


	 *it = rowbuf;
	 ++it;

	 DBConnection::GetDefaultConnection().CommitAll();

	 DBView&lt;Test&gt;::select_iterator read_it = view.begin();

	 rowbuf_read = *read_it;

	 if (rowbuf.str != rowbuf_read.str)
	 {
		 cout &lt;&lt; &quot;&lt;&lt;&lt;&lt;&lt; Error with long strings! &gt;&gt;&gt;&gt;&gt;&quot; &lt;&lt; endl;
		 cout &lt;&lt; &quot;String written ...&quot; &lt;&lt; endl;
		 cout &lt;&lt; rowbuf.str &lt;&lt; endl;
		 cout &lt;&lt; &quot;String read ... &quot; &lt;&lt; endl;
		 cout &lt;&lt; rowbuf_read.str &lt;&lt; endl;
		 rowbuf_read.str = &quot;error&quot;;
	 }
	 else
	 {
		 cout &lt;&lt; &quot;Long string test successful!&quot; &lt;&lt; endl;
	 }

	 PrintSeparator(cout);
}
</code></pre>

<hr>

<p align="left"><a href="index.htm"><img src="dtl_home.gif" alt="[DTL Home]"
width="54" height="54"></a> <br>
</p>

<p>Copyright © 2002, Michael Gradman and Corwin Joy. <script
language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + modDate.getYear()+".");
 //-->
 </script> </p>

<p><i>Permission to use, copy, modify, distribute and sell this software and its 
  documentation for any purpose is hereby granted without fee, provided that the 
  above copyright notice appears in all copies and that both that copyright notice 
  and this permission notice appear in supporting documentation. Corwin Joy and 
  Michael Gradman make no representations about the suitability of this software 
  for any purpose. It is provided &quot;as is&quot; without express or implied 
  warranty. </i></p>
<A href="http://sourceforge.net"> <IMG src="http://sourceforge.net/sflogo.php?group_id=17082&amp;type=5" width="210" height="62" border="0" alt="SourceForge Logo"></A> 
<p align="right">This site written using the ORB. <a href="http://www.cinenet.net/~cberry/orbinfo.html"><img src="http://www.cinenet.net/~cberry/orb_icon.gif" alt="[The ORB]"
width="54" height="54"></a></p>
</body> </html>
