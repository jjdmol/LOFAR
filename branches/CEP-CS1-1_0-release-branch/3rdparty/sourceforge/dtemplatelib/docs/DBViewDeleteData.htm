 
<pre><code><span class="codeComment">// Delete objects from the database via a delete_iterator</span>

class Example
{
  public:                                <span class="codeComment">// tablename.columnname:</span>
	int exampleInt;                 <span class="codeComment">// DB_EXAMPLE.INT_VALUE</span>
	string exampleStr;              <span class="codeComment">// DB_EXAMPLE.STRING_VALUE</span>
	double exampleDouble;           <span class="codeComment">// DB_EXAMPLE.DOUBLE_VALUE</span>
	long exampleLong;               <span class="codeComment">// DB_EXAMPLE.EXAMPLE_LONG</span>
	TIMESTAMP_STRUCT exampleDate;   <span class="codeComment">// DB_EXAMPLE.EXAMPLE_DATE</span>

	Example(int exInt, const string &amp;exStr, double exDouble, long exLong,
		const TIMESTAMP_STRUCT &amp;exDate) :
	   exampleInt(exInt), exampleStr(exStr), exampleDouble(exDouble), exampleLong(exLong),
	   exampleDate(exDate)
	{ }

};

class BCAExampleObj
{
public:
	void operator()(BoundIOs &amp;boundIOs, Example &amp;rowbuf)
	{
		boundIOs[&quot;STRING_VALUE&quot;] == rowbuf.exampleStr;
		boundIOs[&quot;EXAMPLE_DATE&quot;] == rowbuf.exampleDate;
	}
};


<span class="codeComment">// Delete rows matching the specified Example objects from the database</span>
void DeleteData()
{
	<span class="codeComment">// construct view</span>
	DBView&lt;Example&gt;
	view(&quot;DB_EXAMPLE&quot;, BCAExampleObj());

	<span class="codeComment">// build a deleter for the view

	// *** SQL Query Generated for this delete_iterator: ***
 	// &quot;DELETE FROM DB_EXAMPLE WHERE EXAMPLE_DATE = (?) AND STRING_VALUE = (?) &quot;</span>
	
	DBView&lt;Example&gt;::delete_iterator exampleDeleter = view;

	Example deleteMe;

	<span class="codeComment">// now set Example object indicating which rows we want to delete</span>
	deleteMe.exampleStr = &quot;Example&quot;;

	TIMESTAMP_STRUCT y2k = {2000, 1, 1, 0, 0, 0, 0};
	deleteMe.exampleDate = y2k;

	<span class="codeComment">// execute the delete
</span>	*exampleDeleter = deleteMe;
	exampleDeleter++;

	cout &lt;&lt; exampleDeleter.GetLastCount() &lt;&lt; &quot; rows deleted!&quot; &lt;&lt; endl;

	<span class="codeComment">// now can perform other deletes using the same delete iterator
	
	// now set Example object and params indicating which rows we want to delete</span>

	TIMESTAMP_STRUCT today = {1999, 9, 29, 0, 0, 0, 0};

	<span class="codeComment">// execute the delete
</span>	*exampleDeleter = Example(3, &quot;operator-&gt;()works&quot;, 0.0, 0, today);
	exampleDeleter++;

	cout &lt;&lt; exampleDeleter.GetLastCount() &lt;&lt; &quot; rows deleted!&quot; &lt;&lt; endl;
}
</code></pre>
