/**

\page doxygen_quick_guide Doxygen Quick Guide

This page provides a quick guide to using <a
href="http://www.doxygen.org">doxygen</a> for documenting your software. It
briefly discusses the most important concepts and commands. For details,
please refer to the Doxygen User Manual.

\par Contents:
\anchor dqg_contents
<ul>
  <li>\ref dqg_documenting</li>
  <ul>
    <li>\ref dqg_docserver</li>
  </ul>
  <li>\ref dqg_grouping</li>
  <ul>
    <li>\ref dqg_modules</li>
    <li>\ref dqg_memgroup</li>
  </ul>
  <li>\ref dqg_formulas</li>
  <li>\ref dqg_commands</li>
  <ul>
    <li>\ref dqg_strucind</li>
    <li>\ref dqg_secind</li>
    <li>\ref dqg_visenh</li>
  </ul>
</ul>

<hr>

\section dqg_documenting Documenting the Code

  All the comments in the <code>*.h</code> header files of the LOFAR source
  tree will be documented. You don't need to use special comment delimiters to
  identify documentation blocks; you can use the ordinary C++ style
  <code>//</code> comment delimiter. 

  All documentation blocks are treated as \e detailed descriptions (see the
  Doxygen User Manual for an explanation of brief and detailed
  descriptions). A blank line ends a documentation block.

  Comments that should \e not be documented should be identified using the
  "special" <code>//#</code> comment delimiter.

  For more information, please refer to the <a
  href="http://www.lofar.org/project/lofardoc/document.php?action=match&docname=LOFAR-ASTRON-MEM-008">LOFAR
  C++ Coding Standard</a>.


\subsection dqg_docserver Refering to Documents on the LOFAR Document Server

  There will be times when you want to point a reader to one or more documents
  on the LOFAR Document Server
  (http://www.lofar.org/project/lofardoc/document.php). In order to do so, you
  need to know a little bit of the way that this site is structured.

  The document server is powered by PHP. A document is searched in the
  database, using a PHP query command. The general form of this command is:
  \verbatim
    ?action=match&docname=<docname>
  \endverbatim

  Documents names are composed as follows:
  \verbatim
    LOFAR-<origin>-<document-type>-<document number>
  \endverbatim

  So, for example, when you want to direct a reader to the document <a
  href="http://www.lofar.org/project/lofardoc/document.php?action=match&docname=LOFAR-ASTRON-MEM-006">LOFAR
  Build Environment</a>, which has the name <tt>LOFAR-ASTRON-MEM-006</tt>, you
  should add the following URL in the documentation:
  <br><tt>\<a
  href="http://www.lofar.org/project/lofardoc/document.php?action=match&docname=LOFAR-ASTRON-MEM-006"\>LOFAR
  Build Environment\</a\></tt>.


\ref dqg_contents "[Back to Contents]"

<hr>


\section dqg_grouping Grouping

  Doxygen has two mechanisms to group things together. One mechanism works at
  a global level, creating a new page for each group. These groups are called
  \ref dqg_modules "modules" in the documentation.  The other mechanism works
  within a member list of some compound entity, and is refered to as a 
  \ref dqg_memgroup "member group".


\subsection dqg_modules Modules

  Modules are a way to group things together on a separate page. Groups can be
  nested, so you can create a complete hierarchy of groups and subgroups. You
  can best think of a group as a set of logically related entities; for
  example, a collection of classes that together form a logical unit (e.g. a
  design pattern). If you use grouping in this way, you can clarify the
  high-level design of your software.

  To define a group you should use the \ref dqg_cmddefgroup "\\defgroup"
  command. You can make an entity a member of a specific group using the 
  \ref dqg_cmdingroup "\\ingroup" command. To avoid putting a 
  \ref dqg_cmdingroup "\\ingroup" command in the documentation of each member,
  you can also group members together using the open and close group markers
  <code>\@{</code> and <code>\@}</code>.

  You can use \ref dqg_cmdaddtogroup "\\addtogroup" instead of 
  \ref dqg_cmddefgroup "\\defgroup"; in that case Doxygen will not enforce
  unique labels.

  \par Example:
  \verbinclude group.h
  \htmlonly
  <a href="examples/group/modules.html" target="_blank">This</a> is the
  corresponding HTML documentation generated by Doxygen.
  \endhtmlonly

  \note Grouping is a very powerful mechanism. However, its complexity can be
  a bit intimidating at first. You should play around a bit with modules to
  get a good grisp. You will see that this is time well spent!


\subsection dqg_memgroup Member Groups

  If a compound (e.g. a class or file) has many members, it is often desired
  to group them together. Doxygen already automatically groups things together
  on type and protection level, but maybe you feel that this is not enough or
  that that default grouping is wrong.

  A member group is defined by the pair of open and close group markers
  <code>\@{</code> and <code>\@}</code> and anything that goes in
  between. Nesting of member groups is not allowed.

  \par Example:
  \verbinclude memgrp.h
  \htmlonly
  <a href="examples/memgrp/namespace_t_y_p_e_s.html" target="_blank">This</a>
  is the corresponding HTML documentation generated by Doxygen.
  \endhtmlonly

  <br>

  \ref dqg_contents "[Back to Contents]"

<hr>


\section dqg_formulas Using Formulas

  Doxygen allows you to put \f$\mbox{\LaTeX}\f$ formulas in the output (this
  works only for the HTML and \f$\mbox{\LaTeX}\f$ output, not for the RTF nor
  for the man page output).

  There are two ways to include formulas in the documentation.
  <ol>
  <li> Using in-text formulas that appear in the running text. 
       These formulas should be put between a pair of <code>\\f\$</code>
       commands.
  <li> Unnumbered displayed formulas that are centered on a separate line.
       These formulas should be put between <code>\\f[</code> and 
       <code>\\f]</code> commands.
  </ol>
  Formulas should be valid commands in \f$\mbox{\LaTeX}\f$'s math-mode. For
  details, please refer to the Doxygen User Manual.

  \par Example:
  \verbatim
  In order to solve the equation \f$ax^2 + bx + c = 0\f$, we can use the
  following well-known formula:
  \f[
    x = -b \pm \frac{\sqrt{b^2 - 4ac}}{2a}
  \f]
  \endverbatim
  will result in the following text: 
  <br>
  In order to solve the equation \f$ax^2 + bx + c = 0\f$, we can use the
  following well-known formula:
  \f[
    x = -b \pm \frac{\sqrt{b^2 - 4ac}}{2a}
  \f]


\ref dqg_contents "[Back to Contents]"

<hr>


\section dqg_commands Useful Commands

This section provides an overview of the most useful Doxygen commands to be
used when documenting LOFAR software. It contains the following subsections:
<ul>
<li>\ref dqg_strucind</li>
<li>\ref dqg_secind</li>
<li>\ref dqg_visenh</li>
</ul>

\subsection dqg_strucind Structural Indicators

\subsubsection dqg_cmdaddtogroup \addtogroup <name> [(title)]

  Defines a group just like \ref dqg_cmddefgroup "\\defgroup", but in contrast
  to that command using the same \<name\> more than once will not result in a
  warning, but rather one group with a merged documentation and the first
  title found in any of the commands.

  The title is optional, so this command can also be used to add a number of
  entities to an existing group using <code>\@{</code> and <code>\@}</code>
  like this:

\verbatim
  // \addtogroup mygrp
  // Additional documentation for group `mygrp'
  // @{

  // A function 
  void func1();

  // Another function
  void func2();

  // @}
\endverbatim


\subsubsection dqg_cmddefgroup \defgroup <name> (group title)

  Indicates that a comment block contains documentation for a
  \ref dqg_modules "group" of classes, files or namespaces. This can be used to
  categorize classes, files or namespaces, and document those
  categories. You can also use groups as members of other groups,
  thus building a hierarchy of groups.

  The \<name\> argument should be a single-word identifier.
  

\subsubsection dqg_cmdingroup \ingroup (<groupname> [<groupname> <groupname>])

  If the \\ingroup command is placed in a comment block of a class, file or
  namespace, then it will be added to the \ref dqg_modules "group" or groups
  identified by \<groupname\>.


\subsubsection dqg_cmdname \name (header)

  This command turns a comment block into a header definition of a 
  \ref dqg_memgroup "member group". The comment block should be followed by a 
  <code>// \@{ ... // \@}</code> block containing the members of the group.


\ref dqg_contents "[Back to Contents]"

<hr>
 

\subsection dqg_secind Section Indicators


\subsubsection dqg_cmdnote \note { text }

  Starts a paragraph where a note can be entered. The paragraph will be 
  indented. The text of the paragraph has no special internal structure. 
  All visual enhancement commands may be used inside the paragraph.


\subsubsection dqg_cmdpar \par [(paragraph title)] { paragraph }

  If a paragraph title is given this command starts a paragraph with a user
  defined heading. The heading extends until the end of the line. The
  paragraph following the command will be indented. If no paragraph title is
  given this command will start a new paragraph.
 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.


\subsubsection dqg_cmdpost \post { description of the postcondition }

  Starts a paragraph where the postcondition of an entity can be described.
  The paragraph will be indented. The text of the paragraph has no special
  internal structure. All visual enhancement commands may be used inside the
  paragraph.


\subsubsection dqg_cmdpre \pre { description of the precondition }

  Starts a paragraph where the precondition of an entity can be described.
  The paragraph will be indented. The text of the paragraph has no special
  internal structure. All visual enhancement commands may be used inside the
  paragraph.
  

\subsubsection dqg_cmdreturn \return { description of the return value }

  Starts a return value description for a function. The text of the paragraph
  has no special internal structure. All visual enhancement commands may be
  used inside the paragraph.
  

\subsubsection dqg_cmdsa \sa { references }

  Starts a paragraph where one or more cross-references to classes, functions,
  methods, variables, files or URL may be specified.  Two names joined by
  either <code>::</code> or <code>\#</code> are understood as referring to a
  class and one of its members. One of several overloaded methods or
  constructors may be selected by including a parenthesized list of argument
  types after the method name.

  Synonymous to \\see.


\subsubsection dqg_cmdthrow \throw <exception-object> { exception description }

  Starts an exception description for an exception object with name
  \<exception-object\>. Followed by a description of the exception. The
  existence of the exception object is not checked. The text of the paragraph
  has no special internal structure. All visual enhancement commands may be
  used inside the paragraph.  The \\throw description ends when a blank line
  or some other sectioning command is encountered.

  Synonymous to \\exception.


\subsubsection dqg_cmdtodo \todo { paragraph describing what is to be done }

  Starts a paragraph where a TODO item is described. The description will also
  add an item to a separate TODO list. The two instances of the description
  will be cross-referenced.


\subsubsection dqg_cmdwarning \warning { warning message }

  Starts a paragraph where one or more warning messages may be entered. The
  paragraph will be indented. The text of the paragraph has no special
  internal structure. All visual enhancement commands may be used inside the
  paragraph. The \\warning command ends when a blank line or some other
  sectioning command is encountered.


\ref dqg_contents "[Back to Contents]"

<hr>


\subsection dqg_visenh Commands for Visual Enhancements

\subsubsection dqg_cmda \a <word>

  Displays the argument \<word\> using a special font.
  Use this command to refer to member arguments in the running text.

  \par Example:
  \verbatim
  ... the \a x and \a y coordinates are used to ...
  \endverbatim 
  This will result in the following text:<br><br>
  ... the \a x and \a y coordinates are used to ...


\subsubsection dqg_cmdb \b <word>

  Displays the argument \<word\> using a bold font. 

  To put multiple words in bold use \<b\>multiple words\</b\>.

  
\subsubsection dqg_cmdc \c <word>

  Displays the argument \<word\> using a typewriter font.
  Use this to refer to a word of code.

  \par Example:
  Typing:
  \verbatim
     ... This function returns \c void and not \c int ...
  \endverbatim
  will result in the following text:<br><br>
     ... This function returns \c void and not \c int ...

  To put multiple words in typewriter font use \<tt\>multiple words\</tt\>.


\subsubsection dqg_cmdcode \code

  Starts a block of code. A code block is treated differently
  from ordinary text. It is interpreted as C/C++ code. The names of the
  classes and members that are documented are automatically replaced by 
  links to the documentation. 

  \sa \ref dqg_cmdendcode "\\endcode", and \ref dqg_cmdverbatim "\\verbatim"


\subsubsection dqg_cmde \e <word>

  Displays the argument \<word\> in italics.
  Use this command to emphasize words.

  \par Example:
  Typing:
  \verbatim
  ... this is a \e really good example ... 
  \endverbatim
  will result in the following text:<br><br>
  ... this is a \e really good example ...

  Equivalent to \\em. 
  To emphasize multiple words use \<em\>multiple words\</em\>.


\subsubsection dqg_cmdendcode \endcode

  Ends a block of code.
  \sa section \ref dqg_cmdcode "\\code"
 

\subsubsection dqg_cmdverbatim \verbatim

  Starts a block of text that will be verbatim included in both the HTML and
  the \f$\mbox{\LaTeX}\f$ documentation. The block should end with a
  \\endverbatim command. All commands are disabled in a verbatim block.


\ref dqg_contents "[Back to Contents]"

*/
