V 11
1
LANG:1 0 
PANEL,-1 -1 1062 56 N "_3DFace" 4
"$barColor"
"$station"
"$xPos"
"$yPos"
"main()
{
  bar.backCol($barColor);
  bar.foreCol($barColor);
  station = $station;
  station_text.text = station;
  strModuleName   = myModuleName(); 
  xPos= (int) $xPos;
  yPos= (int) $yPos;
  addSWCtrler();
  addMemAndHDD();
  addStationView();
}

void addSWCtrler() {
  int xPos_AddSymbol = xPos+235;
  int yPos_AddSymbol = yPos+3;

  string addPanelName;
  //loop over list and prepare panel with all datastreamobjects   
  //CCU and MCU machines different layout
  if (strpos(station,\"MCU\") >=0 ) {
    addPanelName    = \"objects/Processes/MCUSWLevelView.pnl\";
  } else if( strpos(station,\"CCU\") >=0) {
    addPanelName    = \"objects/Processes/CCUSWLevelView.pnl\";
  } else {
    addPanelName    = \"objects/Processes/stationSWLevelView.pnl\";
  }
  string swCtrlRefName=\"swCtrl\";
      
  if (  addSymbol(  strModuleName,                   // Stay in this modul
                    \"\",                              // Name of this panel
                    addPanelName,                    // Panel to add
                    swCtrlRefName,                   // Ref of the addedPanel
                    makeDynString( \"$station:\" + station) ,     // Define all $values
                    xPos_AddSymbol,                  // Xpos of the AddedSymbol
                    yPos_AddSymbol,                  // Ypos of the AddedSymbol
                    0,                               // angle
                    1    ,1                          // zoomX , zoomY
       ) < 0 ) {
    LOG_ERROR(\"baseLine.pnl:addSWCtrler|Error swCtrl for : \" + station + \" in this panel.\");
  }
}

void addMemAndHDD() {
  int xPos_AddSymbol = xPos+631; 
  int yPos_AddSymbol = yPos+3; 

  string addPanelName    = \"objects/Hardware/System_MemAndHDD.pnl\";

  string memAndHDDRefName=\"memAndHDD\";
      
  if (  addSymbol(  strModuleName,                   // Stay in this modul
                    \"\",                              // Name of this panel
                    addPanelName,                    // Panel to add
                    memAndHDDRefName,                // Ref of the addedPanel
                    makeDynString( \"$station:\" + station) ,     // Define all $values
                    xPos_AddSymbol,                  // Xpos of the AddedSymbol
                    yPos_AddSymbol,                  // Ypos of the AddedSymbol
                    0,                               // angle
                    1    ,1                          // zoomX , zoomY
      ) < 0 ) {
	  LOG_ERROR(\"baseLine.pnl:addMemAndHDD|Error memAndHDD for : \" + station + \" in this panel.\");
  }
}

void addStationView() {
  int xPos_AddSymbol = xPos+671; 
  int yPos_AddSymbol = yPos+3;

  string addPanelName    = \"objects/Hardware/Station_mainView.pnl\";
  if (strpos(station,\"MCU\") >=0 ||strpos(station,\"CCU\") >=0) return;

  string stationViewRefName=\"stationView\";
     
  if (  addSymbol(  strModuleName,                   // Stay in this modul
                    \"\",                              // Name of this panel
                    addPanelName,                    // Panel to add
                    stationViewRefName,              // Ref of the addedPanel
                    makeDynString( \"$station:\" + station) ,     // Define all $values
                    xPos_AddSymbol,                  // Xpos of the AddedSymbol
                    yPos_AddSymbol,                  // Ypos of the AddedSymbol
                    0,                               // angle
                    1    ,1                          // zoomX , zoomY
      ) < 0 ) {
	  LOG_ERROR(\"main.pnl:addStationView|Error stationView for : \" + station + \" in this panel.\");
 }
}
" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"
string station = \"\";
string baseDP = \"\";
string strPanelName;
string strModuleName;
int xPos;
int yPos;
bool bDoubleClicked  = false;

// routine for single mouse click
void click(string name) {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(name,\"EventClick\");
  }
}

// routine for double mouse click
void dblClick(string name) {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
  if (name == station) baseDP=station+\":LOFAR\";

  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"swlevel.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    if (name == station) {
      navPanel_setEvent(station,\"ChangePanel\");
    }
  }
  
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}                       

// routine for right mouse click
void rClick(string name) {

}                       " 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 3
"station_highLight"
""
1 240 10 E E E 1 E 0 E N "_Transparent" E N "Lofar_highLight" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

3 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  dpConnect( \"swlevel_stationCallback\",true,DPNAME_NAVIGATOR + g_navigatorID +\".objectTrigger\" );
}

void swlevel_stationCallback(string dp1, bool aTrig) {
  
  LOG_DEBUG(\"swlevel.pnl:swlevel_stationCallback|ObjectTrigger Callback on: \"+dp1+\" trigger: \"+aTrig);
  LOG_DEBUG(\"swlevel.pnl:swlevel_stationCallback|Found highlight : \" + highlight + \" Looking for station\");
  bool bHighlight=false;
  if (dynContains(highlight,station)) {
    bHighlight=true;
  }
  LOG_DEBUG(\"swlevel.pnl:swlevel_stationCallback|Highlight request: \"+bHighlight);
  station_highLight.visible = bHighlight;
  
}

" 0
 "main()
{
  click();
}" 0
 0 1 1 2 1 E U  1 E 0 0 931 15
6 0
"bar"
""
1 0 30 E E E 1 E 1 E N "_3DFace" E N "_3DFace" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 2 1 E U  1 E 3 3 928 12
2 4
"station_text"
""
1 890 0 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 "main()
{
  rClick(station);
}" 0
 "main(int x, int y)
{
  dblClick(station);
}" 0

4 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click(station);
}" 0
 0 1 1 2 1 E U  0 E 890 0 918 13
0 2 2 "0s" 0 0 0 192 0 0  890 0 1
1
LANG:1 34 MS Shell Dlg 2,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 cs001
1 5 1 "" 0
0
1 6 1 "" 1
0
1 7 1 "" 2
0
1 8 1 "" 3
0
1 9 1 "" 4
0
1 10 1 "" 5
0
1 11 1 "" 6
0
1 12 1 "" 7
0
1 13 1 "" 8
0
1 14 1 "" 9
0
1 15 1 "" 10
0
1 16 1 "" 11
0
1 17 1 "" 12
0
1 18 1 "" 13
0
1 19 1 "" 14
0
1 20 1 "" 15
0
1 21 2 "" 0
0
1 22 2 "" 2
0
1 23 2 "" 3
0
1 24 2 "" 4
0
1 25 2 "" 5
0
1 26 2 "" 8
0
1 27 2 "" 9
0
1 28 2 "" 10
0
1 29 2 "" 11
0
1 30 2 "" 12
0
1 31 2 "" 16
0
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
3 1 "PANEL_REF1" -1
"objects\\swlevel.pnl" 12 3 T 8 1 0 1 -9 0
1
"$station""$station"
3 2 "PANEL_REF2" -1
"objects\\datastreamLevel.pnl" 140 10 T 10 1 0 1 0 -7
1
"$station""$station"
0
