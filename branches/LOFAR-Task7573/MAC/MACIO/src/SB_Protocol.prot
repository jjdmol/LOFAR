//#  SB_Protocol.prot: Protocol definition for the Service Broker Daemon
//#
//#  Copyright (C) 2006
//#  ASTRON (Netherlands Foundation for Research in Astronomy)
//#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
//#
//#  This program is free software; you can redistribute it and/or modify
//#  it under the terms of the GNU General Public License as published by
//#  the Free Software Foundation; either version 2 of the License, or
//#  (at your option) any later version.
//#
//#  This program is distributed in the hope that it will be useful,
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//#  GNU General Public License for more details.
//#
//#  You should have received a copy of the GNU General Public License
//#  along with this program; if not, write to the Free Software
//#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#
//#  $Id$

autogen definitions protocol;

description = "Protocol for the Service Broker deamon";
prefix = "SB"; // for the signal names
id = "(LOFAR::MACIO::F_GCF_PROTOCOL + 3)";

// specify extra include files
// include = '<someFile.h>';

prelude = << PRELUDE_END

// The following messages are defined in the servicebroker protocol
//
// REGISTER_SERVICE    (uint16 seqnr, string servicename);
// SERVICE_REGISTERED  (uint16 seqnr, int32  portNumber,  uint16 result);
// GET_SERVICEINFO     (uint16 seqnr, string servicename, string hostname);
// SERVICE_INFO        (uint16 seqnr, int32  portNumber,  string hostname, uint16 result);
// UNREGISTER_SERVICE  (uint16 seqnr, string servicename);
// SERVICE_UNREGISTERED(uint16 seqnr, uint16 result);
// REREGISTER_SERVICE  (uint16 seqnr, string servicename, int32  portNumber);
// SERVICE_REREGISTERED(uint16 seqnr, uint16 result);
//

enum {
	SB_NO_ERROR, 
	SB_UNKNOWN_ERROR,
	SB_SERVICE_ALREADY_EXIST,
	SB_NO_FREE_PORTNR,
	SB_UNKNOWN_SERVICE,
	SB_NO_CONNECTION,
	SB_CANT_RECOVER
};

PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//
event = {
	signal = REGISTER_SERVICE;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "servicename";
		type = "string";
	};
};

event = {
	signal = UNREGISTER_SERVICE;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "servicename";
		type = "string";
	};
};

event = {
	signal = GET_SERVICEINFO;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "servicename";
		type = "string";
	};
	param = {
		name = "hostname";
		type = "string";
	};
};

event = {
	signal = SERVICE_REGISTERED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "portnumber";
		type = "uint32";
	};	
	param = {
		name = "result";
		type = "uint16";
	};
};

event = {
	signal = SERVICE_INFO;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "portnumber";
		type = "uint32";
	};
	param = {
		name = "hostname";
		type = "string";
	};
	param = {
		name = "result";
		type = "uint16";
	};
};

event = {
	signal = SERVICE_UNREGISTERED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "result";
		type = "uint16";
	};
};

event = {
	signal = REREGISTER_SERVICE;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "servicename";
		type = "string";
	};
	param = {
		name = "portnumber";
		type = "uint32";
	};
};

event = {
	signal = SERVICE_REREGISTERED;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint16";
	};
	param = {
		name = "servicename";
		type = "string";
	};
	param = {
		name = "result";
		type = "uint16";
	};
};
