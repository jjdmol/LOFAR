
(*

1: (io node without output)

FCNP             4 %
inputSection    19 %
inputThread     35 %
outputThread     0 %
outputSection    0 %
delayComp       15 %
interrupts       8 %
idle            19 %

ION<=>CN        23 % (=FCNP+outputSection+inputSection)
ION=>Storage     0 % (=outputThread)
Station=>ION    35 % (=inputThread)
comp.           15 %
interrupts       8 %

2: (io node without output)

FCNP             3 %
inputSection    16 %
inputThread     33 %
outputThread     0 %
outputSection    0 %
delayComp       10 %
interrupts      11 %
idle            26 %

ION<=>CN        19 % (=FCNP+outputSection+inputSection)
ION=>Storage     0 % (=outputThread)
Station=>ION    33 % (=inputThread)
comp.           10 %
interrupts      11 %

3:

FCNP             6 %
inputSection    14 %
inputThread     34 %
outputThread     6 %
outputSection    2 %
delayComp        5 %
interrupts      10 %
idle            23 %

ION<=>CN        22 % (=FCNP+outputSection+inputSection)
ION=>Storage     6 % (=outputThread)
Station=>ION    34 % (=inputThread)
comp.            5 %
interrupts      10 %

4:

FCNP            11 %
inputSection    13 %
inputThread     36 %
outputThread    12 %
outputSection    7 %
delayComp        1 %
interrupts      11 %
idle             9 %

ION<=>CN        31 % (=FCNP+outputSection+inputSection)
ION=>Storage    12 % (=outputThread)
Station=>ION    34 % (=inputThread)
comp.            1 %
interrupts      11 %

5:

FCNP             8 %
inputSection    13 %
inputThread     34 %
outputThread    12 %
outputSection    4 %
delayComp        1 %
interrupts       9 %
idle            19 %

ION<=>CN        25 % (=FCNP+outputSection+inputSection)
ION=>Storage    12 % (=outputThread)
Station=>ION    34 % (=inputThread)
comp.            1 %
interrupts       9 %

6:

FCNP             7 %
inputSection    13 %
inputThread     35 %
outputThread    11 %
outputSection    4 %
delayComp        2 %
interrupts       9 %
idle            19 %

ION<=>CN        24 % (=FCNP+outputSection+inputSection)
ION=>Storage    11 % (=outputThread)
Station=>ION    35 % (=inputThread)
comp.            2 %
interrupts       9 %

interrupts        ->     8 %      11 %      10 %       11 %       9 %       9 %
ion_storage       ->     0 %       0 %       6 %       12 %      12 %      11 %
ion_cn            ->    23 %      19 %      22 %       31 %      25 %      24 %
delaycomp         ->    15 %      10 %       5 %        1 %       1 %       2 %
station_ion       ->    35 %      33 %      34 %       34 %      35 %      35 %

The above data is read from this file and accumulated using the following command, where N is the line number we need:

awk -v N=1 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr

*)
newgraph
        X 3.8
        Y 2.6
	yaxis
		min 0
		max 100
		size 2
		label : System load (%)
	xaxis
		min 0
		max 7
		hash 0
		size 2.5
		label : \
Case (see Table 1)
        (*
	hash_labels rotate 22 vjt hjr
	hash_label at 1 : I, 16i, 4s, 543b
	hash_label at 2 : I, 8i, 24s, 327b
	hash_label at 3 : I, 8i, 64s, 155b
	hash_label at 4 : IQUV, 24s, 13b
	hash_label at 5 : IQUV, 64s, 10b
        *)
        (*
	hash_label at 1 : A
	hash_label at 2 : B
	hash_label at 3 : C
	hash_label at 4 : D
	hash_label at 5 : E
	hash_label at 6 : F
        *)

	newcurve
	(* station->ion *)
	marktype xbar marksize 0.8 fill 0.5 pattern solid cfill 0 0.270588219 0.525490165

	pts
        shell : awk -v N=5 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr
	label hjl x 1.1 y 105 : 1. Input from station

	newcurve
	(* delaycomp *)
	marktype xbar marksize 0.8 fill 0.5 pattern solid cfill 1 0.258823514 0.0549019575

	pts
        shell : awk -v N=4 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr
	label hjl x 1.1 y 100 : 2. Positional weights

	newcurve
	(* ion<->cn *)
	marktype xbar marksize 0.8 pattern solid cfill 1 0.827450931 0.125490189
        
	pts
        shell : awk -v N=3 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr
	label hjl x 1.1 y  95 : 3. I/O with compute cores

	newcurve
	(* ion->storage *)
	marktype xbar marksize 0.8 fill 0.2 pattern solid cfill 0.34117645 0.615686238 0.109803915
 
	pts
        shell : awk -v N=2 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr
	label hjl x 5.1 y 105 : 4. Output to storage

	newcurve
	(* interrupts *)
	marktype xbar marksize 0.8 fill 1 pattern solid cfill 0.51372546 0.792156816 1

	pts
        shell : awk -v N=1 '/->/ {a+=$3;b+=$5;c+=$7;d+=$9;e+=$11;f+=$13;n++; if(n==N) print "1 " a " 2 " b " 3 " c " 4 " d " 5 " e " 6 " f;}' <ionperf.jgr
	label hjl x 5.1 y 100 : 5. IRQ handling

  	legend custom

(* numbers for bars *)
newstring
  font Helvetica-Bold
  fontsize 8
  hjc
  vjc
  x 0.4
  y 5
  : 5.

copystring
  y 18
  : 3.

copystring
  y 38
  : 2.

copystring
  y 65
  : 1.

copystring
  x 6.6
  y 15
  : 4.

(* circles for cases *)
newstring
  font Helvetica-Bold
  fontsize 8
  hjc
  vjc
  lcolor 1 0.827450931 0.125490189
  x 1
  y -7
  : A

copystring
  x 2
  y -7
  : B

copystring
  x 3
  y -7
  : C

copystring
  x 4
  y -7
  : D

copystring
  x 5
  y -7
  : E

copystring
  x 6
  y -7
  : F

newcurve
  marktype circle
  marksize 0.5
  gray 0
  fill 0
  pts
     1 -7
     2 -7
     3 -7
     4 -7
     5 -7
     6 -7

