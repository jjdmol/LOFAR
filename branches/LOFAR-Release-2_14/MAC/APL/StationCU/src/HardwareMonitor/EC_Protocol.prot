// -*- mode: c++ -*-//
// Protocol definition for the EC controller
// 
autogen definitions protocol;

description = "Protocol for the EC controller interface";
prefix = "EC"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+17)"; 

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<Common/LofarTypes.h>';
//include = '<APL/RTCCommon/Timestamp.h>';

prelude = << PRELUDE_END
  
   //-- EC cmdId code's -------------------------------------------------------
   static const int16 EC_STATUS        = 1; 
   static const int16 EC_SETTINGS      = 2;
   static const int16 EC_CTRL_TEMP     = 3; 
   static const int16 EC_VERSION       = 5;
   static const int16 EC_STATION_INFO  = 6;
   static const int16 EC_METEO_INFO    = 7;
   static const int16 EC_METEO_STATUS  = 8;
   
   //-- EC cab state code's ----------------------------------------------------
   static const int16 CAB_OK                 = 0x0000;
   static const int16 CAB_MIN_CTRL_TEMP      = 0x0001;
   static const int16 CAB_MAX_CTRL_TEMP      = 0x0002;
   static const int16 CAB_HEATER_ACTIVE      = 0x0004;
   static const int16 CAB_TRIP_TEMP          = 0x0008;
   static const int16 CAB_MAX_HUMIDITY       = 0x0010;
   static const int16 CAB_TRIP_HUMIDITY      = 0x0020;
   static const int16 CAB_BROKEN_TEMP_SENSOR = 0x0100;
   static const int16 CAB_HUMIDITY_CONTROL   = 0x0200;
   static const int16 CAB_DOOR_CONTROL       = 0x0400;
   static const int16 CAB_TRIP               = 0x1000;
   static const int16 CAB_WARNING_1          = 0x2000;
   static const int16 CAB_WARNING_2          = 0x4000;
   
   //-- EC cab control code's --------------------------------------------------
   static const int16 CAB_FRONT_FAN_OUTER = 0x0001;
   static const int16 CAB_FRONT_FAN_INNER = 0x0002;
   static const int16 CAB_BACK_FAN_INNER  = 0x0004;
   static const int16 CAB_BACK_FAN_OUTER  = 0x0008;
   static const int16 CAB_FRONT_AIRFLOW   = 0x0010;
   static const int16 CAB_BACK_AIRFLOW    = 0x0020;
   static const int16 CAB_HEATER          = 0x0080;
   
   //-- EC cab door code's -----------------------------------------------------
   static const int16 CAB_FRONT_DOOR_OPEN = 0x0001;
   static const int16 CAB_BACK_DOOR_OPEN  = 0x0002;

   //-- EC station code's ------------------------------------------------------
   static const int16 STS_POWER48_ON      = 0x0001;
   static const int16 STS_POWER220_ON     = 0x0002;
   static const int16 STS_LIGHTNING       = 0x0001;
   
   struct cab_status {
	   int16 mode;
	   int16 state;
	   int16 temperature;
	   int16 humidity;
	   int16 control;
	   int16 doors;
	   int16 heater;
	};
	
	struct sts_status {
	   cab_status cab[4];
	   int16 power;
	   int16 lightning;
	};
   
   struct cab_settings {
      int16 min_ctrl_temp;
      int16 max_ctrl_temp;
      int16 heater_temp;
      int16 warn_1_temp;
      int16 warn_2_temp;
      int16 trip_temp;
      int16 max_hum;
      int16 trip_hum;
      int16 max_hr_change;
      int16 balance_point;
      int16 start_side;
      int16 seek_time;
      int16 seek_change;
   };
				
   struct sts_settings {
      cab_settings cab[4];
   };
   
   
PRELUDE_END;

//
// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
// Userdefine types are 
//

//
// EC events
//

event = {
  noheader;
  signal = CMD;
  dir = OUT;
  param = {
    name = "cmdId";
    type = "int16";
  };
  param = {
    name = "cabNr";
    type = "int16";
  };
  param = {
    name = "value";
    type = "int16";
  };
};

event = {
  noheader;
  signal = CMD_ACK;
  dir = IN;
  param = {
    name = "cmdId";
    type = "int16";
  };
  param = {
    name = "status";
    type = "int16";
  };
  param = {
    name = "payloadSize";
    type = "int16";
  };
  param = {
    name = "payload";
    type = "int16[128]";
  };
};
