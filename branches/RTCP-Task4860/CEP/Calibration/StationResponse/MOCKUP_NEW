//class Station [required???]
//{
//    name
//    ??
//};

class BeamFormer
{
public:
    ? position?
};

class BeamFormerLBA: public BeamFormer
{
public:
    BeamFormerHBA(const vector3r_t &position);
//    setReferenceDirection()
//    addAntennaField(AntennaField);

    addAntennaField(AntennaFieldLBA);

    matrix22c_t response()
    diag22c_t arrayFactor()
};

class BeamFormerHBA: public BeamFormer
{
public:
//    setReferenceDirection()
//    setTileReferenceDirection()
//    addAntennaField(AntennaField, AntennaModelHBA);

    BeamFormerLBA(const vector3r_t &position);
    addAntennaField(AntennaFieldHBA);

    matrix22c_t response(...)
    diag22c_t arrayFactor(...)
};

AntennaField
{
    CoordinateSystem
    Antennae

    AntennaField(const CoordinateSystem &sys);
    addAntenna(const Antenna &);

protected:
    rotation()
    coordinates(itrf)
};

AntennaFieldLBA: public AntennaField
{
    AntennaField(const CoordinateSystem &sys, AntennaModelLBA);

    matrix22c_t antennaResponse();
};

AntennaFieldHBA: public AntennaFieldHBA
{
    AntennaField(const CoordinateSystem &sys, AntennaModelHBA);

    matrix22c_t antennaResponse(); (ITRF->J2000)

    complex_t antennaArrayFactor();
    real_t  antennaWeight();

//    OR:
//    array_factor_t antennaArrayFactor();
};

AntennaModelLBA
{
    virtual ~AntennaModelLBA()
    virtual matrix22c_t response() = 0;
};

class DualDipoleAntenna: public AntennaModelLBA
{
    virtual matrix22c_t response();
};

AntennaModelHBA
{
    virtual ~AntennaModelHBA()
    virtual matrix22c_t response() = 0;
    virtual complex_t arrayFactor() = 0;
};

TileAntenna: public AntennaModelHBA
{
    Positions[16];

    TileAntenna();

    virtual matrix22c_t response()
    virtual complex_t arrayFactor(*no time*); ??
    virtual double weight(); ??
//    virtual array_factor_t arrayFactor(*no time*) ??
};
