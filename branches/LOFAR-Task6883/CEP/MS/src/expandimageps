#!/usr/bin/env python

import lofar.mstools as lmt
import lofar.parameterset as lps
import sys

if __name__ == "__main__":
    # First get nsubbands and/or nodeindex
    sbperimage = 10
    nodeindex  = 0
    nodes      = []
    starg = 1
    while True:
        if len(sys.argv)-starg < 2:
            break
        if sys.argv[starg] == '-n':
            sbperimage = int(sys.argv[starg+1])
            starg += 2
        elif sys.argv[starg] == '-i':
            try:
                # Convert to integer if possible.
                nodeindex = int(sys.argv[starg+1])
            except:
                # No integer, thus node names. Expand possible .. syntax.
                pv = lps.parametervalue('[' + sys.argv[starg+1] + ']')
                nodes = pv.expand().getStringVector()
            starg += 2
        else:
            break
    # Check if index is not too high
    if nodeindex >= sbperimage:
        raise ValueError('Error: nodeindex ' + str(nodeindex) +
                         ' outside range of sbPerImage ' + str(sbperimage))
    # Check if sufficient arguments are given
    if len(sys.argv)-starg < 3:
        print ''
        print 'Insufficient arguments; run as:'
        print '    expandimageps -n sbPerImage -i index_node'
        print '                  parsetin parsetout nsubbands [mspatterns [imageout]]'
        print '        sbPerImage  Number of subbands in a single image.'
        print '                    default = 10'
        print '        index_node  Create the image on the node containing the'
        print '                    i-th subband of the image.'
        print '                    Instead of an index a comma-separated list of' 
        print '                    node names can be given. The j-th image is'
        print '                    created on the j-th node of the list.'
        print '                    default = 0 (thus index 0)'
        print ''
        print ' mspatterns is a list of one or more names separated by commas.'
        print ' Each name represents a time slice.'
        print ' If given, it must be the name(s) of directories containing'
        print ' the MeasurementSets and/or glob-patterns matching the'
        print ' MeasurementSets to process. If a directory name is given,'
        print ' *.MS will be added to make it a glob pattern.'
        print ' If no or an empty mspatterns is given, it means that the msin'
        print ' parameter in the input parset defines the glob-patterns for'
        print ' the MeasurementSets to process.'
        print ''
        print ' If an outname is given, it must define the names of the'
        print ' output images. It can contain one or more of the placeholders:'
        print '   <DN>     directory name of first input used'
        print '   <BN>     base name of first input used'
        print '   <BN.>    as <BN>, but till first dot (thus without extension)'
        print '   <.BN>    as <BN>, but after first dot (thus extension)'
        print '   <SEQ>    sequence number 000, 001, ... (useful for SBG)'
        print '   <OBSID>  obsid of first matching input  (e.g. L23187)'
        print '   <SAP>    SAP nr of first matching input (e.g. SAP001)'
        print '   <SB>     SB nr of first matching input  (e.g. SB015)'
        print '   <TYPE>   type of first matching input   (e.g. uv)'
        print ' If no or an empty outname is given, the imgout parameter in the'
        print ' input parset defines the output names'
        print ''
        print 'For example:'
        print '  expandimageps  -n 8  -i 0  in.parset  out.parset  80'
        print '    "/data/scratch/pipeline/L45318/*.MS,/data/scratch/pipeline/L45326/*.MS"'
        print '    "/data/scratch/pipeline/L45318/L45318_<SAP>_SBG<SEQ>_sky.IM"'
        print ' creates 8 images (thus 1 per 10 subbands) using 2 time slices.'
        print ''
        if len(sys.argv) == 2  and  sys.argv[1] == '-h':
            help(lmt.expandps)
        sys.exit(1)
    # See if the MS pattern is given.
    msname = 'msin'
    if len(sys.argv)-starg > 3  and  len(sys.argv[starg+3]) > 0:
        # Split into parts.
        names = sys.argv[starg+3].split(',')
        # Add *.MS if no glob pattern given.
        msnames = [lmt.addfileglob(name, '*.MS') for name in names]
    # See if the MS output name is given.
    outname = 'imgout'
    if len(sys.argv)-starg > 4  and  len(sys.argv[starg+4]) > 0:
        outname = [sys.argv[starg+4]]
    lmt.expandps (sys.argv[starg], sys.argv[starg+1],
                  {'in': [[msnames, 'Input_Correlated']],
                   'out': [[outname, 'Output_SkyImage']]},
                  int(sys.argv[starg+2]), sbperimage, nodeindex, nodes)
