/*
 * ListPanel.java
 *
 *  Copyright (C) 2002-2007
 *  ASTRON (Netherlands Foundation for Research in Astronomy)
 *  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package nl.astron.lofar.sas.otbcomponents;

import javax.swing.DefaultListModel;
import javax.swing.border.TitledBorder;
import org.apache.log4j.Logger;
/**
 * Panel to view (and edit) lists
 * The lists are being send and retained from the panel via a Vector like string:
 * [item1,item2,item3]
 *
 * @created 13-07-2006, 14:50
 *
 * @author  coolen
 *
 * @version $Id$
 */
public class ListPanel extends javax.swing.JPanel {
    
    
    static Logger logger = Logger.getLogger(ListPanel.class);
    static String name="ListPanel";
    
    /** Creates new form BeanForm */
    public ListPanel() {
        initComponents();
        itsModel=new DefaultListModel();
        jList2.setModel(itsModel);
    }
    
    /**
     * set the title for this treewindow
     * @params  aTitle  The title for this tree
     */ 
    public void setTitle(String aTitle) {
        String aT = "Change/View "+aTitle+" List";
        ((TitledBorder)this.getBorder()).setTitle(aT);
        itsTitle=aTitle;
    }

    /**
     * get the title from this treewindow
     */ 
    public String getTitle() {
        return itsTitle;
    }

    /** 
     *  Destroys the list and creates a new list from the given string
     *
     *  @param list  the new list for the Panel
     */
    public void setList(String aList) {
        itsList=aList;
        fillList();
        isNew=false;
    }
    
    /** 
     * Get the List represented by this ListPanel
     */
    public String getList() {
        return itsList;
    }
    
    /**
     * Indictes if the carried list is a new one
     */
    public boolean isNew() {
        String aList=createList();
        compareList(aList);
        return isNew;
    }

    public void setWarning(String aWarning) {
        warningText.setText(aWarning);
        warningText.setEnabled(false);
        warningText.setVisible(true);
    } 

    
    
    public void removeWarning() {
        warningText.setText("");
        warningText.setEnabled(true);
        warningText.setVisible(false);
    }
    
    private String itsTitle  = "";
    private String itsList   = "";
    private boolean isNew  = false;
    private static DefaultListModel itsModel;

    
    private String createList() {
        String aList="[";
        if (itsModel.getSize() > 0) {
            aList += (String)itsModel.getElementAt(0);
            for (int i=1; i < itsModel.getSize();i++) {
                aList+= ","+itsModel.getElementAt(i);
            }
            
        }
        aList+="]";
        return aList;
    }
    
    private void fillList() {
        itsModel.clear();
        String aList = itsList;
        if (aList.startsWith("[")) {
            aList = aList.substring(1,aList.length());
        }
        if (aList.endsWith("]")) {
            aList = aList.substring(0,aList.length()-1);            
        }
        String[] aS=aList.split(",");
        for (int i=0; i< aS.length;i++) {
            itsModel.addElement(aS[i]);
        }
        jList2.setModel(itsModel);
    }
    
    private boolean compareList(String aList) {
        if (itsList.equals(aList)) {
            isNew=false;
            return true;
        } else {
            isNew=true;
            return false;
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        AddListItemButton1 = new javax.swing.JButton();
        DeleteListItemButton1 = new javax.swing.JButton();
        ClearListButton1 = new javax.swing.JButton();
        UpListButton1 = new javax.swing.JButton();
        DownListButton1 = new javax.swing.JButton();
        ApplyButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        warningText = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Edit List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        AddListItemButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_add.gif"))); // NOI18N
        AddListItemButton1.setText("Add");
        AddListItemButton1.setToolTipText("Add item to list");
        AddListItemButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddListItemButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddListItemButton1ActionPerformed(evt);
            }
        });

        DeleteListItemButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_delete.png"))); // NOI18N
        DeleteListItemButton1.setText("Delete");
        DeleteListItemButton1.setToolTipText("Delete Selected ListItem");
        DeleteListItemButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DeleteListItemButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteListItemButton1ActionPerformed(evt);
            }
        });

        ClearListButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_delAll.gif"))); // NOI18N
        ClearListButton1.setText("Clear");
        ClearListButton1.setToolTipText("Clear list");
        ClearListButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ClearListButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearListButton1ActionPerformed(evt);
            }
        });

        UpListButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_arrow_up.gif"))); // NOI18N
        UpListButton1.setText("Up");
        UpListButton1.setToolTipText("Move selected Item UP");
        UpListButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        UpListButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpListButton1ActionPerformed(evt);
            }
        });

        DownListButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_arrow_down.gif"))); // NOI18N
        DownListButton1.setText("Down");
        DownListButton1.setToolTipText("Move Selected item Down");
        DownListButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DownListButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownListButton1ActionPerformed(evt);
            }
        });

        ApplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_apply.png"))); // NOI18N
        ApplyButton.setText("Apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        CancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/astron/lofar/sas/otb/icons/16_cancel.png"))); // NOI18N
        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList2);

        warningText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warningText.setVisible(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(warningText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(CancelButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(ApplyButton))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jScrollPane1)
                                    .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                                .add(40, 40, 40)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(DownListButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, UpListButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(ClearListButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, DeleteListItemButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, AddListItemButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))))
                        .add(71, 71, 71))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(AddListItemButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(DeleteListItemButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ClearListButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UpListButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(DownListButton1)
                        .add(48, 48, 48))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .add(32, 32, 32)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CancelButton)
                    .add(ApplyButton))
                .add(15, 15, 15)
                .add(warningText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(142, 142, 142))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DownListButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownListButton1ActionPerformed
        int index=jList2.getSelectedIndex();
        if (index > -1 && index<itsModel.size()-1) {
            String aS=(String)itsModel.get(index+1);
            itsModel.set(index+1, itsModel.get(index));
            itsModel.set(index, aS);
            jList2.setSelectedIndex(index+1);
            jList2.validate();
        }
    }//GEN-LAST:event_DownListButton1ActionPerformed

    private void UpListButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpListButton1ActionPerformed
        int index=jList2.getSelectedIndex();
        if (index > 0) {
            String aS= (String)itsModel.get(index-1);
            itsModel.set(index-1, itsModel.get(index));
            itsModel.set(index, aS);
            jList2.setSelectedIndex(index-1);
            jList2.validate();
        }

    }//GEN-LAST:event_UpListButton1ActionPerformed

    private void ClearListButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearListButton1ActionPerformed
        itsModel.clear();
        jTextField2.setText("");
        jList2.validate();
    }//GEN-LAST:event_ClearListButton1ActionPerformed

    private void DeleteListItemButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteListItemButton1ActionPerformed
        if (jList2.getSelectedIndex() > -1) {
            itsModel.remove(jList2.getSelectedIndex());
            jList2.validate();
        }
    }//GEN-LAST:event_DeleteListItemButton1ActionPerformed

    private void AddListItemButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddListItemButton1ActionPerformed
        if (jTextField2.getText().length() > 0) {
            String aS=jTextField2.getText();
            itsModel.addElement(aS);
        }
        jTextField2.setText("");
        jList2.validate();
    }//GEN-LAST:event_AddListItemButton1ActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
       jList2.removeAll();
       itsTitle="";
       itsList="";
       isNew=false;
       this.setVisible(false);
       fireActionListenerActionPerformed(evt);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        String aList = createList();
        if (compareList(aList)){
            isNew = false;
        } else {
            itsList = aList;
            isNew = true;   
        }
        this.setVisible(false);
        fireActionListenerActionPerformed(evt);
    }//GEN-LAST:event_ApplyButtonActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddListItemButton1;
    private javax.swing.JButton ApplyButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton ClearListButton1;
    private javax.swing.JButton DeleteListItemButton1;
    private javax.swing.JButton DownListButton1;
    private javax.swing.JButton UpListButton1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel warningText;
    // End of variables declaration//GEN-END:variables

    /**
     * Utility field used by event firing mechanism.
     */
    private javax.swing.event.EventListenerList myListenerList =  null;

    /**
     * Registers ActionListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addActionListener(java.awt.event.ActionListener listener) {
        if (myListenerList == null ) {
            myListenerList = new javax.swing.event.EventListenerList();
        }
        myListenerList.add (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Removes ActionListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeActionListener(java.awt.event.ActionListener listener) {
        myListenerList.remove (java.awt.event.ActionListener.class, listener);
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param event The event to be fired
     */
    private void fireActionListenerActionPerformed(java.awt.event.ActionEvent event) {
        if (myListenerList == null) return;
        Object[] listeners = myListenerList.getListenerList ();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i]==java.awt.event.ActionListener.class) {
                ((java.awt.event.ActionListener)listeners[i+1]).actionPerformed (event);
            }
        }
    }

}
