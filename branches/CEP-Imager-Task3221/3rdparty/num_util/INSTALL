$Id: INSTALL 38 2007-02-01 01:46:52Z phil $


While I use bjam, the boost build tool, to build boost python, I
still rely on make for my own code.  To figure out what arguments
boost expects for debug and release versions of the code, I
do the following under Fedora core 4 Linux, with python v2.4.3 installed
in ~phil/usr243

1) Installing boost:

  a) download boost_1_33_1.tar.gz via www.boost.org
  
  b) untar in ~/install/boost_1_33_1

  c) set environmental variables

     export PYTHON_VERSION=2.4
     export PYTHON_ROOT=/home/phil/usr243

  d) compile bjam

     ~/install/boost_1_33_1/tools/build/jam_src phil@gull% sh ./build.sh

  e) build debug and release versions of the boost python libraries by
     running  all the tests or a single test at debug level 2 (-d2) to
     get verbose output

  cd ~/install/boost_1_33_1/libs/python/test/

  ~/install/boost_1_33_1/tools/build/jam_src/bin.linuxx86/bjam -d2 "-sTOOLS=gcc" \
                "-sBUILD=debug release" test

   or

  ~/install/boost_1_33_1/tools/build/jam_src/bin.linuxx86/bjam -d2 "-sTOOLS=gcc" \
                "-sBUILD=debug release" numpy

    (note that the numpy test will only pass if you also have Numeric or numarray installed,
     the current boost python test doesn't support numpy)

  f) copy the flags etc. boost used for compiling and linking into makefile

  g) copy the release and debug libraries to your own lib directory

    cp /home/phil/install/boost_1_33_1/bin/boost/libs/python/build\
           /libboost_python.so/gcc/release/shared-linkable-true/*python.so* \
            /home/phil/lib/boost_lib_1_33_1/release/.

    cp /home/phil/install/boost_1_33_1/bin/boost/libs/python/build\
        /libboost_python.so/gcc/debug/shared-linkable-true/*python.so* \
         /home/phil/lib/boost_lib_1_33_1/debug/.

   h) copy the boost headers into your include directory

    cp -r /home/phil/install/boost_1_33_1/boost /home/phil/include/boost_1_33_1/


2) Installing num_util

   a) edit makefile variables to reflect your python and boost installations

   b) 'make num_py_test.py' should compile num_util.pp plus the test code and
      module and run a doctest.  No output indicates success

   c) 'make simpletest.py'  should run simpletest.py and produce
      output identical to simpletestout.txt

