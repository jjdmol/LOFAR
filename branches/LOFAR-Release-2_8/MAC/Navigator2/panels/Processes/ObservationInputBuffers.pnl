V 11
1
LANG:1 0 
PANEL,-1 -1 1200 7500 N "_3DFace" 0
"main()
{
  // Initialise the Panel
  navPanel_initPanel(\"fw_viewBox\");
  strModuleName   = myModuleName();
  baseDP = \"LOFAR_PermSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);


  // This panel needs to act on active observations, in running status so we connect to the MACScheduler te be updated  
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";  
  // check if MACScheduler pointenabled and accessible
  if (dpExists(activeObsDP)) {
    if (dpConnect(\"updateActiveObservations\", activeObsDP+\":_online.._value\",
                                             activeObsDP+\":_online.._invalid\") == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:main|Couldn't connect to: \"+activeObsDP);
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"ObservationFlow_cobaltInputStreams.pnl:main|Couldn't find DP to connect to: \"+activeObsDP);
  }
}

void updateActiveObservations(string dp1, dyn_string obs,
                              string dp2, bool invalid)
{

  // remove pipelines from the list
  for (int i=dynlen(obs);i > 0;  i--) if (!navFunct_isObservation(obs[i])) dynRemove(obs,i);
  
  activeObservations = obs;
  // if there are selected observation check the observationsList if those selected observations still are active
  // remove the unactive observations from the list  
  
  // replace old observations if there are no observations selected
  if (selectedObservations) {
    for (int i=dynlen(observationsList); i < 1; i--) {
      int idx = dynContains(activeObservations,observationsList[i]);
      if (i <= 0) dynRemove(observationsList,i);
    }
    if (dynlen(observationsList) ==0) {
      selectedObservations=false;
    }
  }
  
  if (!selectedObservations) {
    observationsList = activeObservations;
  }
  // because CobaltProcesses claim their datapoints when the observation is actually running we need to connect to all these observations
  // and give a signal when the runstate of one of them changes to running to trigger the Cobalt point collection
  
  LOG_DEBUG(\"ObservationFlow_cobaltInputStreams.pnl:updateActiveObservations|observationList: \"+observationsList);

  obsConnections = makeDynString();  
  for (int i = 1; i <= dynlen(observationsList) ; i++) {
    // compose the WinCC OA DP name 
    string obsName = \"LOFAR_ObsSW_\"+observationsList[i]; 

    // Ask the claimmanager for the temp obs representation
    string obsDP=MainDBName+claimManager_nameToRealName(obsName);

    // add DP to list with all connects
    if (! dynContains(obsConnections,obsDP+\".runState\")) dynAppend(obsConnections,obsDP+\".runState\");
  }
  
  if (dynlen(oldObsConnections) > 0) {
    // disconnect old observations
    dpDisconnect(\"monitorRunStates\",oldObsConnections);
    dynClear(oldObsConnections);
  }
  
  // connect to runState for all active observations  
  if (dynlen(obsConnections) > 0 && dpConnect(\"monitorRunStates\",obsConnections) == -1) {
    LOG_ERROR(\"ObservationFlow_cobaltInputStreams.pnl:updateActiveObservations|ERROR: couldn't connect to : \"+obsConnections+ \" \" + getLastError());
  } else if (dynlen(obsConnections) > 0) {
    oldObsConnections = obsConnections;
  }     
}

void monitorRunStates(dyn_string dpList,dyn_string runStates) {
  for (int i=1; i<= dynlen(runStates); i++) {
    if (runStates[i] == \"Running\" || runStates[i] == \"Quiting\") {
      reload();
      break;
    }
  }
}




// connect to stationInputStreams from the active observations
void connectStationInputStreams(string runState) {
  stationInputs = \"\";
  string obsDP=\"\";
  dyn_string stream0DPList;
  dyn_string stream1DPList;
  dyn_string stream2DPList;
  dyn_string stream3DPList;

  // change all found DP's to contain all the elements that contain the stream.percBad
  if (connected0) {
    dpDisconnect(\"streamCB0\",connectTo0);
    dynClear(connectTo0);
    connected0 = false;
  }
  if (connected1) {
    dpDisconnect(\"streamCB1\",connectTo1);
    dynClear(connectTo1);
    connected1 = false;
  }
  if (connected2) {
    dpDisconnect(\"streamCB2\",connectTo2);
    dynClear(connectTo2);
    connected2 = false;
  }
  if (connected3) {
    dpDisconnect(\"streamCB3\",connectTo3);
    dynClear(connectTo3);
    connected3 = false;
  }

  if (dynlen(observationsList) == 1 && runState == \"Quiting\") {
    setValue(\"streamObject0\", \"foreCol\", \"Lofar_off\");
    setValue(\"streamObject1\", \"foreCol\", \"Lofar_off\");
    setValue(\"streamObject2\", \"foreCol\", \"Lofar_off\");
    setValue(\"streamObject3\", \"foreCol\", \"Lofar_off\");
    return;
  }


  //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {
    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      dynClear(stream0DPList);
      dynClear(stream1DPList);
      dynClear(stream2DPList);
      dynClear(stream3DPList);
      // For all observations collect the PermSW streamInfo
      stationInputs = navFunct_getStationInputForObservation(observationsList[i]);
  

      for (int i=1; i<= dynlen(stationInputs); i++) {
        if (! dynContains(connectTo0,stationInputs[i]+\".stream0:_online.._value\")) dynAppend(connectTo0,stationInputs[i]+\".stream0.rejected:_online.._value\");
        if (! dynContains(connectTo1,stationInputs[i]+\".stream1:_online.._value\")) dynAppend(connectTo1,stationInputs[i]+\".stream1.rejected:_online.._value\");
        if (! dynContains(connectTo2,stationInputs[i]+\".stream2:_online.._value\")) dynAppend(connectTo2,stationInputs[i]+\".stream2.rejected:_online.._value\");
        if (! dynContains(connectTo3,stationInputs[i]+\".stream3:_online.._value\")) dynAppend(connectTo3,stationInputs[i]+\".stream3.rejected:_online.._value\");
      }
      if (dynlen(stationInputs) > 0) baseDP = stationInputs[1];
    }
      
  
    // check if the required datapoint for this view are enabled and accessible
    if (dynlen(connectTo0)>0 && navFunct_dpReachable(CEPDBName)  ){
      if (dpConnect(\"streamCB0\", connectTo0) == -1) {
        setValue(\"streamObject0\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {
        connected0 = true;
      }
    } else {
      
      setValue(\"streamObject0\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo1)>0 && navFunct_dpReachable(CEPDBName) ){
      if (dpConnect(\"streamCB1\", connectTo1) == -1) {
        setValue(\"streamObject1\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {
        connected1 = true;
      }
    } else {
      setValue(\"streamObject1\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo2)>0 &&  navFunct_dpReachable(CEPDBName) ){
      if (dpConnect(\"streamCB2\", connectTo2) == -1) {
        setValue(\"streamObject2\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {
        connected2 = true;
      }
    } else {
      setValue(\"streamObject2\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo3)>0 && navFunct_dpReachable(CEPDBName)){
      if (dpConnect(\"streamCB3\", connectTo3) == -1) {
        setValue(\"streamObject3\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {
        connected3 = true;
      }
    } else {
      setValue(\"streamObject3\", \"foreCol\", \"Lofar_off\");
    }
  } else {
      setValue(\"streamObject0\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject1\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject2\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject3\", \"foreCol\", \"Lofar_off\");    
  }
}


void prepareProcesses() {
  dyn_string result;
  string connectTo=\"LOFAR_PermSW\";
  dynAppend(result,\",PermSW,\"+connectTo);    

  for  (int i=1; i<= dynlen(inputBuffers); i++) {
    dyn_string splitted = strsplit(inputBuffers[i],\"_\");
    dynAppend(result,\"LOFAR_PermSW,\"+splitted[3]+\",\"+connectTo+\"_\"+splitted[3]);
    dynAppend(result,connectTo+\"_\"+splitted[3]+\",CobaltStationInput,\"+connectTo+\"_\"+splitted[3]+\"_CobaltStationInput\");
  }  
  
  // write result to the db so various panels can reset themselves  
  dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".processesList\",result);
  
  LOG_DEBUG(\"ObservationInputBuffers.pnl:prepareProcesses|processList found: \"+ result);      
}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {
  LOG_DEBUG(\"ObservationInputBuffers.pnl:doAction| Action required. found: \" + anAction);
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"ObservationInputBuffers.pnl:doAction|found actionString: \" + actionString);
  
  // Reload
  if (actionString[1] == \"Reload\") {
    reload();
  }
}

void reload() {
  
  navFunct_clearGlobalLists();
 
  addInputBuffers();
 
  // set the observation selectable items
  prepareProcesses();

  redraw();

  // set panel to ready
  g_objectReady=true;
  
  // trigger that the panel values are calculated and ready
  navPanel_setEvent(\"ObservationInputBuffers.pnl\",\"Update\");
}

void addInputBuffers() {

  // get all the InputBuffers used for all active observations
  dynClear(inputBuffers);
  for (int i =1; i <= dynlen(obsConnections); i++) {
  
    string observation = claimManager_realNameToName(obsConnections[i]);
    
    dyn_string ib = navFunct_getStationInputForObservation(navFunct_observationNameToNumber(observation));  
  
    dynAppend(inputBuffers,ib);
  }
  dynSort(inputBuffers);
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"

string baseDP=\"\";
dyn_string observationsList;
dyn_string obsConnections;   
dyn_string oldObsConnections;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
dyn_string inputBuffers;

string activeObsDP = \"\";
string database;
bool selectedObservations=false;

dyn_string inputBuffers;
bool connected = false;
dyn_string IBRefNames;
string strModuleName;


void clearIBRefNames() {
  // remove all symbols because new ones will be added
  for (int i=1; i <= dynlen(IBRefNames); i++) {
    removeSymbol(strModuleName,\"\",IBRefNames[i]);
  }
  dynClear(IBRefNames);
}

void redraw() {
  string barColor = \"_3DFace\";
  if (dynlen(IBRefNames) > 0) {
    clearIBRefNames();
  }    
  int xPos_AddSymbol = 0; 
  int yPos_AddSymbol = 0; 
  int ref = 1;
  string addPanelName    = \"objects/Processes/inputBuffer.pnl\";
  //loop over list and prepare panel with all inputBuffer objects   
  for (int i=1; i<= dynlen(inputBuffers); i++) {
    if ((float)i/2. != floor(i/2.)) {
      barColor = \"lightgrey\";
    } else {
      barColor = \"_3DFace\";
    }
    IBRefNames[ref]=\"IB\"+(ref);
      
    if (  addSymbol(  strModuleName,                   // Stay in this modul
                      \"\",                              // Name of this panel
                      addPanelName,                    // Panel to add
                      IBRefNames[ref],            // Ref of the addedPanel
                      makeDynString( \"$inputBuffer:\" + inputBuffers[i],
                                     \"$barColor:\"    + barColor) ,     // Define all $values
                      xPos_AddSymbol,                  // Xpos of the AddedSymbol
                      yPos_AddSymbol,                  // Ypos of the AddedSymbol
                      0,                               // angle
                      1    ,1                          // zoomX , zoomY
        ) < 0 ) {
	  LOG_ERROR(\"ObservationInputBuffers.pnl:redraw|Error Appending inputBuffer for: \" + inputBuffers[i] + \" in this panel.\");
          }
    yPos_AddSymbol += 14;
    ref++;
  }

}
  
  
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
