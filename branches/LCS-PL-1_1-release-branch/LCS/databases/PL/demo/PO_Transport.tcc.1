//# This file was generated by genDBcode v2.9 on Tue Mar 16 09:16:30 CET 2004
//# with the command: genDBcode P Transport.plmap.1  
//# from the directory: /home/loose/LOFAR/LCS/databases/PL/demo
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
#include "PO_Transport.h"
#include <PL/TPersistentObject.h>

namespace LOFAR {
	namespace PL {

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< Engine > class.
void DBRep< Engine >::bindCols(dtl::BoundIOs& cols) {
	cols["INHOUD"]	== volume;
}


// toDBRep copies the fields of the Engine class to the
// DBRep< Engine > structure
void TPersistentObject< Engine >::toDBRep(DBRep< Engine >& dest) const
{
	dest.volume	= data().itsVolume;
}


// fromDBRep copies the fields of the DBRep< Engine > structure
// to the Engine class.
void TPersistentObject< Engine >::fromDBRep(const DBRep< Engine >& src)
{
	data().itsVolume	= src.volume;
}


// Initialize the internals of TPersistentObject< Engine >
void TPersistentObject< Engine >::init()
{
	// set the correct database table name
	tableName("Motor");
}


// Initialize the attribute map for TPersistenObject< Engine >
template<>
void TPersistentObject< Engine >::initAttribMap()
{
	theirAttribMap["volume"]	= "INHOUD";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< GasEngine > class.
void DBRep< GasEngine >::bindCols(dtl::BoundIOs& cols) {
	cols["KLEPPEN"]	== nrOfValves;
}


// toDBRep copies the fields of the GasEngine class to the
// DBRep< GasEngine > structure
void TPersistentObject< GasEngine >::toDBRep(DBRep< GasEngine >& dest) const
{
	dest.nrOfValves	= data().itsValveCount;
}


// fromDBRep copies the fields of the DBRep< GasEngine > structure
// to the GasEngine class.
void TPersistentObject< GasEngine >::fromDBRep(const DBRep< GasEngine >& src)
{
	data().itsValveCount	= src.nrOfValves;
}


// Initialize the internals of TPersistentObject< GasEngine >
void TPersistentObject< GasEngine >::init()
{
	{
	// create new TPersistentObject for BaseClass Engine
	Pointer p(new TPersistentObject< Engine >(data()));
	// associate Engine's owner object-id with GasEngine's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("BenzineMotor");
}


// Initialize the attribute map for TPersistenObject< GasEngine >
template<>
void TPersistentObject< GasEngine >::initAttribMap()
{
	theirAttribMap["nrOfValves"]	= "KLEPPEN";
	theirAttribMap["Engine::"]	=
		"@" + string(typeid(TPersistentObject< Engine >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< DieselEngine > class.
void DBRep< DieselEngine >::bindCols(dtl::BoundIOs& cols) {
	cols["TURBO"]	== turboCharged;
}


// toDBRep copies the fields of the DieselEngine class to the
// DBRep< DieselEngine > structure
void TPersistentObject< DieselEngine >::toDBRep(DBRep< DieselEngine >& dest) const
{
	dest.turboCharged	= data().itsTurboCharged;
}


// fromDBRep copies the fields of the DBRep< DieselEngine > structure
// to the DieselEngine class.
void TPersistentObject< DieselEngine >::fromDBRep(const DBRep< DieselEngine >& src)
{
	data().itsTurboCharged	= src.turboCharged;
}


// Initialize the internals of TPersistentObject< DieselEngine >
void TPersistentObject< DieselEngine >::init()
{
	{
	// create new TPersistentObject for BaseClass Engine
	Pointer p(new TPersistentObject< Engine >(data()));
	// associate Engine's owner object-id with DieselEngine's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("DieselMotor");
}


// Initialize the attribute map for TPersistenObject< DieselEngine >
template<>
void TPersistentObject< DieselEngine >::initAttribMap()
{
	theirAttribMap["turboCharged"]	= "TURBO";
	theirAttribMap["Engine::"]	=
		"@" + string(typeid(TPersistentObject< Engine >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< Vehicle > class.
void DBRep< Vehicle >::bindCols(dtl::BoundIOs& cols) {
	cols["WIELEN"]	== nrOfWheels;
	cols["MERK"]	== brand;
}


// toDBRep copies the fields of the Vehicle class to the
// DBRep< Vehicle > structure
void TPersistentObject< Vehicle >::toDBRep(DBRep< Vehicle >& dest) const
{
	dest.nrOfWheels	= data().itsWheelCount;
	dest.brand	= data().itsMake;
}


// fromDBRep copies the fields of the DBRep< Vehicle > structure
// to the Vehicle class.
void TPersistentObject< Vehicle >::fromDBRep(const DBRep< Vehicle >& src)
{
	data().itsWheelCount	= src.nrOfWheels;
	data().itsMake	= src.brand;
}


// Initialize the internals of TPersistentObject< Vehicle >
void TPersistentObject< Vehicle >::init()
{
	// set the correct database table name
	tableName("Voertuig");
}


// Initialize the attribute map for TPersistenObject< Vehicle >
template<>
void TPersistentObject< Vehicle >::initAttribMap()
{
	theirAttribMap["nrOfWheels"]	= "WIELEN";
	theirAttribMap["brand"]	= "MERK";
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< MotorCycle > class.
void DBRep< MotorCycle >::bindCols(dtl::BoundIOs& cols) {
}


// toDBRep copies the fields of the MotorCycle class to the
// DBRep< MotorCycle > structure
void TPersistentObject< MotorCycle >::toDBRep(DBRep< MotorCycle >& dest) const
{
}


// fromDBRep copies the fields of the DBRep< MotorCycle > structure
// to the MotorCycle class.
void TPersistentObject< MotorCycle >::fromDBRep(const DBRep< MotorCycle >& src)
{
}


// Initialize the internals of TPersistentObject< MotorCycle >
void TPersistentObject< MotorCycle >::init()
{
	{
	// create new TPersistentObject for Class GasEngine
	Pointer p(new TPersistentObject< GasEngine >(data().itsEngine));
	// associate GasEngine's owner object-id with MotorCycle's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass Vehicle
	Pointer p(new TPersistentObject< Vehicle >(data()));
	// associate Vehicle's owner object-id with MotorCycle's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("Motorfiets");
}


// Initialize the attribute map for TPersistenObject< MotorCycle >
template<>
void TPersistentObject< MotorCycle >::initAttribMap()
{
	theirAttribMap["engine"]	=
		"@" + string(typeid(TPersistentObject< GasEngine >).name());
	theirAttribMap["Vehicle::"]	=
		"@" + string(typeid(TPersistentObject< Vehicle >).name());
}

// bindCols() 'binds' the database columns represented by a cols
// to the members of the DBRep< Tractor > class.
void DBRep< Tractor >::bindCols(dtl::BoundIOs& cols) {
}


// toDBRep copies the fields of the Tractor class to the
// DBRep< Tractor > structure
void TPersistentObject< Tractor >::toDBRep(DBRep< Tractor >& dest) const
{
}


// fromDBRep copies the fields of the DBRep< Tractor > structure
// to the Tractor class.
void TPersistentObject< Tractor >::fromDBRep(const DBRep< Tractor >& src)
{
}


// Initialize the internals of TPersistentObject< Tractor >
void TPersistentObject< Tractor >::init()
{
	{
	// create new TPersistentObject for Class DieselEngine
	Pointer p(new TPersistentObject< DieselEngine >(data().itsEngine));
	// associate DieselEngine's owner object-id with Tractor's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	{
	// create new TPersistentObject for BaseClass Vehicle
	Pointer p(new TPersistentObject< Vehicle >(data()));
	// associate Vehicle's owner object-id with Tractor's objectid
	p->metaData().ownerOid() = metaData().oid();
	// add newly created TPersistentObject to container of ownedPOs.
	ownedPOs().push_back(p);
	}
	// set the correct database table name
	tableName("Traktor");
}


// Initialize the attribute map for TPersistenObject< Tractor >
template<>
void TPersistentObject< Tractor >::initAttribMap()
{
	theirAttribMap["engine"]	=
		"@" + string(typeid(TPersistentObject< DieselEngine >).name());
	theirAttribMap["Vehicle::"]	=
		"@" + string(typeid(TPersistentObject< Vehicle >).name());
}


	} // close namespace PL
}	// close namespace LOFAR

