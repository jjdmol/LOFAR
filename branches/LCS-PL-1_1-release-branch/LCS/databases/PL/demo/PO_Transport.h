//# This file was generated by genDBcode v2.9 on Tue Mar 16 10:11:37 CET 2004
//# with the command: genDBcode P Transport.plmap.proto  
//# from the directory: /home/loose/LOFAR/LCS/databases/PL/demo
//#
//# EDITING THIS FILE MANUALLY IS AT YOUR OWN RISK
//# IT MIGHT BE OVERWRITTEN BY THE NEXT MAKE OF YOUR PROJECT
//#
//# only include this file once
#if !defined(PO_040316101137_TRANSPORT_H)
#define PO_040316101137_TRANSPORT_H

#include "Transport.h"
#include <PL/DBRep.h>

namespace LOFAR {
	namespace PL {


// The DBRep< Engine > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< Engine > {
	void bindCols(dtl::BoundIOs& cols);
	float			volume;
};


// The DBRep< GasEngine > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< GasEngine > {
	void bindCols(dtl::BoundIOs& cols);
	int			valveCount;
};


// The DBRep< DieselEngine > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< DieselEngine > {
	void bindCols(dtl::BoundIOs& cols);
	bool			turboCharged;
};


// The DBRep< Vehicle > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< Vehicle > {
	void bindCols(dtl::BoundIOs& cols);
	int			wheelCount;
	std::string			make;
};


// The DBRep< MotorCycle > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< MotorCycle > {
	void bindCols(dtl::BoundIOs& cols);
};


// The DBRep< Tractor > structure is a contigious representation of
// all fields that should be stored to the database
template <>
struct DBRep< Tractor > {
	void bindCols(dtl::BoundIOs& cols);
};


	} // close namespace PL
}	// close namespace LOFAR

#include "PO_Transport.tcc"	// Include template code

#endif
