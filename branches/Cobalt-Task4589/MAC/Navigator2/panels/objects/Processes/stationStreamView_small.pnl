V 11
1
LANG:1 0 
PANEL,-1 -1 450 72 N "_3DFace" 2
"$station"
"$streamNr"
"main()
{
  stream = \"stream\"+$streamNr;
  station=$station;
  
  reload();
}
  
private void reload() {
  
  // get all the InputBuffers used by this station
  inputBuffers = navFunct_getInputBuffersForStation(station);
  

  // change all found DP's to contain all the elements that contain the stream.percBad
  if (connected) {
    dpDisconnect(\"stationStreamCB\",connectTo);
    dynClear(connectTo);
  }

  for (int i=1; i<= dynlen(inputBuffers); i++) {
    dynAppend(connectTo,inputBuffers[i]+\".\"+stream+\".percBad:_online.._value\");
  }
  
  // check if the required datapoint for this view are enabled and accessible
  if (navFunct_dpReachable(CEPDBName) && dynlen(connectTo)>0 ){
    if (dpConnect(\"stationStreamCB\", connectTo) == -1) {
      setValue(\"stationStreamObject0\", \"backCol\", \"Lofar_dpdoesnotexist\");
      setValue(\"stationStreamObject1\", \"backCol\", \"Lofar_dpdoesnotexist\");
      setValue(\"stationStreamObject0\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      setValue(\"stationStreamObject1\", \"foreCol\", \"Lofar_dpdoesnotexist\");
    }
  } else {
    if (dynlen(connectTo) <= 0) {
      setValue(\"stationStreamObject0\", \"backCol\", \"Lofar_off\");
      setValue(\"stationStreamObject1\", \"backCol\", \"Lofar_off\");
      setValue(\"stationStreamObject0\", \"foreCol\", \"Lofar_off\");
      setValue(\"stationStreamObject1\", \"foreCol\", \"Lofar_off\");
    } else {
      setValue(\"stationStreamObject0\", \"backCol\", \"Lofar_dpOffline\");
      setValue(\"stationStreamObject1\", \"backCol\", \"Lofar_dpOffline\");
      setValue(\"stationStreamObject0\", \"foreCol\", \"Lofar_dpOffline\");
      setValue(\"stationStreamObject1\", \"foreCol\", \"Lofar_dpOffline\");
    }
  }
}

void stationStreamCB(dyn_string dps, dyn_float values)
{
  
  string toolTipText = station+\"  \"+stream+\"<br>--------------<br>\";
  int count=0;
  string color = \"Lofar_off\";
  dyn_string toollist;

  // We need to know if this station is involved in an active observation to see if the inputbuffers are showing real values.
  // if not connected then we grey out the symbol
  
  if (navFunct_stationInObservation(station,\"active\")) {
    color = \"Lofar_operational\";
    // Here we get all bad values and we have to determine how many are wrong. if a station has more then 10% bad data (i.e. a single value in the values list
    // exceeds 10%, or more then 10% of the stations have bad data we need to set the color to red, if bad data occurs but its lower then the above mentioned
    // values we set the color to orange, and if no bad percentages occur the color is green.
  
  
    for (int i = 1; i<= dynlen(values); i++) {
      int rsppos = 0;
      float val = values[i];
      string dp = dps[i];
      string ionode = substr(dp,strpos(dp,\"PSIONode\"),10);
      if (val > 0.0 && val < 33.0) {
        color = \"Lofar_test\";
      } else if (val >= 33.0 && val < 66.0) {
        color = \"Lofar_maintenance\";
      } else if (val >= 66.0 && val < 100.0) {
        color = \"Lofar_suspicious\";
      } else if (val >= 100.0) {
        color = \"Lofar_broken\";
      }                                                                                                                                                                                                                          
        
      if (val > 0.0) {
        string station;
        string usedRSP=\"\";
        int nr  = substr(dp,strpos(dp,\"PSIONode\")+8,2);
        string IONodeDP = navFunct_IONode2DPName(nr);
        dpGet(IONodeDP+\".usedStation\",station);
        dpGet(IONodeDP+\".usedRSP\",usedRSP);
        if (usedRSP == \"RSP1\") rsppos = 1;
        
        string aS=station+\"  HBA\"+rsppos+\"</t> :\"+val+\"<br>\";
        dynAppend(toollist,aS);
        count++;
      }
      setValue(\"stationStreamObject\"+rsppos, \"backCol\", color);
      setValue(\"stationStreamObject\"+rsppos, \"foreCol\", color);
      if (strpos(station,\"CS\") < 0) {
        rsppos=1;
        setValue(\"stationStreamObject\"+rsppos, \"backCol\", color);
        setValue(\"stationStreamObject\"+rsppos, \"foreCol\", color);
      }

    }
    if (!count) {
      toolTipText += \"All ok\";
    }
  }
  setValue(\"stationStreamObject0\",\"toolTipText\",toolTipText);
  setValue(\"stationStreamObject1\",\"toolTipText\",toolTipText);

}" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"

string baseDP=\"\";
string stream = \"\";
string station = \"\";
dyn_string connectTo;
dyn_string inputBuffers;
bool connected = false;
bool bDoubleClicked  = false;

// routine for single mouse click
void click() {

}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
 
  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"stationStreamView_small.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Processes\",\"ChangeTab\");
  }

  
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}                       

// routine for right mouse click
void rClick() {

}                       " 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 0
"RECTANGLE1"
""
1 230 150 E E E 1 E 1 E N {0,0,0} E N "_3DFace" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E U  1 E 0 0 14 9
6 2
"stationStreamObject0"
""
1 130 20 E E E 1 E 1 E N "_Transparent" E N "_3DFace" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 2 1 E 1 0 1 1 1 1 E 0 0 6 7
6 3
"stationStreamObject1"
""
1 130 20 E E E 1 E 1 E N "_Transparent" E N "_3DFace" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 2 1 E 1 0 1 0 1 1 E 7 0 13 7
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
