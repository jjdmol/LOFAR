<html>

 

<head>
<style>
CODE {COLOR: #990000;}
.code{COLOR: #990000}
.codeComment{COLOR: #008000}
.codeHighlight{BACKGROUND-COLOR: #FFFF00}
.codeFileName{FONT-WEIGHT: bold;}
</style>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Mike Gradman">
<meta name="KeyWords"
content="DTL, Oracle, ODBC, database API, C++, Template Library">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<!--
  -- Copyright 2001
  -- Michael Gradman & Corwin Joy
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Corwin Joy & Michael Gradman make no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  --
  -- Copyright (c) 1996-1999
  -- Silicon Graphics Computer Systems, Inc.
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Silicon Graphics makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -- Copyright (c) 1994
  -- Hewlett-Packard Company
  --
  -- Permission to use, copy, modify, distribute and sell this software
  -- and its documentation for any purpose is hereby granted without fee,
  -- provided that the above copyright notice appears in all copies and
  -- that both that copyright notice and this permission notice appear
  -- in supporting documentation.  Hewlett-Packard Company makes no
  -- representations about the suitability of this software for any
  -- purpose.  It is provided "as is" without express or implied warranty.
  --
  -->
<!-- Generated by htmldoc -->
<title>Unicode Support in DTL</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000EE"
vlink="#551A8B" alink="#FF0000">

<p><font size="6" face="Bookman Old Style"><em><strong><u>dtl</u></strong></em></font></p>

<p><img src="stat.gif" width="6" height="6"> <!--end header--> <br>
</p> 

<h1>Unicode Wide Character Support in DTL</h1>

<p>When speaking about support for unicode, there are two distinct pieces of functionality that are often requested: </p>
<ul>
   <li>Support for writing and reading wide character strings to or from a database. </li>
   <li>Full blown wide character mode.  Wide character query strings, table names, field names, error messages, connection strings etc.</li>
</ul>

<p>The support for reading and writing wide character strings was generously donated by Dale Peakall. To read/write wide character strings we now support binding to wstring class member fields.  In addition, we have upgraded the variant_row class to automatically detect wide character columns in a database and represent these columns using a wstring. </p>

<p>The support for full-blown wide character mode is more involved. To enable unicode mode you will need to set two pre-processor defines called "UNICODE" and "_UNICODE"; these defines can be found the in the example_unicode project. To implement wide character support, we have taken a windows-ish type approach and defined the following typedefs and macros: (actually, under Windows we include the TCHAR.H header file which defines more than we need, but here we list here only what the the program requires other than implementation details in clib_fwd.cpp) <p>
<ul>
  <li><code>_TEXT()</code> macro.  Usage: <code>_TEXT("I am a string literal")</code>.  What this macro does is if UNICODE is defined it formats the string as a wide character array  <code>L"I am a string literal"</code>, otherwise it does nothing. </li>
  <li><code>TCHAR typedef</code>.  Under UNICODE this resolves to <code>wchar_t</code>, otherwise it repersents a <code>char</code>.</li>
  <li><code>_TUCHAR</code> typedef. Under UNICODE this resolves to <code>wchar_t</code>, otherwise it repersents an <code>unsigned char</code>. </li>
  <li><code>BYTE typedef</code>.  This always resolves to an <code>unsigned char</code>.</li>
  <li>typdefs for standard C++ library constucts: <pre><code>
#ifdef  _UNICODE
BEGIN_DTL_NAMESPACE 
	typedef unsigned char BYTE;
	typedef STD_::wstring tstring;
	typedef STD_::wostream tostream;
	static STD_::wostream &tcout = STD_::wcout; 
	typedef STD_::wostringstream tostringstream;

	// also we define -- psuedo-code since details are messy
	tostream_iterator&lt;typename X&gt; ... resolves to ostream_iterator&lt;X, wchar_t&gt;
END_DTL_NAMESPACE 
#else
BEGIN_DTL_NAMESPACE 
	typedef unsigned char BYTE;
	typedef STD_::string tstring;
	typedef STD_::ostream tostream;
	static STD_::ostream &tcout = STD_::cout; 
	typedef STD_::ostringstream tostringstream;

	// also we define -- psuedo-code
	tostream_iterator&lt;typename X&gt; ... resolves to ostream_iterator&lt;X, char&gt;
END_DTL_NAMESPACE
#endif 

  </code></pre></li></ul>
<p>Finally, we have changed all the functions in the library that accept and return <code>string</code> arguments to now take a <code>tstring</code> instead.  For example, if we request a find from an IndexedDBView using an alternate key, i.e. <code>find_AK(tstring &s, key &k)</code>, the field is now represented as a <code>tstring</code>.  This means that in UNICODE mode we now have the capability to fully support wide field names.</p>
<p>There is one final wrinkle worth noting about how we implemented the UNICODE version which is our exception structure.  All of our exceptions inherit from <code>std::exception</code> which provides a <code>what()</code> method to extract the exception message.  Unfortunately, this <code>what()</code>  method is standardized to return a <code>char *</code>, which is unsatisfactory if one wants to retrieve wide character error messages.  For this reason, all of our exception classes now have an additional method called <code>THCAR *twhat()</code> which returns a <code>char *</code> in ASCII mode and a <code>wchar_t *</code> in unicode mode.</p>


<hr>

<p align="left"><a href="index.htm"><img src="dtl_home.gif" alt="[DTL Home]"
width="54" height="54"></a> <br>
</p>

<p>Copyright © 2002, Michael Gradman and Corwin Joy. <script
language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + modDate.getYear()+".");
 //-->
 </script> </p>

<p><i>Permission to use, copy, modify, distribute and sell this software and its 
  documentation for any purpose is hereby granted without fee, provided that the 
  above copyright notice appears in all copies and that both that copyright notice 
  and this permission notice appear in supporting documentation. Corwin Joy and 
  Michael Gradman make no representations about the suitability of this software 
  for any purpose. It is provided &quot;as is&quot; without express or implied 
  warranty. </i></p>
<A href="http://sourceforge.net"> <IMG src="http://sourceforge.net/sflogo.php?group_id=17082&amp;type=5" width="210" height="62" border="0" alt="SourceForge Logo"></A> 
<p align="right">This site written using the ORB. <a href="http://www.cinenet.net/~cberry/orbinfo.html"><img src="http://www.cinenet.net/~cberry/orb_icon.gif" alt="[The ORB]"
width="54" height="54"></a></p>
</body> 

</html>
