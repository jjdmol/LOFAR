# Use pyrap.tables:
#   ms = pyrap.table(<file>)
#   spw = pt.table(ms.getkeyword('SPECTRAL_WINDOW'))
#     
Output_Correlated_[0] = {   # LOFAR Measurement Set
    size: 0,                    # MS-size in bytes
    fileFormat: "AIPS++/CASA",  # File format: FITS, AIPS++/CASA, or HDF5
    startTime: "not-a-datetime",# ms.getcell('TIME',0) - 0.5 * ms.getcell('EXPOSURE', 0)
    duration: 0.0,              # Diff last/first time in MAIN.TIME
    integrationInterval: 0.0,   # ms.getcell('EXPOSURE', 0)
    centralFrequency: 0.0,      # spw.getcell('REF_FREQUENCY', 0)
    channelWidth: 0.0,          # spw.getcell('RESOLUTION', 0)
    channelsPerSubband: 0       # spw.getcell('NUM_CHAN', 0)
}


Output_InstrumentModel_[0] = {
    size: 0,
    fileFormat: "AIPS++/CASA"
}


# Use pyrap.images:
#   image = pyrap.images(<file>)
#     coord = image.coordinates()
#       direction = coord.get_coordinate('direction')
#       spectral = coord.get_coordinate('spectral')
#       stokes = coord.get_coordinate('stokes')
#       
Output_SkyImage_[0] = {     # LOFAR Sky Image: 
    size: 0,                    # Image size in bytes
    fileFormat: "AIPS++/CASA",  # File format: FITS, AIPS++/CASA, or HDF5
    numberOfAxes: 0,            # len(coord.get_axes())
    nrOfDirectionCoordinates: 0,
    nrOfSpectralCoordinates: 0,
    nrOfPolarizationCoordinates: 0,
    coordinateTypes: [],
    locationFrame: "GEOCENTER", # spectral.get_frame()  ??
    timeFrame: 	 "",            # coord.get_obsdate()['refer']
    Pointing : {                # LOFAR_FIELD.REFERENCE_DIR
        equinox: "J2000",           # getcolkeywords(): MEASINFO.Ref
        coordType: "RA-DEC",
        coordVal0: 0.0,             # getcol()
        coordVal1: 0.0
    },
    DirectionCoordinate : {
        number: 0,                  ## coords.direction<number>
        nrDirectionLinearAxis: 0,   # len(direction.get_axes())
        PC0_0: 0.0,                 # direction.dict()['pc'][0][0]
        PC0_1: 0.0,                 # direction.dict()['pc'][0][1]
        PC1_0: 0.0,                 # direction.dict()['pc'][1][0]
        PC1_1: 0.0,                 # direction.dict()['pc'][1][1]
        equinox: "",                # direction.get_frame()
        raDecSystem: "ICRS",
        projection: "",             # direction.get_projection()
        projectionParameters: [],   # direction.dict()['projection_parameters']
        longitudePole: 0.0,         # direction.dict()['longpole']
        latitudePole: 0.0,          # direction.dict()['latpole']
        DirectionLinearAxis[n] : {  # n=[0..1]
            number: 0,                  ## coords.pixelmap<DirectionCoordinate.number>
            name: "",                   # direction.get_axes()[n]
            units: "",                  # direction.get_unit()[n]
            length: 0,                  ## MAIN.getcell('map',0).shape[numberOfAxes-number]
            increment: 0.0,             # direction.get_increment()[n]
            referencePixel: 0.0,        # direction.get_referencepixel()[n]
            referenceValue: 0.0         # direction.get_referenceval()[n]
        }
    },
    SpectralCoordinate : {
        number: 0,                  ## coords.spectral<number>
        spectralAxisType: "Linear", # Linear if coord.spectral.wcs exists (??)
        spectralQuantityType: "VelocityRadio",  # ??
        spectralQuantityValue: 0.0, # ??
        SpectralTabularAxis : {     # Valid if spectralAxisType == "Tabular"
            number: 0,                  ## coords.pixelmap<SpectralCoordinate.number>
            name: "",                   # spectral.dict()['name']
            units: "",                  # spectral.get_unit()
            length: 0                   ## MAIN.getcell('map',0).shape[numberOfAxes-number]
        },
        SpectralLinearAxis : {      # Valid if spectralAxisType == "Linear"
            number: 0,                  ## coords.pixelmap<SpectralCoordinate.number>
            name: "",                   # spectral.dict()['name']
            units: "",                  # spectral.get_unit()
            length: 0,                  ## MAIN.getcell('map',0).shape[numberOfAxes-number]
            increment: 0.0,             # spectral.get_increment()
            referencePixel: 0.0,        # spectral.get_referencepixel()
            referenceValue: 0.0         # spectral.get_referencevalue()
        }
    },
    PolarizationCoordinate : {
        number: 0,                  ## coords.stokes<number>
        polarizationType: [],       # stokes.get_stokes()
        PolarizationTabularAxis : {
            number: 0,                  ## coords.pixelmap<PolarizationCoordinate.number>
            name: "",                   # stokes.get_axes()[0]
            units: "",                  # always empty string
            length: 0                   # len(stokes.get_stokes())
        }
    }
}
