#!/bin/bash

# calibrate-stand-alone: top-level calibration script (stand-alone version).
#
# Copyright (C) 2009
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# $Id$


#
#  FUNCTIONS
#

usage()
{
    echo "usage:"
    echo "  calibrate-stand-alone [options] <observation> <parset> [catalog]"
    echo
    echo "arguments:"
    echo "  <observation>        observation (MS)"
    echo "  <parset>             parset describing the reduction strategy"
    echo "  [catalog]            catalog file (in makesourcedb format)"
    echo "                         either catalog or --sourcedb must be specified"
    echo
    echo "options:"
    echo "  -h, --help           print usage information and exit"
    echo "  -v, --verbose        be verbose"
    echo "  -f, --force          expands to --replace-parmdb, --replace-sourcedb"
    echo "  -n, --no-columns     do not add CASA imaging columns to the MS"
    echo "  --dry-run            print commands but do not start any processes"
    echo "  --sourcedb           path to a user specified source database"
    echo "                       (implies --replace-sourcedb)"
    echo "  --sourcedb-name      basename for the source database (default: sky)"
    echo "  --replace-sourcedb   replace the source database"
    echo "  --parmdb             path to a user specified parameter database"
    echo "                       (implies --replace-parmdb)"
    echo "  --parmdb-name        basename for the parameter database (default:"
    echo "                       instrument)"
    echo "  --replace-parmdb     replace the parameter database"
    echo "  -t OR --numthreads   set the number of threads to use (default: 1)"
    exit 1
}

notice()
{
    echo -e "\033[1;32m`date` ${1}\033[m"
}

warning()
{
    echo -e "\033[1;35m"`date` "warning: ${1}\033[m"
}

error()
{
    echo -e "\033[1;31m"`date` "[FAIL] error: ${1}\033[m"
    exit 1
}


#
# MAIN
#

# Identify ourselves.
echo "calibrate-stand-alone (top-level calibration script, stand-alone version) "`date`
echo

# Find the path used to start the script.
pgmpath=`dirname ${0}`
pgmpath=`cd ${pgmpath} > /dev/null 2>&1 && pwd`

# Get LOFARROOT.
if test ! "${LOFARROOT}" -o ! -d "${LOFARROOT}"; then
  error "\${LOFARROOT} undefined or invalid; source lofarinit.(c)sh first"
fi

# Options
help=0
verbose=0
force=0
add_columns=1
dry=0
replace_sourcedb=0
sourcedb=
sourcedb_basename="sky"
replace_parmdb=0
parmdb=
parmdb_basename="instrument"
numthreads=1

# Arguments
observation=
parset=
catalog=

# Parse command line.
while test $# -ne 0
do
    if test "${1}" = "-h" -o "${1}" = "--help"; then
        help=1
        break
    elif test "${1}" = "-v"  -o  "${1}" = "--verbose"; then
        shift
        verbose=1
    elif test "${1}" = "-f" -o "${1}" = "--force"; then
        shift
        force=1
    elif test "${1}" = "--dry-run"; then
        shift
        dry=1
    elif test "${1}" = "-n" -o "${1}" = "--no-columns"; then
        shift
        add_columns=0
    elif test "${1}" = "--sourcedb"; then
        if test $# -le 1; then
            error "${1} needs an additional argument"
        fi
        shift

        sourcedb=${1}
        shift
    elif test "${1}" = "--sourcedb-name"; then
        if test $# -le 1; then
            error "${1} needs an additional argument"
        fi
        shift

        sourcedb_basename=${1}
        shift
    elif test "${1}" = "--replace-sourcedb"; then
        shift
        replace_sourcedb=1
    elif test "${1}" = "--parmdb"; then
        if test $# -le 1; then
            error "${1} needs an additional argument"
        fi
        shift

        parmdb=${1}
        shift
    elif test "${1}" = "--parmdb-name"; then
        if test $# -le 1; then
            error "${1} needs an additional argument"
        fi
        shift

        parmdb_basename=${1}
        shift
    elif test "${1}" = "--replace-parmdb"; then
        shift
        replace_parmdb=1
    elif test "${1}" = "-t" -o "${1}" = "--numthreads"; then
        if test $# -le 1; then
            error "${1} needs an additional argument"
        fi
        shift

        if [[ $1 =~ ^[0-9]+$ ]]; then
            numthreads=${1}
        else
            error "Number of threads should be an integer"
        fi
        shift
    else
        break
    fi
done

# Derived values.
if test ${force} -eq 1; then
    replace_sourcedb=1
    replace_parmdb=1
fi

if test "${sourcedb}"; then
    replace_sourcedb=1
fi

if test "${parmdb}"; then
    replace_parmdb=1
fi

nargs=3 # If --sourcedb is specified, then catalog is optional
if test "${sourcedb}" -o "$replace_sourcedb" -eq 0; then
    nargs=2
fi

if test $# -lt $nargs -o $# -gt 3 -o ${help} -eq 1; then
    usage
fi

# Get arguments.
observation=${1}
parset=${2}
catalog=${3}

# Test preconditions.
if test ! -d "${observation}"; then
    error "not a measurement set: ${observation}"
fi

if test ! -r "${observation}"; then
    error "unreadable measurement set: ${observation}"
fi

if test ! -r "${parset}"; then
    error "parset file unreadable: ${parset}"
fi

if test \( ! -r "${catalog}" \) -a \( ${replace_sourcedb} -eq 1 \); then
    error "catalog file unreadable: ${catalog}"
fi

if test "${sourcedb}" -a ! -d "${sourcedb}"; then
    error "sourcedb not a directory: ${sourcedb}"
fi

if test "${parmdb}" -a ! -d "${parmdb}"; then
    error "parmdb not a directory: ${parmdb}"
fi

# Get absolute paths.
tmp=`dirname ${observation}`
observation=`cd ${tmp} > /dev/null; pwd`/`basename ${observation}`
tmp=`dirname ${parset}`
parset=`cd ${tmp} > /dev/null; pwd`/`basename ${parset}`
if test "${catalog}"; then
  tmp=`dirname ${catalog}`
  catalog=`cd ${tmp} > /dev/null; pwd`/`basename ${catalog}`
fi
if test "${sourcedb}"; then
    tmp=`dirname ${sourcedb}`
    sourcedb=`cd ${tmp} > /dev/null; pwd`/`basename ${sourcedb}`
fi
if test "${parmdb}"; then
    tmp=`dirname ${parmdb}`
    parmdb=`cd ${tmp} > /dev/null; pwd`/`basename ${parmdb}`
fi

sourcedb_path=${observation}/${sourcedb_basename}
parmdb_path=${observation}/${parmdb_basename}

echo "arguments:"
echo "    observation: ${observation}"
echo "    parset: ${parset}"
if test "${catalog}"; then
    echo "    catalog: ${catalog}"
else
    echo "    catalog: [not specified]"
fi
echo

if test ${verbose} -eq 1; then
    echo "    verbose: ${verbose}"
    echo "    force: ${force}"
    echo "    add_columns: ${add_columns}"
    echo "    dry: ${dry}"
    echo "    sourcedb: ${sourcedb}"
    echo "    sourcedb name: ${sourcedb_basename}"
    echo "    replace sourcedb: ${replace_sourcedb}"
    echo "    parmdb: ${parmdb}"
    echo "    parmdb name: ${parmdb_basename}"
    echo "    replace parmdb: ${replace_parmdb}"
    echo "    number of threads: ${numthreads}"
    echo
fi

#
# SETUP PARAMETER DATABASES
#

notice "create sourcedb"

if test -d "${sourcedb_path}" -a ! ${replace_sourcedb} -eq 1; then
    warning "sourcedb exists and will not be replaced (specify --replace-sourcedb to force replacement)"
else
  if test "${sourcedb}"; then
      if test ${verbose} -eq 1 -o ${dry} -eq 1; then
          echo "rm -rf \"${sourcedb_path}\" && cp -r \"${sourcedb}\" \"${sourcedb_path}\""
      fi

      if test ${dry} -eq 0; then
          rm -rf "${sourcedb_path}" && cp -r "${sourcedb}" "${sourcedb_path}"
          if test $? -ne 0; then
              error "failed to create sourcedb from: ${sourcedb}"
          fi
      fi
  else
      if test ${verbose} -eq 1 -o ${dry} -eq 1; then
          echo "rm -rf \"${sourcedb_path}\" && makesourcedb in=\"${catalog}\" out=\"${sourcedb_path}\" format='<'"
      fi

      if test ${dry} -eq 0; then
        rm -rf "${sourcedb_path}" && makesourcedb in="${catalog}" out="${sourcedb_path}" format='<'
        if test $? -ne 0; then
            error "failed to create sourcedb"
        fi
      fi
  fi
fi

notice "create parmdb"

if test -d "${parmdb_path}" -a ! ${replace_parmdb} -eq 1; then
    warning "parmdb exists and will not be replaced (specify --replace-parmdb to force replacement)"
else
    if test "${parmdb}"; then
        if test ${verbose} -eq 1 -o ${dry} -eq 1; then
            echo "rm -rf \"${parmdb_path}\" && cp -r \"${parmdb}\" \"${parmdb_path}\""
        fi

        if test ${dry} -eq 0; then
            rm -rf "${parmdb_path}" && cp -r "${parmdb}" "${parmdb_path}"
            if test $? -ne 0; then
                error "failed to create parmdb from: ${parmdb}"
            fi
        fi
    else
        if test ${verbose} -eq 1 -o ${dry} -eq 1; then
            echo "rm -rf \"${parmdb_path}\" && parmdbm << [default parmdb commands]"
        fi

        if test ${dry} -eq 0; then
            rm -rf "${parmdb_path}" && parmdbm <<EOF
create tablename="${parmdb_path}"
adddef Gain:0:0:Ampl  values=1.0
adddef Gain:1:1:Ampl  values=1.0
adddef Gain:0:0:Real  values=1.0
adddef Gain:1:1:Real  values=1.0
adddef DirectionalGain:0:0:Ampl  values=1.0
adddef DirectionalGain:1:1:Ampl  values=1.0
adddef DirectionalGain:0:0:Real  values=1.0
adddef DirectionalGain:1:1:Real  values=1.0
adddef Clock values=0.0, pert=1e-15
quit
EOF
          if test $? -ne 0; then
              error "failed to create parmdb"
          fi
        fi
    fi
fi


#
# ADD "IMAGING COLUMNS" (MODEL_DATA, CORRECTED_DATA, IMAGE_WEIGHTS) TO MS
#

if test ${add_columns} -eq 1; then
    notice "add CASA imaging columns to MS"

    if test ${verbose} -eq 1 -o ${dry} -eq 1; then
        echo "addImagingColumns.py \"${observation}\""
    fi

    if test ${dry} -eq 0; then
        addImagingColumns.py "${observation}"
    fi

    if test $? -ne 0; then
        error "failed to add CASA imaging columns"
    fi
fi


#
# EXECUTE MAIN PROCESS
#

notice "execute bbs-reducer"

if test ${verbose} -eq 1 -o ${dry} -eq 1; then
    echo "bbs-reducer --numthreads=${numthreads} --sourcedb=\"${sourcedb_path}\" --parmdb=\"${parmdb_path}\" \"${observation}\" \"${parset}\""
fi

if test ${dry} -eq 1; then
  exit 0
fi

exec bbs-reducer --numthreads=${numthreads} --sourcedb="${sourcedb_path}" --parmdb="${parmdb_path}" "${observation}" "${parset}"
