#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2007
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# $Id$

import sys
import os
import re
import lofar.expion.ionosphere as ionosphere
import lofar.parameterset

from pylab import *

arguments = sys.argv.__iter__()
scriptname = os.path.basename(arguments.next())

def print_error(msg):
   print "%s: %s" % (scriptname, msg)

sky_name = 'sky'
instrument_name = 'instrument'
clusterdescfile = "~/CEP.clusterdesc"
globaldb = 'globaldb'

def display_help_and_exit(dummy = None):
   print '''usage:
   %s [options] <parsetfile> <gdsfiles> ''' % scriptname
   print
   print '''arguments:
   <gdsfiles>     gds file(s)'''
   print
   print '''options:
   -h, --help        display this help text
   --cluster-desc <cluster description file>
                     Define cluster description file
                     (default: ~/CEP.clusterdesc)
   --sky-name <skyname>
                     Define basename for the sky model parmdb
                     (default: sky)
   --instrument-name <instrumentname>
                     Define basename of the instrument parmdb
                     (default: instrument)
   '''
   exit()

def set_clusterdesc(arguments):
   global clusterdescfile
   try:
      clusterdescfile = arguments.next()
      if clusterdescfile[0] == '-':
         raise ValueError
   except (KeyError, ValueError):
      print_error( "--cluster-desc should be followed by the name of the cluster description file")
      exit()

def set_instrument_name(arguments):
   global instrument_name
   try:
      instrument_name = arguments.next()
      if instrument_name[0] == '-':
         raise ValueError
   except (KeyError, ValueError):
      print_error( "--instrument-name should be followed by the basename of the instrument parmdb")
      exit()

def set_sky_name(arguments):
   global sky_name
   try:
      sky_name = arguments.next()
      if sky_name[0] == '-':
         raise ValueError
   except (KeyError, ValueError):
      print_error( "--sky-name should be followed by the basename of the sky parmdb")
      exit()

def set_globaldb(arguments):
   global globaldb
   try:
      globaldb = arguments.next()
      if globaldb[0] == '-':
         raise ValueError
   except (KeyError, ValueError):
      print_error( "--globaldb should be followed by the global")
      exit()

options = { '-h':                display_help_and_exit,
            '--help':            display_help_and_exit,
            '--cluster-desc':    set_clusterdesc,
            '--sky':             set_sky_name,
            '--instrument-name': set_instrument_name,
            '--globaldb':              set_globaldb}

while True:
   try: 
      argument = arguments.next()
   except StopIteration:
      print_error( "No parset file and no gds file(s) specified" )
      display_help_and_exit()
   if argument[0] == '-':
      try:
         options[argument](arguments)
      except KeyError:
         print_error( "Unknown option: " + argument )
         display_help_and_exit()
   else:
      break

parsetfile = argument
parset = lofar.parameterset.parameterset( parsetfile )

print clusterdescfile
clusterdescfile = os.path.expanduser( clusterdescfile )
print clusterdescfile

clusterdesc = lofar.parameterset.parameterset( clusterdescfile )
   
gdsfiles = []
gdsfiles.extend(arguments)

if len(gdsfiles) == 0 :
   print_error( "No gds file(s) or globaldb specified" )
   display_help_and_exit()


print "parset-file: " + repr(parsetfile)
print "gds-files: " + repr(gdsfiles)
print "instrument-name: " + repr(instrument_name)
print "sky-name: " + repr(sky_name)

stations = parset.getStringVector("ExpIon.Stations", [])
sources = parset.getStringVector("ExpIon.Sources", [])

d = {'XX' : 0, 'YY' : 1}
l = parset.getStringVector("ExpIon.Polarizations", ['XX', 'YY'])
polarizations = [d[key] for key in l]

DirectionalGainEnable = parset.getBool( "ExpIon.DirectionalGain.Enable", False ) 
GainEnable = parset.getBool( "ExpIon.Gain.Enable", False ) 
PhasorsEnable = parset.getBool( "ExpIon.Phasors.Enable", False )
RotationEnable = parset.getBool( "ExpIon.Rotation.Enable", False )
print "RotationEnable:", RotationEnable

print repr(stations)
print repr(sources)
print repr(DirectionalGainEnable)

ion_model = ionosphere.IonosphericModel(gdsfiles, clusterdescfile,
                                        GainEnable = GainEnable,
                                        DirectionalGainEnable = DirectionalGainEnable,
                                        RotationEnable = RotationEnable,
                                        PhasorsEnable = PhasorsEnable,
                                        stations = stations,
                                        sources = sources,
                                        polarizations = polarizations,
                                        instrument_name = instrument_name,
                                        globaldb = globaldb)

def operation_clocktec ( step ):
   ClockEnable = parset.getBool('.'.join(["ExpIon.Steps", step, "Clock.Enable"]), True )
   TECEnable = parset.getBool('.'.join(["ExpIon.Steps", step, "TEC.Enable"]), True )
   print '.'.join(["ExpIon.Steps", step, "Stations"])
   stations = parset.getStringVector('.'.join(["ExpIon.Steps", step, "Stations"]), [])
   print "stations: ", stations
   if ClockEnable or TECEnable :
      ion_model.ClockTEC( ClockEnable = ClockEnable, TECEnable = TECEnable, stations = stations )
   

def operation_fitmodel( step ) :
   height = parset.getFloat('.'.join(["ExpIon.Steps", step, "height"]), 200.0e3 )
   ion_model.calculate_piercepoints(height = height)

   order = parset.getInt('.'.join(["ExpIon.Steps", step, "order"]), 2 )
   ion_model.calculate_basevectors( order = order )

   ion_model.fit_model()

def operation_makemovie( step ) :
   npixels = parset.getInt('.'.join(["ExpIon.Steps", step, "npixels"]), 100 )
   extent = parset.getFloat('.'.join(["ExpIon.Steps", step, "extent"]), 0 )
   clim = parset.getFloatVector('.'.join(["ExpIon.Steps", step, "clim"]), [] )
   if len(clim) == 2:
      vmin = clim[0]
      vmax = clim[1]
   else:
      vmin = 0
      vmax = 0
   ion_model.make_movie(extent = extent, npixels = npixels, vmin = vmin, vmax = vmax)

def operation_store ( step ):
   ClockTEC_parmdbname = parset.getString('.'.join(["ExpIon.Steps", step, "ClockTEC.parmdb"]), "ClockTEC.parmdb")
   phases_parmdbname = parset.getString('.'.join(["ExpIon.Steps", step, "Phases.parmdb"]), "ionosphere")
   ion_model.write_to_parmdb(  )
   #ion_model.write_phases_to_parmdb( ClockTEC_parmdbname, phases_parmdbname )
   
def operation_plot ( step ):
   print ion_model.TEC.shape
   figure(1)
   plot(ion_model.Clock[0,:,:])
   figure(2)
   plot(ion_model.TEC[0,:,:])
   show()

Operations = { "CLOCKTEC": operation_clocktec ,
               "FITMODEL": operation_fitmodel,
               "MAKEMOVIE": operation_makemovie,
               "STORE":  operation_store,
               "PLOT":  operation_plot }

steps = parset.getStringVector("ExpIon.Steps", [] )

for step in steps:
   operation = parset.getString( '.'.join( [ "ExpIon.Steps", step, "Operation" ] ) )
   Operations[ operation ] ( step )

