//  Copyright (C) 2000, 2001
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//////////////////////////////////////////////////////////////////////

package org.astron.basesim;

/**
 * Title: Class MessageEvent
 * Description: Message events that are generated by Graph objects.
 * Copyright:    Copyright (c)
 * Company: Atron
 * @author Robbert Dam
 * @version 1.0
 */

import org.astron.util.gui.*;
import javax.swing.*;

/**
 * Message class for Graph object. Implements the onClick() method. When
 * a user clicks on a MessageGraph, the Graph that send the message is selected
 * and centered in the diagram view.
 */
public class MessageGraph extends MessageEvent {

  /** Holds destination Graph in case of a Connection error */
  private Graph dest;

  public MessageGraph(Object source, String text) {
    super(source,text);
  }
  /** This constructor should be used to report a connection error.*/
  public MessageGraph(Object source, Object dest, String text) {
    super(source,text);
    if (dest instanceof Graph) this.dest = (Graph)dest;
  }
  public MessageGraph(Object source, String text, int type) {
    super(source,text,type);
  }
  /** This constructor should be used to report a connection error.*/
  public MessageGraph(Object source, Object dest, String text, int type) {
    super(source,text,type);
    if (dest instanceof Graph) this.dest = (Graph)dest;
  }

  /** Selects a Graph from which the message originates. */
  public boolean onClick(JNotifier notifier) {
    Graph graph;
    if (source instanceof Graph) {
      graph = (Graph)source;
    } else {
      System.err.println("MessageGraph.onClick(): source of MessageGraph"
        + " (" + source + ") is expected to be instance of Graph!");
      return false;
    }

    // get the Main window object; focus on GraphComponent
    // REVISIT: make this a little more readable
    Main main = (Main)notifier.getParent()
                .getParent().getParent().getParent().getParent();
    main.setFocus(Main.COMP_DIAGRAM);

    if (graph.isVisible()) {
      GraphManager manager = graph.getGraphManager();
      if (manager.getContainer() instanceof JBaseSim) {
        JBaseSim baseSim = (JBaseSim)manager.getContainer();
        baseSim.centerGraph(graph,false);
        SelectionManager selMan = manager.getSelectionManager();
        selMan.setSelection(graph);
        if (dest != null) selMan.addSelection(dest);
        baseSim.repaint();
      } else {
        System.err.println("MessageGraph.onClick() handler cannot obtain a "
          + "handler to a JBaseSim from the GraphManager.");
        return false;
      }
    } else {
      JOptionPane.showMessageDialog(
        null,
        "This message is related to " + graph.getName() + " which is currently"
        + " invisible. \nPlease expand its parent and click on the message again.",
        graph.getName(),
        JOptionPane.INFORMATION_MESSAGE);
    }
    return true;
  }
}