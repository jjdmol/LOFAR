/****************************************************************************/
/* ZEPTOOS:zepto-info */
/*     This file is part of ZeptoOS: The Small Linux for Big Computers.
 *     See www.mcs.anl.gov/zeptoos for more information.
 */
/* ZEPTOOS:zepto-info */
/* */
/* ZEPTOOS:zepto-fillin */
/*     $Id: buffers.c,v 1.9 2007/06/27 15:10:45 iskra Exp $
 *     ZeptoOS_Version: 1.2
 *     ZeptoOS_Heredity: FOSS_ORIG
 *     ZeptoOS_License: GPL
 */
/* ZEPTOOS:zepto-fillin */
/* */
/* ZEPTOOS:zepto-gpl */
/*      Copyright: Argonne National Laboratory, Department of Energy,
 *                 and UChicago Argonne, LLC.  2004, 2005, 2006, 2007
 *      ZeptoOS License: GPL
 * 
 *      This software is free.  See the file ZeptoOS/misc/license.GPL
 *      for complete details on your rights to copy, modify, and use this
 *      software.
 */
/* ZEPTOOS:zepto-gpl */
/****************************************************************************/

#define _GNU_SOURCE /* For posix_memalign.  */
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <errno.h>
#include <pthread.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <assert.h>
#include <string.h>

#include "bgl.h"
#include "zoid.h"
#include "zoid_api.h"

#if !defined L1_CONSISTENCY_IN_SOFTWARE

#define NR_FREE_SEGMENTS (* (int *) ((char *) sram + 0x3800))
#define FREE_SEGMENTS    ((struct segment *) ((char *) sram + 0x3808))

struct segment
{
    char   *address;
    size_t size;
};

static lock_pair allocator_locks;

void *__zoid_alloc(size_t size)
{
    char	   *address = 0;
    struct segment *free_segment;

    size += 32 + 31, size &= ~31;

    enter_critical_section(&allocator_locks);

    for (free_segment = FREE_SEGMENTS + NR_FREE_SEGMENTS; -- free_segment >= FREE_SEGMENTS;)
	if (size == free_segment->size) {
	    address = free_segment->address;
	    -- NR_FREE_SEGMENTS;
	    memmove(free_segment, free_segment + 1, (char *) (FREE_SEGMENTS + NR_FREE_SEGMENTS) - (char *) free_segment);
	    break;
	} else if (size < free_segment->size) {
	    address		  = free_segment->address;
	    free_segment->address = free_segment->address + size;
	    free_segment->size   -= size;
	    break;
	}

    leave_critical_section(&allocator_locks);

    * (size_t *) address = size;
    /* fprintf(stderr, "__zoid_alloc(%d) = %p\n", size, address); */
    return address + 32;
}


void __zoid_free(void *addr)
{
    char 	   *address = (char *) addr - 32;
    size_t	   size = * (size_t *) address;
    struct segment *free_segment;
    int		   merge_left, merge_right;

    enter_critical_section(&allocator_locks);

    /*flush_L1_region(address, size);*/

    free_segment = FREE_SEGMENTS + NR_FREE_SEGMENTS;

    while (free_segment > FREE_SEGMENTS && address < free_segment[-1].address)
	-- free_segment;

    merge_left	= free_segment > FREE_SEGMENTS && free_segment[-1].address + free_segment[-1].size == address;
    merge_right = free_segment < FREE_SEGMENTS + NR_FREE_SEGMENTS && address + size == free_segment->address;

    /*fprintf(stderr, "__zoid_free(%p): merge_left = %d, merge_right = %d\n", address, merge_left, merge_right);*/

    if (merge_left) {
	if (merge_right) {
	    free_segment[-1].size += size + free_segment->size;
	    -- NR_FREE_SEGMENTS;
	    memmove(free_segment, free_segment + 1, (char *) (FREE_SEGMENTS + NR_FREE_SEGMENTS) - (char *) free_segment);
	} else {
	    free_segment[-1].size += size;
	}
    } else {
	if (merge_right) {
	    free_segment->address = address;
	    free_segment->size   += size;
	} else {
	    memmove(free_segment + 1, free_segment, (char *) (FREE_SEGMENTS + NR_FREE_SEGMENTS) - (char *) free_segment);
	    ++ NR_FREE_SEGMENTS;
	    free_segment->address = address;
	    free_segment->size    = size;
	}
    }

    leave_critical_section(&allocator_locks);
}


void allocater_init(void)
{
    NR_FREE_SEGMENTS	     = 1;
    FREE_SEGMENTS[0].address = (char *) 0xA6000000;
    FREE_SEGMENTS[0].size    = 416 * 1024 * 1024;

    init_lock_pair(&allocator_locks);
}

#else

#define NR_OF_SEG_DESCS 256
#define MEM_SIZE 416*1024*1024
#define MEM_START 0xA6000000


typedef struct seg_desc_s {
    void *addr;
    size_t size;
    struct seg_desc_s *next;
} seg_desc;

static struct alloc_data {
  seg_desc *unused_seg_desc_list;
  seg_desc *free_seg_list;
  seg_desc *allocated_seg_list;
} *alloc_data;

static void *zoid_mem;
static lock_pair allocater_locks;



#if defined L1_CONSISTENCY_IN_SOFTWARE
static inline void flush_seg_descriptors(void)
{
    flush_L1_region(zoid_mem, sizeof(struct alloc_data) + NR_OF_SEG_DESCS * sizeof(seg_desc));
}
#endif


#if 0
static void print_lists() {
    seg_desc *p;

    fprintf(stderr, "Free:");
    p = alloc_data->free_seg_list;
    while(p) {
	fprintf(stderr, " %p(%u)", p->addr, p->size);
	p = p->next;
    }
    fprintf(stderr, "\n");

    fprintf(stdout, "Allocated:");
    p = alloc_data->allocated_seg_list;
    while(p) {
	fprintf(stdout, " %p-%p(%u)", p->addr, p->addr + p->size, p->size);
	p = p->next;
    }
    fprintf(stdout, "\n");
}
#endif


static void return_unused_seg_desc(seg_desc* seg_desc) {
    assert(seg_desc);

    seg_desc->next = alloc_data->unused_seg_desc_list;
    alloc_data->unused_seg_desc_list = seg_desc;
}


static seg_desc *get_seg_desc(void) {
    seg_desc *tmp;

    assert(alloc_data->unused_seg_desc_list);

    tmp = alloc_data->unused_seg_desc_list;
    alloc_data->unused_seg_desc_list = alloc_data->unused_seg_desc_list->next;
    return tmp;
}


static void add_to_free_seg_list(seg_desc *seg) {
    seg_desc *p = alloc_data->free_seg_list;
    seg_desc *prev = NULL;
    seg_desc *tmp;
    
    while(p && seg->addr > p->addr) {
	prev = p;
	p = p->next;
    }

    if(prev) {
	if(prev->addr + prev->size == seg->addr) {
	    prev->size += seg->size;
	    return_unused_seg_desc(seg);
	    seg = prev;
	} else {
	    prev->next = seg;
	    seg->next = p;
	}
    } else {
	alloc_data->free_seg_list = seg;
	seg->next = p;
    }

    if(seg->next && seg->addr + seg->size == seg->next->addr) {
	tmp = seg->next;
	seg->size += tmp->size;
	seg->next = tmp->next;
	return_unused_seg_desc(tmp);
    }
}


void __zoid_free(void *addr) {
    seg_desc *p, *prev;
   
    /*fprintf(stderr, "%d: __zoid_free(%p)\n", getpid(), addr);*/
    enter_critical_section(&allocater_locks);
    /*flush_seg_descriptors();*/

    p = alloc_data->allocated_seg_list;
    prev = NULL;

    while(p && p->addr != addr) {
	prev = p;
	p = p->next;
    }

    assert(p);

    if(prev)
	prev->next = p->next;
    else
	alloc_data->allocated_seg_list = p->next;

    flush_L1_region(p->addr, p->size);

    add_to_free_seg_list(p);

    flush_seg_descriptors();
    leave_critical_section(&allocater_locks);
}


void *__zoid_alloc(size_t size) {
    seg_desc *p, *prev, *new;
    void *new_addr;

    assert(size > 0);

    size += 31;
    size &= ~31;

    enter_critical_section(&allocater_locks);
    /*flush_seg_descriptors();*/

    p = alloc_data->free_seg_list;
    prev = NULL;

    while(p && p->size < size) {
	prev = p;
	p = p->next;
    }

    if(!p) {
	leave_critical_section(&allocater_locks);
	return NULL;
    }

    if(p->size == size) {
	if(prev)
	    prev->next = p->next;
	else
	    alloc_data->free_seg_list = p->next;

	new = p;
    } else {
	new = get_seg_desc();
	new->size = size;
	new->addr = p->addr;
	p->addr += size;
	p->size -= size;
    }

    new->next = alloc_data->allocated_seg_list;
    alloc_data->allocated_seg_list = new;
    new_addr = new->addr;

    flush_seg_descriptors();
    leave_critical_section(&allocater_locks);

    /*fprintf(stderr, "%d: __zoid_alloc(%u) = %p\n", getpid(), size, new_addr);*/
    return new_addr;
}


void allocater_init(void) {
    int i;
    seg_desc *seg_descs;

    zoid_mem = (void*)MEM_START;

    alloc_data = (struct alloc_data*)zoid_mem;
    seg_descs = (seg_desc*)(zoid_mem + sizeof(struct alloc_data));
    
    alloc_data->free_seg_list = &seg_descs[0];
    alloc_data->free_seg_list->addr = (void*)
	(((unsigned int)(&seg_descs[NR_OF_SEG_DESCS]) + 31) & ~31);
    alloc_data->free_seg_list->size = zoid_mem + MEM_SIZE - 
	alloc_data->free_seg_list->addr;
    alloc_data->free_seg_list->next = NULL;

    alloc_data->unused_seg_desc_list = NULL;
    alloc_data->allocated_seg_list = NULL;

    for(i = 1; i < NR_OF_SEG_DESCS; i++)
	return_unused_seg_desc(&seg_descs[i]);

    flush_seg_descriptors();
    init_lock_pair(&allocater_locks);
}

#endif


void *__zoid_allocate_buffer(size_t size) {
    struct zoid_buffer* buffer;
    int remainder;
    
    /*assert(size <= max_buffer_size_2);*/

    if (size > max_buffer_size_2) {
      fprintf(stderr, "assertion failed: size = %u, max_buffer_size_2 = %u\n", size, max_buffer_size_2);
      while (1);
    }
    
    remainder = size % TREE_DATA_SIZE;
    if(remainder)
      size += TREE_DATA_SIZE - remainder;

    size += 31;
    size &= ~31;
    
    buffer = (struct zoid_buffer*)__zoid_alloc(sizeof(struct zoid_buffer) + size);
    assert(buffer);

    buffer->next = NULL;
    buffer->size = size;
    buffer->errnum = buffer->excessive_size = 0;
    buffer->userbuf_out = NULL;
    buffer->userbuf_out_cb = NULL;
    buffer->userbuf_out_priv = NULL;
    buffer->userbuf_in = NULL;
    buffer->ack_sent = 0;

    return buffer->data;
}


void __zoid_release_buffer(void* buffer)
{

    if (buffer != 0) {
	struct zoid_buffer *entry = get_zoid_buffer(buffer);
	assert (!entry->userbuf_out);
	__zoid_free(entry);
    }
}


struct zoid_buffer *get_zoid_buffer(void* buffer)
{
    if (buffer)
	buffer -= offsetof(struct zoid_buffer, data);
    return buffer;
}


void init_zoid_buf_pipe(zoid_buf_pipe *pipe, lock_pair *locks)
{
    pipe->first = NULL;
    pipe->last = NULL;
    pipe->locks = locks;
}


void enqueue_zoid_buf(zoid_buf_pipe *pipe, struct zoid_buffer *buffer)
{
    /*fprintf(stderr, "%d: enqueue_zoid_buf(%p, %p)\n", getpid(), pipe, buffer);*/
    buffer->next = NULL;
    
    enter_critical_section(pipe->locks);
    
    if (pipe->first) {
	pipe->last->next = buffer;
#if defined L1_CONSISTENCY_IN_SOFTWARE
	flush_L1_region(&pipe->last->next, sizeof(pipe->last->next));
#endif
    } else {
	pipe->first = buffer;
    }

    pipe->last = buffer;
#if defined L1_CONSISTENCY_IN_SOFTWARE
    flush_zoid_buf(buffer);
#endif
    leave_critical_section(pipe->locks);
}


struct zoid_buffer *dequeue_zoid_buf(zoid_buf_pipe *pipe)
{
    struct zoid_buffer *buffer;
    
    enter_critical_section(pipe->locks);
    
    buffer = pipe->first;
    /*fprintf(stderr, "%d: dequeue_zoid_buf(%p) = %p\n", getpid(), pipe, buffer);*/

    if (buffer != 0 && buffer != (struct zoid_buffer *) 1) {
	/*flush_L1_region(buffer, sizeof(struct zoid_buffer));*/
	pipe->first = buffer->next;
    }

    leave_critical_section(pipe->locks);
    return buffer;
}
