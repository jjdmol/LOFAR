V 11
1
LANG:1 10 CEP_IONode
PANEL,-1 -1 1073 754 N "_3DFace" 0
"main()
{
  // Initialise the Panel
  navPanel_initPanel(\"fw_viewBox\");
  strModuleName   = myModuleName();
  baseDP          = g_currentDatapoint; 
  nodeDP          = baseDP;

  dyn_string dpAr= strsplit(dpSubStr(g_currentDatapoint,DPSUB_DP),\"_\");
  if (strpos(dpAr[dynlen(dpAr)],\"IONode\") > -1) {
    ioNode = substr(dpAr[dynlen(dpAr)],6,strlen(dpAr[dynlen(dpAr)]));
  } else {
    LOG_ERROR(\"CEP_IONodeProcesses.pnl:Initialize|No IONode found in currentDatapoint.\");
  }
  
  inputBufferDP = sysName+\"LOFAR_PermSW_PSIONode\"+navFunct_formatInt(ioNode,99)+\"_InputBuffer\";
  adderDP       = sysName+\"LOFAR_ObsSW_OSIONode\"+navFunct_formatInt(ioNode,99)+\"_Adder\";

  reload();
  

}

void prepareProcesses() {
  dyn_string result;
  // here we need to add the Inputbuffer, adders and the locusnodes that are part of this screen
  // so we need to determine all the databasePoints for these processes

  dynAppend(result,\",InputBuffer,\"+inputBufferDP);    
  dynAppend(g_processesList,inputBufferDP);

  dynClear(writers);
  dynClear(locusNodes);
  for (int i = 0; i < 10; i++ ) {
    dynAppend(result,\",Adder\"+i+\",\"+adderDP+i);    
    dynAppend(g_processesList,adderDP+i);
    int l;
    int w;
    bool invalid=true;
    if (dpGet(adderDP+i+\".locusNode\",l,adderDP+i+\".locusNode:_online.._invalid\",invalid) >= 0) {
      if (!invalid) dynAppend(locusNodes,l);
    }
    if (dpGet(adderDP+i+\".writer\",w,adderDP+i+\".writer:_online.._invalid\",invalid) >= 0) {
      if (!invalid) dynAppend(writers,w);
    }
  }
  for (int i = 1; i <= dynlen(writers); i++ ) {
    string writerDP=sysName+\"LOFAR_ObsSW_OSLocusNode\"+navFunct_formatInt(locusNodes[i],999)+\"_Writer\"+navFunct_formatInt(writers[i],99);
    dynAppend(result,\",Writer\"+navFunct_formatInt(writers[i],99)+\",\"+writerDP);    
    dynAppend(g_processesList,writerDP);
  }
  
  // write result to the db so various panels can reset themselves  
  dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".processesList\",result);
  
  LOG_DEBUG(\"CEP_IONodeProcesses.pnl:prepareProcesses|processList found: \"+ result);    
  
}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {
  LOG_DEBUG(\"CEP_IONodeProcesses.pnl:doAction| Action required. found: \" + anAction);
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"CEP_IONodeProcesses.pnl:doAction|found actionString: \" + actionString);
  
  // Reload
  if (actionString[1] == \"Reload\") {
    reload();
  }
}

void reload() {
  
  // get the name of the selected station  
  string dp = nodeDP+\".usedStation\"; 
  if (dpExists(dp) ){
    dpGet(dp,station);
  } else {
    LOG_ERROR(\"CEP_IONodeProcesses.pnl:main|ERROR DP does not exist: \"+dp);
    return;
  }
  
   stationDP=station+\":\";
  
  //  In the database we can find the IONode involved 
  string nodeName = navFunct_DPName2CEPName(nodeDP);

  LOG_DEBUG(\"CEP_IONodeProcesses.pnl:main|nodeName working: \"+nodeName);

  redraw();
  
  // if no match found we have an error
  if (nodeName == \"\" || station == \"\") {
    LOG_ERROR(\"CEP_IONodeProcesses.pnl:main| ERROR no station  or IONode-name found, can't view running processes\");
  } else {
    
    // we have to set the stripped inputBuffer List and Adder List here.
    // Since this is the Survey mode we only need one InputBuffer and one Adder
    dpSet(DPNAME_NAVIGATOR + g_navigatorID + \".updateTrigger.objectName\",\"CircularBuffer\",
          DPNAME_NAVIGATOR + g_navigatorID + \".updateTrigger.paramList\",makeDynString(ioNode));    
    
  
    LOG_DEBUG(\"CEP_IONodeProcesses.pnl:main|Station: \"+station);
  
    setValue(\"ionodeLabel\",\"text\",\"IONode: \"+nodeName);
    setValue(\"stationLabel\",\"text\",station);
    setValue(\"ionodeLabel\",\"toolTipText\",nodeDP);
    setValue(\"stationLabel\",\"toolTipText\",stationDP);

  }
  // pass baseDP to selfstate Object to work with
  setValue(\"selfState.light\",\"toolTipText\",baseDP);
  

  // start the logging process
 // navPanel_showLogging(baseDP);
  
  // connect for selfUpdates
  showSelfState(baseDP);





  navFunct_clearGlobalLists();
  
  // set the hardware selectable items for this screen
  prepareProcesses();
  
  // set panel to ready
  g_objectReady=true;
  
  // trigger that the panel values are calculated and ready
  navPanel_setEvent(\"CEP_IONodeProcesses.pnl\",\"Update\");

}

      " 0
 E E E E 1 -1 -1 0  188 128
""0  1
E "#uses \"navPanel.ctl\"
string      baseDP         = \"\";

string station;
int ioNode;
string nodeDP=\"\";
string inputBufferDP=\"\";
string adderDP=\"\";
string stationDP=\"\";

string locusNode;


dyn_string refNames;
dyn_string writers;
dyn_string locusNodes;

string strModuleName;
bool   bDoubleClicked  = false;

// routine for single mouse click
void click(string dp) {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(\"CEP_IONodeProcesses.pnl\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick(string dp) {
  // indicate this is a doubleClick
  bDoubleClicked = true; 

  if (dpExists(dp) ) {
    LOG_DEBUG(\"CEP_IONodeProcesses.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+dp);
    g_currentDatapoint=dp;
    navPanel_setEvent(\"CEP_IONodeProcesses.pnl\",\"ChangePanel\");  
  }
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;
}

// routine for right mouse click
void rClick(string dp) {
  navPanel_setEvent(\"CEP_IONodeProcesses.pnl\",\"EventRightClick\");
}
void clearRefNames() {
  // remove all symbols because new ones will be added
  for (int i=1; i <= dynlen(refNames); i++) {
    removeSymbol(strModuleName,\"\",refNames[i]);
  }
  dynClear(refNames);
}


void redraw() {
   LOG_TRACE(\"CEP_IONodeProcesses.pnl:redraw\");
   string addPanelName = \"objects/Processes/adder.pnl\";
   
  // clear old refNames if available
  if (dynlen(refNames) > 0) {
    clearRefNames();
  }
  
  //  now start adding adders to panel

  for (int i = 0; i < 10; i++ ) {
    LOG_TRACE(\"CEP_IONodeProcesses.pnl:redraw|Adding adder: \" + i);
    refNames[i+1]=\"singleadder\"+(i);

    if (  addSymbol(  strModuleName,       // Stay in this modul
                      \"\",                  // Name of this panel
		                   addPanelName,        // Panel to add
		                   refNames[i+1],       // Ref of the addedPanel
		      makeDynString( \"$adderNumber:\" + i ,     // Define all $values
                        \"$nodeDP:\" + nodeDP),              //
		                   0,                   // Xpos of the AddedSymbol
		                   245+((i-1)*30),       // Ypos of the AddedSymbol
		                   0,                    // angle
		                   1    ,1               // zoomX , zoomY
                       ) < 0 ) {
      LOG_ERROR(\"CEP_IONodeProcesses.pnl:redraw|Error Appending adder : \" + i + \" in this panel.\");
    }
  }
}
" 0
 2
"CBRef" "1"
"EClose" E
""
1
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
6 658
"childStateBorder"
""
1 500 80 E E E 1 E 1 E N {0,0,0} E N "_3DFace" E E
 E E
77 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 3 1 2 1 E 1.061061061061061 0 1 0 0 1 E 0 0 999 709
2 917
"ionodeLabel"
""
1 340 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

78 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E U  1 E 340 10 557 34
0 2 2 "0s" 0 0 0 192 0 0  340 10 1
1
LANG:1 33 MS Shell Dlg,14,-1,5,75,0,0,0,0,0
0 1
LANG:1 20 Node: R00-M0-N00-J00
1 957 1 "" 1
0
1 958 2 "" 285
0
1 959 2 "" 226
0
1 960 2 "" 229
0
1 961 2 "" 234
0
1 962 2 "" 235
0
1 963 2 "" 236
0
1 964 2 "" 237
0
1 965 2 "" 238
0
1 966 2 "" 239
0
1 967 2 "" 240
0
1 968 2 "" 241
0
1 969 2 "" 242
0
1 970 2 "" 243
0
1 971 2 "" 244
0
1 972 2 "" 245
0
1 973 2 "" 246
0
1 974 2 "" 247
0
1 975 2 "51" 1
0
1 976 2 "" 249
0
1 977 2 "" 250
0
1 978 2 "" 251
0
1 979 2 "" 252
0
1 980 2 "" 253
0
1 981 2 "" 254
0
1 982 2 "" 255
0
1 983 2 "" 261
0
1 984 2 "" 262
0
1 985 2 "" 263
0
1 986 2 "" 264
0
1 987 2 "" 265
0
1 988 2 "" 279
0
1 989 2 "" 280
0
1 990 2 "" 281
0
1 991 2 "" 282
0
1 992 2 "" 283
0
1 993 2 "" 290
0
1 994 2 "" 291
0
1 995 2 "" 292
0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 1 "selfState" -1
"objects\\lofar_self_state.pnl" 7 8 T 79 1 0 1 300 4
0
3 2 "PANEL_REF2" -1
"objects\\Processes\\circularBuffer.pnl" 35 32 T 80 1 0 1 190 20
0
0
