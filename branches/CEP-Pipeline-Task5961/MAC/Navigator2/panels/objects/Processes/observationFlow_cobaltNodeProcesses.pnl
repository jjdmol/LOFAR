V 11
1
LANG:1 16 childStateBorder
PANEL,-1 -1 524 91 N "_3DFace" 0
"main()
{
  baseDP = \"LOFAR_PermSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";  
  // check if MACScheduler pointenabled and accessible
  if (dpExists(activeObsDP)) {
    if (dpConnect(\"updateActiveObservations\", activeObsDP+\":_online.._value\",
                                             activeObsDP+\":_online.._invalid\") == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:main|Couldn't connect to: \"+activeObsDP);
    }
  } else {
    if (!isStandalone()) LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:main|Couldn't find DP to connect to: \"+activeObsDP);
  }	
}
" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  70 70
""0  1
E "#uses \"navPanel.ctl\"

string baseDP          = \"\";
bool   bDoubleClicked  = false;
dyn_string observationsList;
dyn_string oldObservationsList;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
string activeObsDP = \"\";
string database;
dyn_string gpuprocs;
dyn_string connectToGPUProcs;
dyn_string connectTo0;
dyn_string connectTo1;
dyn_string connectTo2;
dyn_string connectTo3;
string connectToStates;
bool connectedStates;
bool connectedGPUProcs;
bool connected0;
bool connected1;
bool connected2;
bool connected3;

bool selectedObservations=false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked) {
    navPanel_setEvent(\"Stations\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true;   
  
  if (dpExists(baseDP) ) {
    LOG_DEBUG(\"ObservationFlow_cobaltNodeProcesses.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \"+baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Hardware\",\"ChangeTab\");
  }

  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;  
}

// routine for right mouse click
void rClick() {
  navPanel_setEvent(\"Stations\",\"EventRightClick\");
}

void updateActiveObservations(string dp1, dyn_string obs,
                              string dp2, bool invalid)
{

  // remove pipelines from the list
  for (int i=dynlen(obs);i > 0;  i--) if (!navFunct_isObservation(obs[i])) dynRemove(obs,i);
  
  activeObservations = obs;
  // if there are selected observation check the observationsList if those selected observations still are active
  // remove the unactive observations from the list  
  
  // replace old observations if there are no observations selected
  if (selectedObservations) {
    for (int i=dynlen(observationsList); i < 1; i--) {
      int idx = dynContains(activeObservations,observationsList[i]);
      if (i <= 0) dynRemove(observationsList,i);
    }
    if (dynlen(observationsList) ==0) {
      selectedObservations=false;
    }
  }
  
  if (!selectedObservations) {
    observationsList = activeObservations;
  }
  
  LOG_DEBUG(\"ObservationFlow_cobaltNodeProcesses.pnl:updateActiveObservations|observationList: \"+observationsList);
  connectStationInputStreams();
  connectCobaltNodesAndProcesses();
  connectGPUProcs();
}

// connect to stationInputStreams from the active observations
void connectGPUProcs() {

  //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {

    // change all found DP's to contain all the elements that contain the .dropping
    if (connectedGPUProcs) {
      dpDisconnect(\"gpuprocCB\",connectToGPUProcs);
      dynClear(connectToGPUProcs);
    }

    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      // get all the GPUProcs used by this observation
      gpuprocs = navFunct_getGPUProcsForObservation(observationsList[i]);
      for (int i=1; i<= dynlen(gpuprocs); i++) {
        dynAppend(connectToGPUProcs,gpuprocs[i]+\".dropping:_online.._value\");
        dynAppend(connectToGPUProcs,gpuprocs[i]+\".dropped:_online.._value\");
        dynAppend(connectToGPUProcs,gpuprocs[i]+\".subband:_online.._value\");
        dynAppend(connectToGPUProcs,gpuprocs[i]+\".dataProductType:_online.._value\");
      }
      if (dynlen(gpuprocs) > 0) baseDP = gpuprocs[1];
    }
    
    // check if the required datapoint for this view is enabled and accessible
    if (navFunct_dpReachable(CEPDBName) && dynlen(connectToGPUProcs)>0 ){
      if (dpConnect(\"gpuprocCB\", connectToGPUProcs) == -1) {
        setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");
    }
  } else {
      setValue(\"GPUProcsObject\", \"foreCol\", \"Lofar_off\");    
  }
}


// connect to stationInputStreams from the active observations
void connectStationInputStreams() {
  string obsDP=\"\";
  dyn_string stream0DPList;
  dyn_string stream1DPList;
  dyn_string stream2DPList;
  dyn_string stream3DPList;


  //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {
    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      dynClear(stream0DPList);
      dynClear(stream1DPList);
      dynClear(stream2DPList);
      dynClear(stream3DPList);
      // For all observations collect the PermSW streamInfo
      dyn_string stationInputs = navFunct_getStationInputForObservation(observationsList[i]);
  
      // change all found DP's to contain all the elements that contain the stream.percBad
      if (connected0) {
        dpDisconnect(\"streamCB0\",connectTo0);
        dynClear(connectTo0);
      }
      if (connected1) {
        dpDisconnect(\"streamCB1\",connectTo1);
        dynClear(connectTo1);
      }
      if (connected2) {
        dpDisconnect(\"streamCB2\",connectTo2);
        dynClear(connectTo2);
      }
      if (connected3) {
        dpDisconnect(\"streamCB3\",connectTo3);
        dynClear(connectTo3);
      }

      for (int i=1; i<= dynlen(stationInputs); i++) {
        dynAppend(connectTo0,stationInputs[i]+\".stream0.rejected:_online.._value\");
        dynAppend(connectTo1,stationInputs[i]+\".stream1.rejected:_online.._value\");
        dynAppend(connectTo2,stationInputs[i]+\".stream2.rejected:_online.._value\");
        dynAppend(connectTo3,stationInputs[i]+\".stream3.rejected:_online.._value\");
      }
      if (dynlen(stationInputs) > 0) baseDP = stationInputs[1];
    }
      
  
    // check if the required datapoint for this view are enabled and accessible
    if (dynlen(connectTo0)>0 && navFunct_dpReachable(CEPDBName)  ){
      if (dpConnect(\"streamCB0\", connectTo0) == -1) {
        setValue(\"streamObject0\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      
      setValue(\"streamObject0\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo1)>0 && navFunct_dpReachable(CEPDBName) ){
      if (dpConnect(\"streamCB1\", connectTo1) == -1) {
        setValue(\"streamObject1\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      setValue(\"streamObject1\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo2)>0 &&  navFunct_dpReachable(CEPDBName) ){
      if (dpConnect(\"streamCB2\", connectTo2) == -1) {
        setValue(\"streamObject2\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      setValue(\"streamObject2\", \"foreCol\", \"Lofar_off\");
    }
    if (dynlen(connectTo3)>0 && navFunct_dpReachable(CEPDBName)){
      if (dpConnect(\"streamCB3\", connectTo3) == -1) {
        setValue(\"streamObject3\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      }
    } else {
      setValue(\"streamObject3\", \"foreCol\", \"Lofar_off\");
    }
  } else {
      setValue(\"streamObject0\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject1\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject2\", \"foreCol\", \"Lofar_off\");    
      setValue(\"streamObject3\", \"foreCol\", \"Lofar_off\");    
  }
}

void connectCobaltNodesAndProcesses() {
  if (dynlen(observationsList) > 0 && navFunct_dpReachable(CEPDBName) ){

    // change all found DP's to contain all the elements that contain the states and childstates
    if (connectedStates) {
      dpQueryDisconnect(\"updateStates\",\"cobaltStateUpdate\");
    }
    // prepare connectList for States/childStates for each observation
    for(int i=1; i <= dynlen(observationsList); i++) {
      string observation = navFunct_observationNameToNumber(observationsList[i]);
      if (i==1) {
        connectToStates =  \"SELECT '_online.._value' FROM '{LOFAR_*_*SCBT*_Cobalt*.status.state,LOFAR_*_*SCBT*_Cobalt*.status.childState,LOFAR_*_Cobalt*.observationName}' REMOTE 'CCU001:' WHERE 'observationName:_online.._value' == \\\"\"+observation+\"\\\"\";
      } else {
        connectToStates  +=\"OR  'observationName:_online.._value' == \\\"\"+observation+\"\\\"\";
      }
    }
    LOG_DEBUG( \"ObservationFlow_cobaltNodeProcesses.pnl:connectCobaltNodesAndProcesses|connect to: \" + connectToStates);
    if (dpQueryConnectAll(\"cobaltNodesAndProcessesCB\",true,\"cobaltStateUpdate\",connectToStates) == -1) {
      LOG_ERROR(\"ObservationFlow_cobaltNodeProcesses.pnl:connectCobaltNodesAndProcesses| ERROR: Query fails:\"+connectToStates);
    }
  } else {
    setStates(0,0);
  }
}

void cobaltNodesAndProcessesCB(string strIdent,  dyn_dyn_anytype aResult) 
{
  LOG_DEBUG( \"ObservationFlow_cobaltNodeProcesses.pnl:cobaltNodesAndProcessesCB| has \" + dynlen( aResult ) + \" results\" );
  LOG_DEBUG( \"ObservationFlow_cobaltNodeProcesses.pnl:cobaltNodesAndProcessesCB| \"+aResult);
  
  int highestState=0;
  int highestChildState=0;


  if( dynlen( aResult ) < 2 ) {
    setStates(highestState,highestChildState);
    return;
  }
  
  // Iterate through the results
  for( int t = 2; t <= dynlen( aResult ); t++)
  {
    // skip the lines that contain the observationNames
    string line = aResult[t][1];
    if (strpos(line,\"observationName\") >= 0) continue;
    if (strpos(line,\"status.state\") >= 0 && aResult[t][2] > highestState) {
      highestState=aResult[t][2];
    } else if (strpos(line,\"status.childState\") >= 0 && aResult[t][2] > highestChildState) {
      highestChildState=aResult[t][2];
    }
  }
  setStates(highestState,highestChildState);
}  
      
void streamCB0(dyn_string dps, dyn_float values)
{
  calcValues(0,dps,values);
}

void streamCB1(dyn_string dps, dyn_float values)
{
  calcValues(1,dps,values);
}

void streamCB2(dyn_string dps, dyn_float values)
{
  calcValues(2,dps,values);
}

void streamCB3(dyn_string dps, dyn_float values)
{
  calcValues(3,dps,values);
}

void calcValues(int stream,dyn_string dps,dyn_float values)
{
  // Here we get all bad values and we have to determine how many are wrong. 
  // if a station has more then 25% bad data (i.e. a single value in the values list exceeds 25%, 
  //   or more then 25% of the stations have bad data we need to set the color to yellow, 
  // if a station has more then 50% bad data (i.e. a single value in the values list exceeds 50%, 
  //   or more then 50% of the stations have bad data we need to set the color to orange, 
  // if a station has more then 75% bad data (i.e. a single value in the values list exceeds 75%, 
  //   or more then 75% of the stations have bad data we need to set the color to red, 
  
  string obsname = dpSubStr(dps,DPSUB_SYS_DP)+\".observationName\";
  string obs;
  dpGet(obsname,obs);
  string observation = \"Observation\"+obs; 

  
  string toolTipText = observation+\" - stream\"+stream+\"<br>\";
  
  int count=0;
  string color = \"Lofar_operational\";
  dyn_string toollist;
  for (int i = 1; i<= dynlen(values); i++) {
    float val = values[i];
    string dp = dps[i];
    if (val > 0.0 && val < 33.0) {
      color = \"Lofar_test\";
    } else if (val >= 33.0 && val < 66.0) {
      color = \"Lofar_maintenance\";
    } else if (val >= 66.0 && val < 100.0) {
      color = \"Lofar_suspicious\";
    } else if (val >= 100.0) {
      color = \"Lofar_broken\";
    }
        
    if (val > 0.0) {
      string aS=dp+\"</t> :\"+val+\"<br>\";
      dynAppend(toollist,aS);
      count++;
    }
  }
  dynSort(toollist);
  for (int i=1; i<= dynlen(toollist);i++) {
    toolTipText += toollist[i];
  }
  if (count >= dynlen(values)*.8) {
    if (getStateNumber(color) < getStateNumber(\"Lofar_broken\") ) {
      color = \"Lofar_broken\";
    }
    toolTipText +=\"<br>\"+(float)(dynlen(values)/count)+\" % CobaltStationInput with bad values<br>\";
  } else if (count >= dynlen(values)*.6) {
    if (getStateNumber(color) < getStateNumber(\"Lofar_suspicious\") ) {
      color = \"Lofar_suspicious\";
    }
    toolTipText +=\"<br>\"+(float)(dynlen(values)/count)+\" % CobaltStationInput with bad values<br>\";
  } else if (count >= dynlen(values)*.4) {
    if (getStateNumber(color) < getStateNumber(\"Lofar_maintenance\") ) {
      color = \"Lofar_maintenance\";
    }
    toolTipText +=\"<br>\"+(float)(dynlen(values)/count)+\" % CobaltStationInput with bad values<br>\";
  } else if (count > dynlen(values)*.2) {
    if (getStateNumber(color) < getStateNumber(\"Lofar_test\") ) {
      color = \"Lofar_test\";
    }
    toolTipText +=\"<br>\"+(float)(dynlen(values)/count)+\" % CobaltStationInput with bad values<br>\";
  }

  setValue(\"streamObject\"+stream, \"toolTipText\",toolTipText);
  setValue(\"streamObject\"+stream, \"foreCol\", color);

}

void gpuprocCB(dyn_string dps, dyn_dyn_anytype values)
{
  LOG_DEBUG(\"ObservationFlow_cobaltNodeProcesses.pnl:gpuProcCB| entered\");
  string color = \"Lofar_operational\";
  
  // Here we get dropping values. 
  // dps[i]  contains the GPUproc that is dropping
  // vals[i]  contains list of all subbands with on vals[i][j]  the subband if it is dropping
  string toolTipText = \"Dropping GPUProcs<br>\";
  
  for (int i = 1; i <= dynlen(dps); i+=4) {
    string dp = dpSubStr(dps[i],DPSUB_DP);
    dyn_bool dropping = values[i];
    if (dynContains(dropping,TRUE )) {
      color = \"Lofar_broken\";
      dyn_float dropped = values[i+1];
      dyn_int subband = values[i+2];
      string dataProductType = values[i+3];
      for (int j = 1; j <= dynlen(dropped); j++) {
        if (dropping[j] == TRUE) {
          toolTipText+=dp+\"</t> :\"+dropped[j]+\" - \"+subband[j]+\" - \"+dataProductType+\"<br>\";
        }
      }
    }
  }

  setValue(\"GPUProcsObject\",\"toolTipText\",toolTipText);
  setValue(\"GPUProcsObject\", \"foreCol\", color);
}


void updateStationStates(dyn_string dps,dyn_string values) {
  LOG_DEBUG(\"ObservationFlow_cobaltNodeProcesses.pnl:updateStationStates| dps:    \" + \"updateStationStates values: \"+values);
  // determine the highest state and the highest childState, and add those to the observationsObject
  int highestState=0;
  int highestChildState=0;
  
  for (int i= 1; i<= dynlen(dps); i++) {
    if (strpos(dps[i],\"status.state\") >= 0 && values[i] > highestState) highestState=values[i];
    if (strpos(dps[i],\"status.childState\") >= 0 && values[i] > highestChildState) highestChildState=values[i];
  }
  setStates(highestState,highestChildState);
}



void setStates(int state, int childState) {
   string SymbolCol;

   SymbolCol = getStateColor(childState);
   setValue(\"childStateBorder\", \"foreCol\", SymbolCol);

   SymbolCol = getStateColor(state);
   setValue(\"childStateBorder\", \"backCol\", SymbolCol);
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 1
"childStateBorder"
""
1 130 160 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 69 All CEPNodes involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 2 1 2 1 E 0.7222222222222223 0 0.8333333333333334 -43.8888888888889 -123.3333333333333 1 E 130 160 310 220
2 2
"PRIMITIVE_TEXT1"
""
1 95 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 1 1 2 1 E U  0 E 95 30 126 43
0 2 2 "0s" 0 0 0 192 0 0  95 30 1
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 1
LANG:1 6 Cobalt
4 3
"streamObject0"
""
1 20 20 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 73 All inputbuffers involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  20 20 50 20
4 4
"streamObject3"
""
1 20 50 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 73 All inputbuffers involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  20 50 50 50
4 5
"streamObject1"
""
1 20 30 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 73 All inputbuffers involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  20 30 50 30
4 6
"streamObject2"
""
1 20 40 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 73 All inputbuffers involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  20 40 50 40
4 7
"GPUProcsObject"
""
1 180 35 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 69 All GPUProcs involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E E 0 4 1 2 1 E  180 35 210 35
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
