#ifndef LOFAR_MESSAGING_MESSAGE_H
#define LOFAR_MESSAGING_MESSAGE_H

#include <Common/ObjectFactory.h>
#include <Common/Singleton.h>
#include <boost/shared_ptr.hpp>
#include <string>

//# Forward declarations
namespace qpid {
  namespace messaging { class Message; }
  namespace types { class Variant; }
}

namespace LOFAR
{
  namespace Messaging
  {
    //# Forward declarations
    class MessageImpl;

    // Top-level message class.
    // @todo: move outside of LOFAR source code tree.
    class Message
    {
    public:
      // Properties that must be present in every Message.
      struct Properties
      {
        // System name, for example @c LOFAR or @c LOFAR.
        std::string systemName;
        // Message type, for example @c EventMessage.
        std::string messageType;
      };

      // Create a Message object from a Qpid message. The Qpid message property
      // @a MessageType is used to determine which Message object must be
      // constructed.
      // @throw UnknownMessageType
      static Message* create(const qpid::messaging::Message& qmsg);

      // Return the names of the properties that must be present in every
      // message. Obviously, these names can be different from names of the
      // members of the struct Properties.
      static const Properties& propertyNames();

      // Retrieve a single property directly from a Qpid message.
      // @throw MessagePropertyNotFound
      static qpid::types::Variant 
      getProperty(const std::string& property, 
                  const qpid::messaging::Message& qmsg);

      // Virtual destructor, because you can inherit from this class.
      virtual ~Message() = 0;

      // Return the message type as a string
      virtual const std::string& type() const = 0;

      // Return a reference to the implementation.
      // @todo Can we get rid of exposure of internals?
      const boost::shared_ptr< MessageImpl > getImpl() const;

    protected:
      // Default constructor. Creates an empty message object.
      Message();

      // Construct a Message object from a set of message properties.
      Message(const Properties& properties);

      // Construct a Message object from a Qpid message.
      Message(const qpid::messaging::Message& msg);

      // Retrieve a message property.
      qpid::types::Variant getProperty(const std::string& property) const;

      // Set a message property.
      void setProperty(const std::string& property, 
                       const qpid::types::Variant& variant);

    private:
      // Pointer to our implementation.
      boost::shared_ptr< MessageImpl > itsImpl;
    };

    // Compare two Message::Properties structs member-wise for equality.
    bool operator==(const Message::Properties& lhs, 
                    const Message::Properties& rhs);

    // Generic factory for Message objects.
    typedef LOFAR::Singleton<
      LOFAR::ObjectFactory< Message*(const qpid::messaging::Message& msg), 
                            std::string >
      > MessageFactory;

  }
}

#endif
