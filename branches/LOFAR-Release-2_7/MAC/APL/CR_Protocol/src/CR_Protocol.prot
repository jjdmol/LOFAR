// -*- mode: c++ -*-//
// Protocol definition for the external TBB triggers
//
autogen definitions protocol;

description = "Protocol for the external TBB trigger";
prefix = "CR"; // for the signal names
id = "(LOFAR::MACIO::F_APL_PROTOCOL+16)";

// specify extra include files
// e.g.
include = '<sys/time.h>';
include = '<linux/types.h>';
include = '<Common/LofarTypes.h>';
include = '<Common/lofar_bitset.h>';

include = '<APL/CR_Protocol/CRstopVector.h>';
include = '<APL/CR_Protocol/CRreadVector.h>';
include = '<APL/CR_Protocol/CRrecordVector.h>';

prelude = << PRELUDE_END

//
// Errors
//
// CR_NO_ERR			No errors

//
// The following signals are defined in the BS protocol
//
// STOP     		(triggerID, observationID, stopVector);
// STOP_ACK  		(triggerID, result);
// READ     		(triggerID, observationID, readVector, metadata);
// READ_ACK  		(triggerID, result);
// RECORD   		(triggerID, observationID, recordVector);
// RECORD_ACK  		(triggerID, result);
// STOP_DUMPS     	(triggerID, observationID, stations);
// STOP_DUMPS_ACK  	(triggerID, result);
//

#define PSN_CR_TRIGGERPORT		"MCU001:CRTriggerPort"

PRELUDE_END;

//
// Errors
//
error = {
	id = NO;
	msg = "No errors";
};

error = {
	id = TIME;
	msg = "Time error, given time in past";
};

error = {
	id = OBSERVATION;
	msg = "Observation error, given observation not active";
};

error = {
	id = BUSY;
	msg = "Busy error, dumping data to cep not ready";
};


//
// CR events
//
event = {
	signal = STOP;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "stopVector";
		type = "CRstopVector";
		userdefined;
		printable;
	};
};

event = {
	signal = STOP_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

// READ
event = {
	signal = READ;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "readVector";
		type = "CRreadVector";
		userdefined;
		printable;
	};
	param = {
		name = "metadata";
		type = "string";
	};
};

event = {
	signal = READ_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};


// RECORD
event = {
	signal = RECORD;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "recordVector";
		type = "CRrecordVector";
		userdefined;
		printable;
	};
};

event = {
	signal = RECORD_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

// CEP_SPEED
// cepDelay in nsec, minimum step 5 nSec
// cepDatapaths 1..6
event = {
	signal = CEP_SPEED;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "stationList";
		type = "string";
	};
	param = {
		name = "cepDelay";
		type = "uint32";
	};
	param = {
		name = "cepDatapaths";
		type = "uint32";
	};
};

event = {
	signal = CEP_SPEED_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

// STOP_DUMPS
event = {
	signal = STOP_DUMPS;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "stationList";
		type = "string";
	};
};

event = {
	signal = STOP_DUMPS_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

// VHECR_STATE
event = {
	signal = VHECR_STATE;
	dir = IN;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "observationID";
		type = "uint32";
	};
	param = {
		name = "stationList";
		type = "string";
	};
	param = {
		name = "state";
		type = "uint32";
	};
};

event = {
	signal = VHECR_STATE_ACK;
	dir = OUT;
	param = {
		name = "triggerID";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};





