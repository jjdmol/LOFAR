V 11
1
LANG:1 0 
PANEL,-1 -1 447 41 N "_3DFace" 0
"main()
{
  baseDP= \"LOFAR_PermSW\";
  database=dpSubStr(baseDP,DPSUB_SYS);

  dyn_string obslist;
  int i = dpGet(MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\",obslist);
  // remove all pipelines
  for (i=1; i<=dynlen(obslist); i++) {
    if (!navFunct_isObservation(obslist[i])) continue;
    dynAppend(observationsList,obslist[i]);
  }
  
  activeObsDP =MainDBName+\"LOFAR_PermSW_MACScheduler.activeObservations\";  
  // because CobaltProcesses claim their datapoints when the observation is actually running we need to connect to all these observations
  // and give a signal when the runstate of one of them changes to running to trigger the Cobalt point collection
  
  LOG_DEBUG(\"ObservationFlow_cobaltOutputProcs.pnl:main|observationList: \"+observationsList);

  dyn_string obsConnections = makeDynString();  
  for (int i = 1; i <= dynlen(observationsList) ; i++) {
    // compose the WinCC OA DP name 
    string obsName = \"LOFAR_ObsSW_\"+observationsList[i]; 

    // Ask the claimmanager for the temp obs representation
    string obsDP=MainDBName+claimManager_nameToRealName(obsName);

    // add DP to list with all connects
    if (! dynContains(obsConnections,obsDP+\".runState\")) dynAppend(obsConnections,obsDP+\".runState\");
  }
  
  if (dynlen(oldObsConnections) > 0) {
    // disconnect old observations
    if (dpDisconnect(\"monitorRunStates\",oldObsConnections) < 0) {
      navFunct_printLastError(\"ObservationFlow_cobaltOutputProcs.pnl:main\", getLastError());
    }
    dynClear(oldObsConnections);
  }
  
  // connect to runState for all active observations  
  if (dynlen(obsConnections) > 0 && dpConnect(\"monitorRunStates\",obsConnections) == -1) {
    LOG_ERROR(\"ObservationFlow_cobaltOutputProcs.pnl:main|ERROR: couldn't connect to : \"+obsConnections+ \" \" + getLastError());
  } else if (dynlen(obsConnections) > 0) {
    oldObsConnections = obsConnections;
  }  else {
    setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");
  }    
}" 0
 E "main(int x, int y)
{
  click();
}" 0
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0
 1 -1 -1 0  0 0
""0  1
E "#uses \"navPanel.ctl\"

string baseDP          = \"\";
dyn_string observationsList;
dyn_string oldObsConnections;   // keep copy latest observations to be disconnected when the list changes
dyn_string activeObservations;
dyn_int locusnodes;
string activeObsDP = \"\";
string database;
dyn_string outputProcs;
dyn_string connectToOutputProcs;
bool connectedOutputProcs;

bool selectedObservations=false;

bool bDoubleClicked  = false;

// routine for single mouse click
void click() {
  // set delay in case double click was meant
  delay(0, 100); 
  if (!bDoubleClicked && dynlen(outputProcs) > 0) {
      navPanel_setEvent(\"observationFlow_cobaltOutputProc.pnl\",\"EventClick\");
  }
}

// routine for double mouse click
void dblClick() {
  // indicate this is a doubleClick
  bDoubleClicked = true; 
  if (dynlen(outputProcs) > 0) {
  
    LOG_DEBUG(\"observationFlow_cobaltOutputProc.pnl:DoubleClick|Setting currentDatapoint from : \"+g_currentDatapoint+\" to \" + baseDP);
    g_currentDatapoint=baseDP;
    //we also have to set the tabctrl to think this was initiated from the ProcessesTab, otherwise we will get the wrong panel.
    navPanel_setEvent(\"Processes\",\"ChangeTab\");
  }
  // set delay to avoid click event will be triggered
  delay(0, 500);
  bDoubleClicked = false;
}

// routine for right mouse click
void rClick() {
  if (dynlen(outputProcs) > 0) {
    navPanel_setEvent(\"observationFlow_cobaltOutputProc.pnl\",\"EventRightClick\");
  }
}


void monitorRunStates(dyn_string dpList,dyn_string runStates) {

  for (int i=1; i<= dynlen(runStates); i++) {
    if (runStates[i] == \"Running\" || runStates[i] == \"Quiting\") {
      connectOutputProcs(runStates[i]);
      break;
    }
  }
}

// connect to stationInputStreams from the active observations
void connectOutputProcs(string runState) {
  
  dynClear(outputProcs);

  // change all found DP's to contain all the elements that contain the .dropping
  if (connectedOutputProcs) {
    if (dpDisconnect(\"outputProcCB\",connectToOutputProcs) < 0 ) {
      navFunct_printLastError(\"ObservationFlow_cobaltOutputProcs.pnl:connectOutputProcs\", getLastError());
    }
    dynClear(connectToOutputProcs);
    connectedOutputProcs = false;
  }

  if (dynlen(observationsList) == 1 && runState == \"Quiting\") {
    setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");
    return;
  }

    //collect all active observations and their stationInputStreams
  if (dynlen(observationsList) > 0) {

    // prepare connectList
    for(int i=1; i <= dynlen(observationsList); i++) {
      // get all the OutputProcs used by this observation
      string dp = CEPDBName+claimManager_nameToRealName(\"LOFAR_ObsSW_\"+observationsList[i]);
      if (! dynContains(connectToOutputProcs,dp+\"_CobaltOutputProc.dropping:_online.._value\")) {
        dynAppend(connectToOutputProcs,dp+\"_CobaltOutputProc.dropping:_online.._value\");
      }
      if (! dynContains(outputProcs,dp+\"_CobaltOutputProc\")) {
        dynAppend(outputProcs, dp+\"_CobaltOutputProc\");
      }
    }
    if (dynlen(outputProcs) > 0) baseDP = outputProcs[1];

    // check if the required datapoint for this view is enabled and accessible
    if (navFunct_dpReachable(CEPDBName) && dynlen(connectToOutputProcs)>0 ){
      if (dpConnect(\"outputProcCB\", connectToOutputProcs) == -1) {
        setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_dpdoesnotexist\");
      } else {         
        connectedOutputProcs = true;
      }
    } else {
      setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");
    }
  } else {
      setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");    
  }
}

      


void outputProcCB(dyn_string dps, dyn_dyn_bool values)
{

  dynClear(locusnodes);
  
  // only needed when there are still observations in the list. sometimes the cb is still fired while 
  // in fact the observation was already finished.
  if (dynlen(observationsList) <= 0) {
    setValue(\"outputProcsObject\", \"foreCol\", \"Lofar_off\");    
    return;
  }
    
  // Here we get dropping  and locusnodevalues from all involved observations
  string toolTipText = \"Dropping outputProcs<br>\";
  
  string color = \"Lofar_operational\";

  for (int i = 1; i<= dynlen(values); i++) {
    dyn_float dropped;
    dyn_string lnodes;
    string dp = dps[i];
    dyn_bool dropping = values[i];
    
    string outputProcDP = dpSubStr(dp,DPSUB_SYS_DP);
    dpGet(outputProcDP+\".dropped\",dropped);
    dpGet(outputProcDP+\".locusNode\",lnodes);
    for (int j=1; j<= dynlen(lnodes);j++) {
      dynAppend(locusnodes,lnodes[j]);
      if (dynlen(dropped) <= j)  continue;
      if ( dropped[j] > 0) {
        color = \"Lofar_broken\";
        toolTipText+=lnodes[j]+\"<br>\";
      }
    }
  }

  setValue(\"outputProcsObject\",\"toolTipText\",toolTipText);
  setValue(\"outputProcsObject\", \"foreCol\", color);

 }
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
4 0
"outputProcsObject"
""
1 20 20 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 "main()
{
  rClick();
}" 0
 "main()
{
  dblClick();
}" 0

0 0 0 0 0 0
E E E
0
1
LANG:1 72 All OutputProcs involved in the  currently(selected) active observations

1
"dashclr"N "_Transparent"
E "main()
{
  click();
}" 0
 0 4 1 2 1 E  20 20 50 20
6 1
"RECTANGLE1"
""
1 10 10 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 "main()
{
  rClick();
}" 0
 "main(int x, int y)
{
  dblClick();
}" 0

1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main(int x, int y)
{
  click();
}" 0
 0 1 1 2 1 E 1 0 1 10 -7 0 E 10 10 40 40
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
