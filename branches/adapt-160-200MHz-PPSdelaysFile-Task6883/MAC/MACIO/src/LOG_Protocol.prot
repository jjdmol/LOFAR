//#  LOG_Protocol.prot: Protocol for sending LogMessages to a LoggingProcessor
//#
//#  Copyright (C) 2007
//#  ASTRON (Netherlands Foundation for Research in Astronomy)
//#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, softwaresupport@astron.nl
//#
//#  This program is free software; you can redistribute it and/or modify
//#  it under the terms of the GNU General Public License as published by
//#  the Free Software Foundation; either version 2 of the License, or
//#  (at your option) any later version.
//#
//#  This program is distributed in the hope that it will be useful,
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//#  GNU General Public License for more details.
//#
//#  You should have received a copy of the GNU General Public License
//#  along with this program; if not, write to the Free Software
//#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#
//#  $Id: Log_Protocol.prot 10814 2008-01-11 19:45:48Z overeem $

autogen definitions protocol;

description = "Protocol definition for sending LogMessages to a LoggingProcessor";
prefix = "LOG"; // for the signal names
id = "(LOFAR::MACIO::F_GCF_PROTOCOL + 0)";
// specify extra include files
// e.g.
//include = '<sys/time.h>';
include = '<MACIO/StringVector.h>';

prelude = << PRELUDE_END

PRELUDE_END;

// An "event" has a "signal" and a "dir" (direction)
// and zero or more "param"s.
// "dir" can be one of "IN" or "OUT".
// A "param" has a "name" and a "type".
//

event = {
	signal = SEND_MSG;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint32";
	};
	param = {
		name = "DPname";
		type = "string";
	};
	param = {
		name = "message";
		type = "string";
	};
};

event = {
	signal = SEND_MSG_ACK;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

event = {
	signal = SEND_MSG_POOL;
	dir = IN;
	param = {
		name = "seqnr";
		type = "uint32";
	};
	param = {
		name = "msgCount";
		type = "uint32";
	};
	param = {
		name = "DPnames";
		type = "MACIO::StringVector";
		userdefined;
	};
	param = {
		name = "messages";
		type = "MACIO::StringVector";
		userdefined;
	};
};

event = {
	signal = SEND_MSG_POOL_ACK;
	dir = OUT;
	param = {
		name = "seqnr";
		type = "uint32";
	};
	param = {
		name = "result";
		type = "uint32";
	};
};

